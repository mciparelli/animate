require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function() {
  var convert, data, intervals, major, name, names, normalize, _ref;

  names = ['firefox', 'chrome', 'safari', 'ios_saf', 'opera', 'ie', 'bb', 'android'];

  major = ['firefox', 'chrome', 'safari', 'ios_saf', 'opera', 'android', 'ie', 'ie_mob'];

  normalize = function(array) {
    return array.reverse().filter(function(i) {
      return i;
    });
  };

  intervals = function(array) {
    var i, interval, result, splited, sub, _i, _len;
    result = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      interval = array[_i];
      splited = interval.split('-');
      splited = splited.sort().reverse();
      sub = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = splited.length; _j < _len1; _j++) {
          i = splited[_j];
          _results.push([i, interval, splited.length]);
        }
        return _results;
      })();
      result = result.concat(sub);
    }
    return result;
  };

  convert = function(name, data) {
    var future, result, versions;
    future = normalize(data.versions.slice(-3));
    versions = intervals(normalize(data.versions.slice(0, -3)));
    result = {};
    result.prefix = name === 'opera' ? '-o-' : "-" + data.prefix + "-";
    if (major.indexOf(name) === -1) {
      result.minor = true;
    }
    if (future.length) {
      result.future = future;
    }
    result.versions = versions.map(function(i) {
      return i[0];
    });
    result.popularity = versions.map(function(i) {
      return data.usage_global[i[1]] / i[2];
    });
    return result;
  };

  module.exports = {};

  _ref = require('caniuse-db/data').agents;
  for (name in _ref) {
    data = _ref[name];
    module.exports[name] = convert(name, data);
  }

}).call(this);

},{"caniuse-db/data":44}],2:[function(require,module,exports){
(function() {
  var browsers, feature, map, prefix, textDecoration,
    __slice = [].slice;

  browsers = require('./browsers');

  feature = function(data, opts, callback) {
    var browser, interval, match, need, sorted, support, version, versions, _i, _len, _ref, _ref1, _ref2;
    if (!callback) {
      _ref = [opts, {}], callback = _ref[0], opts = _ref[1];
    }
    match = opts.full ? /y\sx($|\s)/ : /\sx($|\s)/;
    need = [];
    _ref1 = data.stats;
    for (browser in _ref1) {
      versions = _ref1[browser];
      for (interval in versions) {
        support = versions[interval];
        _ref2 = interval.split('-');
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          version = _ref2[_i];
          if (browsers[browser] && support.match(match)) {
            version = version.replace(/\.0$/, '');
            need.push(browser + ' ' + version);
          }
        }
      }
    }
    sorted = need.sort(function(a, b) {
      a = a.split(' ');
      b = b.split(' ');
      if (a[0] > b[0]) {
        return 1;
      } else if (a[0] < b[0]) {
        return -1;
      } else {
        return parseFloat(a[1]) - parseFloat(b[1]);
      }
    });
    return callback(sorted);
  };

  map = function(browsers, callback) {
    var browser, name, version, _i, _len, _ref, _results;
    _results = [];
    for (_i = 0, _len = browsers.length; _i < _len; _i++) {
      browser = browsers[_i];
      _ref = browser.split(' '), name = _ref[0], version = _ref[1];
      version = parseFloat(version);
      _results.push(callback(browser, name, version));
    }
    return _results;
  };

  prefix = function() {
    var data, name, names, _i, _j, _len, _results;
    names = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), data = arguments[_i++];
    _results = [];
    for (_j = 0, _len = names.length; _j < _len; _j++) {
      name = names[_j];
      _results.push(module.exports[name] = data);
    }
    return _results;
  };

  module.exports = {};

  feature(require('caniuse-db/features-json/border-radius'), function(browsers) {
    return prefix('border-radius', 'border-top-left-radius', 'border-top-right-radius', 'border-bottom-right-radius', 'border-bottom-left-radius', {
      mistakes: ['-ms-'],
      browsers: browsers,
      transition: true
    });
  });

  feature(require('caniuse-db/features-json/css-boxshadow'), function(browsers) {
    return prefix('box-shadow', {
      browsers: browsers,
      transition: true
    });
  });

  feature(require('caniuse-db/features-json/css-animation'), function(browsers) {
    return prefix('animation', 'animation-name', 'animation-duration', 'animation-delay', 'animation-direction', 'animation-fill-mode', 'animation-iteration-count', 'animation-play-state', 'animation-timing-function', '@keyframes', {
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/css-transitions'), function(browsers) {
    return prefix('transition', 'transition-property', 'transition-duration', 'transition-delay', 'transition-timing-function', {
      mistakes: ['-ms-'],
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/transforms2d'), function(browsers) {
    return prefix('transform', 'transform-origin', {
      browsers: browsers,
      transition: true
    });
  });

  feature(require('caniuse-db/features-json/transforms3d'), function(browsers) {
    prefix('perspective', 'perspective-origin', {
      browsers: browsers,
      transition: true
    });
    return prefix('transform-style', 'backface-visibility', {
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/css-gradients'), function(browsers) {
    browsers = map(browsers, function(browser, name, version) {
      if (name === 'android' && version < 4 || name === 'ios_saf' && version < 5 || name === 'safari' && version < 5.1) {
        return browser + ' old';
      } else {
        return browser;
      }
    });
    return prefix('linear-gradient', 'repeating-linear-gradient', 'radial-gradient', 'repeating-radial-gradient', {
      props: ['background', 'background-image', 'border-image'],
      mistakes: ['-ms-'],
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/css3-boxsizing'), function(browsers) {
    return prefix('box-sizing', {
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/css-filters'), function(browsers) {
    return prefix('filter', {
      browsers: browsers,
      transition: true
    });
  });

  feature(require('caniuse-db/features-json/multicolumn'), function(browsers) {
    prefix('columns', 'column-width', 'column-gap', 'column-rule', 'column-rule-color', 'column-rule-width', {
      browsers: browsers,
      transition: true
    });
    return prefix('column-count', 'column-rule-style', 'column-span', 'column-fill', 'break-before', 'break-after', 'break-inside', {
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/user-select-none'), function(browsers) {
    return prefix('user-select', {
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/flexbox'), function(browsers) {
    browsers = map(browsers, function(browser, name, version) {
      if (name === 'safari' && version < 6.1) {
        return browser + ' 2009';
      } else if (name === 'ios_saf' && version < 7) {
        return browser + ' 2009';
      } else if (name === 'chrome' && version < 21) {
        return browser + ' 2009';
      } else if (name === 'android' && version < 4.4) {
        return browser + ' 2009';
      } else {
        return browser;
      }
    });
    prefix('display-flex', 'inline-flex', {
      props: ['display'],
      browsers: browsers
    });
    prefix('flex', 'flex-grow', 'flex-shrink', 'flex-basis', {
      transition: true,
      browsers: browsers
    });
    return prefix('flex-direction', 'flex-wrap', 'flex-flow', 'justify-content', 'order', 'align-items', 'align-self', 'align-content', {
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/calc'), function(browsers) {
    return prefix('calc', {
      props: ['*'],
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/background-img-opts'), function(browsers) {
    return prefix('background-clip', 'background-origin', 'background-size', {
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/font-feature'), function(browsers) {
    return prefix('font-feature-settings', 'font-variant-ligatures', 'font-language-override', 'font-kerning', {
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/border-image'), function(browsers) {
    return prefix('border-image', {
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/css-selection'), function(browsers) {
    return prefix('::selection', {
      selector: true,
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/css-placeholder'), function(browsers) {
    browsers = map(browsers, function(browser, name, version) {
      if (name === 'firefox' && version <= 18) {
        return browser + ' old';
      } else {
        return browser;
      }
    });
    return prefix('::placeholder', {
      selector: true,
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/css-hyphens'), function(browsers) {
    return prefix('hyphens', {
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/fullscreen'), function(browsers) {
    return prefix(':fullscreen', {
      selector: true,
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/css3-tabsize'), function(browsers) {
    return prefix('tab-size', {
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/intrinsic-width'), function(browsers) {
    return prefix('max-content', 'min-content', 'fit-content', 'fill-available', {
      props: ['width', 'min-width', 'max-width', 'height', 'min-height', 'max-height'],
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/css3-cursors-newer'), function(browsers) {
    prefix('zoom-in', 'zoom-out', {
      props: ['cursor'],
      browsers: browsers.concat(['chrome 3'])
    });
    return prefix('grab', 'grabbing', {
      props: ['cursor'],
      browsers: browsers.concat(['firefox 24', 'firefox 25', 'firefox 26'])
    });
  });

  feature(require('caniuse-db/features-json/css-sticky'), function(browsers) {
    return prefix('sticky', {
      props: ['position'],
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/pointer'), function(browsers) {
    return prefix('touch-action', {
      browsers: browsers
    });
  });

  textDecoration = require('caniuse-db/features-json/text-decoration');

  feature(textDecoration, function(browsers) {
    return prefix('text-decoration-style', {
      browsers: browsers
    });
  });

  feature(textDecoration, {
    full: true
  }, function(browsers) {
    return prefix('text-decoration-line', 'text-decoration-color', {
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/text-size-adjust'), function(browsers) {
    return prefix('text-size-adjust', {
      browsers: browsers
    });
  });

  feature(require('caniuse-db/features-json/css-masks'), function(browsers) {
    return prefix('clip-path', 'mask', 'mask-clip', 'mask-composite', 'mask-image', 'mask-origin', 'mask-position', 'mask-repeat', 'mask-size', {
      browsers: browsers
    });
  });

}).call(this);

},{"./browsers":1,"caniuse-db/features-json/background-img-opts":45,"caniuse-db/features-json/border-image":46,"caniuse-db/features-json/border-radius":47,"caniuse-db/features-json/calc":48,"caniuse-db/features-json/css-animation":49,"caniuse-db/features-json/css-boxshadow":50,"caniuse-db/features-json/css-filters":51,"caniuse-db/features-json/css-gradients":52,"caniuse-db/features-json/css-hyphens":53,"caniuse-db/features-json/css-masks":54,"caniuse-db/features-json/css-placeholder":55,"caniuse-db/features-json/css-selection":56,"caniuse-db/features-json/css-sticky":57,"caniuse-db/features-json/css-transitions":58,"caniuse-db/features-json/css3-boxsizing":59,"caniuse-db/features-json/css3-cursors-newer":60,"caniuse-db/features-json/css3-tabsize":61,"caniuse-db/features-json/flexbox":62,"caniuse-db/features-json/font-feature":63,"caniuse-db/features-json/fullscreen":64,"caniuse-db/features-json/intrinsic-width":65,"caniuse-db/features-json/multicolumn":66,"caniuse-db/features-json/pointer":67,"caniuse-db/features-json/text-decoration":68,"caniuse-db/features-json/text-size-adjust":69,"caniuse-db/features-json/transforms2d":70,"caniuse-db/features-json/transforms3d":71,"caniuse-db/features-json/user-select-none":72}],3:[function(require,module,exports){
(function() {
  var Autoprefixer, Browsers, Prefixes, autoprefixer, infoCache, isPlainObject, postcss,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  postcss = require('postcss');

  Browsers = require('./browsers');

  Prefixes = require('./prefixes');

  infoCache = null;

  isPlainObject = function(obj) {
    return Object.prototype.toString.apply(obj) === '[object Object]';
  };

  autoprefixer = function() {
    var browsers, options, prefixes, reqs;
    reqs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (reqs.length === 1 && isPlainObject(reqs[0])) {
      options = reqs[0];
      reqs = void 0;
    } else if (reqs.length === 0 || (reqs.length === 1 && (reqs[0] == null))) {
      reqs = void 0;
    } else if (reqs.length <= 2 && (reqs[0] instanceof Array || (reqs[0] == null))) {
      options = reqs[1];
      reqs = reqs[0];
    } else if (typeof reqs[reqs.length - 1] === 'object') {
      options = reqs.pop();
    }
    if ((options != null ? options.browsers : void 0) != null) {
      reqs = options.browsers;
    } else if (reqs) {
      if (typeof console !== "undefined" && console !== null) {
        console.warn('autoprefixer: autoprefixer(browsers) is deprecated ' + 'and will be removed in 3.1. ' + 'Use autoprefixer({ browsers: browsers }).');
      }
    }
    if (reqs == null) {
      reqs = autoprefixer["default"];
    }
    browsers = new Browsers(autoprefixer.data.browsers, reqs);
    prefixes = new Prefixes(autoprefixer.data.prefixes, browsers, options);
    return new Autoprefixer(prefixes, autoprefixer.data);
  };

  autoprefixer.data = {
    browsers: require('../data/browsers'),
    prefixes: require('../data/prefixes')
  };

  Autoprefixer = (function() {
    function Autoprefixer(prefixes, data, options) {
      this.prefixes = prefixes;
      this.data = data;
      this.options = options != null ? options : {};
      this.postcss = __bind(this.postcss, this);
      this.browsers = this.prefixes.browsers.selected;
    }

    Autoprefixer.prototype.process = function(str, options) {
      if (options == null) {
        options = {};
      }
      return this.processor().process(str, options);
    };

    Autoprefixer.prototype.postcss = function(css) {
      this.prefixes.processor.remove(css);
      return this.prefixes.processor.add(css);
    };

    Autoprefixer.prototype.info = function() {
      infoCache || (infoCache = require('./info'));
      return infoCache(this.prefixes);
    };

    Autoprefixer.prototype.processor = function() {
      return this.processorCache || (this.processorCache = postcss(this.postcss));
    };

    return Autoprefixer;

  })();

  autoprefixer["default"] = ['> 1%', 'last 2 versions', 'Firefox ESR', 'Opera 12.1'];

  autoprefixer.loadDefault = function() {
    return this.defaultCache || (this.defaultCache = autoprefixer({
      browsers: this["default"]
    }));
  };

  autoprefixer.process = function(str, options) {
    if (options == null) {
      options = {};
    }
    return this.loadDefault().process(str, options);
  };

  autoprefixer.postcss = function(css) {
    return autoprefixer.loadDefault().postcss(css);
  };

  autoprefixer.info = function() {
    return this.loadDefault().info();
  };

  module.exports = autoprefixer;

}).call(this);

},{"../data/browsers":1,"../data/prefixes":2,"./browsers":4,"./info":33,"./prefixes":38,"postcss":82}],4:[function(require,module,exports){
(function() {
  var Browsers, utils;

  utils = require('./utils');

  Browsers = (function() {
    Browsers.prefixes = function() {
      var data, i, name;
      if (this.prefixesCache) {
        return this.prefixesCache;
      }
      data = require('../data/browsers');
      return this.prefixesCache = utils.uniq((function() {
        var _results;
        _results = [];
        for (name in data) {
          i = data[name];
          _results.push(i.prefix);
        }
        return _results;
      })()).sort(function(a, b) {
        return b.length - a.length;
      });
    };

    Browsers.withPrefix = function(value) {
      if (!this.prefixesRegexp) {
        this.prefixesRegexp = RegExp("" + (this.prefixes().join('|')));
      }
      return this.prefixesRegexp.test(value);
    };

    function Browsers(data, requirements) {
      this.data = data;
      this.selected = this.parse(requirements);
    }

    Browsers.prototype.parse = function(requirements) {
      var selected;
      if (!(requirements instanceof Array)) {
        requirements = [requirements];
      }
      selected = [];
      requirements.map((function(_this) {
        return function(req) {
          var i, match, name, _ref;
          _ref = _this.requirements;
          for (name in _ref) {
            i = _ref[name];
            if (match = req.match(i.regexp)) {
              selected = selected.concat(i.select.apply(_this, match.slice(1)));
              return;
            }
          }
          return utils.error("Unknown browser requirement `" + req + "`");
        };
      })(this));
      return utils.uniq(selected);
    };

    Browsers.prototype.aliases = {
      fx: 'firefox',
      ff: 'firefox',
      ios: 'ios_saf',
      explorer: 'ie',
      blackberry: 'bb',
      explorermobile: 'ie_mob',
      operamini: 'op_mini',
      operamobile: 'op_mob',
      chromeandroid: 'and_chr',
      firefoxandroid: 'and_ff'
    };

    Browsers.prototype.requirements = {
      none: {
        regexp: /^none$/i,
        select: function() {
          if (typeof console !== "undefined" && console !== null) {
            console.warn("autoprefixer(\'none\') is deprecated and will be " + 'removed in 3.1. ' + 'Use autoprefixer({ browsers: [] })');
          }
          return [];
        }
      },
      lastVersions: {
        regexp: /^last (\d+) versions?$/i,
        select: function(versions) {
          return this.browsers(function(data) {
            if (data.minor) {
              return [];
            } else {
              return data.versions.slice(0, versions);
            }
          });
        }
      },
      lastByBrowser: {
        regexp: /^last (\d+) (\w+) versions?$/i,
        select: function(versions, browser) {
          var data;
          data = this.byName(browser);
          return data.versions.slice(0, versions).map(function(v) {
            return "" + data.name + " " + v;
          });
        }
      },
      globalStatistics: {
        regexp: /^> (\d+(\.\d+)?)%$/,
        select: function(popularity) {
          return this.browsers(function(data) {
            if (data.minor) {
              return [];
            } else {
              return data.versions.filter(function(version, i) {
                return data.popularity[i] > popularity;
              });
            }
          });
        }
      },
      newerThan: {
        regexp: /^(\w+) (>=?)\s*([\d\.]+)/,
        select: function(browser, sign, version) {
          var data, filter;
          data = this.byName(browser);
          version = parseFloat(version);
          if (sign === '>') {
            filter = function(v) {
              return v > version;
            };
          } else if (sign === '>=') {
            filter = function(v) {
              return v >= version;
            };
          }
          return data.versions.filter(filter).map(function(v) {
            return "" + data.name + " " + v;
          });
        }
      },
      olderThan: {
        regexp: /^(\w+) (<=?)\s*([\d\.]+)/,
        select: function(browser, sign, version) {
          var data, filter;
          data = this.byName(browser);
          version = parseFloat(version);
          if (sign === '<') {
            filter = function(v) {
              return v < version;
            };
          } else if (sign === '<=') {
            filter = function(v) {
              return v <= version;
            };
          }
          return data.versions.filter(filter).map(function(v) {
            return "" + data.name + " " + v;
          });
        }
      },
      esr: {
        regexp: /^(firefox|ff|fx) esr$/i,
        select: function() {
          return ['firefox 24'];
        }
      },
      direct: {
        regexp: /^(\w+) ([\d\.]+)$/,
        select: function(browser, version) {
          var data, first, last;
          data = this.byName(browser);
          version = parseFloat(version);
          last = data.future ? data.future[0] : data.versions[0];
          first = data.versions[data.versions.length - 1];
          if (version > last) {
            version = last;
          } else if (version < first) {
            version = first;
          }
          return ["" + data.name + " " + version];
        }
      }
    };

    Browsers.prototype.browsers = function(criteria) {
      var browser, data, selected, versions, _ref;
      selected = [];
      _ref = this.data;
      for (browser in _ref) {
        data = _ref[browser];
        versions = criteria(data).map(function(version) {
          return "" + browser + " " + version;
        });
        selected = selected.concat(versions);
      }
      return selected;
    };

    Browsers.prototype.prefix = function(browser) {
      var name, version, _ref;
      _ref = browser.split(' '), name = _ref[0], version = _ref[1];
      if (name === 'opera' && parseFloat(version) >= 15) {
        return '-webkit-';
      } else {
        return this.data[name].prefix;
      }
    };

    Browsers.prototype.isSelected = function(browser) {
      return this.selected.indexOf(browser) !== -1;
    };

    Browsers.prototype.byName = function(name) {
      var data;
      name = name.toLowerCase();
      name = this.aliases[name] || name;
      data = this.data[name];
      if (!data) {
        utils.error("Unknown browser " + browser);
      }
      data.name = name;
      return data;
    };

    return Browsers;

  })();

  module.exports = Browsers;

}).call(this);

},{"../data/browsers":1,"./utils":42}],5:[function(require,module,exports){
(function() {
  var Browsers, Declaration, Prefixer, utils, vendor,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Prefixer = require('./prefixer');

  Browsers = require('./browsers');

  vendor = require('postcss/lib/vendor');

  utils = require('./utils');

  Declaration = (function(_super) {
    __extends(Declaration, _super);

    function Declaration() {
      return Declaration.__super__.constructor.apply(this, arguments);
    }

    Declaration.prototype.check = function(decl) {
      return true;
    };

    Declaration.prototype.prefixed = function(prop, prefix) {
      return prefix + prop;
    };

    Declaration.prototype.normalize = function(prop) {
      return prop;
    };

    Declaration.prototype.otherPrefixes = function(value, prefix) {
      var other, _i, _len, _ref;
      _ref = Browsers.prefixes();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        other = _ref[_i];
        if (other === prefix) {
          continue;
        }
        if (value.indexOf(other) !== -1) {
          return true;
        }
      }
      return false;
    };

    Declaration.prototype.set = function(decl, prefix) {
      decl.prop = this.prefixed(decl.prop, prefix);
      return decl;
    };

    Declaration.prototype.needCascade = function(decl) {
      return decl._autoprefixerCascade || (decl._autoprefixerCascade = this.all.options.cascade !== false && decl.before.indexOf("\n") !== -1);
    };

    Declaration.prototype.maxPrefixed = function(prefixes, decl) {
      var max, prefix, _i, _len;
      if (decl._autoprefixerMax) {
        return decl._autoprefixerMax;
      }
      max = 0;
      for (_i = 0, _len = prefixes.length; _i < _len; _i++) {
        prefix = prefixes[_i];
        prefix = utils.removeNote(prefix);
        if (prefix.length > max) {
          max = prefix.length;
        }
      }
      return decl._autoprefixerMax = max;
    };

    Declaration.prototype.calcBefore = function(prefixes, decl, prefix) {
      var before, diff, i, max, _i;
      if (prefix == null) {
        prefix = '';
      }
      before = decl.before;
      max = this.maxPrefixed(prefixes, decl);
      diff = max - utils.removeNote(prefix).length;
      for (i = _i = 0; 0 <= diff ? _i < diff : _i > diff; i = 0 <= diff ? ++_i : --_i) {
        before += ' ';
      }
      return before;
    };

    Declaration.prototype.restoreBefore = function(decl) {
      var lines, min;
      lines = decl.before.split("\n");
      min = lines[lines.length - 1];
      this.all.group(decl).up(function(prefixed) {
        var array, last;
        array = prefixed.before.split("\n");
        last = array[array.length - 1];
        if (last.length < min.length) {
          return min = last;
        }
      });
      lines[lines.length - 1] = min;
      return decl.before = lines.join("\n");
    };

    Declaration.prototype.insert = function(decl, prefix, prefixes) {
      var cloned;
      cloned = this.set(this.clone(decl), prefix);
      if (!cloned) {
        return;
      }
      if (this.needCascade(decl)) {
        cloned.before = this.calcBefore(prefixes, decl, prefix);
      }
      return decl.parent.insertBefore(decl, cloned);
    };

    Declaration.prototype.add = function(decl, prefix, prefixes) {
      var already, prefixed;
      prefixed = this.prefixed(decl.prop, prefix);
      already = this.all.group(decl).up(function(i) {
        return i.prop === prefixed;
      });
      already || (already = this.all.group(decl).down(function(i) {
        return i.prop === prefixed;
      }));
      if (already || this.otherPrefixes(decl.value, prefix)) {
        return;
      }
      return this.insert(decl, prefix, prefixes);
    };

    Declaration.prototype.process = function(decl) {
      var prefixes;
      if (this.needCascade(decl)) {
        prefixes = Declaration.__super__.process.apply(this, arguments);
        if (prefixes != null ? prefixes.length : void 0) {
          this.restoreBefore(decl);
          return decl.before = this.calcBefore(prefixes, decl);
        }
      } else {
        return Declaration.__super__.process.apply(this, arguments);
      }
    };

    Declaration.prototype.old = function(prop, prefix) {
      return [this.prefixed(prop, prefix)];
    };

    return Declaration;

  })(Prefixer);

  module.exports = Declaration;

}).call(this);

},{"./browsers":4,"./prefixer":37,"./utils":42,"postcss/lib/vendor":87}],6:[function(require,module,exports){
(function() {
  var AlignContent, Declaration, flexSpec,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  flexSpec = require('./flex-spec');

  Declaration = require('../declaration');

  AlignContent = (function(_super) {
    __extends(AlignContent, _super);

    function AlignContent() {
      return AlignContent.__super__.constructor.apply(this, arguments);
    }

    AlignContent.names = ['align-content', 'flex-line-pack'];

    AlignContent.oldValues = {
      'flex-end': 'end',
      'flex-start': 'start',
      'space-between': 'justify',
      'space-around': 'distribute'
    };

    AlignContent.prototype.prefixed = function(prop, prefix) {
      var spec, _ref;
      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];
      if (spec === 2012) {
        return prefix + 'flex-line-pack';
      } else {
        return AlignContent.__super__.prefixed.apply(this, arguments);
      }
    };

    AlignContent.prototype.normalize = function(prop) {
      return 'align-content';
    };

    AlignContent.prototype.set = function(decl, prefix) {
      var spec;
      spec = flexSpec(prefix)[0];
      if (spec === 2012) {
        decl.value = AlignContent.oldValues[decl.value] || decl.value;
        return AlignContent.__super__.set.call(this, decl, prefix);
      } else if (spec === 'final') {
        return AlignContent.__super__.set.apply(this, arguments);
      }
    };

    return AlignContent;

  })(Declaration);

  module.exports = AlignContent;

}).call(this);

},{"../declaration":5,"./flex-spec":22}],7:[function(require,module,exports){
(function() {
  var AlignItems, Declaration, flexSpec,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  flexSpec = require('./flex-spec');

  Declaration = require('../declaration');

  AlignItems = (function(_super) {
    __extends(AlignItems, _super);

    function AlignItems() {
      return AlignItems.__super__.constructor.apply(this, arguments);
    }

    AlignItems.names = ['align-items', 'flex-align', 'box-align'];

    AlignItems.oldValues = {
      'flex-end': 'end',
      'flex-start': 'start'
    };

    AlignItems.prototype.prefixed = function(prop, prefix) {
      var spec, _ref;
      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];
      if (spec === 2009) {
        return prefix + 'box-align';
      } else if (spec === 2012) {
        return prefix + 'flex-align';
      } else {
        return AlignItems.__super__.prefixed.apply(this, arguments);
      }
    };

    AlignItems.prototype.normalize = function(prop) {
      return 'align-items';
    };

    AlignItems.prototype.set = function(decl, prefix) {
      var spec;
      spec = flexSpec(prefix)[0];
      if (spec === 2009 || spec === 2012) {
        decl.value = AlignItems.oldValues[decl.value] || decl.value;
        return AlignItems.__super__.set.call(this, decl, prefix);
      } else {
        return AlignItems.__super__.set.apply(this, arguments);
      }
    };

    return AlignItems;

  })(Declaration);

  module.exports = AlignItems;

}).call(this);

},{"../declaration":5,"./flex-spec":22}],8:[function(require,module,exports){
(function() {
  var AlignSelf, Declaration, flexSpec,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  flexSpec = require('./flex-spec');

  Declaration = require('../declaration');

  AlignSelf = (function(_super) {
    __extends(AlignSelf, _super);

    function AlignSelf() {
      return AlignSelf.__super__.constructor.apply(this, arguments);
    }

    AlignSelf.names = ['align-self', 'flex-item-align'];

    AlignSelf.oldValues = {
      'flex-end': 'end',
      'flex-start': 'start'
    };

    AlignSelf.prototype.prefixed = function(prop, prefix) {
      var spec, _ref;
      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];
      if (spec === 2012) {
        return prefix + 'flex-item-align';
      } else {
        return AlignSelf.__super__.prefixed.apply(this, arguments);
      }
    };

    AlignSelf.prototype.normalize = function(prop) {
      return 'align-self';
    };

    AlignSelf.prototype.set = function(decl, prefix) {
      var spec;
      spec = flexSpec(prefix)[0];
      if (spec === 2012) {
        decl.value = AlignSelf.oldValues[decl.value] || decl.value;
        return AlignSelf.__super__.set.call(this, decl, prefix);
      } else if (spec === 'final') {
        return AlignSelf.__super__.set.apply(this, arguments);
      }
    };

    return AlignSelf;

  })(Declaration);

  module.exports = AlignSelf;

}).call(this);

},{"../declaration":5,"./flex-spec":22}],9:[function(require,module,exports){
(function() {
  var BackgroundSize, Declaration,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Declaration = require('../declaration');

  BackgroundSize = (function(_super) {
    __extends(BackgroundSize, _super);

    function BackgroundSize() {
      return BackgroundSize.__super__.constructor.apply(this, arguments);
    }

    BackgroundSize.names = ['background-size'];

    BackgroundSize.prototype.set = function(decl, prefix) {
      var value;
      value = decl.value.toLowerCase();
      if (prefix === '-webkit-' && value.indexOf(' ') === -1 && value !== 'contain' && value !== 'cover') {
        decl.value = decl.value + ' ' + decl.value;
      }
      return BackgroundSize.__super__.set.call(this, decl, prefix);
    };

    return BackgroundSize;

  })(Declaration);

  module.exports = BackgroundSize;

}).call(this);

},{"../declaration":5}],10:[function(require,module,exports){
(function() {
  var BorderImage, Declaration,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Declaration = require('../declaration');

  BorderImage = (function(_super) {
    __extends(BorderImage, _super);

    function BorderImage() {
      return BorderImage.__super__.constructor.apply(this, arguments);
    }

    BorderImage.names = ['border-image'];

    BorderImage.prototype.set = function(decl, prefix) {
      decl.value = decl.value.replace(/\s+fill(\s)/, '$1');
      return BorderImage.__super__.set.call(this, decl, prefix);
    };

    return BorderImage;

  })(Declaration);

  module.exports = BorderImage;

}).call(this);

},{"../declaration":5}],11:[function(require,module,exports){
(function() {
  var BorderRadius, Declaration,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Declaration = require('../declaration');

  BorderRadius = (function(_super) {
    var hor, mozilla, normal, ver, _i, _j, _len, _len1, _ref, _ref1;

    __extends(BorderRadius, _super);

    function BorderRadius() {
      return BorderRadius.__super__.constructor.apply(this, arguments);
    }

    BorderRadius.names = ['border-radius'];

    BorderRadius.toMozilla = {};

    BorderRadius.toNormal = {};

    _ref = ['top', 'bottom'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ver = _ref[_i];
      _ref1 = ['left', 'right'];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        hor = _ref1[_j];
        normal = "border-" + ver + "-" + hor + "-radius";
        mozilla = "border-radius-" + ver + hor;
        BorderRadius.names.push(normal);
        BorderRadius.names.push(mozilla);
        BorderRadius.toMozilla[normal] = mozilla;
        BorderRadius.toNormal[mozilla] = normal;
      }
    }

    BorderRadius.prototype.prefixed = function(prop, prefix) {
      if (prefix === '-moz-') {
        return prefix + (BorderRadius.toMozilla[prop] || prop);
      } else {
        return BorderRadius.__super__.prefixed.apply(this, arguments);
      }
    };

    BorderRadius.prototype.normalize = function(prop) {
      return BorderRadius.toNormal[prop] || prop;
    };

    return BorderRadius;

  })(Declaration);

  module.exports = BorderRadius;

}).call(this);

},{"../declaration":5}],12:[function(require,module,exports){
(function() {
  var BreakInside, Declaration,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Declaration = require('../declaration');

  BreakInside = (function(_super) {
    __extends(BreakInside, _super);

    function BreakInside() {
      return BreakInside.__super__.constructor.apply(this, arguments);
    }

    BreakInside.names = ['break-inside', 'page-break-inside', 'column-break-inside'];

    BreakInside.prototype.prefixed = function(prop, prefix) {
      if (prefix === '-webkit-') {
        return prefix + 'column-break-inside';
      } else if (prefix === '-moz-') {
        return 'page-break-inside';
      } else {
        return BreakInside.__super__.prefixed.apply(this, arguments);
      }
    };

    BreakInside.prototype.normalize = function() {
      return 'break-inside';
    };

    BreakInside.prototype.set = function(decl, prefix) {
      if (decl.value === 'avoid-column' || decl.value === 'avoid-page') {
        decl.value = 'avoid';
      }
      return BreakInside.__super__.set.apply(this, arguments);
    };

    BreakInside.prototype.insert = function(decl, prefix, prefixes) {
      if (decl.value === 'avoid-region') {

      } else if (decl.value === 'avoid-page' && prefix === '-webkit-') {

      } else {
        return BreakInside.__super__.insert.apply(this, arguments);
      }
    };

    return BreakInside;

  })(Declaration);

  module.exports = BreakInside;

}).call(this);

},{"../declaration":5}],13:[function(require,module,exports){
(function() {
  var DisplayFlex, OldDisplayFlex, OldValue, Value, flexSpec,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  flexSpec = require('./flex-spec');

  OldValue = require('../old-value');

  Value = require('../value');

  OldDisplayFlex = (function(_super) {
    __extends(OldDisplayFlex, _super);

    function OldDisplayFlex(name) {
      this.name = name;
    }

    OldDisplayFlex.prototype.check = function(value) {
      return value === this.name;
    };

    return OldDisplayFlex;

  })(OldValue);

  DisplayFlex = (function(_super) {
    __extends(DisplayFlex, _super);

    DisplayFlex.names = ['display-flex', 'inline-flex'];

    function DisplayFlex(name, prefixes) {
      DisplayFlex.__super__.constructor.apply(this, arguments);
      if (name === 'display-flex') {
        this.name = 'flex';
      }
    }

    DisplayFlex.prototype.check = function(decl) {
      return decl.value === this.name;
    };

    DisplayFlex.prototype.prefixed = function(prefix) {
      var spec, _ref;
      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];
      return prefix + (spec === 2009 ? this.name === 'flex' ? 'box' : 'inline-box' : spec === 2012 ? this.name === 'flex' ? 'flexbox' : 'inline-flexbox' : spec === 'final' ? this.name : void 0);
    };

    DisplayFlex.prototype.replace = function(string, prefix) {
      return this.prefixed(prefix);
    };

    DisplayFlex.prototype.old = function(prefix) {
      var prefixed;
      prefixed = this.prefixed(prefix);
      if (prefixed) {
        return new OldValue(prefixed);
      }
    };

    return DisplayFlex;

  })(Value);

  module.exports = DisplayFlex;

}).call(this);

},{"../old-value":36,"../value":43,"./flex-spec":22}],14:[function(require,module,exports){
(function() {
  var FillAvailable, OldValue, Value,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  OldValue = require('../old-value');

  Value = require('../value');

  FillAvailable = (function(_super) {
    __extends(FillAvailable, _super);

    function FillAvailable() {
      return FillAvailable.__super__.constructor.apply(this, arguments);
    }

    FillAvailable.names = ['fill-available'];

    FillAvailable.prototype.replace = function(string, prefix) {
      if (prefix === '-moz-') {
        return string.replace(this.regexp(), '$1-moz-available$3');
      } else {
        return FillAvailable.__super__.replace.apply(this, arguments);
      }
    };

    FillAvailable.prototype.old = function(prefix) {
      if (prefix === '-moz-') {
        return new OldValue('-moz-available');
      } else {
        return FillAvailable.__super__.old.apply(this, arguments);
      }
    };

    return FillAvailable;

  })(Value);

  module.exports = FillAvailable;

}).call(this);

},{"../old-value":36,"../value":43}],15:[function(require,module,exports){
(function() {
  var FilterValue, Value,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Value = require('../value');

  FilterValue = (function(_super) {
    __extends(FilterValue, _super);

    function FilterValue() {
      return FilterValue.__super__.constructor.apply(this, arguments);
    }

    FilterValue.names = ['filter'];

    FilterValue.prototype.replace = function(value, prefix) {
      if (prefix === '-webkit-') {
        if (value.indexOf('-webkit-filter') === -1) {
          return FilterValue.__super__.replace.apply(this, arguments) + ', ' + value;
        } else {
          return value;
        }
      } else {
        return FilterValue.__super__.replace.apply(this, arguments);
      }
    };

    return FilterValue;

  })(Value);

  module.exports = FilterValue;

}).call(this);

},{"../value":43}],16:[function(require,module,exports){
(function() {
  var Declaration, Filter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Declaration = require('../declaration');

  Filter = (function(_super) {
    __extends(Filter, _super);

    function Filter() {
      return Filter.__super__.constructor.apply(this, arguments);
    }

    Filter.names = ['filter'];

    Filter.prototype.check = function(decl) {
      var v;
      v = decl.value;
      return v.toLowerCase().indexOf('alpha(') === -1 && v.indexOf('DXImageTransform.Microsoft') === -1 && v.indexOf('data:image/svg+xml') === -1;
    };

    return Filter;

  })(Declaration);

  module.exports = Filter;

}).call(this);

},{"../declaration":5}],17:[function(require,module,exports){
(function() {
  var Declaration, FlexBasis, flexSpec,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  flexSpec = require('./flex-spec');

  Declaration = require('../declaration');

  FlexBasis = (function(_super) {
    __extends(FlexBasis, _super);

    function FlexBasis() {
      return FlexBasis.__super__.constructor.apply(this, arguments);
    }

    FlexBasis.names = ['flex-basis', 'flex-preferred-size'];

    FlexBasis.prototype.normalize = function() {
      return 'flex-basis';
    };

    FlexBasis.prototype.prefixed = function(prop, prefix) {
      var spec, _ref;
      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];
      if (spec === 2012) {
        return prefix + 'flex-preferred-size';
      } else {
        return FlexBasis.__super__.prefixed.apply(this, arguments);
      }
    };

    FlexBasis.prototype.set = function(decl, prefix) {
      var spec, _ref;
      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];
      if (spec === 2012 || spec === 'final') {
        return FlexBasis.__super__.set.apply(this, arguments);
      }
    };

    return FlexBasis;

  })(Declaration);

  module.exports = FlexBasis;

}).call(this);

},{"../declaration":5,"./flex-spec":22}],18:[function(require,module,exports){
(function() {
  var Declaration, FlexDirection, flexSpec,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  flexSpec = require('./flex-spec');

  Declaration = require('../declaration');

  FlexDirection = (function(_super) {
    __extends(FlexDirection, _super);

    function FlexDirection() {
      return FlexDirection.__super__.constructor.apply(this, arguments);
    }

    FlexDirection.names = ['flex-direction', 'box-direction', 'box-orient'];

    FlexDirection.prototype.normalize = function(prop) {
      return 'flex-direction';
    };

    FlexDirection.prototype.insert = function(decl, prefix, prefixes) {
      var already, cloned, dir, orient, spec, value, _ref;
      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];
      if (spec === 2009) {
        already = decl.parent.some(function(i) {
          return i.prop === prefix + 'box-orient' || i.prop === prefix + 'box-direction';
        });
        if (already) {
          return;
        }
        value = decl.value;
        orient = value.indexOf('row') !== -1 ? 'horizontal' : 'vertical';
        dir = value.indexOf('reverse') !== -1 ? 'reverse' : 'normal';
        cloned = this.clone(decl);
        cloned.prop = prefix + 'box-orient';
        cloned.value = orient;
        if (this.needCascade(decl)) {
          cloned.before = this.calcBefore(prefixes, decl, prefix);
        }
        decl.parent.insertBefore(decl, cloned);
        cloned = this.clone(decl);
        cloned.prop = prefix + 'box-direction';
        cloned.value = dir;
        if (this.needCascade(decl)) {
          cloned.before = this.calcBefore(prefixes, decl, prefix);
        }
        return decl.parent.insertBefore(decl, cloned);
      } else {
        return FlexDirection.__super__.insert.apply(this, arguments);
      }
    };

    FlexDirection.prototype.old = function(prop, prefix) {
      var spec, _ref;
      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];
      if (spec === 2009) {
        return [prefix + 'box-orient', prefix + 'box-direction'];
      } else {
        return FlexDirection.__super__.old.apply(this, arguments);
      }
    };

    return FlexDirection;

  })(Declaration);

  module.exports = FlexDirection;

}).call(this);

},{"../declaration":5,"./flex-spec":22}],19:[function(require,module,exports){
(function() {
  var Declaration, FlexFlow, flexSpec,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  flexSpec = require('./flex-spec');

  Declaration = require('../declaration');

  FlexFlow = (function(_super) {
    __extends(FlexFlow, _super);

    function FlexFlow() {
      return FlexFlow.__super__.constructor.apply(this, arguments);
    }

    FlexFlow.names = ['flex-flow'];

    FlexFlow.prototype.set = function(decl, prefix) {
      var spec, _ref;
      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];
      if (spec === 2012) {
        return FlexFlow.__super__.set.apply(this, arguments);
      } else if (spec === 'final') {
        return FlexFlow.__super__.set.apply(this, arguments);
      }
    };

    return FlexFlow;

  })(Declaration);

  module.exports = FlexFlow;

}).call(this);

},{"../declaration":5,"./flex-spec":22}],20:[function(require,module,exports){
(function() {
  var Declaration, Flex, flexSpec,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  flexSpec = require('./flex-spec');

  Declaration = require('../declaration');

  Flex = (function(_super) {
    __extends(Flex, _super);

    function Flex() {
      return Flex.__super__.constructor.apply(this, arguments);
    }

    Flex.names = ['flex-grow', 'flex-positive'];

    Flex.prototype.normalize = function() {
      return 'flex';
    };

    Flex.prototype.prefixed = function(prop, prefix) {
      var spec, _ref;
      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];
      if (spec === 2009) {
        return prefix + 'box-flex';
      } else if (spec === 2012) {
        return prefix + 'flex-positive';
      } else {
        return Flex.__super__.prefixed.apply(this, arguments);
      }
    };

    return Flex;

  })(Declaration);

  module.exports = Flex;

}).call(this);

},{"../declaration":5,"./flex-spec":22}],21:[function(require,module,exports){
(function() {
  var Declaration, FlexShrink, flexSpec,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  flexSpec = require('./flex-spec');

  Declaration = require('../declaration');

  FlexShrink = (function(_super) {
    __extends(FlexShrink, _super);

    function FlexShrink() {
      return FlexShrink.__super__.constructor.apply(this, arguments);
    }

    FlexShrink.names = ['flex-shrink', 'flex-negative'];

    FlexShrink.prototype.normalize = function() {
      return 'flex-shrink';
    };

    FlexShrink.prototype.prefixed = function(prop, prefix) {
      var spec, _ref;
      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];
      if (spec === 2012) {
        return prefix + 'flex-negative';
      } else {
        return FlexShrink.__super__.prefixed.apply(this, arguments);
      }
    };

    FlexShrink.prototype.set = function(decl, prefix) {
      var spec, _ref;
      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];
      if (spec === 2012 || spec === 'final') {
        return FlexShrink.__super__.set.apply(this, arguments);
      }
    };

    return FlexShrink;

  })(Declaration);

  module.exports = FlexShrink;

}).call(this);

},{"../declaration":5,"./flex-spec":22}],22:[function(require,module,exports){
(function() {
  module.exports = function(prefix) {
    var spec;
    spec = prefix === '-webkit- 2009' || prefix === '-moz-' ? 2009 : prefix === '-ms-' ? 2012 : prefix === '-webkit-' ? 'final' : void 0;
    if (prefix === '-webkit- 2009') {
      prefix = '-webkit-';
    }
    return [spec, prefix];
  };

}).call(this);

},{}],23:[function(require,module,exports){
(function() {
  var Declaration, FlexWrap, flexSpec,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  flexSpec = require('./flex-spec');

  Declaration = require('../declaration');

  FlexWrap = (function(_super) {
    __extends(FlexWrap, _super);

    function FlexWrap() {
      return FlexWrap.__super__.constructor.apply(this, arguments);
    }

    FlexWrap.names = ['flex-wrap'];

    FlexWrap.prototype.set = function(decl, prefix) {
      var spec;
      spec = flexSpec(prefix)[0];
      if (spec !== 2009) {
        return FlexWrap.__super__.set.apply(this, arguments);
      }
    };

    return FlexWrap;

  })(Declaration);

  module.exports = FlexWrap;

}).call(this);

},{"../declaration":5,"./flex-spec":22}],24:[function(require,module,exports){
(function() {
  var Declaration, Flex, flexSpec,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  flexSpec = require('./flex-spec');

  Declaration = require('../declaration');

  Flex = (function(_super) {
    __extends(Flex, _super);

    function Flex() {
      return Flex.__super__.constructor.apply(this, arguments);
    }

    Flex.names = ['flex', 'box-flex'];

    Flex.oldValues = {
      'auto': '1',
      'none': '0'
    };

    Flex.prototype.prefixed = function(prop, prefix) {
      var spec, _ref;
      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];
      if (spec === 2009) {
        return prefix + 'box-flex';
      } else {
        return Flex.__super__.prefixed.apply(this, arguments);
      }
    };

    Flex.prototype.normalize = function() {
      return 'flex';
    };

    Flex.prototype.set = function(decl, prefix) {
      var spec;
      spec = flexSpec(prefix)[0];
      if (spec === 2009) {
        decl.value = decl.value.split(' ')[0];
        decl.value = Flex.oldValues[decl.value] || decl.value;
        return Flex.__super__.set.call(this, decl, prefix);
      } else {
        return Flex.__super__.set.apply(this, arguments);
      }
    };

    return Flex;

  })(Declaration);

  module.exports = Flex;

}).call(this);

},{"../declaration":5,"./flex-spec":22}],25:[function(require,module,exports){
(function() {
  var Fullscreen, Selector,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Selector = require('../selector');

  Fullscreen = (function(_super) {
    __extends(Fullscreen, _super);

    function Fullscreen() {
      return Fullscreen.__super__.constructor.apply(this, arguments);
    }

    Fullscreen.names = [':fullscreen'];

    Fullscreen.prototype.prefixed = function(prefix) {
      if ('-webkit-' === prefix) {
        return ':-webkit-full-screen';
      } else if ('-moz-' === prefix) {
        return ':-moz-full-screen';
      } else {
        return ":" + prefix + "fullscreen";
      }
    };

    return Fullscreen;

  })(Selector);

  module.exports = Fullscreen;

}).call(this);

},{"../selector":40}],26:[function(require,module,exports){
(function() {
  var Gradient, OldValue, Value, isDirection, list, utils,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  OldValue = require('../old-value');

  Value = require('../value');

  utils = require('../utils');

  list = require('postcss/lib/list');

  isDirection = /top|left|right|bottom/gi;

  Gradient = (function(_super) {
    __extends(Gradient, _super);

    function Gradient() {
      return Gradient.__super__.constructor.apply(this, arguments);
    }

    Gradient.names = ['linear-gradient', 'repeating-linear-gradient', 'radial-gradient', 'repeating-radial-gradient'];

    Gradient.prototype.replace = function(string, prefix) {
      return list.space(string).map((function(_this) {
        return function(value) {
          var after, args, close, params;
          if (value.slice(0, +_this.name.length + 1 || 9e9) !== _this.name + '(') {
            return value;
          }
          close = value.lastIndexOf(')');
          after = value.slice(close + 1);
          args = value.slice(_this.name.length + 1, +(close - 1) + 1 || 9e9);
          params = list.comma(args);
          params = _this.newDirection(params);
          if (prefix === '-webkit- old') {
            return _this.oldWebkit(value, args, params, after);
          } else {
            _this.convertDirection(params);
            return prefix + _this.name + '(' + params.join(', ') + ')' + after;
          }
        };
      })(this)).join(' ');
    };

    Gradient.prototype.directions = {
      top: 'bottom',
      left: 'right',
      bottom: 'top',
      right: 'left'
    };

    Gradient.prototype.oldDirections = {
      'top': 'left bottom, left top',
      'left': 'right top, left top',
      'bottom': 'left top, left bottom',
      'right': 'left top, right top',
      'top right': 'left bottom, right top',
      'top left': 'right bottom, left top',
      'right top': 'left bottom, right top',
      'right bottom': 'left top, right bottom',
      'bottom right': 'left top, right bottom',
      'bottom left': 'right top, left bottom',
      'left top': 'right bottom, left top',
      'left bottom': 'right top, left bottom'
    };

    Gradient.prototype.newDirection = function(params) {
      var first, value;
      first = params[0];
      if (first.indexOf('to ') === -1 && isDirection.test(first)) {
        first = first.split(' ');
        first = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = first.length; _i < _len; _i++) {
            value = first[_i];
            _results.push(this.directions[value.toLowerCase()] || value);
          }
          return _results;
        }).call(this);
        params[0] = 'to ' + first.join(' ');
      }
      return params;
    };

    Gradient.prototype.oldWebkit = function(value, args, params, after) {
      if (this.name !== 'linear-gradient') {
        return value;
      }
      if (params[0] && params[0].indexOf('deg') !== -1) {
        return value;
      }
      if (args.indexOf('-corner') !== -1) {
        return value;
      }
      if (args.indexOf('-side') !== -1) {
        return value;
      }
      params = this.oldDirection(params);
      params = this.colorStops(params);
      return '-webkit-gradient(linear, ' + params.join(', ') + ')' + after;
    };

    Gradient.prototype.convertDirection = function(params) {
      if (params.length > 0) {
        if (params[0].slice(0, 3) === 'to ') {
          return params[0] = this.fixDirection(params[0]);
        } else if (params[0].indexOf('deg') !== -1) {
          return params[0] = this.fixAngle(params[0]);
        } else if (params[0].indexOf(' at ') !== -1) {
          return this.fixRadial(params);
        }
      }
    };

    Gradient.prototype.fixDirection = function(param) {
      var value;
      param = param.split(' ');
      param.splice(0, 1);
      param = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = param.length; _i < _len; _i++) {
          value = param[_i];
          _results.push(this.directions[value.toLowerCase()] || value);
        }
        return _results;
      }).call(this);
      return param.join(' ');
    };

    Gradient.prototype.roundFloat = function(float, digits) {
      return parseFloat(float.toFixed(digits));
    };

    Gradient.prototype.fixAngle = function(param) {
      param = parseFloat(param);
      param = Math.abs(450 - param) % 360;
      param = this.roundFloat(param, 3);
      return "" + param + "deg";
    };

    Gradient.prototype.oldDirection = function(params) {
      var direction;
      if (params.length === 0) {
        params;
      }
      if (params[0].indexOf('to ') !== -1) {
        direction = params[0].replace(/^to\s+/, '');
        direction = this.oldDirections[direction];
        params[0] = direction;
        return params;
      } else {
        direction = this.oldDirections.bottom;
        return [direction].concat(params);
      }
    };

    Gradient.prototype.colorStops = function(params) {
      return params.map(function(param, i) {
        var color, match, position, _ref;
        if (i === 0) {
          return param;
        }
        _ref = list.space(param), color = _ref[0], position = _ref[1];
        if (position == null) {
          match = param.match(/^(.*\))(\d.*)$/);
          if (match) {
            color = match[1];
            position = match[2];
          }
        }
        if (position && position.indexOf(')') !== -1) {
          color += ' ' + position;
          position = void 0;
        }
        if (i === 1 && (position === void 0 || position === '0%')) {
          return "from(" + color + ")";
        } else if (i === params.length - 1 && (position === void 0 || position === '100%')) {
          return "to(" + color + ")";
        } else if (position) {
          return "color-stop(" + position + ", " + color + ")";
        } else {
          return "color-stop(" + color + ")";
        }
      });
    };

    Gradient.prototype.fixRadial = function(params) {
      var first;
      first = params[0].split(/\s+at\s+/);
      return params.splice(0, 1, first[1], first[0]);
    };

    Gradient.prototype.old = function(prefix) {
      var regexp, string, type;
      if (prefix === '-webkit-') {
        type = this.name === 'linear-gradient' ? 'linear' : 'radial';
        string = '-gradient';
        regexp = utils.regexp("-webkit-(" + type + "-gradient|gradient\\(\\s*" + type + ")", false);
        return new OldValue(prefix + this.name, string, regexp);
      } else {
        return Gradient.__super__.old.apply(this, arguments);
      }
    };

    return Gradient;

  })(Value);

  module.exports = Gradient;

}).call(this);

},{"../old-value":36,"../utils":42,"../value":43,"postcss/lib/list":78}],27:[function(require,module,exports){
(function() {
  var Declaration, JustifyContent, flexSpec,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  flexSpec = require('./flex-spec');

  Declaration = require('../declaration');

  JustifyContent = (function(_super) {
    __extends(JustifyContent, _super);

    function JustifyContent() {
      return JustifyContent.__super__.constructor.apply(this, arguments);
    }

    JustifyContent.names = ['justify-content', 'flex-pack', 'box-pack'];

    JustifyContent.oldValues = {
      'flex-end': 'end',
      'flex-start': 'start',
      'space-between': 'justify',
      'space-around': 'distribute'
    };

    JustifyContent.prototype.prefixed = function(prop, prefix) {
      var spec, _ref;
      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];
      if (spec === 2009) {
        return prefix + 'box-pack';
      } else if (spec === 2012) {
        return prefix + 'flex-pack';
      } else {
        return JustifyContent.__super__.prefixed.apply(this, arguments);
      }
    };

    JustifyContent.prototype.normalize = function(prop) {
      return 'justify-content';
    };

    JustifyContent.prototype.set = function(decl, prefix) {
      var spec, value;
      spec = flexSpec(prefix)[0];
      if (spec === 2009 || spec === 2012) {
        value = JustifyContent.oldValues[decl.value] || decl.value;
        decl.value = value;
        if (spec !== 2009 || value !== 'distribute') {
          return JustifyContent.__super__.set.call(this, decl, prefix);
        }
      } else if (spec === 'final') {
        return JustifyContent.__super__.set.apply(this, arguments);
      }
    };

    return JustifyContent;

  })(Declaration);

  module.exports = JustifyContent;

}).call(this);

},{"../declaration":5,"./flex-spec":22}],28:[function(require,module,exports){
(function() {
  var Declaration, Order, flexSpec,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  flexSpec = require('./flex-spec');

  Declaration = require('../declaration');

  Order = (function(_super) {
    __extends(Order, _super);

    function Order() {
      return Order.__super__.constructor.apply(this, arguments);
    }

    Order.names = ['order', 'flex-order', 'box-ordinal-group'];

    Order.prototype.prefixed = function(prop, prefix) {
      var spec, _ref;
      _ref = flexSpec(prefix), spec = _ref[0], prefix = _ref[1];
      if (spec === 2009) {
        return prefix + 'box-ordinal-group';
      } else if (spec === 2012) {
        return prefix + 'flex-order';
      } else {
        return Order.__super__.prefixed.apply(this, arguments);
      }
    };

    Order.prototype.normalize = function(prop) {
      return 'order';
    };

    Order.prototype.set = function(decl, prefix) {
      var spec;
      spec = flexSpec(prefix)[0];
      if (spec === 2009) {
        decl.value = (parseInt(decl.value) + 1).toString();
        return Order.__super__.set.call(this, decl, prefix);
      } else {
        return Order.__super__.set.apply(this, arguments);
      }
    };

    return Order;

  })(Declaration);

  module.exports = Order;

}).call(this);

},{"../declaration":5,"./flex-spec":22}],29:[function(require,module,exports){
(function() {
  var Placeholder, Selector,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Selector = require('../selector');

  Placeholder = (function(_super) {
    __extends(Placeholder, _super);

    function Placeholder() {
      return Placeholder.__super__.constructor.apply(this, arguments);
    }

    Placeholder.names = ['::placeholder'];

    Placeholder.prototype.possible = function() {
      return Placeholder.__super__.possible.apply(this, arguments).concat('-moz- old');
    };

    Placeholder.prototype.prefixed = function(prefix) {
      if ('-webkit-' === prefix) {
        return '::-webkit-input-placeholder';
      } else if ('-ms-' === prefix) {
        return ':-ms-input-placeholder';
      } else if ('-moz- old' === prefix) {
        return ':-moz-placeholder';
      } else {
        return "::" + prefix + "placeholder";
      }
    };

    return Placeholder;

  })(Selector);

  module.exports = Placeholder;

}).call(this);

},{"../selector":40}],30:[function(require,module,exports){
(function() {
  var Declaration, TransformDecl,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Declaration = require('../declaration');

  TransformDecl = (function(_super) {
    __extends(TransformDecl, _super);

    function TransformDecl() {
      return TransformDecl.__super__.constructor.apply(this, arguments);
    }

    TransformDecl.names = ['transform', 'transform-origin'];

    TransformDecl.functions3d = ['matrix3d', 'translate3d', 'translateZ', 'scale3d', 'scaleZ', 'rotate3d', 'rotateX', 'rotateY', 'rotateZ', 'perspective'];

    TransformDecl.prototype.keykrameParents = function(decl) {
      var parent;
      parent = decl.parent;
      while (parent) {
        if (parent.type === 'atrule' && parent.name === 'keyframes') {
          return true;
        }
        parent = parent.parent;
      }
      return false;
    };

    TransformDecl.prototype.contain3d = function(decl) {
      var func, _i, _len, _ref;
      if (decl.prop === 'transform-origin') {
        return false;
      }
      _ref = TransformDecl.functions3d;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        func = _ref[_i];
        if (decl.value.indexOf("" + func + "(") !== -1) {
          return true;
        }
      }
      return false;
    };

    TransformDecl.prototype.insert = function(decl, prefix, prefixes) {
      if (prefix === '-ms-') {
        if (!this.contain3d(decl) && !this.keykrameParents(decl)) {
          return TransformDecl.__super__.insert.apply(this, arguments);
        }
      } else if (prefix === '-o-') {
        if (!this.contain3d(decl)) {
          return TransformDecl.__super__.insert.apply(this, arguments);
        }
      } else {
        return TransformDecl.__super__.insert.apply(this, arguments);
      }
    };

    return TransformDecl;

  })(Declaration);

  module.exports = TransformDecl;

}).call(this);

},{"../declaration":5}],31:[function(require,module,exports){
(function() {
  var TransformValue, Value,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Value = require('../value');

  TransformValue = (function(_super) {
    __extends(TransformValue, _super);

    function TransformValue() {
      return TransformValue.__super__.constructor.apply(this, arguments);
    }

    TransformValue.names = ['transform'];

    TransformValue.prototype.replace = function(value, prefix) {
      if (prefix === '-ms-') {
        return value;
      } else {
        return TransformValue.__super__.replace.apply(this, arguments);
      }
    };

    return TransformValue;

  })(Value);

  module.exports = TransformValue;

}).call(this);

},{"../value":43}],32:[function(require,module,exports){
(function() {
  var OldValue, Transition, Value,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  OldValue = require('../old-value');

  Value = require('../value');

  Transition = (function(_super) {
    __extends(Transition, _super);

    function Transition() {
      return Transition.__super__.constructor.apply(this, arguments);
    }

    Transition.names = ['flex', 'flex-grow', 'flex-shrink', 'flex-basis'];

    Transition.prototype.prefixed = function(prefix) {
      return this.all.prefixed(this.name, prefix);
    };

    Transition.prototype.replace = function(string, prefix) {
      return string.replace(this.regexp(), '$1' + this.prefixed(prefix) + '$3');
    };

    Transition.prototype.old = function(prefix) {
      return new OldValue(this.prefixed(prefix));
    };

    return Transition;

  })(Value);

  module.exports = Transition;

}).call(this);

},{"../old-value":36,"../value":43}],33:[function(require,module,exports){
(function() {
  var capitalize, names, prefix;

  capitalize = function(str) {
    return str.slice(0, 1).toUpperCase() + str.slice(1);
  };

  names = {
    ie: 'IE',
    ie_mob: 'IE Mobile',
    ios_saf: 'iOS',
    op_mini: 'Opera Mini',
    op_mob: 'Opera Mobile',
    and_chr: 'Chrome for Android',
    and_ff: 'Firefox for Android'
  };

  prefix = function(name, transition, prefixes) {
    var out;
    out = '  ' + name + (transition ? '*' : '') + ': ';
    out += prefixes.map(function(i) {
      return i.replace(/^-(.*)-$/g, '$1');
    }).join(', ');
    out += "\n";
    return out;
  };

  module.exports = function(prefixes) {
    var atrules, browser, data, list, name, needTransition, out, props, selector, selectors, string, transitionProp, useTransition, value, values, version, versions, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
    if (prefixes.browsers.selected.length === 0) {
      return "No browsers selected";
    }
    versions = [];
    _ref = prefixes.browsers.selected;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      browser = _ref[_i];
      _ref1 = browser.split(' '), name = _ref1[0], version = _ref1[1];
      name = names[name] || capitalize(name);
      if (versions[name]) {
        versions[name].push(version);
      } else {
        versions[name] = [version];
      }
    }
    out = "Browsers:\n";
    for (browser in versions) {
      list = versions[browser];
      list = list.sort(function(a, b) {
        return parseFloat(b) - parseFloat(a);
      });
      out += '  ' + browser + ': ' + list.join(', ') + "\n";
    }
    atrules = '';
    _ref2 = prefixes.add;
    for (name in _ref2) {
      data = _ref2[name];
      if (name[0] === '@' && data.prefixes) {
        atrules += prefix(name, false, data.prefixes);
      }
    }
    if (atrules !== '') {
      out += "\nAt-Rules:\n" + atrules;
    }
    selectors = '';
    _ref3 = prefixes.add.selectors;
    for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
      selector = _ref3[_j];
      if (selector.prefixes) {
        selectors += prefix(selector.name, false, selector.prefixes);
      }
    }
    if (selectors !== '') {
      out += "\nSelectors:\n" + selectors;
    }
    values = '';
    props = '';
    useTransition = false;
    needTransition = (_ref4 = prefixes.add.transition) != null ? _ref4.prefixes : void 0;
    _ref5 = prefixes.add;
    for (name in _ref5) {
      data = _ref5[name];
      if (name[0] !== '@' && data.prefixes) {
        transitionProp = needTransition && prefixes.data[name].transition;
        if (transitionProp) {
          useTransition = true;
        }
        props += prefix(name, transitionProp, data.prefixes);
      }
      if (!data.values) {
        continue;
      }
      if (prefixes.transitionProps.some(function(i) {
        return i === name;
      })) {
        continue;
      }
      _ref6 = data.values;
      for (_k = 0, _len2 = _ref6.length; _k < _len2; _k++) {
        value = _ref6[_k];
        string = prefix(value.name, false, value.prefixes);
        if (values.indexOf(string) === -1) {
          values += string;
        }
      }
    }
    if (useTransition) {
      props += "  * - can be used in transition\n";
    }
    if (props !== '') {
      out += "\nProperties:\n" + props;
    }
    if (values !== '') {
      out += "\nValues:\n" + values;
    }
    if (atrules === '' && selectors === '' && props === '' && values === '') {
      out += '\nAwesome! Your browsers don\'t require any vendor prefixes.' + '\nNow you can remove Autoprefixer from build steps.';
    }
    return out;
  };

}).call(this);

},{}],34:[function(require,module,exports){
(function() {
  var Keyframes, Prefixer,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Prefixer = require('./prefixer');

  Keyframes = (function(_super) {
    __extends(Keyframes, _super);

    function Keyframes() {
      return Keyframes.__super__.constructor.apply(this, arguments);
    }

    Keyframes.prototype.add = function(atRule, prefix) {
      var already, cloned, prefixed;
      prefixed = prefix + atRule.name;
      already = atRule.parent.some(function(i) {
        return i.name === prefixed && i.params === atRule.params;
      });
      if (already) {
        return;
      }
      cloned = this.clone(atRule, {
        name: prefixed
      });
      return atRule.parent.insertBefore(atRule, cloned);
    };

    Keyframes.prototype.process = function(node) {
      var parent, prefix, _i, _len, _ref, _results;
      parent = this.parentPrefix(node);
      _ref = this.prefixes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prefix = _ref[_i];
        if (parent && parent !== prefix) {
          continue;
        }
        _results.push(this.add(node, prefix));
      }
      return _results;
    };

    return Keyframes;

  })(Prefixer);

  module.exports = Keyframes;

}).call(this);

},{"./prefixer":37}],35:[function(require,module,exports){
(function() {
  var OldSelector;

  OldSelector = (function() {
    function OldSelector(selector, prefix) {
      var _i, _len, _ref;
      this.prefix = prefix;
      this.prefixed = selector.prefixed(this.prefix);
      this.regexp = selector.regexp(this.prefix);
      this.prefixeds = [];
      _ref = selector.possible();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prefix = _ref[_i];
        this.prefixeds.push([selector.prefixed(prefix), selector.regexp(prefix)]);
      }
      this.unprefixed = selector.name;
      this.nameRegexp = selector.regexp();
    }

    OldSelector.prototype.isHack = function(rule) {
      var before, index, regexp, rules, some, string, _i, _len, _ref, _ref1;
      index = rule.parent.index(rule) + 1;
      rules = rule.parent.rules;
      while (index < rules.length) {
        before = rules[index].selector;
        if (!before) {
          return true;
        }
        if (before.indexOf(this.unprefixed) !== -1 && before.match(this.nameRegexp)) {
          return false;
        }
        some = false;
        _ref = this.prefixeds;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], string = _ref1[0], regexp = _ref1[1];
          if (before.indexOf(string) !== -1 && before.match(regexp)) {
            some = true;
            break;
          }
        }
        if (!some) {
          return true;
        }
        index += 1;
      }
      return true;
    };

    OldSelector.prototype.check = function(rule) {
      if (rule.selector.indexOf(this.prefixed) === -1) {
        return false;
      }
      if (!rule.selector.match(this.regexp)) {
        return false;
      }
      if (this.isHack(rule)) {
        return false;
      }
      return true;
    };

    return OldSelector;

  })();

  module.exports = OldSelector;

}).call(this);

},{}],36:[function(require,module,exports){
(function() {
  var OldValue, utils;

  utils = require('./utils');

  OldValue = (function() {
    function OldValue(name, string, regexp) {
      this.name = name;
      this.string = string;
      this.regexp = regexp;
      this.regexp || (this.regexp = utils.regexp(this.name));
      this.string || (this.string = this.name);
    }

    OldValue.prototype.check = function(value) {
      if (value.indexOf(this.string) !== -1) {
        return !!value.match(this.regexp);
      } else {
        return false;
      }
    };

    return OldValue;

  })();

  module.exports = OldValue;

}).call(this);

},{"./utils":42}],37:[function(require,module,exports){
(function() {
  var Browsers, Prefixer, utils, vendor;

  Browsers = require('./browsers');

  vendor = require('postcss/lib/vendor');

  utils = require('./utils');

  Prefixer = (function() {
    Prefixer.hack = function(klass) {
      var name, _i, _len, _ref, _results;
      this.hacks || (this.hacks = {});
      _ref = klass.names;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        _results.push(this.hacks[name] = klass);
      }
      return _results;
    };

    Prefixer.load = function(name, prefixes, all) {
      var klass, _ref;
      klass = (_ref = this.hacks) != null ? _ref[name] : void 0;
      if (klass) {
        return new klass(name, prefixes, all);
      } else {
        return new this(name, prefixes, all);
      }
    };

    Prefixer.clone = function(node, overrides) {
      var cloned;
      cloned = node.clone(overrides);
      if (node.type === 'decl') {
        cloned.between = node.between;
      }
      delete cloned._autoprefixerPrefix;
      delete cloned._autoprefixerValues;
      return cloned;
    };

    function Prefixer(name, prefixes, all) {
      this.name = name;
      this.prefixes = prefixes;
      this.all = all;
    }

    Prefixer.prototype.parentPrefix = function(node) {
      var prefix;
      prefix = node._autoprefixerPrefix != null ? node._autoprefixerPrefix : node.type === 'decl' && node.prop[0] === '-' ? vendor.prefix(node.prop) : node.type === 'root' ? false : node.type === 'rule' && node.selector.indexOf(':-') !== -1 ? node.selector.match(/:(-\w+-)/)[1] : node.type === 'atrule' && node.name[0] === '-' ? vendor.prefix(node.name) : this.parentPrefix(node.parent);
      if (Browsers.prefixes().indexOf(prefix) === -1) {
        prefix = false;
      }
      return node._autoprefixerPrefix = prefix;
    };

    Prefixer.prototype.process = function(node) {
      var added, parent, prefix, prefixes, _i, _j, _len, _len1, _ref;
      if (!this.check(node)) {
        return;
      }
      parent = this.parentPrefix(node);
      prefixes = [];
      _ref = this.prefixes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prefix = _ref[_i];
        if (parent && parent !== utils.removeNote(prefix)) {
          continue;
        }
        prefixes.push(prefix);
      }
      added = [];
      for (_j = 0, _len1 = prefixes.length; _j < _len1; _j++) {
        prefix = prefixes[_j];
        if (this.add(node, prefix, added.concat([prefix]))) {
          added.push(prefix);
        }
      }
      return added;
    };

    Prefixer.prototype.clone = function(node, overrides) {
      return Prefixer.clone(node, overrides);
    };

    return Prefixer;

  })();

  module.exports = Prefixer;

}).call(this);

},{"./browsers":4,"./utils":42,"postcss/lib/vendor":87}],38:[function(require,module,exports){
(function() {
  var Browsers, Declaration, Keyframes, Prefixes, Processor, Selector, Supports, Value, declsCache, utils, vendor;

  utils = require('./utils');

  vendor = require('postcss/lib/vendor');

  Declaration = require('./declaration');

  Processor = require('./processor');

  Keyframes = require('./keyframes');

  Supports = require('./supports');

  Browsers = require('./browsers');

  Selector = require('./selector');

  Value = require('./value');

  Selector.hack(require('./hacks/fullscreen'));

  Selector.hack(require('./hacks/placeholder'));

  Declaration.hack(require('./hacks/flex'));

  Declaration.hack(require('./hacks/order'));

  Declaration.hack(require('./hacks/filter'));

  Declaration.hack(require('./hacks/flex-flow'));

  Declaration.hack(require('./hacks/flex-grow'));

  Declaration.hack(require('./hacks/flex-wrap'));

  Declaration.hack(require('./hacks/align-self'));

  Declaration.hack(require('./hacks/flex-basis'));

  Declaration.hack(require('./hacks/align-items'));

  Declaration.hack(require('./hacks/flex-shrink'));

  Declaration.hack(require('./hacks/break-inside'));

  Declaration.hack(require('./hacks/border-image'));

  Declaration.hack(require('./hacks/align-content'));

  Declaration.hack(require('./hacks/border-radius'));

  Declaration.hack(require('./hacks/transform-decl'));

  Declaration.hack(require('./hacks/flex-direction'));

  Declaration.hack(require('./hacks/justify-content'));

  Declaration.hack(require('./hacks/background-size'));

  Value.hack(require('./hacks/gradient'));

  Value.hack(require('./hacks/transition'));

  Value.hack(require('./hacks/display-flex'));

  Value.hack(require('./hacks/filter-value'));

  Value.hack(require('./hacks/fill-available'));

  Value.hack(require('./hacks/transform-value'));

  declsCache = {};

  Prefixes = (function() {
    function Prefixes(data, browsers, options) {
      var _ref;
      this.data = data;
      this.browsers = browsers;
      this.options = options != null ? options : {};
      _ref = this.preprocess(this.select(this.data)), this.add = _ref[0], this.remove = _ref[1];
      this.processor = new Processor(this);
    }

    Prefixes.prototype.transitionProps = ['transition', 'transition-property'];

    Prefixes.prototype.cleaner = function() {
      var empty;
      if (!this.cleanerCache) {
        if (this.browsers.selected.length) {
          empty = new Browsers(this.browsers.data, []);
          this.cleanerCache = new Prefixes(this.data, empty, this.options);
        } else {
          return this;
        }
      }
      return this.cleanerCache;
    };

    Prefixes.prototype.select = function(list) {
      var add, all, data, name, notes, selected;
      selected = {
        add: {},
        remove: {}
      };
      for (name in list) {
        data = list[name];
        add = data.browsers.map(function(i) {
          var params;
          params = i.split(' ');
          return {
            browser: params[0] + ' ' + params[1],
            note: params[2]
          };
        });
        notes = add.filter(function(i) {
          return i.note;
        }).map((function(_this) {
          return function(i) {
            return _this.browsers.prefix(i.browser) + ' ' + i.note;
          };
        })(this));
        notes = utils.uniq(notes);
        add = add.filter((function(_this) {
          return function(i) {
            return _this.browsers.isSelected(i.browser);
          };
        })(this)).map((function(_this) {
          return function(i) {
            var prefix;
            prefix = _this.browsers.prefix(i.browser);
            if (i.note) {
              return prefix + ' ' + i.note;
            } else {
              return prefix;
            }
          };
        })(this));
        add = this.sort(utils.uniq(add));
        all = data.browsers.map((function(_this) {
          return function(i) {
            return _this.browsers.prefix(i);
          };
        })(this));
        if (data.mistakes) {
          all = all.concat(data.mistakes);
        }
        all = all.concat(notes);
        all = utils.uniq(all);
        if (add.length) {
          selected.add[name] = add;
          if (add.length < all.length) {
            selected.remove[name] = all.filter(function(i) {
              return add.indexOf(i) === -1;
            });
          }
        } else {
          selected.remove[name] = all;
        }
      }
      return selected;
    };

    Prefixes.prototype.sort = function(prefixes) {
      return prefixes.sort(function(a, b) {
        var aLength, bLength;
        aLength = utils.removeNote(a).length;
        bLength = utils.removeNote(b).length;
        if (aLength === bLength) {
          return b.length - a.length;
        } else {
          return bLength - aLength;
        }
      });
    };

    Prefixes.prototype.preprocess = function(selected) {
      var add, name, old, olds, prefix, prefixed, prefixes, prop, props, remove, selector, value, values, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _ref, _ref1, _ref2;
      add = {
        selectors: [],
        '@supports': new Supports(this)
      };
      _ref = selected.add;
      for (name in _ref) {
        prefixes = _ref[name];
        if (name === '@keyframes') {
          add[name] = new Keyframes(name, prefixes, this);
        } else if (this.data[name].selector) {
          add.selectors.push(Selector.load(name, prefixes, this));
        } else {
          props = this.data[name].transition ? this.transitionProps : this.data[name].props;
          if (props) {
            value = Value.load(name, prefixes, this);
            for (_i = 0, _len = props.length; _i < _len; _i++) {
              prop = props[_i];
              if (!add[prop]) {
                add[prop] = {
                  values: []
                };
              }
              add[prop].values.push(value);
            }
          }
          if (!this.data[name].props) {
            values = ((_ref1 = add[name]) != null ? _ref1.values : void 0) || [];
            add[name] = Declaration.load(name, prefixes, this);
            add[name].values = values;
          }
        }
      }
      remove = {
        selectors: []
      };
      _ref2 = selected.remove;
      for (name in _ref2) {
        prefixes = _ref2[name];
        if (this.data[name].selector) {
          selector = Selector.load(name, prefixes);
          for (_j = 0, _len1 = prefixes.length; _j < _len1; _j++) {
            prefix = prefixes[_j];
            remove.selectors.push(selector.old(prefix));
          }
        } else if (name[0] === '@') {
          for (_k = 0, _len2 = prefixes.length; _k < _len2; _k++) {
            prefix = prefixes[_k];
            prefixed = '@' + prefix + name.slice(1);
            remove[prefixed] = {
              remove: true
            };
          }
        } else {
          props = this.data[name].transition ? this.transitionProps : this.data[name].props;
          if (props) {
            value = Value.load(name, [], this);
            for (_l = 0, _len3 = prefixes.length; _l < _len3; _l++) {
              prefix = prefixes[_l];
              old = value.old(prefix);
              if (old) {
                for (_m = 0, _len4 = props.length; _m < _len4; _m++) {
                  prop = props[_m];
                  if (!remove[prop]) {
                    remove[prop] = {};
                  }
                  if (!remove[prop].values) {
                    remove[prop].values = [];
                  }
                  remove[prop].values.push(old);
                }
              }
            }
          }
          if (!this.data[name].props) {
            for (_n = 0, _len5 = prefixes.length; _n < _len5; _n++) {
              prefix = prefixes[_n];
              prop = vendor.unprefixed(name);
              olds = this.decl(name).old(name, prefix);
              for (_o = 0, _len6 = olds.length; _o < _len6; _o++) {
                prefixed = olds[_o];
                if (!remove[prefixed]) {
                  remove[prefixed] = {};
                }
                remove[prefixed].remove = true;
              }
            }
          }
        }
      }
      return [add, remove];
    };

    Prefixes.prototype.decl = function(prop) {
      var decl;
      decl = declsCache[prop];
      if (decl) {
        return decl;
      } else {
        return declsCache[prop] = Declaration.load(prop);
      }
    };

    Prefixes.prototype.unprefixed = function(prop) {
      prop = vendor.unprefixed(prop);
      return this.decl(prop).normalize(prop);
    };

    Prefixes.prototype.prefixed = function(prop, prefix) {
      prop = vendor.unprefixed(prop);
      return this.decl(prop).prefixed(prop, prefix);
    };

    Prefixes.prototype.values = function(type, prop) {
      var data, global, values, _ref, _ref1;
      data = this[type];
      global = (_ref = data['*']) != null ? _ref.values : void 0;
      values = (_ref1 = data[prop]) != null ? _ref1.values : void 0;
      if (global && values) {
        return utils.uniq(global.concat(values));
      } else {
        return global || values || [];
      }
    };

    Prefixes.prototype.group = function(decl) {
      var checker, index, length, rule, unprefixed;
      rule = decl.parent;
      index = rule.index(decl);
      length = rule.decls.length;
      unprefixed = this.unprefixed(decl.prop);
      checker = (function(_this) {
        return function(step, callback) {
          var other;
          index += step;
          while (index >= 0 && index < length) {
            other = rule.decls[index];
            if (other.type === 'decl') {
              if (step === -1 && other.prop === unprefixed) {
                if (!Browsers.withPrefix(other.value)) {
                  break;
                }
              }
              if (_this.unprefixed(other.prop) !== unprefixed) {
                break;
              } else if (callback(other) === true) {
                return true;
              }
              if (step === +1 && other.prop === unprefixed) {
                if (!Browsers.withPrefix(other.value)) {
                  break;
                }
              }
            }
            index += step;
          }
          return false;
        };
      })(this);
      return {
        up: function(callback) {
          return checker(-1, callback);
        },
        down: function(callback) {
          return checker(+1, callback);
        }
      };
    };

    return Prefixes;

  })();

  module.exports = Prefixes;

}).call(this);

},{"./browsers":4,"./declaration":5,"./hacks/align-content":6,"./hacks/align-items":7,"./hacks/align-self":8,"./hacks/background-size":9,"./hacks/border-image":10,"./hacks/border-radius":11,"./hacks/break-inside":12,"./hacks/display-flex":13,"./hacks/fill-available":14,"./hacks/filter":16,"./hacks/filter-value":15,"./hacks/flex":24,"./hacks/flex-basis":17,"./hacks/flex-direction":18,"./hacks/flex-flow":19,"./hacks/flex-grow":20,"./hacks/flex-shrink":21,"./hacks/flex-wrap":23,"./hacks/fullscreen":25,"./hacks/gradient":26,"./hacks/justify-content":27,"./hacks/order":28,"./hacks/placeholder":29,"./hacks/transform-decl":30,"./hacks/transform-value":31,"./hacks/transition":32,"./keyframes":34,"./processor":39,"./selector":40,"./supports":41,"./utils":42,"./value":43,"postcss/lib/vendor":87}],39:[function(require,module,exports){
(function() {
  var Processor, Value, utils, vendor;

  vendor = require('postcss/lib/vendor');

  Value = require('./value');

  utils = require('./utils');

  Processor = (function() {
    function Processor(prefixes) {
      this.prefixes = prefixes;
    }

    Processor.prototype.add = function(css) {
      var keyframes, supports;
      keyframes = this.prefixes.add['@keyframes'];
      supports = this.prefixes.add['@supports'];
      css.eachAtRule((function(_this) {
        return function(rule) {
          if (rule.name === 'keyframes') {
            if (!_this.disabled(rule)) {
              return keyframes != null ? keyframes.process(rule) : void 0;
            }
          } else if (rule.name === 'supports') {
            if (!_this.disabled(rule)) {
              return supports.process(rule);
            }
          }
        };
      })(this));
      css.eachRule((function(_this) {
        return function(rule) {
          var selector, _i, _len, _ref, _results;
          if (_this.disabled(rule)) {
            return;
          }
          _ref = _this.prefixes.add.selectors;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            selector = _ref[_i];
            _results.push(selector.process(rule));
          }
          return _results;
        };
      })(this));
      css.eachDecl((function(_this) {
        return function(decl) {
          var prefix;
          prefix = _this.prefixes.add[decl.prop];
          if (prefix && prefix.prefixes) {
            if (!_this.disabled(decl)) {
              return prefix.process(decl);
            }
          }
        };
      })(this));
      return css.eachDecl((function(_this) {
        return function(decl) {
          var unprefixed, value, _i, _len, _ref;
          if (_this.disabled(decl)) {
            return;
          }
          unprefixed = _this.prefixes.unprefixed(decl.prop);
          _ref = _this.prefixes.values('add', unprefixed);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            value = _ref[_i];
            value.process(decl);
          }
          return Value.save(_this.prefixes, decl);
        };
      })(this));
    };

    Processor.prototype.remove = function(css) {
      var checker, _i, _len, _ref;
      css.eachAtRule((function(_this) {
        return function(rule, i) {
          if (_this.prefixes.remove['@' + rule.name]) {
            if (!_this.disabled(rule)) {
              return rule.parent.remove(i);
            }
          }
        };
      })(this));
      _ref = this.prefixes.remove.selectors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        checker = _ref[_i];
        css.eachRule((function(_this) {
          return function(rule, i) {
            if (checker.check(rule)) {
              if (!_this.disabled(rule)) {
                return rule.parent.remove(i);
              }
            }
          };
        })(this));
      }
      return css.eachDecl((function(_this) {
        return function(decl, i) {
          var notHack, rule, unprefixed, _j, _len1, _ref1, _ref2;
          if (_this.disabled(decl)) {
            return;
          }
          rule = decl.parent;
          unprefixed = _this.prefixes.unprefixed(decl.prop);
          if ((_ref1 = _this.prefixes.remove[decl.prop]) != null ? _ref1.remove : void 0) {
            notHack = _this.prefixes.group(decl).down(function(other) {
              return other.prop === unprefixed;
            });
            if (notHack) {
              if (decl.before.indexOf("\n") > -1) {
                _this.reduceSpaces(decl);
              }
              rule.remove(i);
              return;
            }
          }
          _ref2 = _this.prefixes.values('remove', unprefixed);
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            checker = _ref2[_j];
            if (checker.check(decl.value)) {
              rule.remove(i);
              return;
            }
          }
        };
      })(this));
    };

    Processor.prototype.disabled = function(node) {
      var status;
      if (node._autoprefixerDisabled != null) {
        return node._autoprefixerDisabled;
      } else if (node.decls || node.rules) {
        status = void 0;
        node.each(function(i) {
          if (i.type !== 'comment') {
            return;
          }
          if (i.text === 'autoprefixer: off') {
            status = false;
            return false;
          } else if (i.text === 'autoprefixer: on') {
            status = true;
            return false;
          }
        });
        return node._autoprefixerDisabled = status != null ? !status : node.parent ? this.disabled(node.parent) : false;
      } else {
        return node._autoprefixerDisabled = this.disabled(node.parent);
      }
    };

    Processor.prototype.reduceSpaces = function(decl) {
      var diff, parts, prevMin, stop;
      stop = false;
      this.prefixes.group(decl).up(function(other) {
        return stop = true;
      });
      if (stop) {
        return;
      }
      parts = decl.before.split("\n");
      prevMin = parts[parts.length - 1].length;
      diff = false;
      return this.prefixes.group(decl).down(function(other) {
        var last;
        parts = other.before.split("\n");
        last = parts.length - 1;
        if (parts[last].length > prevMin) {
          if (diff === false) {
            diff = parts[last].length - prevMin;
          }
          parts[last] = parts[last].slice(0, -diff);
          return other.before = parts.join("\n");
        }
      });
    };

    return Processor;

  })();

  module.exports = Processor;

}).call(this);

},{"./utils":42,"./value":43,"postcss/lib/vendor":87}],40:[function(require,module,exports){
(function() {
  var Browsers, OldSelector, Prefixer, Selector, utils,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  OldSelector = require('./old-selector');

  Prefixer = require('./prefixer');

  Browsers = require('./browsers');

  utils = require('./utils');

  Selector = (function(_super) {
    __extends(Selector, _super);

    function Selector(name, prefixes, all) {
      this.name = name;
      this.prefixes = prefixes;
      this.all = all;
      this.regexpCache = {};
    }

    Selector.prototype.check = function(rule) {
      if (rule.selector.indexOf(this.name) !== -1) {
        return !!rule.selector.match(this.regexp());
      } else {
        return false;
      }
    };

    Selector.prototype.prefixed = function(prefix) {
      return this.name.replace(/^([^\w]*)/, '$1' + prefix);
    };

    Selector.prototype.regexp = function(prefix) {
      var name;
      if (this.regexpCache[prefix]) {
        return this.regexpCache[prefix];
      }
      name = prefix ? this.prefixed(prefix) : this.name;
      return this.regexpCache[prefix] = RegExp("(^|[^:\"'=])" + (utils.escapeRegexp(name)), "gi");
    };

    Selector.prototype.possible = function() {
      return Browsers.prefixes();
    };

    Selector.prototype.prefixeds = function(rule) {
      var prefix, prefixeds, _i, _len, _ref;
      if (rule._autoprefixerPrefixeds) {
        return rule._autoprefixerPrefixeds;
      }
      prefixeds = {};
      _ref = this.possible();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prefix = _ref[_i];
        prefixeds[prefix] = this.replace(rule.selector, prefix);
      }
      return rule._autoprefixerPrefixeds = prefixeds;
    };

    Selector.prototype.already = function(rule, prefixeds, prefix) {
      var before, index, key, prefixed, some;
      index = rule.parent.index(rule) - 1;
      while (index >= 0) {
        before = rule.parent.rules[index];
        if (before.type !== 'rule') {
          return false;
        }
        some = false;
        for (key in prefixeds) {
          prefixed = prefixeds[key];
          if (before.selector === prefixed) {
            if (prefix === key) {
              return true;
            } else {
              some = true;
              break;
            }
          }
        }
        if (!some) {
          return false;
        }
        index -= 1;
      }
      return false;
    };

    Selector.prototype.replace = function(selector, prefix) {
      return selector.replace(this.regexp(), '$1' + this.prefixed(prefix));
    };

    Selector.prototype.add = function(rule, prefix) {
      var cloned, prefixeds;
      prefixeds = this.prefixeds(rule);
      if (this.already(rule, prefixeds, prefix)) {
        return;
      }
      cloned = this.clone(rule, {
        selector: prefixeds[prefix]
      });
      return rule.parent.insertBefore(rule, cloned);
    };

    Selector.prototype.old = function(prefix) {
      return new OldSelector(this, prefix);
    };

    return Selector;

  })(Prefixer);

  module.exports = Selector;

}).call(this);

},{"./browsers":4,"./old-selector":35,"./prefixer":37,"./utils":42}],41:[function(require,module,exports){
(function() {
  var Prefixes, Supports, Value, findCondition, findDecl, list, postcss, split, utils;

  Prefixes = require('./prefixes');

  Value = require('./value');

  utils = require('./utils');

  postcss = require('postcss');

  list = require('postcss/lib/list');

  split = /\(\s*([^\(\):]+)\s*:([^\)]+)/;

  findDecl = /\(\s*([^\(\):]+)\s*:\s*([^\)]+)\s*\)/g;

  findCondition = /(not\s*)?\(\s*([^\(\):]+)\s*:\s*([^\)]+)\s*\)\s*or\s*/gi;

  Supports = (function() {
    function Supports(all) {
      this.all = all;
    }

    Supports.prototype.virtual = function(prop, value) {
      var rule;
      rule = postcss.parse('a{}').first;
      rule.append({
        prop: prop,
        value: value,
        before: ''
      });
      return rule;
    };

    Supports.prototype.prefixed = function(prop, value) {
      var decl, prefixer, rule, _i, _j, _len, _len1, _ref, _ref1;
      rule = this.virtual(prop, value);
      prefixer = this.all.add[prop];
      if (prefixer != null) {
        if (typeof prefixer.process === "function") {
          prefixer.process(rule.first);
        }
      }
      _ref = rule.decls;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        decl = _ref[_i];
        _ref1 = this.all.values('add', prop);
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          value = _ref1[_j];
          value.process(decl);
        }
        Value.save(this.all, decl);
      }
      return rule.decls;
    };

    Supports.prototype.clean = function(params) {
      return params.replace(findCondition, (function(_this) {
        return function(all) {
          var check, checker, prop, unprefixed, value, _, _i, _len, _ref, _ref1, _ref2;
          if (all.slice(0, 3).toLowerCase() === 'not') {
            return all;
          }
          _ref = all.match(split), _ = _ref[0], prop = _ref[1], value = _ref[2];
          unprefixed = _this.all.unprefixed(prop);
          if ((_ref1 = _this.all.cleaner().remove[prop]) != null ? _ref1.remove : void 0) {
            check = new RegExp('(\\(|\\s)' + utils.escapeRegexp(unprefixed) + ':');
            if (check.test(params)) {
              return '';
            }
          }
          _ref2 = _this.all.cleaner().values('remove', unprefixed);
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            checker = _ref2[_i];
            if (checker.check(value)) {
              return '';
            }
          }
          return all;
        };
      })(this)).replace(/\(\s*\((.*)\)\s*\)/g, '($1)');
    };

    Supports.prototype.process = function(rule) {
      rule.params = this.clean(rule.params);
      return rule.params = rule.params.replace(findDecl, (function(_this) {
        return function(all, prop, value) {
          var i, stringed;
          stringed = (function() {
            var _i, _len, _ref, _results;
            _ref = this.prefixed(prop, value);
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              i = _ref[_i];
              _results.push("(" + i.prop + ": " + i.value + ")");
            }
            return _results;
          }).call(_this);
          if (stringed.length === 1) {
            return stringed[0];
          } else {
            return '(' + stringed.join(' or ') + ')';
          }
        };
      })(this));
    };

    return Supports;

  })();

  module.exports = Supports;

}).call(this);

},{"./prefixes":38,"./utils":42,"./value":43,"postcss":82,"postcss/lib/list":78}],42:[function(require,module,exports){
(function() {
  module.exports = {
    error: function(text) {
      var err;
      err = new Error(text);
      err.autoprefixer = true;
      throw err;
    },
    uniq: function(array) {
      var filtered, i, _i, _len;
      filtered = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        i = array[_i];
        if (filtered.indexOf(i) === -1) {
          filtered.push(i);
        }
      }
      return filtered;
    },
    removeNote: function(string) {
      if (string.indexOf(' ') === -1) {
        return string;
      } else {
        return string.split(' ')[0];
      }
    },
    escapeRegexp: function(string) {
      return string.replace(/[.?*+\^\$\[\]\\(){}|\-]/g, '\\$&');
    },
    regexp: function(word, escape) {
      if (escape == null) {
        escape = true;
      }
      if (escape) {
        word = this.escapeRegexp(word);
      }
      return RegExp("(^|[\\s,(])(" + word + "($|[\\s(,]))", "gi");
    }
  };

}).call(this);

},{}],43:[function(require,module,exports){
(function() {
  var OldValue, Prefixer, Value, utils, vendor,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Prefixer = require('./prefixer');

  OldValue = require('./old-value');

  utils = require('./utils');

  vendor = require('postcss/lib/vendor');

  Value = (function(_super) {
    __extends(Value, _super);

    function Value() {
      return Value.__super__.constructor.apply(this, arguments);
    }

    Value.save = function(prefixes, decl) {
      var already, cloned, prefix, prefixed, propPrefix, rule, trimmed, value, _ref, _results;
      _ref = decl._autoprefixerValues;
      _results = [];
      for (prefix in _ref) {
        value = _ref[prefix];
        if (value === decl.value) {
          continue;
        }
        propPrefix = vendor.prefix(decl.prop);
        if (propPrefix === prefix) {
          _results.push(decl.value = value);
        } else if (propPrefix === '-pie-') {
          continue;
        } else {
          prefixed = prefixes.prefixed(decl.prop, prefix);
          rule = decl.parent;
          if (rule.every(function(i) {
            return i.prop !== prefixed;
          })) {
            trimmed = value.replace(/\s+/, ' ');
            already = rule.some(function(i) {
              return i.prop === decl.prop && i.value.replace(/\s+/, ' ') === trimmed;
            });
            if (!already) {
              cloned = this.clone(decl, {
                value: value
              });
              _results.push(decl.parent.insertBefore(decl, cloned));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    };

    Value.prototype.check = function(decl) {
      var value;
      value = decl.value;
      if (value.indexOf(this.name) !== -1) {
        return !!value.match(this.regexp());
      } else {
        return false;
      }
    };

    Value.prototype.regexp = function() {
      return this.regexpCache || (this.regexpCache = utils.regexp(this.name));
    };

    Value.prototype.replace = function(string, prefix) {
      return string.replace(this.regexp(), '$1' + prefix + '$2');
    };

    Value.prototype.add = function(decl, prefix) {
      var value, _ref;
      decl._autoprefixerValues || (decl._autoprefixerValues = {});
      value = decl._autoprefixerValues[prefix] || ((_ref = decl._value) != null ? _ref.raw : void 0) || decl.value;
      value = this.replace(value, prefix);
      if (value) {
        return decl._autoprefixerValues[prefix] = value;
      }
    };

    Value.prototype.old = function(prefix) {
      return new OldValue(prefix + this.name);
    };

    return Value;

  })(Prefixer);

  module.exports = Value;

}).call(this);

},{"./old-value":36,"./prefixer":37,"./utils":42,"postcss/lib/vendor":87}],44:[function(require,module,exports){
module.exports={"eras":{"e-34":"34 versions back","e-33":"33 versions back","e-32":"32 versions back","e-31":"31 versions back","e-30":"30 versions back","e-29":"29 versions back","e-28":"28 versions back","e-27":"27 versions back","e-26":"26 versions back","e-25":"25 versions back","e-24":"24 versions back","e-23":"23 versions back","e-22":"22 versions back","e-21":"21 versions back","e-20":"20 versions back","e-19":"19 versions back","e-18":"18 versions back","e-17":"17 versions back","e-16":"16 versions back","e-15":"15 versions back","e-14":"14 versions back","e-13":"13 versions back","e-12":"12 versions back","e-11":"11 versions back","e-10":"10 versions back","e-9":"9 versions back","e-8":"8 versions back","e-7":"7 versions back","e-6":"6 versions back","e-5":"5 versions back","e-4":"4 versions back","e-3":"3 versions back","e-2":"2 versions back","e-1":"Previous version","e0":"Current","e1":"Near future","e2":"Farther future","e3":"3 versions ahead"},"agents":{"ie":{"browser":"IE","abbr":"IE","prefix":"ms","type":"desktop","usage_global":{"5.5":0.009298,"6":0.180267,"7":0.10095,"8":3.95867,"9":2.39395,"10":2.293,"11":7.36932},"versions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"5.5","6","7","8","9","10","11",null,null,null]},"firefox":{"browser":"Firefox","abbr":"FF","prefix":"moz","type":"desktop","usage_global":{"2":0.0137,"3":0.06165,"3.5":0.02055,"3.6":0.1096,"4":0.0274,"5":0.02055,"6":0.02055,"7":0.0137,"8":0.0411,"9":0.02055,"10":0.0411,"11":0.0411,"12":0.0822,"13":0.03425,"14":0.0411,"15":0.0548,"16":0.07535,"17":0.06165,"18":0.04795,"19":0.0411,"20":0.0548,"21":0.13015,"22":0.06165,"23":0.0685,"24":0.1781,"25":0.0822,"26":0.0959,"27":0.14385,"28":0.10275,"29":0.1781,"30":0.4521,"31":4.00725,"32":6.4938,"33":0.25345,"34":0.00685,"35":0.0137,"36":0},"versions":[null,"2","3","3.5","3.6","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36"]},"chrome":{"browser":"Chrome","abbr":"Chr.","prefix":"webkit","type":"desktop","usage_global":{"4":0.0137,"5":0.0137,"6":0.02055,"7":0.0137,"8":0.0137,"9":0.00685,"10":0.0274,"11":0.10275,"12":0.03425,"13":0.0274,"14":0.02055,"15":0.0274,"16":0.0274,"17":0.02055,"18":0.0411,"19":0.02055,"20":0.02055,"21":0.3151,"22":0.1096,"23":0.0411,"24":0.06165,"25":0.0411,"26":0.0822,"27":0.21235,"28":0.10275,"29":0.44525,"30":0.18495,"31":0.60965,"32":0.2603,"33":0.7398,"34":0.54115,"35":1.19875,"36":4.40455,"37":23.2421,"38":0.137,"39":0.15755,"40":0,"41":0},"versions":["4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41"]},"safari":{"browser":"Safari","abbr":"Saf.","prefix":"webkit","type":"desktop","usage_global":{"3.1":0,"3.2":0.008692,"4":0.0959,"5":0.17125,"5.1":0.56855,"6":0.1918,"6.1":0.52745,"7":1.7536,"7.1":0.1507,"8":0.0411},"versions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"3.1","3.2","4","5","5.1","6","6.1","7","7.1","8",null,null]},"opera":{"browser":"Opera","abbr":"Op.","prefix":"webkit","type":"desktop","usage_global":{"9.5-9.6":0.00685,"10.0-10.1":0.02055,"10.5":0.008392,"10.6":0.007296,"11":0.014996,"11.1":0.008219,"11.5":0.00685,"11.6":0.0137,"12":0.02055,"12.1":0.22605,"15":0.00685,"16":0.00685,"17":0.00685,"18":0.0137,"19":0.0137,"20":0.0274,"21":0.0137,"22":0.02055,"23":0.06165,"24":0.5069,"25":0.00685,"26":0},"versions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"9.5-9.6","10.0-10.1","10.5","10.6","11","11.1","11.5","11.6","12","12.1","15","16","17","18","19","20","21","22","23","24","25","26",null],"prefix_exceptions":{"9.5-9.6":"o","10.0-10.1":"o","10.5":"o","10.6":"o","11":"o","11.1":"o","11.5":"o","11.6":"o","12":"o","12.1":"o"}},"ios_saf":{"browser":"iOS Safari","abbr":"iOS","prefix":"webkit","type":"mobile","usage_global":{"3.2":0,"4.0-4.1":0,"4.2-4.3":0,"5.0-5.1":0.0552912,"6.0-6.1":0.245402,"7.0-7.1":5.57078,"8":1.62238},"versions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"3.2","4.0-4.1","4.2-4.3","5.0-5.1","6.0-6.1","7.0-7.1","8",null,null,null]},"op_mini":{"browser":"Opera Mini","abbr":"O.Mini","prefix":"o","type":"mobile","usage_global":{"5.0-8.0":3.12624},"versions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"5.0-8.0",null,null,null]},"android":{"browser":"Android Browser","abbr":"And.","prefix":"webkit","type":"mobile","usage_global":{"2.1":0.00677517,"2.2":0.0474262,"2.3":0.77237,"3":0,"4":0.650417,"4.1":1.70057,"4.2-4.3":1.94448,"4.4":1.65992,"4.4.3":0},"versions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"2.1","2.2","2.3","3","4","4.1","4.2-4.3","4.4","4.4.3",null,null]},"op_mob":{"browser":"Opera Mobile","abbr":"O.Mob","prefix":"o","type":"mobile","usage_global":{"10":0,"11.5":0,"12":0.00947039,"12.1":0.0520871,"24":0},"versions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"10",null,null,"11.5","12","12.1","24",null,null,null],"prefix_exceptions":{"24":"webkit"}},"bb":{"browser":"Blackberry Browser","abbr":"BB","prefix":"webkit","type":"mobile","usage_global":{"7":0.101587,"10":0},"versions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"7","10",null,null,null]},"and_chr":{"browser":"Chrome for Android","abbr":"Chr/And.","prefix":"webkit","type":"mobile","usage_global":{"38":7.71435},"versions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"38",null,null,null]},"and_ff":{"browser":"Firefox for Android","abbr":"FF/And.","prefix":"moz","type":"mobile","usage_global":{"32":0.1386},"versions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"32",null,null,null]},"ie_mob":{"browser":"IE Mobile","abbr":"IE.Mob","prefix":"ms","type":"mobile","usage_global":{"10":0.436181},"versions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"10",null,null,null]},"and_uc":{"browser":"UC Browser for Android","abbr":"UC","prefix":"webkit","type":"mobile","usage_global":{"9.9":3.1059},"versions":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"9.9",null,null,null],"prefix_exceptions":{"9.9":"webkit"}}},"statuses":{"rec":"Recommendation","pr":"Proposed Recommendation","cr":"Candidate Recommendation","wd":"Working Draft","other":"Other","unoff":"Unofficial / Note"},"cats":{"CSS":["CSS","CSS2","CSS3"],"HTML5":["Canvas","HTML5"],"JS API":["JS API"],"Other":["PNG","Other","DOM"],"SVG":["SVG"]},"updated":1413342957,"data":{"png-alpha":{"title":"PNG alpha transparency","description":"Semi-transparent areas in PNG files","spec":"http://www.w3.org/TR/PNG/","status":"rec","links":[{"url":"http://en.wikipedia.org/wiki/Portable_Network_Graphics","title":"Wikipedia"},{"url":"http://dillerdesign.com/experiment/DD_belatedPNG/","title":"Workaround for IE6"}],"categories":["PNG"],"stats":{"ie":{"5.5":"n","6":"p","7":"y","8":"y","9":"y","10":"y","11":"y"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"IE6 does support full transparency in 8-bit PNGs, which can sometimes be an alternative to 24-bit PNGs.","notes_by_num":{},"usage_perc_y":96.14,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"apng":{"title":"Animated PNG (APNG)","description":"Like animated GIFs, but allowing 24-bit colors and alpha transparency","spec":"https://wiki.mozilla.org/APNG_Specification","status":"unoff","links":[{"url":"http://en.wikipedia.org/wiki/APNG","title":"Wikipedia"},{"url":"https://github.com/davidmz/apng-canvas","title":"Polyfill using canvas"},{"url":"https://chrome.google.com/webstore/detail/ehkepjiconegkhpodgoaeamnpckdbblp","title":"Chrome extension providing support"}],"categories":["PNG"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n","38":"n","39":"n","40":"n","41":"n"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"y"},"opera":{"9":"n","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Where support for APNG is missing, only the first frame is displayed","notes_by_num":{},"usage_perc_y":15.38,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"video":{"title":"Video element","description":"Method of playing videos on webpages (without requiring a plug-in)","spec":"https://html.spec.whatwg.org/multipage/embedded-content.html#the-video-element","status":"cr","links":[{"url":"https://dev.opera.com/articles/view/everything-you-need-to-know-about-html5-video-and-audio/","title":"Detailed article on video/audio elements"},{"url":"http://webmproject.org","title":"WebM format information"},{"url":"http://camendesign.co.uk/code/video_for_everybody","title":"Video for Everybody"},{"url":"http://diveintohtml5.info/video.html","title":"Video on the Web - includes info on Android support"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/video.js#video","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/html/elements/video","title":"WebPlatform Docs"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"a","2.2":"a","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Different browsers have support for different video formats, see sub-features for details. \r\n\r\nThe Android browser (before 2.3) requires [specific handling](http://www.broken-links.com/2010/07/08/making-html5-video-work-on-android-phones/) to run the video element.","notes_by_num":{},"usage_perc_y":88.78,"usage_perc_a":0.05,"ucprefix":false,"parent":"","keywords":"<video>","ie_id":"","chrome_id":""},"audio":{"title":"Audio element","description":"Method of playing sound on webpages (without requiring a plug-in)","spec":"https://html.spec.whatwg.org/multipage/embedded-content.html#the-audio-element","status":"cr","links":[{"url":"http://html5doctor.com/native-audio-in-the-browser/","title":"HTML5 Doctor article"},{"url":"https://dev.opera.com/articles/view/everything-you-need-to-know-about-html5-video-and-audio/","title":"Detailed article on video/audio elements"},{"url":"http://www.jplayer.org/latest/demos/","title":"Demos of audio player that uses the audio element"},{"url":"http://24ways.org/2010/the-state-of-html5-audio","title":"Detailed article on support"},{"url":"http://textopia.org/androidsoundformats.html","title":"File format test page"},{"url":"http://www.phoboslab.org/log/2011/03/the-state-of-html5-audio","title":"The State of HTML5 Audio"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/audio.js#audio","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/html/elements/audio","title":"WebPlatform Docs"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"a","10.0-10.1":"a","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":88.78,"usage_perc_a":0.03,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"contenteditable":{"title":"contenteditable attribute (basic support)","description":"Method of making any HTML element editable","spec":"http://www.w3.org/TR/html/editing.html#contenteditable","status":"cr","links":[{"url":"http://html5demos.com/contenteditable","title":"Demo page"},{"url":"https://blog.whatwg.org/the-road-to-html-5-contenteditable","title":"WHATWG blog post"},{"url":"http://accessgarage.wordpress.com/2009/05/08/how-to-hack-your-app-to-make-contenteditable-work/","title":"Blog post on usage problems"},{"url":"http://docs.webplatform.org/wiki/html/attributes/contentEditable","title":"WebPlatform Docs"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"a","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"This support only refers to very basic editing capability, implementations vary significantly on how certain elements can be edited.","notes_by_num":{},"usage_perc_y":92.3,"usage_perc_a":0.06,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"dragndrop":{"title":"Drag and Drop","description":"Method of easily dragging and dropping elements on a page, requiring minimal JavaScript.","spec":"https://html.spec.whatwg.org/multipage/interaction.html#dnd","status":"wd","links":[{"url":"http://html5doctor.com/native-drag-and-drop/","title":"HTML5 Doctor article"},{"url":"http://nettutsplus.s3.amazonaws.com/64_html5dragdrop/demo/index.html","title":"Shopping cart demo"},{"url":"http://html5demos.com/drag","title":"Demo with link blocks"},{"url":"http://docs.webplatform.org/wiki/dom/DragEvent","title":"WebPlatform Docs"},{"url":"https://github.com/MihaiValentin/setDragImage-IE","title":"Polyfill for setDragImage in IE"},{"url":"http://blog.teamtreehouse.com/implementing-native-drag-and-drop","title":"Implementing Native Drag and Drop"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"a #1","6":"a #1","7":"a #1","8":"a #1","9":"a #1","10":"a #2","11":"a #2"},"firefox":{"2":"p","3":"p","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"p","9.5-9.6":"p","10.0-10.1":"p","10.5":"p","10.6":"p","11":"p","11.1":"p","11.5":"p","11.6":"p","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"p","11":"p","11.1":"p","11.5":"p","12":"p","12.1":"y","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"n"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"n"}},"notes":"`dataTransfer.items` only supported by Chrome.\r\n\r\nCurrently no browser supports the `dropzone` attribute.\r\n\r\nFirefox supports any kind of DOM elements for `.setDragImage`. Chrome must have either an `HTMLImageElement` or any kind of DOM elements attached to the DOM and within the viewport of the browser for `.setDragImage`.","notes_by_num":{"1":"Partial support refers to no support for the `dataTransfer.files` or `.types` objects and limited supported formats for `dataTransfer.setData`/`getData`.","2":"Partial support refers to not supporting `.setDragImage`"},"usage_perc_y":51.39,"usage_perc_a":16.31,"ucprefix":false,"parent":"","keywords":"draganddrop","ie_id":"","chrome_id":""},"queryselector":{"title":"querySelector/querySelectorAll","description":"Method of accessing DOM elements using CSS selectors","spec":"http://www.w3.org/TR/selectors-api/","status":"rec","links":[{"url":"https://developer.mozilla.org/en/DOM/element.querySelector","title":"MDN article on querySelector"},{"url":"https://developer.mozilla.org/En/DOM/Element.querySelectorAll","title":"MDN article on querySelectorAll"},{"url":"http://cjihrig.com/blog/javascripts-selectors-api/","title":"Blog post"},{"url":"http://docs.webplatform.org/wiki/css/selectors_api/querySelector","title":"WebPlatform Docs"}],"categories":["DOM"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"y","9":"y","10":"y","11":"y"},"firefox":{"2":"p","3":"p","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"p","9.5-9.6":"p","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Only works for the CSS selectors available. Thus the IE8 implementation is limited to the CSS 2.1 selectors","notes_by_num":{},"usage_perc_y":95.95,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"query,selectors,selectors api","ie_id":"","chrome_id":""},"getelementsbyclassname":{"title":"getElementsByClassName","description":"Method of accessing DOM elements by class name","spec":"http://www.w3.org/TR/dom/#dom-document-getelementsbyclassname","status":"wd","links":[{"url":"http://www.quirksmode.org/dom/tests/basics.html#getElementsByClassName","title":"Test page"},{"url":"http://docs.webplatform.org/wiki/dom/HTMLElement/getElementsByClassName","title":"WebPlatform Docs"}],"categories":["DOM","HTML5"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"y","10":"y","11":"y"},"firefox":{"2":"p","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":92.06,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"byclassname","ie_id":"","chrome_id":""},"forms":{"title":"HTML5 form features","description":"Expanded form options, including things like date pickers, sliders, validation, placeholders and multiple file uploads. Previously known as \"Web forms 2.0\".","spec":"https://html.spec.whatwg.org/multipage/forms.html#forms","status":"wd","links":[{"url":"https://miketaylr.com/code/input-type-attr.html","title":"HTML5 inputs and attribute support page"},{"url":"https://github.com/westonruter/webforms2","title":"Cross-browser JS implementation (based on original spec)"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"p","10":"a","11":"a"},"firefox":{"2":"p","3":"p","3.5":"p","3.6":"p","4":"a","5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"a","35":"a","36":"a"},"chrome":{"4":"a","5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"a","35":"a","36":"a","37":"a","38":"a","39":"a","40":"a","41":"a"},"safari":{"3.1":"p","3.2":"p","4":"a","5":"a","5.1":"a","6":"a","6.1":"a","7":"a","7.1":"a","8":"a"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a"},"ios_saf":{"3.2":"n","4.0-4.1":"a","4.2-4.3":"a","5.0-5.1":"a","6.0-6.1":"a","7.0-7.1":"a","8":"a"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"a","4.4.3":"a"},"bb":{"7":"n","10":"a"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"a"},"and_chr":{"38":"a"},"and_ff":{"32":"a"},"ie_mob":{"10":"a"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":3.51,"usage_perc_a":77.62,"ucprefix":false,"parent":"","keywords":"input,datepicker","ie_id":"","chrome_id":""},"html5semantic":{"title":"New semantic elements","description":"HTML5 offers some new elements, primarily for semantic purposes. The elements include: section, article, aside, header, footer, nav, figure, figcaption, time, mark, main.","spec":"https://html.spec.whatwg.org/multipage/semantics.html#sections","status":"wd","links":[{"url":"https://blog.whatwg.org/supporting-new-elements-in-ie","title":"Workaround for IE"},{"url":"https://blog.whatwg.org/styling-ie-noscript","title":"Alternate workaround"},{"url":"http://oli.jp/2009/html5-structure3/","title":"Article on structural elements"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/dom.js#dom-html5-elements","title":"has.js test"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"y #1","10":"y #1","11":"y #1"},"firefox":{"2":"n","3":"a #1","3.5":"a #1","3.6":"a #1","4":"y #1","5":"y #1","6":"y #1","7":"y #1","8":"y #1","9":"y #1","10":"y #1","11":"y #1","12":"y #1","13":"y #1","14":"y #1","15":"y #1","16":"y #1","17":"y #1","18":"y #1","19":"y #1","20":"y #1","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"a #1","5":"a #1","6":"y #1","7":"y #1","8":"y #1","9":"y #1","10":"y #1","11":"y #1","12":"y #1","13":"y #1","14":"y #1","15":"y #1","16":"y #1","17":"y #1","18":"y #1","19":"y #1","20":"y #1","21":"y #1","22":"y #1","23":"y #1","24":"y #1","25":"y #1","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"a #1","3.2":"a #1","4":"a #1","5":"y #1","5.1":"y #1","6":"y #1","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"a #1","9.5-9.6":"a #1","10.0-10.1":"a #1","10.5":"a #1","10.6":"a #1","11":"a #1","11.1":"y #1","11.5":"y #1","11.6":"y #1","12":"y #1","12.1":"y #1","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"a #1","4.0-4.1":"y #1","4.2-4.3":"y #1","5.0-5.1":"y #1","6.0-6.1":"y #1","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"a #1"},"android":{"2.1":"a #1","2.2":"y #1","2.3":"y #1","3":"y #1","4":"y #1","4.1":"y #1","4.2-4.3":"y #1","4.4":"y","4.4.3":"y"},"bb":{"7":"y #1","10":"y #1"},"op_mob":{"10":"a #1","11":"y #1","11.1":"y #1","11.5":"y #1","12":"y #1","12.1":"y #1","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y #1"},"and_uc":{"9.9":"y #1"}},"notes":"Partial support refers to missing the default styling. This is easily taken care of by using display:block for all new elements (except time and mark, these should be display:inline anyway). IE11 and older versions of other browsers do not support the <main> element.","notes_by_num":{"1":"Does not include support for the <main> element "},"usage_perc_y":88.55,"usage_perc_a":3.52,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"offline-apps":{"title":"Offline web applications","description":"Method of defining web page files to be cached using a cache manifest file, allowing them to work offline on subsequent visits to the page","spec":"https://html.spec.whatwg.org/multipage/browsers.html#offline","status":"wd","links":[{"url":"http://www.sitepoint.com/offline-web-application-tutorial/","title":"Sitepoint tutorial"},{"url":"http://diveintohtml5.info/offline.html","title":"Dive Into HTML5 article"},{"url":"http://hacks.mozilla.org/2010/01/offline-web-applications/","title":"Mozilla Hacks article/demo"},{"url":"http://docs.webplatform.org/wiki/apis/appcache/ApplicationCache","title":"WebPlatform Docs"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"n","10":"y","11":"y"},"firefox":{"2":"p","3":"a","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"p","3.2":"p","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"p","10.5":"p","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":86.44,"usage_perc_a":0.06,"ucprefix":false,"parent":"","keywords":"appcache,app cache,application cache,online","ie_id":"applicationcache","chrome_id":"6192449487634432"},"webworkers":{"title":"Web Workers","description":"Method of running scripts in the background, isolated from the web page","spec":"http://www.w3.org/TR/workers/","status":"cr","links":[{"url":"https://developer.mozilla.org/En/Using_web_workers","title":"MDN article"},{"url":"http://nerget.com/rayjs-mt/rayjs.html","title":"Web Worker demo"},{"url":"http://code.google.com/p/ie-web-worker/","title":"Polyfill for IE (single threaded)"},{"url":"http://net.tutsplus.com/tutorials/javascript-ajax/getting-started-with-web-workers/","title":"Tutorial"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"p","10":"y","11":"y"},"firefox":{"2":"p","3":"p","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"p","3.2":"p","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"p","10.5":"p","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"p","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":81.32,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"fontface":{"title":"@font-face Web fonts","description":"Method of displaying fonts downloaded from websites","spec":"http://www.w3.org/TR/css3-webfonts/","status":"cr","links":[{"url":"http://webfonts.info","title":"News and information site"},{"url":"http://en.wikipedia.org/wiki/Web_typography","title":"Wikipedia"},{"url":"http://www.css3files.com/font/","title":"Information page"},{"url":"http://docs.webplatform.org/wiki/css/atrules/@font-face","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"a","6":"a","7":"a","8":"a","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"a","4.0-4.1":"a","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"a","2.3":"a","3":"a","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"a","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Partial support before IE9 refers to only supporting EOT fonts. Safari for iOS 4.1 and below only supports SVG fonts.","notes_by_num":{},"usage_perc_y":87.94,"usage_perc_a":5.17,"ucprefix":false,"parent":"","keywords":"font face","ie_id":"","chrome_id":""},"eot":{"title":"EOT - Embedded OpenType fonts","description":"Type of font that can be derived from a regular font, allowing small files and legal use of high-quality fonts. Usage is restricted by the file being tied to the website","spec":"http://www.w3.org/Submission/EOT/","status":"unoff","links":[{"url":"http://en.wikipedia.org/wiki/Embedded_OpenType","title":"Wikipedia"},{"url":"http://www.microsoft.com/typography/web/embedding/default.aspx","title":"Example pages"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n","38":"n","39":"n","40":"n","41":"n"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Proposal by Microsoft, being considered for W3C standardization.","notes_by_num":{},"usage_perc_y":16.3,"usage_perc_a":0,"ucprefix":false,"parent":"fontface","keywords":"","ie_id":"","chrome_id":""},"woff":{"title":"WOFF - Web Open Font Format","description":"Compressed TrueType/OpenType font that contains information about the font's source.","spec":"http://www.w3.org/TR/WOFF/","status":"rec","links":[{"url":"http://hacks.mozilla.org/2009/10/woff/","title":"Mozilla hacks blog post"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Reported to be supported in some modified versions of the Android 4.0 browser.","notes_by_num":{},"usage_perc_y":83.38,"usage_perc_a":0,"ucprefix":false,"parent":"fontface","keywords":"","ie_id":"","chrome_id":""},"multibackgrounds":{"title":"CSS3 Multiple backgrounds","description":"Method of using multiple images as a background","spec":"http://www.w3.org/TR/css3-background/","status":"cr","links":[{"url":"http://www.css3.info/preview/multiple-backgrounds/","title":"Demo & information page"},{"url":"http://www.css3files.com/background/","title":"Information page"},{"url":"http://docs.webplatform.org/wiki/css/properties/background-image","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":91.95,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"border-image":{"title":"CSS3 Border images","description":"Method of using images for borders","spec":"http://www.w3.org/TR/css3-background/#the-border-image","status":"cr","links":[{"url":"http://www.css3files.com/border/","title":"Information page"},{"url":"http://docs.webplatform.org/wiki/css/properties/border-image","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"y"},"firefox":{"2":"n","3":"n","3.5":"a x","3.6":"a x","4":"a x","5":"a x","6":"a x","7":"a x","8":"a x","9":"a x","10":"a x","11":"a x","12":"a x","13":"a x","14":"a x","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"a x","5":"a x","6":"a x","7":"a x","8":"a x","9":"a x","10":"a x","11":"a x","12":"a x","13":"a x","14":"a x","15":"y x","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"a x","3.2":"a x","4":"a x","5":"a x","5.1":"a x","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"a","10.6":"a","11":"a x","11.1":"a x","11.5":"a x","11.6":"a x","12":"a x","12.1":"a x","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"a x","4.0-4.1":"a x","4.2-4.3":"a x","5.0-5.1":"a x","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"a x","2.2":"a x","2.3":"a x","3":"a x","4":"a x","4.1":"a x","4.2-4.3":"a x","4.4":"y","4.4.3":"y"},"bb":{"7":"a x","10":"y"},"op_mob":{"10":"n","11":"a x","11.1":"a x","11.5":"a x","12":"a x","12.1":"a x","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y"}},"notes":"Note that both the border-style and border-width must be specified for border-images to work according to spec, though older implementations may not have this requirement. Partial support refers to supporting the shorthand syntax, but not the individual properties (border-image-source, border-image-slice, etc). ","notes_by_num":{},"usage_perc_y":76.42,"usage_perc_a":7.3,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"background-img-opts":{"title":"CSS3 Background-image options","description":"New properties to affect background images, including background-clip, background-origin and background-size","spec":"http://www.w3.org/TR/css3-background/#backgrounds","status":"cr","links":[{"url":"http://www.standardista.com/css3/css3-background-properties","title":"Detailed compatibility tables and demos"},{"url":"http://www.css3files.com/background/","title":"Information page"},{"url":"https://github.com/louisremi/background-size-polyfill","title":"Polyfill for IE7-8"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"a x","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"a","3.2":"a","4":"a","5":"a","5.1":"a","6":"a","6.1":"a","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"a x","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"a","4.0-4.1":"a","4.2-4.3":"a","5.0-5.1":"a","6.0-6.1":"a","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"a"},"android":{"2.1":"a x","2.2":"y x","2.3":"y x","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Partial support in Opera Mini refers to not supporting background sizing or background attachments. However Opera Mini 7.5 supports background sizing (including cover and contain values).\r\n\r\nPartial support in Safari 6 refers to not supporting background sizing offset from edges syntax.","notes_by_num":{},"usage_perc_y":86.85,"usage_perc_a":5.13,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"css-table":{"title":"CSS Table display","description":"Method of displaying elements as tables, rows, and cells","spec":"http://www.w3.org/TR/CSS21/tables.html","status":"rec","links":[{"url":"http://www.onenaught.com/posts/201/use-css-displaytable-for-layout","title":"Blog post on usage"}],"categories":["CSS2"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"y","9":"y","10":"y","11":"y"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":96.04,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"display:table, display: table,table-cell,table-row,table-layout","ie_id":"","chrome_id":""},"css-gencontent":{"title":"CSS Generated content for pseudo-elements","description":"Method of displaying text or images before or after the given element's contents using the ::before and ::after pseudo-elements. All browsers with support also support the `attr()` notation in the `content` property. ","spec":"http://www.w3.org/TR/CSS21/generate.html","status":"rec","links":[{"url":"http://www.westciv.com/style_master/academy/css_tutorial/advanced/generated_content.html","title":"Guide on usage"},{"url":"https://dev.opera.com/articles/view/css-generated-content-techniques/","title":"Dev.Opera article"},{"url":"http://docs.webplatform.org/wiki/css/generated_and_replaced_content","title":"WebPlatform Docs"}],"categories":["CSS2","CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"a","9":"y","10":"y","11":"y"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"IE8 only supports the single-colon CSS 2.1 syntax (i.e. :pseudo-class). It does not support the double-colon CSS3 syntax (i.e. ::pseudo-element)\r\n\r\nFor content to appear in pseudo-elements, the `content` property must be set (but may be an empty string).","notes_by_num":{},"usage_perc_y":92.08,"usage_perc_a":3.96,"ucprefix":false,"parent":"","keywords":"before,after","ie_id":"","chrome_id":""},"css-fixed":{"title":"CSS position:fixed","description":"Method of keeping an element in a fixed location regardless of scroll position","spec":"http://www.w3.org/TR/CSS21/visuren.html#fixed-positioning","status":"rec","links":[{"url":"http://www.css-101.org/fixed-positioning/05.php","title":"Workaround for IE6"},{"url":"http://bradfrostweb.com/blog/mobile/fixed-position/","title":"Article on mobile support"},{"url":"http://docs.webplatform.org/wiki/css/properties/position","title":"WebPlatform Docs"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"p","7":"y","8":"y","9":"y","10":"y","11":"y"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"a","6.0-6.1":"a","7.0-7.1":"a","8":"a"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"a","2.2":"a","2.3":"a","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Only works in Android 2.2+ by using the following meta tag: <meta name=\"viewport\" content=\"width=device-width, user-scalable=no\">. Partial support in iOS Safari refers to [buggy behavior](http://remysharp.com/2012/05/24/issues-with-position-fixed-scrolling-on-ios/).","notes_by_num":{},"usage_perc_y":84.7,"usage_perc_a":8.32,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"hashchange":{"title":"Hashchange event","description":"Event triggered in JavaScript when the URL's hash has changed (for example: page.html#foo to page.html#bar) ","spec":"https://html.spec.whatwg.org/multipage/browsers.html#the-hashchangeevent-interface","status":"cr","links":[{"url":"https://developer.mozilla.org/en/DOM/window.onhashchange","title":"MDN article"},{"url":"http://msdn.microsoft.com/en-us/library/cc288209(VS.85).aspx","title":"MSDN article"},{"url":"http://www.quirksmode.org/dom/events/tests/hashchange.html","title":"Simple demo"},{"url":"http://github.com/3nr1c/jUri.js","title":"Polyfill"},{"url":"http://docs.webplatform.org/wiki/dom/Element/hashchange","title":"WebPlatform Docs"}],"categories":["HTML5","JS API"],"stats":{"ie":{"5.5":"p","6":"p","7":"p","8":"y","9":"y","10":"y","11":"y"},"firefox":{"2":"p","3":"p","3.5":"p","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"p","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"p","3.2":"p","4":"p","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"p","9.5-9.6":"p","10.0-10.1":"p","10.5":"p","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"p","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":92.65,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"onhashchange,HashChangeEvent","ie_id":"","chrome_id":""},"css-sel2":{"title":"CSS 2.1 selectors","description":"Basic CSS selectors including: `*` (universal selector), `>` (child selector), `:first-child`, `:link`, `:visited`, `:active`, `:hover`, `:focus`, `:lang()`, `+` (adjacent sibling selector), `[attr]`, `[attr=\"val\"]`, `[attr~=\"val\"]`, `[attr|=\"bar\"]`, `.foo` (class selector), `#foo` (id selector)","spec":"http://www.w3.org/TR/CSS21/selector.html","status":"rec","links":[{"url":"http://www.quirksmode.org/css/contents.html","title":"Detailed support information"},{"url":"http://www.yourhtmlsource.com/stylesheets/advancedselectors.html","title":"Examples of advanced selectors"},{"url":"http://selectivizr.com","title":"Selectivizr: Polyfill for IE6-8"},{"url":"http://docs.webplatform.org/wiki/css/selectors","title":"WebPlatform Docs"}],"categories":["CSS2"],"stats":{"ie":{"5.5":"n","6":"p","7":"y","8":"y","9":"y","10":"y","11":"y"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":96.14,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"css-sel3":{"title":"CSS3 selectors","description":"Advanced element selection using selectors including: `[foo^=\"bar\"]`, `[foo$=\"bar\"]`, `[foo*=\"bar\"]`, `:root`, `:nth-child()`,  `:nth-last-child()`, `nth-of-type`, `nth-last-of-type()`, `:last-child`, `:first-of-type`, `:last-of-type`, `:only-child`, `:only-of-type`, `:empty`, `:target`, `:enabled`, `:disabled`, `:checked`, `:not()`, `~` (general sibling)","spec":"http://www.w3.org/TR/css3-selectors/","status":"rec","links":[{"url":"http://www.quirksmode.org/css/selectors/","title":"Detailed support information"},{"url":"http://www.css3.info/selectors-test/","title":"Automated CSS3 selector test"},{"url":"http://selectivizr.com","title":"Selectivizr: Polyfill for IE6-8"},{"url":"http://docs.webplatform.org/wiki/css/selectors","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"p","7":"a","8":"a","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"IE7 and IE8 support only these CSS3 selectors: General siblings (`element1~element2`) and Attribute selectors `[attr^=val]`, `[attr$=val]`, and `[attr*=val]`","notes_by_num":{},"usage_perc_y":92,"usage_perc_a":4.06,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"css-textshadow":{"title":"CSS3 Text-shadow","description":"Method of applying one or more shadow or blur effects to text","spec":"http://www.w3.org/TR/css-text-decor-3/#text-shadow-property","status":"wd","links":[{"url":"http://hacks.mozilla.org/2009/06/text-shadow/","title":"Mozilla hacks article"},{"url":"http://ie.microsoft.com/testdrive/Graphics/hands-on-css3/hands-on_text-shadow.htm","title":"Live editor"},{"url":"http://www.css3files.com/shadow/#textshadow","title":"Information page"},{"url":"http://docs.webplatform.org/wiki/css/properties/text-shadow","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y #1","11":"y #1"},"firefox":{"2":"n","3":"n","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"a","3.2":"a","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"a"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"a","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y #1"},"and_uc":{"9.9":"y"}},"notes":"Opera Mini ignores the blur-radius set, so no blur effect is visible. Text-shadow behavior can be somewhat emulated in older IE versions using the non-standard \"dropshadow\" or \"glow\" filters. ","notes_by_num":{"1":"IE 10+ supports a fourth length value for the shadow's \"spread\". This is not (yet) part of the specification. "},"usage_perc_y":86.37,"usage_perc_a":3.24,"ucprefix":false,"parent":"","keywords":"text shadow","ie_id":"","chrome_id":""},"css-boxshadow":{"title":"CSS3 Box-shadow","description":"Method of displaying an inner or outer shadow effect to elements","spec":"http://www.w3.org/TR/css3-background/#box-shadow","status":"cr","links":[{"url":"https://developer.mozilla.org/En/CSS/-moz-box-shadow","title":"MDN article"},{"url":"http://westciv.com/tools/boxshadows/index.html","title":"Live editor"},{"url":"http://tests.themasta.com/blogstuff/boxshadowdemo.html","title":"Demo of various effects"},{"url":"http://www.css3files.com/shadow/","title":"Information page"},{"url":"http://docs.webplatform.org/wiki/css/properties/box-shadow","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"y x","3.6":"y x","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"a x","3.2":"a x","4":"a x","5":"y x","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"a x","4.0-4.1":"y x","4.2-4.3":"y x","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"a x","2.2":"a x","2.3":"a x","3":"a x","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y x","10":"y"},"op_mob":{"10":"n","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Can be partially emulated in older IE versions using the non-standard \"shadow\" filter. Partial support in Safari, iOS Safari and Android Browser refers to missing \"inset\" and blur radius value support.","notes_by_num":{},"usage_perc_y":87.92,"usage_perc_a":0.93,"ucprefix":false,"parent":"","keywords":"box-shadows,boxshadows,box shadow,shaow","ie_id":"","chrome_id":""},"css3-colors":{"title":"CSS3 Colors","description":"Method of describing colors using Hue, Saturation and Lightness (hsl()) rather than just RGB, as well as allowing alpha-transparency with rgba() and hsla().","spec":"http://www.w3.org/TR/css3-color/","status":"rec","links":[{"url":"https://dev.opera.com/articles/view/color-in-opera-10-hsl-rgb-and-alpha-transparency/","title":"Dev.Opera article"},{"url":"http://www.css3files.com/color/","title":"Information page"},{"url":"http://docs.webplatform.org/wiki/css/color#RGBA_Notation","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"a","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"a","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":92.06,"usage_perc_a":0.02,"ucprefix":false,"parent":"","keywords":"rgb,hsl,rgba,hsla","ie_id":"","chrome_id":""},"css3-boxsizing":{"title":"CSS3 Box-sizing","description":"Method of specifying whether or not an element's borders and padding should be included in size units","spec":"http://www.w3.org/TR/css3-ui/#box-sizing","status":"wd","links":[{"url":"https://developer.mozilla.org/En/CSS/Box-sizing","title":"MDN article"},{"url":"http://www.456bereastreet.com/archive/201104/controlling_width_with_css3_box-sizing/","title":"Blog post"},{"url":"https://github.com/Schepp/box-sizing-polyfill","title":"Polyfill for IE"},{"url":"http://css-tricks.com/box-sizing/","title":"CSS Tricks"},{"url":"http://docs.webplatform.org/wiki/css/properties/box-sizing","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"p","6":"p","7":"p","8":"a","9":"a","10":"a","11":"a"},"firefox":{"2":"y x","3":"y x","3.5":"y x","3.6":"y x","4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"a x","5":"a x","6":"a x","7":"a x","8":"a x","9":"a x","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"a","35":"a","36":"a","37":"a","38":"a","39":"a","40":"a","41":"a"},"safari":{"3.1":"a x","3.2":"a x","4":"a x","5":"a x","5.1":"a","6":"a","6.1":"a","7":"a","7.1":"a","8":"a"},"opera":{"9":"n","9.5-9.6":"a","10.0-10.1":"a","10.5":"a","10.6":"a","11":"a","11.1":"a","11.5":"a","11.6":"a","12":"a","12.1":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a"},"ios_saf":{"3.2":"a x","4.0-4.1":"a x","4.2-4.3":"a x","5.0-5.1":"a","6.0-6.1":"a","7.0-7.1":"a","8":"a"},"op_mini":{"5.0-8.0":"a"},"android":{"2.1":"a x","2.2":"a x","2.3":"a x","3":"a x","4":"a","4.1":"a","4.2-4.3":"a","4.4":"a","4.4.3":"a"},"bb":{"7":"a x","10":"a"},"op_mob":{"10":"a","11":"a","11.1":"a","11.5":"a","12":"a","12.1":"a","24":"a"},"and_chr":{"38":"a"},"and_ff":{"32":"y"},"ie_mob":{"10":"a"},"and_uc":{"9.9":"a"}},"notes":"Partial support refers to supporting only the `content-box` and `border-box` values, not `padding-box` (which was added to the spec later).","notes_by_num":{},"usage_perc_y":13.33,"usage_perc_a":82.7,"ucprefix":false,"parent":"","keywords":"border-box,content-box,padding-box","ie_id":"","chrome_id":""},"css-mediaqueries":{"title":"CSS3 Media Queries","description":"Method of applying styles based on media information. Includes things like page and device dimensions","spec":"http://www.w3.org/TR/css3-mediaqueries/","status":"rec","links":[{"url":"http://ie.microsoft.com/testdrive/HTML5/85CSS3_MediaQueries/","title":"IE demo page with information"},{"url":"http://webdesignerwall.com/tutorials/responsive-design-with-css3-media-queries","title":"Media Queries tutorial"},{"url":"https://github.com/scottjehl/Respond","title":"Polyfill for IE"},{"url":"http://docs.webplatform.org/wiki/css/atrules/@media","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"p","6":"p","7":"p","8":"p","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"a","3.2":"a","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Incomplete support by older webkit browsers refers to only acknowledging different media rules on page reload","notes_by_num":{},"usage_perc_y":91.99,"usage_perc_a":0.01,"ucprefix":false,"parent":"","keywords":"@media","ie_id":"","chrome_id":""},"multicolumn":{"title":"CSS3 Multiple column layout","description":"Method of flowing information in multiple columns","spec":"http://www.w3.org/TR/css3-multicol/","status":"cr","links":[{"url":"https://dev.opera.com/articles/view/css3-multi-column-layout/","title":"Dev.Opera article"},{"url":"http://webdesign.tutsplus.com/tutorials/htmlcss-tutorials/an-introduction-to-the-css3-multiple-column-layout-module/","title":"Introduction page"},{"url":"http://docs.webplatform.org/wiki/css/properties/column-width","title":"WebPlatform Docs"},{"url":"https://github.com/BetleyWhitehorne/CSS3MultiColumn","title":"Polyfill"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"a x","3":"a x","3.5":"a x","3.6":"a x","4":"a x","5":"a x","6":"a x","7":"a x","8":"a x","9":"a x","10":"a x","11":"a x","12":"a x","13":"a x","14":"a x","15":"a x","16":"a x","17":"a x","18":"a x","19":"a x","20":"a x","21":"a x","22":"a x","23":"a x","24":"a x","25":"a x","26":"a x","27":"a x","28":"a x","29":"a x","30":"a x","31":"a x","32":"a x","33":"a x","34":"a x","35":"a x","36":"a x"},"chrome":{"4":"a x","5":"a x","6":"a x","7":"a x","8":"a x","9":"a x","10":"a x","11":"a x","12":"a x","13":"a x","14":"a x","15":"a x","16":"a x","17":"a x","18":"a x","19":"a x","20":"a x","21":"a x","22":"a x","23":"a x","24":"a x","25":"a x","26":"a x","27":"a x","28":"a x","29":"a x","30":"a x","31":"a x","32":"a x","33":"a x","34":"a x","35":"a x","36":"a x","37":"a x","38":"a x","39":"a x","40":"a x","41":"a x"},"safari":{"3.1":"a x","3.2":"a x","4":"a x","5":"a x","5.1":"a x","6":"a x","6.1":"a x","7":"a x","7.1":"a x","8":"a x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"a x","16":"a x","17":"a x","18":"a x","19":"a x","20":"a x","21":"a x","22":"a x","23":"a x","24":"a x","25":"a x","26":"a x"},"ios_saf":{"3.2":"a x","4.0-4.1":"a x","4.2-4.3":"a x","5.0-5.1":"a x","6.0-6.1":"a x","7.0-7.1":"a x","8":"a x"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"a x","2.2":"a x","2.3":"a x","3":"a x","4":"a x","4.1":"a x","4.2-4.3":"a x","4.4":"a x","4.4.3":"a x"},"bb":{"7":"a x","10":"a x"},"op_mob":{"10":"n","11":"n","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"a x"},"and_chr":{"38":"a x"},"and_ff":{"32":"a x"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"a x"}},"notes":"Partial support refers to not supporting the `break-before`, `break-after`, `break-inside` properties. Webkit browsers do have equivalent support for the non-standard `-webkit-column-break-*` properties while Firefox supports `page-break-*` to accomplish the same result.","notes_by_num":{},"usage_perc_y":13.56,"usage_perc_a":76.06,"ucprefix":false,"parent":"","keywords":"column-count","ie_id":"multicolumnfullsupport","chrome_id":"6526151266664448"},"border-radius":{"title":"CSS3 Border-radius (rounded corners)","description":"Method of making the border corners round","spec":"http://www.w3.org/TR/css3-background/#the-border-radius","status":"cr","links":[{"url":"http://border-radius.com","title":"Border-radius CSS Generator"},{"url":"http://muddledramblings.com/table-of-css3-border-radius-compliance","title":"Detailed compliance table"},{"url":"http://www.css3files.com/border/#borderradius","title":"Information page"},{"url":"http://css3pie.com/","title":"Polyfill which includes border-radius"},{"url":"http://docs.webplatform.org/wiki/css/properties/border-radius","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"a x","3":"y x","3.5":"y x","3.6":"y x","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y x","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y x","3.2":"y x","4":"y x","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y x","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y x","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":88.91,"usage_perc_a":0.01,"ucprefix":false,"parent":"","keywords":"roundedcorners, border radius,-moz-border-radius","ie_id":"","chrome_id":""},"transforms2d":{"title":"CSS3 Transforms","description":"Method of transforming an element including rotating, scaling, etc.","spec":"http://www.w3.org/TR/css3-2d-transforms/","status":"wd","links":[{"url":"http://www.westciv.com/tools/transforms/","title":"Live editor"},{"url":"https://developer.mozilla.org/en/CSS/-moz-transform","title":"MDN article"},{"url":"http://www.webresourcesdepot.com/cross-browser-css-transforms-csssandpaper/","title":"Workaround script for IE"},{"url":"http://www.css3files.com/transform/","title":"Information page"},{"url":"http://www.useragentman.com/IETransformsTranslator/","title":"Converter for IE"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/css.js#css-transform","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/css/transforms/transform","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"y x","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"y x","3.6":"y x","4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y x","3.2":"y x","4":"y x","5":"y x","5.1":"y x","6":"y x","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"y x","10.6":"y x","11":"y x","11.1":"y x","11.5":"y x","11.6":"y x","12":"y x","12.1":"y","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y x","4.0-4.1":"y x","4.2-4.3":"y x","5.0-5.1":"y x","6.0-6.1":"y x","7.0-7.1":"y x","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y x","2.2":"y x","2.3":"y x","3":"y x","4":"y x","4.1":"y x","4.2-4.3":"y x","4.4":"y x","4.4.3":"y x"},"bb":{"7":"y x","10":"y x"},"op_mob":{"10":"n","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y x"}},"notes":"The scale transform can be emulated in IE < 9 using Microsoft's \"zoom\" extension, others are (not easily) possible using the MS Matrix filter","notes_by_num":{},"usage_perc_y":88.85,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"transformation,translate,rotation,rotate,scale,css-transforms","ie_id":"transforms","chrome_id":"6437640580628480"},"use-strict":{"title":"ECMAScript 5 Strict Mode","description":"Method of placing code in a \"strict\" operating context.","spec":"http://ecma-international.org/ecma-262/5.1/#sec-14.1","status":"other","links":[{"url":"http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/","title":"Information page"},{"url":"http://javascriptweblog.wordpress.com/2011/05/03/javascript-strict-mode/","title":"Article with test suite"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"a","5.1":"a","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Partial support in older Safari refers to strict mode still accepting a lot of JS that should be considered invalid.","notes_by_num":{},"usage_perc_y":84.36,"usage_perc_a":0.74,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"transforms3d":{"title":"CSS3 3D Transforms","description":"Method of transforming an element in the third dimension using the `transform` property. Includes support for the `perspective` property to set the perspective in z-space and the `backface-visibility` property to toggle display of the reverse side of a 3D-transformed element.","spec":"http://www.w3.org/TR/css3-3d-transforms/","status":"wd","links":[{"url":"http://css3.bradshawenterprises.com/flip/","title":"Multi-browser demo"},{"url":"http://hacks.mozilla.org/2011/10/css-3d-transformations-in-firefox-nightly/","title":"Mozilla hacks article"},{"url":"http://thewebrocks.com/demos/3D-css-tester/","title":"3D CSS Tester"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/css.js#css-transform","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/css/transforms/transform","title":"WebPlatform Docs"},{"url":"http://desandro.github.io/3dtransforms/","title":"Intro to CSS 3D transforms"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"a","11":"a"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"y x","5":"y x","5.1":"y x","6":"y x","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y x","4.0-4.1":"y x","4.2-4.3":"y x","5.0-5.1":"y x","6.0-6.1":"y x","7.0-7.1":"y x","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"y x","4":"y x","4.1":"y x","4.2-4.3":"y x","4.4":"y x","4.4.3":"y x"},"bb":{"7":"y x","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"a"},"and_uc":{"9.9":"y x"}},"notes":"Partial support in IE refers to not supporting [the transform-style: preserve-3d property](http://msdn.microsoft.com/en-us/library/ie/hh673529%28v=vs.85%29.aspx#the_ms_transform_style_property). This prevents nesting 3D transformed elements.","notes_by_num":{},"usage_perc_y":74.67,"usage_perc_a":10.1,"ucprefix":false,"parent":"","keywords":"css 3d,3dtransforms,translate3d,backface visibility,perspective","ie_id":"transforms,csstransformspreserve3d","chrome_id":"6437640580628480"},"sharedworkers":{"title":"Shared Web Workers","description":"Method of allowing multiple scripts to communicate with a single web worker.","spec":"http://www.w3.org/TR/workers/#shared-workers-introduction","status":"cr","links":[{"url":"http://www.sitepoint.com/javascript-shared-web-workers-html5/","title":"Sitepoint article"},{"url":"http://greenido.wordpress.com/2011/11/03/web-workers-part-3-out-of-3-shared-wrokers/","title":"Blog post"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"y","5.1":"y","6":"y","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"u","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":50.37,"usage_perc_a":0,"ucprefix":false,"parent":"webworkers","keywords":"shared worker","ie_id":"","chrome_id":""},"css-hyphens":{"title":"CSS Hyphenation","description":"Method of controlling when words at the end of lines should be hyphenated using the \"hyphens\" property.","spec":"http://www.w3.org/TR/css3-text/#hyphenation","status":"wd","links":[{"url":"https://developer.mozilla.org/en/CSS/hyphens","title":"MDN article"},{"url":"http://blog.fontdeck.com/post/9037028497/hyphens","title":"Blog post"},{"url":"http://docs.webplatform.org/wiki/css/properties/hyphens","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y x","11":"y x"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n","38":"n","39":"n","40":"n","41":"n"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"y x","6":"y x","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"y x","5.0-5.1":"y x","6.0-6.1":"y x","7.0-7.1":"y x","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y x"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"a x"}},"notes":"Chrome 29- and Android 4.0 Browser support \"-webkit-hyphens: none\", but not the \"auto\" property. Chrome 30+ doesn't support it either.","notes_by_num":{},"usage_perc_y":33.47,"usage_perc_a":3.11,"ucprefix":false,"parent":"","keywords":"hyphen,shy","ie_id":"","chrome_id":""},"css-transitions":{"title":"CSS3 Transitions","description":"Simple method of animating certain properties of an element","spec":"http://www.w3.org/TR/css3-transitions/","status":"wd","links":[{"url":"http://www.webdesignerdepot.com/2010/01/css-transitions-101/","title":"Article on usage"},{"url":"http://www.css3files.com/transition/","title":"Information page"},{"url":"http://www.the-art-of-web.com/css/timing-function/","title":"Examples on timing functions"},{"url":"http://www.opera.com/docs/specs/presto2.12/css/transitions/","title":"Animation of property types support in Opera"},{"url":"http://docs.webplatform.org/wiki/css/properties/transition","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y x","3.2":"y x","4":"y x","5":"y x","5.1":"y x","6":"y x","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"y x","10.6":"y x","11":"y x","11.1":"y x","11.5":"y x","11.6":"y x","12":"y x","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y x","4.0-4.1":"y x","4.2-4.3":"y x","5.0-5.1":"y x","6.0-6.1":"y x","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y x","2.2":"y x","2.3":"y x","3":"y x","4":"y x","4.1":"y x","4.2-4.3":"y x","4.4":"y","4.4.3":"y"},"bb":{"7":"y x","10":"y x"},"op_mob":{"10":"y x","11":"y x","11.1":"y x","11.5":"y x","12":"y x","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y x"}},"notes":"","notes_by_num":{},"usage_perc_y":86.32,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"css transition","ie_id":"","chrome_id":""},"font-feature":{"title":"Font feature settings","description":"Method of applying advanced typographic and language-specific font features to supported OpenType fonts.","spec":"http://w3.org/TR/css3-fonts/#font-rend-props","status":"wd","links":[{"url":"http://ie.microsoft.com/testdrive/Graphics/opentype/","title":"Demo pages (IE/Firefox only)"},{"url":"http://hacks.mozilla.org/2010/11/firefox-4-font-feature-support/","title":"Mozilla hacks article"},{"url":"http://html5accessibility.com/","title":"Detailed tables on accessability support"},{"url":"http://docs.webplatform.org/wiki/css/properties/font-feature-settings","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"a x","5":"a x","6":"a x","7":"a x","8":"a x","9":"a x","10":"a x","11":"a x","12":"a x","13":"a x","14":"a x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"a x","17":"a x","18":"a x","19":"a x","20":"a x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x","37":"y x","38":"y x","39":"y x","40":"y x","41":"y x"},"safari":{"3.1":"n","3.2":"n","4":"a","5":"a","5.1":"a","6":"a","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x"},"ios_saf":{"3.2":"a","4.0-4.1":"a","4.2-4.3":"a","5.0-5.1":"a","6.0-6.1":"a","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y x","4.4.3":"y x"},"bb":{"7":"n","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y x"},"and_chr":{"38":"y x"},"and_ff":{"32":"y x"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y x"}},"notes":"Partial support in older Firefox versions refers to using an older syntax. Partial support in older Chrome versions refers to lacking support in Mac OS X. ","notes_by_num":{},"usage_perc_y":68.46,"usage_perc_a":1.84,"ucprefix":false,"parent":"","keywords":"font-feature,font-feature-settings,kern,kerning,font-variant-alternates,ligatures,font-variant-ligatures","ie_id":"","chrome_id":""},"css-animation":{"title":"CSS3 Animation","description":"Complex method of animating certain properties of an element","spec":"http://www.w3.org/TR/css3-animations/","status":"wd","links":[{"url":"http://robertnyman.com/2010/05/06/css3-animations/","title":"Blog post on usage"},{"url":"http://www.css3files.com/animation/","title":"Information page"},{"url":"http://docs.webplatform.org/wiki/css/properties/animations","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x","37":"y x","38":"y x","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"y x","5":"y x","5.1":"y x","6":"y x","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"y x","12.1":"y","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y"},"ios_saf":{"3.2":"y x","4.0-4.1":"y x","4.2-4.3":"y x","5.0-5.1":"y x","6.0-6.1":"y x","7.0-7.1":"y x","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"a x","2.2":"a x","2.3":"a x","3":"a x","4":"y x","4.1":"y x","4.2-4.3":"y x","4.4":"y x","4.4.3":"y x"},"bb":{"7":"y x","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"y","24":"y x"},"and_chr":{"38":"y x"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y x"}},"notes":"Partial support in Android browser refers to buggy behavior in different scenarios.","notes_by_num":{},"usage_perc_y":85.39,"usage_perc_a":0.83,"ucprefix":false,"parent":"","keywords":"animations,css-animations,keyframe,keyframes","ie_id":"","chrome_id":""},"css-gradients":{"title":"CSS Gradients","description":"Method of defining a linear or radial color gradient as a CSS image.","spec":"http://www.w3.org/TR/css3-images/","status":"cr","links":[{"url":"http://www.colorzilla.com/gradient-editor/","title":"Cross-browser editor"},{"url":"http://www.css3files.com/gradient/","title":"Information page"},{"url":"http://css3pie.com/","title":"Tool to emulate support in IE"},{"url":"http://docs.webplatform.org/wiki/css/functions/linear-gradient","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"y x","4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"a x","5":"a x","6":"a x","7":"a x","8":"a x","9":"a x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"a x","5":"a x","5.1":"y x","6":"y x","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"a x","11.5":"a x","11.6":"y x","12":"y x","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"a x","4.0-4.1":"a x","4.2-4.3":"a x","5.0-5.1":"y x","6.0-6.1":"y x","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"a x","2.2":"a x","2.3":"a x","3":"a x","4":"y x","4.1":"y x","4.2-4.3":"y x","4.4":"y","4.4.3":"y"},"bb":{"7":"a x","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"a x","11.5":"a x","12":"y x","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y x"}},"notes":"Syntax used by browsers with prefixed support may be incompatible with that for proper support. \r\n\r\nPartial support in Opera 11.10 and 11.50 also refers to only having support for linear gradients.\r\n\r\nSupport can be somewhat emulated in older IE versions using the non-standard \"gradient\" filter. \r\n\r\nFirefox 10+, Opera 11.6+, Chrome 26+ and IE10+ also support the new \"to (side)\" syntax.","notes_by_num":{},"usage_perc_y":85.1,"usage_perc_a":1.29,"ucprefix":false,"parent":"","keywords":"linear,linear-gradient,gradiant","ie_id":"gradients","chrome_id":"5785905063264256"},"css-canvas":{"title":"CSS Canvas Drawings","description":"Method of using HTML5 Canvas as a background image","spec":"http://webkit.org/blog/176/css-canvas-drawing/","status":"unoff","links":[{"url":"http://webkit.org/blog/176/css-canvas-drawing/","title":"Webkit blog post"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"u","35":"u","36":"u"},"chrome":{"4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x","37":"y x","38":"y x","39":"y x","40":"y x","41":"y x"},"safari":{"3.1":"n","3.2":"n","4":"y x","5":"y x","5.1":"y x","6":"y x","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x"},"ios_saf":{"3.2":"y x","4.0-4.1":"y x","4.2-4.3":"y x","5.0-5.1":"y x","6.0-6.1":"y x","7.0-7.1":"y x","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y x","2.2":"y x","2.3":"y x","3":"y x","4":"y x","4.1":"y x","4.2-4.3":"y x","4.4":"y x","4.4.3":"y x"},"bb":{"7":"y x","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y x"},"and_chr":{"38":"y x"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y x"}},"notes":"Proposal by Webkit, being considered for W3C standardization. A similar effect can be achieved in Firefox 4+ using the -moz-element() background property","notes_by_num":{},"usage_perc_y":62.72,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"css-reflections":{"title":"CSS Reflections","description":"Method of displaying a reflection of an element","spec":"http://webkit.org/blog/182/css-reflections/","status":"unoff","links":[{"url":"http://webkit.org/blog/182/css-reflections/","title":"Webkit blog post"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x","37":"y x","38":"y x","39":"y x","40":"y x","41":"y x"},"safari":{"3.1":"n","3.2":"n","4":"y x","5":"y x","5.1":"y x","6":"y x","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x"},"ios_saf":{"3.2":"y x","4.0-4.1":"y x","4.2-4.3":"y x","5.0-5.1":"y x","6.0-6.1":"y x","7.0-7.1":"y x","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y x","2.2":"y x","2.3":"y x","3":"y x","4":"y x","4.1":"y x","4.2-4.3":"y x","4.4":"y x","4.4.3":"y x"},"bb":{"7":"y x","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y x"},"and_chr":{"38":"y x"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Similar effect can be achieved in Firefox 4+ using the -moz-element() background property","notes_by_num":{},"usage_perc_y":59.62,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"box-reflect","ie_id":"","chrome_id":"5627300510957568"},"css-masks":{"title":"CSS Masks","description":"Method of displaying part of an element, using a selected image as a mask","spec":"http://www.w3.org/TR/css-masking/","status":"cr","links":[{"url":"http://docs.webplatform.org/wiki/css/properties/mask","title":"WebPlatform Docs"},{"url":"http://www.html5rocks.com/en/tutorials/masking/adobe/","title":"HTML5 Rocks article"},{"url":"http://thenittygritty.co/css-masking","title":"Detailed blog post"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"a","3.6":"a","4":"a","5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"a","35":"a","36":"a"},"chrome":{"4":"a x","5":"a x","6":"a x","7":"a x","8":"a x","9":"a x","10":"a x","11":"a x","12":"a x","13":"a x","14":"a x","15":"a x","16":"a x","17":"a x","18":"a x","19":"a x","20":"a x","21":"a x","22":"a x","23":"a x","24":"a x","25":"a x","26":"a x","27":"a x","28":"a x","29":"a x","30":"a x","31":"a x","32":"a x","33":"a x","34":"a x","35":"a x","36":"a x","37":"a x","38":"a x","39":"a x","40":"a x","41":"a x"},"safari":{"3.1":"n","3.2":"n","4":"a x","5":"a x","5.1":"a x","6":"a x","6.1":"a x","7":"a x","7.1":"a x","8":"a x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"a x","16":"a x","17":"a x","18":"a x","19":"a x","20":"a x","21":"a x","22":"a x","23":"a x","24":"a x","25":"a x","26":"a x"},"ios_saf":{"3.2":"a x","4.0-4.1":"a x","4.2-4.3":"a x","5.0-5.1":"a x","6.0-6.1":"a x","7.0-7.1":"a x","8":"a x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"a x","2.2":"a x","2.3":"a x","3":"a x","4":"a x","4.1":"a x","4.2-4.3":"a x","4.4":"a x","4.4.3":"a x"},"bb":{"7":"a x","10":"a x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"a x"},"and_chr":{"38":"a x"},"and_ff":{"32":"a"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"a x"}},"notes":"Partial support in WebKit/Blink browsers refers to supporting the mask-image and mask-box-image properties, but lacks support for othe parts of the spec. Partial support in Firefox refers to only support for inline SVG mask elements i.e. mask: url(#foo).","notes_by_num":{},"usage_perc_y":0,"usage_perc_a":75.98,"ucprefix":false,"parent":"","keywords":"","ie_id":"masks","chrome_id":"5381559662149632"},"svg":{"title":"SVG (basic support)","description":"Method of displaying basic Vector Graphics features using the embed or object elements. Refers to the SVG 1.1 spec.","spec":"http://www.w3.org/TR/SVG/","status":"rec","links":[{"url":"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics","title":"Wikipedia"},{"url":"http://www.alistapart.com/articles/using-svg-for-flexible-scalable-and-fun-backgrounds-part-i","title":"A List Apart article"},{"url":"http://svg-wow.org/","title":"SVG showcase site"},{"url":"http://code.google.com/p/svgweb/","title":"SVG Web: Flash-based polyfill"},{"url":"http://svg-edit.googlecode.com","title":"Web-based SVG editor"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/graphics.js#svg","title":"has.js test"}],"categories":["SVG"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"y","10":"y","11":"y"},"firefox":{"2":"a","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"a","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"a","4":"a","4.1":"a","4.2-4.3":"a","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Partial support in Android 4 refers to not supporting masking.","notes_by_num":{},"usage_perc_y":86.95,"usage_perc_a":4.31,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"svg-css":{"title":"SVG in CSS backgrounds","description":"Method of using SVG images as CSS backgrounds","spec":"http://www.w3.org/TR/css3-background/#background-image","status":"cr","links":[{"url":"http://designfestival.com/a-farewell-to-css3-gradients/","title":"Tutorial for advanced effects"}],"categories":["CSS3","SVG"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"a","5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"a","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"a","4":"a","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"a","4.0-4.1":"a","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"a"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"a","11":"a","11.1":"a","11.5":"a","12":"a","12.1":"a","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Partial support in older Firefox and Opera Mini/Mobile refers to SVG images being blurry when scaled. Partial support in iOS Safari and older Safari versions refers to failing to support tiling or the background-position property.","notes_by_num":{},"usage_perc_y":86.76,"usage_perc_a":4.29,"ucprefix":false,"parent":"","keywords":"svg-in-css,svgincss,css-svg","ie_id":"","chrome_id":""},"svg-smil":{"title":"SVG SMIL animation","description":"Method of using animation elements to animate SVG images","spec":"http://www.w3.org/TR/SVG/animate.html","status":"rec","links":[{"url":"http://svg-wow.org/blog/category/animation/","title":"Examples on SVG WOW"},{"url":"https://developer.mozilla.org/en/SVG/SVG_animation_with_SMIL","title":"MDN article"},{"url":"http://leunen.me/fakesmile/","title":"JS library to support SMIL in SVG"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/graphics.js#svg-smil","title":"has.js test"},{"url":"https://github.com/madsgraphics/SVGEventListener","title":"Polyfill for SMIL animate events on SVG"}],"categories":["SVG"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"p","10":"p","11":"p"},"firefox":{"2":"p","3":"p","3.5":"p","3.6":"p","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"a","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"p","3.2":"p","4":"a","5":"a","5.1":"a","6":"a","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"a","4.0-4.1":"a","4.2-4.3":"a","5.0-5.1":"a","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"p"},"and_uc":{"9.9":"y"}},"notes":"Partial support in Safari refers to not working in HTML files.","notes_by_num":{},"usage_perc_y":74.33,"usage_perc_a":1.1,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"svg-fonts":{"title":"SVG fonts","description":"Method of using fonts defined as SVG shapes. Considered among a number of browser vendors as a deprecated feature with support being removed in future versions.","spec":"http://www.w3.org/TR/SVG/fonts.html","status":"rec","links":[{"url":"http://jeremie.patonnier.net/post/2011/02/07/Why-are-SVG-Fonts-so-different","title":"Blog post"},{"url":"http://opentype.info/blog/2010/04/13/the-ipad-and-svg-fonts-in-mobile-safari/","title":"Blog post on usage for iPad"}],"categories":["SVG"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"a #1","39":"a #1","40":"a #1","41":"a #1"},"safari":{"3.1":"n","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n #2"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"a #1"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{"1":"Chrome 38 and newer support SVG fonts only on Windows Vista and XP.","2":"Supported in Opera Mini in SVG images only, not in HTML."},"usage_perc_y":54.3,"usage_perc_a":8.01,"ucprefix":false,"parent":"fontface","keywords":"","ie_id":"","chrome_id":"5930075908210688"},"svg-filters":{"title":"SVG filters","description":"Method of using photoshop-like effects on SVG objects including blurring and color manipulation.","spec":"http://www.w3.org/TR/SVG/filters.html","status":"rec","links":[{"url":"http://electricbeach.org/?p=950","title":"Experiments with filter effects"},{"url":"http://svg-wow.org/blog/category/filters/","title":"SVG filter demos"},{"url":"http://docs.webplatform.org/wiki/svg/elements/filter","title":"WebPlatform Docs"}],"categories":["SVG"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"a","6":"a","7":"a","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":83.49,"usage_perc_a":0.05,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"svg-html":{"title":"SVG effects for HTML","description":"Method of using SVG transforms, filters, etc on HTML elements using either CSS or the foreignObject element","spec":"http://www.w3.org/TR/SVG11/extend.html#ForeignObjectElement","status":"wd","links":[{"url":"https://developer.mozilla.org/en/SVG/Tutorial/Other_content_in_SVG","title":"MDN Tutorial"},{"url":"https://developer.mozilla.org/En/Applying_SVG_effects_to_HTML_content","title":"MDN Reference page"},{"url":"https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html","title":"Filter Effects draft"}],"categories":["SVG"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"a","10":"a","11":"a"},"firefox":{"2":"n","3":"a","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"a","5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"a","35":"a","36":"a","37":"a","38":"a","39":"a","40":"a","41":"a"},"safari":{"3.1":"n","3.2":"n","4":"a","5":"a","5.1":"a","6":"a","6.1":"a","7":"a","7.1":"a","8":"a"},"opera":{"9":"a","9.5-9.6":"a","10.0-10.1":"a","10.5":"a","10.6":"a","11":"a","11.1":"a","11.5":"a","11.6":"a","12":"a","12.1":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a"},"ios_saf":{"3.2":"a","4.0-4.1":"a","4.2-4.3":"a","5.0-5.1":"a","6.0-6.1":"a","7.0-7.1":"a","8":"a"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"a","4.4.3":"a"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"a","11":"a","11.1":"a","11.5":"a","12":"a","12.1":"a","24":"a"},"and_chr":{"38":"a"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Partial support refers to lack of filter support or buggy result from effects. A [CSS Filter Effects](https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html) specification is in the works that would replace this method.","notes_by_num":{},"usage_perc_y":13.26,"usage_perc_a":66.91,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"svg-html5":{"title":"Inline SVG in HTML5","description":"Method of using SVG tags directly in HTML documents. Requires HTML5 parser.","spec":"https://html.spec.whatwg.org/multipage/embedded-content.html#svg-0","status":"cr","links":[{"url":"http://hacks.mozilla.org/2010/05/firefox-4-the-html5-parser-inline-svg-speed-and-more/","title":"Mozilla Hacks blog post"},{"url":"http://samples.msdn.microsoft.com/ietestcenter/html5/svghtml_harness.htm?url=SVG_HTML_Elements_001","title":"Test suite"}],"categories":["HTML5","SVG"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"y","10":"y","11":"y"},"firefox":{"2":"p","3":"p","3.5":"p","3.6":"p","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"p","5":"p","6":"p","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"p","3.2":"p","4":"p","5":"p","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"p","9.5-9.6":"p","10.0-10.1":"p","10.5":"p","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"p","4.0-4.1":"p","4.2-4.3":"p","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"p","11":"p","11.1":"p","11.5":"p","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":87.52,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"canvas":{"title":"Canvas (basic support)","description":"Method of generating fast, dynamic graphics using JavaScript","spec":"https://html.spec.whatwg.org/multipage/scripting.html#the-canvas-element","status":"cr","links":[{"url":"https://developer.mozilla.org/en/Canvas_tutorial","title":"Tutorial by Mozilla"},{"url":"http://www.canvasdemos.com/","title":"Showcase site"},{"url":"http://glimr.rubyforge.org/cake/canvas.html","title":"Animation kit "},{"url":"http://diveintohtml5.info/canvas.html","title":"Another tutorial"},{"url":"http://explorercanvas.googlecode.com/","title":"Implementation for Internet Explorer"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/graphics.js#canvas","title":"has.js test"}],"categories":["Canvas","HTML5"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"y","10":"y","11":"y"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"a"},"android":{"2.1":"a","2.2":"a","2.3":"a","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Opera Mini supports the canvas element, but is unable to play animations or run other more complex applications. Android 2.x supports canvas except the toDataURL() function. See http://code.google.com/p/android/issues/detail?id=7901 Some (slow) workarounds are described here: http://stackoverflow.com/q/10488033/841830","notes_by_num":{},"usage_perc_y":88.13,"usage_perc_a":3.95,"ucprefix":false,"parent":"","keywords":"","ie_id":"canvas","chrome_id":"5100084685438976"},"canvas-text":{"title":"Text API for Canvas","description":"Method of displaying text on Canvas elements","spec":"https://html.spec.whatwg.org/multipage/scripting.html#drawing-text-to-the-bitmap","status":"wd","links":[{"url":"https://developer.mozilla.org/en/Drawing_text_using_a_canvas#Additional_examples","title":"Examples by Mozilla"},{"url":"http://code.google.com/p/canvas-text/","title":"Support library"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/graphics.js#canvas-text","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/apis/canvas/CanvasRenderingContext2D/fillText","title":"WebPlatform Docs"}],"categories":["Canvas","HTML5"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"y","10":"y","11":"y"},"firefox":{"2":"p","3":"p","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"p","3.2":"p","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"p","9.5-9.6":"p","10.0-10.1":"p","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"p","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":88.84,"usage_perc_a":0,"ucprefix":false,"parent":"canvas","keywords":"","ie_id":"","chrome_id":""},"namevalue-storage":{"title":"Web Storage - name/value pairs","description":"Method of storing data locally like cookies, but for larger amounts of data (sessionStorage and localStorage, used to fall under HTML5).","spec":"http://www.w3.org/TR/webstorage/#storage","status":"rec","links":[{"url":"https://developer.mozilla.org/En/DOM/Storage","title":"Gecko reference"},{"url":"http://code.google.com/p/sessionstorage/","title":"Support library"},{"url":"http://html5demos.com/storage","title":"Simple demo"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/features.js#native-localstorage;native-sessionstorage","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/apis/web-storage/Storage/localStorage","title":"WebPlatform Docs"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"y","9":"y","10":"y","11":"y"},"firefox":{"2":"a","3":"a","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":92.8,"usage_perc_a":0.08,"ucprefix":false,"parent":"","keywords":"webstorage,local storage","ie_id":"webstorage","chrome_id":"5345825534246912"},"sql-storage":{"title":"Web SQL Database","description":"Method of storing data client-side, allows Sqlite database queries for access and manipulation","spec":"http://www.w3.org/TR/webdatabase/","status":"unoff","links":[{"url":"http://html5doctor.com/introducing-web-sql-databases/","title":"HTML5 Doctor article"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/features.js#native-sql-db","title":"has.js test"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y"}},"notes":"The Web SQL Database specification is no longer being maintained and support may be dropped in future versions.","notes_by_num":{},"usage_perc_y":63.1,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"db-storage,websql","ie_id":"websqldatabase","chrome_id":"6330987952734208"},"indexeddb":{"title":"IndexedDB","description":"Method of storing data client-side, allows indexed database queries.","spec":"http://www.w3.org/TR/IndexedDB/","status":"cr","links":[{"url":"http://hacks.mozilla.org/2010/06/comparing-indexeddb-and-webdatabase/","title":"Mozilla Hacks article"},{"url":"https://github.com/axemclion/IndexedDBShim","title":"Polyfill for browsers supporting WebSQL"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/features.js#native-indexeddb","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/apis/indexedDB","title":"WebPlatform Docs"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"a #1","11":"a #1"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"a x","5":"a x","6":"a x","7":"a x","8":"a x","9":"a x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"p","5":"p","6":"p","7":"p","8":"p","9":"p","10":"n","11":"a x","12":"a x","13":"a x","14":"a x","15":"a x","16":"a x","17":"a x","18":"a x","19":"a x","20":"a x","21":"a x","22":"a x","23":"y x","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"p","3.2":"p","4":"p","5":"p","5.1":"p","6":"p","6.1":"p","7":"p","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"p","10.6":"p","11":"p","11.1":"p","11.5":"p","11.6":"p","12":"p","12.1":"p","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"p","4.0-4.1":"p","4.2-4.3":"p","5.0-5.1":"p","6.0-6.1":"p","7.0-7.1":"p","8":"a #3"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"p","2.2":"p","2.3":"p","3":"p","4":"p","4.1":"p","4.2-4.3":"p","4.4":"y","4.4.3":"y"},"bb":{"7":"p","10":"a x #2"},"op_mob":{"10":"n","11":"p","11.1":"p","11.5":"p","12":"p","12.1":"p","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y #1"},"and_uc":{"9.9":"p"}},"notes":"","notes_by_num":{"1":"Partial support in IE 10 & 11 refers to a number of subfeatures [not being supported](http://codepen.io/cemerick/pen/Itymi).","2":"Partial support in BB10 refers to an [outdated specification](http://www.w3.org/TR/2011/WD-IndexedDB-20110419/) being implemented.","3":"Partial support in iOS 8 refers to [seriously buggy behavior](http://www.raymondcamden.com/2014/9/25/IndexedDB-on-iOS-8--Broken-Bad)."},"usage_perc_y":56.13,"usage_perc_a":12.2,"ucprefix":false,"parent":"","keywords":"indexdb","ie_id":"indexeddb","chrome_id":"6507459568992256"},"online-status":{"title":"Online/offline status","description":"Events to indicate when the user's connected (`online` and `offline` events) and the `navigator.onLine` property to see current status.","spec":"https://html.spec.whatwg.org/multipage/browsers.html#browser-state","status":"wd","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine.onLine#Specification","title":"MDN article"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"a #2","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"y","3.6":"y","4":"a #3","5":"a #3","6":"a #3","7":"a #3","8":"a #3","9":"a #3","10":"a #3","11":"a #3","12":"a #3","13":"a #3","14":"a #3","15":"a #3","16":"a #3","17":"a #3","18":"a #3","19":"a #3","20":"a #3","21":"a #3","22":"a #3","23":"a #3","24":"a #3","25":"a #3","26":"a #3","27":"a #3","28":"a #3","29":"a #3","30":"a #3","31":"a #3","32":"a #3","33":"a #3","34":"a #3","35":"a #3","36":"a #3"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"a","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"u","4.0-4.1":"u","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"u","2.2":"u","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"a #1","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"a #1"}},"notes":"\"online\" does not always mean connection to the internet, it can also just mean connection to some network.\r\n\r\nEarly versions of Chrome and Safari always reported \"true\" for `navigator.onLine`","notes_by_num":{"1":"Seems to support `navigator.onLine` but not `online`/`offline` events.","2":"IE8 only supports the `online`/`offline` events on `document.body`, rather than `window`.","3":"Desktop Firefox responds to the status of its \"Work Offline\" mode. If not in that mode, `navigator.onLine` in always `true`, regardless of the actual network connectivity status."},"usage_perc_y":71.85,"usage_perc_a":20.38,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"eventsource":{"title":"Server-sent events","description":"Method of continuously sending data from a server to the browser, rather than repeatedly requesting it (EventSource interface, used to fall under HTML5)","spec":"http://www.w3.org/TR/eventsource/","status":"cr","links":[{"url":"http://www.html5rocks.com/tutorials/eventsource/basics/","title":"HTML5 Rocks tutorial"},{"url":"http://samshull.blogspot.com/2010/10/ajax-push-in-ios-safari-and-chrome-with.html","title":"Blog post with demo"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/features.js#native-eventsource","title":"has.js test"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"a","9.5-9.6":"a","10.0-10.1":"a","10.5":"a","10.6":"a","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"a","11":"a","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":70.91,"usage_perc_a":0.05,"ucprefix":false,"parent":"","keywords":"serversent,s-sent-events","ie_id":"serversenteventseventsource","chrome_id":"5311740673785856"},"x-doc-messaging":{"title":"Cross-document messaging","description":"Method of sending information from a page on one domain to a page on a different one (using postMessage)","spec":"https://html.spec.whatwg.org/multipage/comms.html#crossDocumentMessages","status":"wd","links":[{"url":"https://developer.mozilla.org/en/DOM/window.postMessage","title":"MDN article"},{"url":"http://html5demos.com/postmessage2","title":"Simple demo"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/features.js#native-crosswindowmessaging","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/apis/web-messaging/MessagePort/postMessage","title":"WebPlatform Docs"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"a","9":"a","10":"a","11":"a"},"firefox":{"2":"n","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"a"},"and_uc":{"9.9":"y"}},"notes":"Partial support in IE8-9 refers to only working in frames/iframes (not other tabs/windows). Also in IE 9 and below an object cannot be sent using postMessage. Partial support in IE10 refers to [limitations in certain conditions](http://stackoverflow.com/questions/16226924/is-cross-origin-postmessage-broken-in-ie10)","notes_by_num":{},"usage_perc_y":79.56,"usage_perc_a":16.45,"ucprefix":false,"parent":"","keywords":"","ie_id":"postmessage","chrome_id":"4786174115708928"},"datauri":{"title":"Data URIs","description":"Method of embedding images and other files in webpages as a string of text","spec":"http://www.ietf.org/rfc/rfc2397.txt","status":"other","links":[{"url":"http://css-tricks.com/5970-data-uris/","title":"Information page"},{"url":"http://en.wikipedia.org/wiki/data_URI_scheme","title":"Wikipedia"},{"url":"http://www.websiteoptimization.com/speed/tweak/inline-images/","title":"Data URL converter"},{"url":"http://klevjers.com/papers/phishing.pdf","title":"Information on security issues"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"a","9":"a","10":"a","11":"a"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"a"},"and_uc":{"9.9":"y"}},"notes":"Support in Internet Explorer 8 is limited to images and linked resources like CSS files, not HTML files. Max URI length in IE8 is 32KB. In IE9+ JavaScript files are supported too and the maximum size limit set to 4GB.","notes_by_num":{},"usage_perc_y":79.59,"usage_perc_a":16.45,"ucprefix":false,"parent":"","keywords":"data url,datauris,data uri,dataurl,dataurls,base64","ie_id":"","chrome_id":""},"mathml":{"title":"MathML","description":"Special tags that allow mathematical formulas and notations to be written on web pages.","spec":"http://www.w3.org/TR/MathML/","status":"rec","links":[{"url":"http://en.wikipedia.org/wiki/MathML","title":"Wikipedia"},{"url":"http://www.mozilla.org/projects/mathml/demo/","title":"MathML demos"},{"url":"http://www.mathjax.org","title":"Cross-browser support script"},{"url":"https://developer.mozilla.org/en/MathML/Element","title":"MDN element reference"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"n","10":"n","11":"n"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"p","5":"p","6":"p","7":"p","8":"p","9":"p","10":"p","11":"p","12":"p","13":"p","14":"p","15":"p","16":"p","17":"p","18":"p","19":"p","20":"p","21":"p","22":"p","23":"p","24":"y","25":"p","26":"p","27":"p","28":"p","29":"p","30":"p","31":"p","32":"p","33":"p","34":"p","35":"p","36":"p","37":"p","38":"p","39":"p","40":"p","41":"p"},"safari":{"3.1":"p","3.2":"p","4":"p","5":"p","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"a","10.0-10.1":"a","10.5":"a","10.6":"a","11":"a","11.1":"a","11.5":"a","11.6":"a","12":"a","12.1":"a","15":"p","16":"p","17":"p","18":"p","19":"p","20":"p","21":"p","22":"p","23":"p","24":"p","25":"p","26":"p"},"ios_saf":{"3.2":"p","4.0-4.1":"p","4.2-4.3":"p","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"p"},"android":{"2.1":"p","2.2":"p","2.3":"p","3":"p","4":"p","4.1":"p","4.2-4.3":"p","4.4":"p","4.4.3":"p"},"bb":{"7":"p","10":"y"},"op_mob":{"10":"p","11":"p","11.1":"p","11.5":"p","12":"p","12.1":"p","24":"p"},"and_chr":{"38":"p"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"a"}},"notes":"Opera's support is limited to a CSS profile of MathML. Support was added in Chrome 24, but removed afterwards due to instability.","notes_by_num":{},"usage_perc_y":24.12,"usage_perc_a":3.44,"ucprefix":false,"parent":"","keywords":"","ie_id":"mathml","chrome_id":"5240822173794304"},"css-featurequeries":{"title":"CSS Feature Queries","description":"CSS Feature Queries allow authors to condition rules based on whether particular property declarations are supported in CSS using the @supports at rule.","spec":"http://www.w3.org/TR/css3-conditional/#at-supports","status":"cr","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/@supports","title":"MDN Article"},{"url":"http://mcc.id.au/blog/2012/08/supports","title":"@supports in Firefox"},{"url":"http://dabblet.com/gist/3895764","title":"Test case"},{"url":"http://docs.webplatform.org/wiki/css/atrules/@supports","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"See also the [CSS.supports() DOM API](#feat=css-supports-api)","notes_by_num":{},"usage_perc_y":54.59,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"supports,conditional","ie_id":"conditionalrules","chrome_id":"4993981813358592"},"xhtml":{"title":"XHTML served as application/xhtml+xml","description":"A strict form of HTML, and allows embedding of other XML languages","spec":"http://www.w3.org/TR/xhtml1/","status":"rec","links":[{"url":"http://en.wikipedia.org/wiki/XHTML","title":"Wikipedia"},{"url":"http://www.xmlplease.com/xhtml/xhtml5polyglot/","title":"Information on XHTML5"},{"url":"http://docs.webplatform.org/wiki/concepts/internet_and_web/the_web_standards_model#What_is_XHTML.3F","title":"WebPlatform Docs"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"The XHTML syntax is very close to HTML, and thus is almost always ([incorrectly](https://developer.mozilla.org/en-US/docs/XHTML#MIME_type_versus_DOCTYPE)) served as text/html on the web.","notes_by_num":{},"usage_perc_y":92.08,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"xhtml+xml","ie_id":"","chrome_id":""},"xhtmlsmil":{"title":"XHTML+SMIL animation","description":"Method of using SMIL animation in web pages","spec":"http://www.w3.org/TR/XHTMLplusSMIL/","status":"unoff","links":[{"url":"http://en.wikipedia.org/wiki/XHTML%2BSMIL","title":"Wikipedia"},{"url":"http://leunen.me/fakesmile/","title":"JS library to support XHTML+SMIL"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"a","7":"a","8":"a","9":"n","10":"n","11":"n"},"firefox":{"2":"p","3":"p","3.5":"p","3.6":"p","4":"p","5":"p","6":"p","7":"p","8":"p","9":"p","10":"p","11":"p","12":"p","13":"p","14":"p","15":"p","16":"p","17":"p","18":"p","19":"p","20":"p","21":"p","22":"p","23":"p","24":"p","25":"p","26":"p","27":"p","28":"p","29":"p","30":"p","31":"p","32":"p","33":"p","34":"p","35":"p","36":"p"},"chrome":{"4":"p","5":"p","6":"p","7":"p","8":"p","9":"p","10":"p","11":"p","12":"p","13":"p","14":"p","15":"p","16":"p","17":"p","18":"p","19":"p","20":"p","21":"p","22":"p","23":"p","24":"p","25":"p","26":"p","27":"p","28":"p","29":"p","30":"p","31":"p","32":"p","33":"p","34":"p","35":"p","36":"p","37":"p","38":"p","39":"p","40":"p","41":"p"},"safari":{"3.1":"p","3.2":"p","4":"p","5":"p","5.1":"p","6":"p","6.1":"p","7":"p","7.1":"p","8":"p"},"opera":{"9":"p","9.5-9.6":"p","10.0-10.1":"p","10.5":"p","10.6":"p","11":"p","11.1":"p","11.5":"p","11.6":"p","12":"p","12.1":"p","15":"p","16":"p","17":"p","18":"p","19":"p","20":"p","21":"p","22":"p","23":"p","24":"p","25":"p","26":"p"},"ios_saf":{"3.2":"p","4.0-4.1":"p","4.2-4.3":"p","5.0-5.1":"p","6.0-6.1":"p","7.0-7.1":"p","8":"p"},"op_mini":{"5.0-8.0":"p"},"android":{"2.1":"p","2.2":"p","2.3":"p","3":"p","4":"p","4.1":"p","4.2-4.3":"p","4.4":"p","4.4.3":"p"},"bb":{"7":"p","10":"p"},"op_mob":{"10":"p","11":"p","11.1":"p","11.5":"p","12":"p","12.1":"p","24":"p"},"and_chr":{"38":"p"},"and_ff":{"32":"p"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"p"}},"notes":"Internet Explorer supports the W3C proposal HTML+TIME, which is largely the same as XHTML+SMIL","notes_by_num":{},"usage_perc_y":0,"usage_perc_a":4.24,"ucprefix":false,"parent":"xhtml","keywords":"","ie_id":"","chrome_id":""},"wai-aria":{"title":"WAI-ARIA Accessibility features","description":"Method of providing ways for people with disabilities to use dynamic web content and web applications.","spec":"http://www.w3.org/TR/wai-aria/","status":"rec","links":[{"url":"http://www.w3.org/WAI/intro/aria","title":"Information page"},{"url":"http://www.paciellogroup.com/blog/2011/10/browser-assistive-technology-tests-redux/","title":"Links to various test results"},{"url":"http://en.wikipedia.org/wiki/WAI-ARIA","title":"Wikipedia"},{"url":"http://www.alistapart.com/articles/the-accessibility-of-wai-aria/","title":"ALA Article"},{"url":"http://zufelt.ca/blog/are-you-confused-html5-and-wai-aria-yet","title":"HTML5/WAI-ARIA information"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"y","9":"y","10":"y","11":"y"},"firefox":{"2":"a","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"a","5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"a","35":"a","36":"a","37":"a","38":"a","39":"a","40":"a","41":"a"},"safari":{"3.1":"n","3.2":"n","4":"a","5":"a","5.1":"a","6":"a","6.1":"a","7":"a","7.1":"a","8":"a"},"opera":{"9":"n","9.5-9.6":"a","10.0-10.1":"a","10.5":"a","10.6":"a","11":"a","11.1":"a","11.5":"a","11.6":"a","12":"a","12.1":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a"},"ios_saf":{"3.2":"a","4.0-4.1":"a","4.2-4.3":"a","5.0-5.1":"a","6.0-6.1":"a","7.0-7.1":"a","8":"a"},"op_mini":{"5.0-8.0":"a"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"a","4.4.3":"a"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"a","11":"a","11.1":"a","11.5":"a","12":"a","12.1":"a","24":"a"},"and_chr":{"38":"a"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":29.77,"usage_perc_a":57.93,"ucprefix":false,"parent":"","keywords":"wai,aria","ie_id":"","chrome_id":""},"geolocation":{"title":"Geolocation","description":"Method of informing a website of the user's geographical location","spec":"http://www.w3.org/TR/geolocation-API/","status":"cr","links":[{"url":"http://html5demos.com/geo","title":"Simple demo"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/features.js#native-geolocation","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/apis/geolocation","title":"WebPlatform Docs"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"y","10":"y","11":"y"},"firefox":{"2":"p","3":"p","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"a","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"p","3.2":"p","4":"p","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"p","10.5":"p","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"n","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"p","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":88.71,"usage_perc_a":0.01,"ucprefix":false,"parent":"","keywords":"","ie_id":"geolocation","chrome_id":"6348855016685568"},"flexbox":{"title":"Flexible Box Layout Module","description":"Method of positioning elements in horizontal or vertical stacks.","spec":"http://www.w3.org/TR/css3-flexbox/","status":"cr","links":[{"url":"http://bennettfeely.com/flexplorer/","title":"Flexbox CSS generator"},{"url":"http://www.adobe.com/devnet/html5/articles/working-with-flexbox-the-new-spec.html","title":"Article on using the latest spec"},{"url":"https://dev.opera.com/articles/view/advanced-cross-browser-flexbox/","title":"Tutorial on cross-browser support"},{"url":"http://philipwalton.github.io/solved-by-flexbox/","title":"Examples on how to solve common layout problems with flexbox"},{"url":"http://css-tricks.com/snippets/css/a-guide-to-flexbox/","title":"A Complete Guide to Flexbox"},{"url":"http://the-echoplex.net/flexyboxes/","title":"Flexbox playground and code generator"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"a x #2","11":"y"},"firefox":{"2":"a x #1","3":"a x #1","3.5":"a x #1","3.6":"a x #1","4":"a x #1","5":"a x #1","6":"a x #1","7":"a x #1","8":"a x #1","9":"a x #1","10":"a x #1","11":"a x #1","12":"a x #1","13":"a x #1","14":"a x #1","15":"a x #1","16":"a x #1","17":"a x #1","18":"a x #1","19":"a x #1","20":"a x #1","21":"a x #1","22":"a #3","23":"a #3","24":"a #3","25":"a #3","26":"a #3","27":"a #3","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"a x #1","5":"a x #1","6":"a x #1","7":"a x #1","8":"a x #1","9":"a x #1","10":"a x #1","11":"a x #1","12":"a x #1","13":"a x #1","14":"a x #1","15":"a x #1","16":"a x #1","17":"a x #1","18":"a x #1","19":"a x #1","20":"a x #1","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"a x #1","3.2":"a x #1","4":"a x #1","5":"a x #1","5.1":"a x #1","6":"a x #1","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"y","15":"y x","16":"y x","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"a x #1","4.0-4.1":"a x #1","4.2-4.3":"a x #1","5.0-5.1":"a x #1","6.0-6.1":"a x #1","7.0-7.1":"y x","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"a x #1","2.2":"a x #1","2.3":"a x #1","3":"a x #1","4":"a x #1","4.1":"a x #1","4.2-4.3":"a x #1","4.4":"y","4.4.3":"y"},"bb":{"7":"a x #1","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"a x #2"},"and_uc":{"9.9":"a x #1"}},"notes":"Most partial support refers to supporting an [older version](http://www.w3.org/TR/2009/WD-css3-flexbox-20090723/) of the specification or an [older syntax](http://www.w3.org/TR/2012/WD-css3-flexbox-20120322/).","notes_by_num":{"1":"Only supports the [old flexbox](http://www.w3.org/TR/2009/WD-css3-flexbox-20090723) specification and does not support wrapping.","2":"Only supports the [2012 syntax](http://www.w3.org/TR/2012/WD-css3-flexbox-20120322/)","3":"Does not support flex-wrap or flex-flow properties"},"usage_perc_y":71.91,"usage_perc_a":14.53,"ucprefix":false,"parent":"","keywords":"flex-box,flex-direction,flex-wrap,flex-flow,flex-grow,flex-basis","ie_id":"flexbox","chrome_id":"4837301406400512"},"webgl":{"title":"WebGL - 3D Canvas graphics","description":"Method of generating dynamic 3D graphics using JavaScript, accelerated through hardware","spec":"https://www.khronos.org/registry/webgl/specs/1.0/","status":"other","links":[{"url":"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation","title":"Instructions on enabling WebGL"},{"url":"http://www.khronos.org/webgl/wiki/Tutorial","title":"Tutorial"},{"url":"http://hacks.mozilla.org/2009/12/webgl-draft-released-today/","title":"Firefox blog post"},{"url":"http://webkit.org/blog/603/webgl-now-available-in-webkit-nightlies/","title":"Webkit blog post"},{"url":"https://github.com/iewebgl/iewebgl","title":"Polyfill for IE"}],"categories":["Canvas"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"p","10":"p","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"a","5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"a","35":"a","36":"a"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"a","6":"a","6.1":"a","7":"a","7.1":"a","8":"a"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"a","12.1":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"a","12.1":"a","24":"y"},"and_chr":{"38":"a"},"and_ff":{"32":"a"},"ie_mob":{"10":"p"},"and_uc":{"9.9":"y"}},"notes":"Support listed as \"partial\" refers to the fact that not all users with these browsers have WebGL access. This is due to the additional requirement for users to have [up to date video drivers](http://www.khronos.org/webgl/wiki/BlacklistsAndWhitelists). This problem was [solved in Chrome on Windows](http://blog.chromium.org/2012/02/gpu-accelerating-2d-canvas-and-enabling.html) as of version 18.\r\n\r\nNote that WebGL is part of the [Khronos Group](http://www.khronos.org/webgl/), not the W3C.","notes_by_num":{},"usage_perc_y":45.07,"usage_perc_a":25.38,"ucprefix":false,"parent":"canvas","keywords":"web gl","ie_id":"webglcanvas3d,webglinstancingextension","chrome_id":"6049512976023552"},"fileapi":{"title":"File API","description":"Method of manipulating file objects in web applications client-side, as well as programmatically selecting them and accessing their data.","spec":"http://www.w3.org/TR/FileAPI/","status":"wd","links":[{"url":"https://developer.mozilla.org/en/Using_files_from_web_applications","title":"MDN article"},{"url":"http://docs.webplatform.org/wiki/apis/file","title":"WebPlatform Docs"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"a","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"a","4":"a","4.1":"a","4.2-4.3":"a","4.4":"y","4.4.3":"y"},"bb":{"7":"a","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y"}},"notes":"Partial support in older Safari and other WebKit browsers refers to lacking FileReader support. ","notes_by_num":{},"usage_perc_y":79.6,"usage_perc_a":5.18,"ucprefix":false,"parent":"","keywords":"FileReader","ie_id":"","chrome_id":""},"shadowdom":{"title":"Shadow DOM","description":"Method of establishing and maintaining functional boundaries between DOM trees and how these trees interact with each other within a document, thus enabling better functional encapsulation within the DOM.","spec":"http://www.w3.org/TR/shadow-dom/","status":"wd","links":[{"url":"http://html5-demos.appspot.com/static/shadowdom-visualizer/index.html","title":"Shadow DOM Visualizer"},{"url":"http://www.html5rocks.com/tutorials/webcomponents/shadowdom/","title":"HTML5Rocks - Shadow DOM 101 article"}],"categories":["DOM","HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n d #1","30":"n d #1","31":"n d #1","32":"n d #1","33":"n d #1","34":"n d #1","35":"n d #1","36":"n d #1"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y x","4.4.3":"y x"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{"1":"Supported in Firefox behind the `dom.webcomponents.enabled` flag."},"usage_perc_y":42.42,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"web components","ie_id":"shadowdomunprefixed","chrome_id":"4507242028072960"},"websockets":{"title":"Web Sockets","description":"Bidirectional communication technology for web apps","spec":"http://www.w3.org/TR/websockets/","status":"cr","links":[{"url":"http://websocket.org/aboutwebsocket.html","title":"WebSockets information"},{"url":"http://updates.html5rocks.com/2011/08/What-s-different-in-the-new-WebSocket-protocol","title":"Details on newer protocol"},{"url":"http://en.wikipedia.org/wiki/WebSocket","title":"Wikipedia"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/features.js#native-websockets","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/apis/websocket","title":"WebPlatform Docs"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"a #1","5":"a #1","6":"a x #2","7":"a x #2","8":"a x #2","9":"a x #2","10":"a x #2","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"a #1","5":"a #1","6":"a #1","7":"a #1","8":"a #1","9":"a #1","10":"a #1","11":"a #1","12":"a #1","13":"a #1","14":"a #1","15":"a #2","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"a #1","5.1":"a #1","6":"a #2","6.1":"a #2","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"a #1","11.1":"a #1","11.5":"a #1","11.6":"a #1","12":"a #1","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"a #1","5.0-5.1":"a #1","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"y #1","10":"y"},"op_mob":{"10":"n","11":"a #1","11.1":"a #1","11.5":"a #1","12":"a #1","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{"1":"Partial support refers to the websockets implementation using an older version of the protocol and/or the implementation being disabled by default (due to security issues with the older protocol).","2":"Partial support refers to lacking support for binary data. "},"usage_perc_y":78.99,"usage_perc_a":2.1,"ucprefix":true,"parent":"","keywords":"","ie_id":"websocket","chrome_id":"6555138000945152"},"hidden":{"title":"hidden attribute","description":"The `hidden` attribute may be applied to any element, and effectively hides elements similar to `display: none` in CSS.","spec":"http://www.w3.org/TR/html5/editing.html#the-hidden-attribute","status":"pr","links":[{"url":"http://davidwalsh.name/html5-hidden","title":"Article on hidden attribute"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y"}},"notes":"The hidden state can be easily overridden with a CSS `display` property set to anything other than `none`.","notes_by_num":{},"usage_perc_y":85.46,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"script-async":{"title":"async attribute for external scripts","description":"The boolean async attribute on script elements allows the external JavaScript file to run when it's available, without delaying page load first.","spec":"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async","status":"cr","links":[{"url":"https://developer.mozilla.org/en/HTML/Element/script#Attributes","title":"MDN article"},{"url":"http://ie.microsoft.com/testdrive/Performance/AsyncScripts/Default.html","title":"Demo"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/script.js#script-async","title":"has.js test"}],"categories":["DOM","HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"a","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Using script.async = false; to maintain execution order for dynamically-added scripts isn't supported in Safari 5.0","notes_by_num":{},"usage_perc_y":84.9,"usage_perc_a":0.17,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"cors":{"title":"Cross-Origin Resource Sharing","description":"Method of performing XMLHttpRequests across domains","spec":"http://www.w3.org/TR/cors/","status":"rec","links":[{"url":"http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/","title":"Mozilla Hacks blog post"},{"url":"http://msdn.microsoft.com/en-us/library/cc288060(VS.85).aspx","title":"Alternative implementation by IE8"},{"url":"https://dev.opera.com/articles/view/dom-access-control-using-cross-origin-resource-sharing/","title":"DOM access using CORS"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/features.js#native-cors-xhr","title":"has.js test"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"a","9":"a","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Supported somewhat in IE8 and IE9 using the XDomainRequest object (but has [limitations]( http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx))","notes_by_num":{},"usage_perc_y":86.39,"usage_perc_a":6.35,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"calc":{"title":"calc() as CSS unit value","description":"Method of allowing calculated values for length units, i.e. `width: calc(100% - 3em)`","spec":"http://www.w3.org/TR/css3-values/#calc","status":"cr","links":[{"url":"http://hacks.mozilla.org/2010/06/css3-calc/","title":"Mozilla Hacks article"},{"url":"https://developer.mozilla.org/en/CSS/-moz-calc","title":"MDN article"},{"url":"http://docs.webplatform.org/wiki/css/functions/calc","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"a","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"y x","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"y x","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"n"}},"notes":"Support can be somewhat emulated in older versions of IE using the non-standard `expression()` syntax. Partial support in IE9 refers to the browser crashing when used as a `background-position` value.","notes_by_num":{},"usage_perc_y":76.32,"usage_perc_a":2.39,"ucprefix":false,"parent":"","keywords":"","ie_id":"csscalc","chrome_id":"5765241438732288"},"ruby":{"title":"Ruby annotation","description":"Method of adding pronunciation or other annotations using ruby elements (primarily used in East Asian typography)","spec":"http://www.w3.org/TR/html-markup/ruby.html","status":"wd","links":[{"url":"http://html5doctor.com/ruby-rt-rp-element/","title":"HTML5 Doctor article"},{"url":"http://docs.webplatform.org/wiki/html/elements/ruby","title":"WebPlatform Docs"},{"url":"https://addons.mozilla.org/firefox/addon/1935/","title":"Add-on \"XHTML Ruby Support\" for Firefox"},{"url":"https://addons.mozilla.org/firefox/addon/6812/","title":"Addon \"HTML Ruby\" for Firefox support"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a"},"firefox":{"2":"p","3":"p","3.5":"p","3.6":"p","4":"p","5":"p","6":"p","7":"p","8":"p","9":"p","10":"p","11":"p","12":"p","13":"p","14":"p","15":"p","16":"p","17":"p","18":"p","19":"p","20":"p","21":"p","22":"p","23":"p","24":"p","25":"p","26":"p","27":"p","28":"p","29":"p","30":"p","31":"p","32":"p","33":"p","34":"p","35":"p","36":"p"},"chrome":{"4":"p","5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"a","35":"a","36":"a","37":"a","38":"a","39":"a","40":"a","41":"a"},"safari":{"3.1":"p","3.2":"p","4":"p","5":"a","5.1":"a","6":"a","6.1":"a","7":"a","7.1":"a","8":"a"},"opera":{"9":"p","9.5-9.6":"p","10.0-10.1":"p","10.5":"p","10.6":"p","11":"p","11.1":"p","11.5":"p","11.6":"p","12":"p","12.1":"p","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a"},"ios_saf":{"3.2":"p","4.0-4.1":"p","4.2-4.3":"p","5.0-5.1":"a","6.0-6.1":"a","7.0-7.1":"a","8":"a"},"op_mini":{"5.0-8.0":"p"},"android":{"2.1":"p","2.2":"p","2.3":"p","3":"a","4":"a","4.1":"a","4.2-4.3":"a","4.4":"a","4.4.3":"a"},"bb":{"7":"p","10":"a"},"op_mob":{"10":"p","11":"p","11.1":"p","11.5":"p","12":"p","12.1":"p","24":"a"},"and_chr":{"38":"a"},"and_ff":{"32":"p"},"ie_mob":{"10":"a"},"and_uc":{"9.9":"a"}},"notes":"Browsers without native support can still simulate support using CSS. Partial support refers to only supporting basic ruby, may still be missing writing-mode, Complex ruby and CSS3 Ruby","notes_by_num":{},"usage_perc_y":0,"usage_perc_a":78.43,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"css-opacity":{"title":"CSS3 Opacity","description":"Method of setting the transparency level of an element","spec":"http://www.w3.org/TR/css3-color/","status":"rec","links":[{"url":"http://www.css3files.com/color/#opacity","title":"Information page"},{"url":"http://docs.webplatform.org/wiki/css/properties/opacity","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"a","6":"a","7":"a","8":"a","9":"y","10":"y","11":"y"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Transparency for elements in IE8 and older can be achieved using the proprietary \"filter\" property and does not work well with PNG images using alpha transparency.","notes_by_num":{},"usage_perc_y":92.08,"usage_perc_a":4.25,"ucprefix":false,"parent":"","keywords":"transparent,transparency,alpha","ie_id":"","chrome_id":""},"form-validation":{"title":"Form validation","description":"Method of setting required fields and field types without requiring JavaScript","spec":"https://html.spec.whatwg.org/multipage/forms.html#client-side-form-validation","status":"wd","links":[{"url":"http://docs.webplatform.org/wiki/html/attributes/required","title":"WebPlatform Docs"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"a","5.1":"a","6":"a","6.1":"a","7":"a","7.1":"a","8":"a"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"y"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"a"},"and_uc":{"9.9":"y"}},"notes":"Partial support in Safari refers to lack of notice when form with required fields is attempted to be submitted. Partial support in IE10 mobile refers to lack of warning when blocking submission.","notes_by_num":{},"usage_perc_y":67.94,"usage_perc_a":3.84,"ucprefix":false,"parent":"forms","keywords":"","ie_id":"","chrome_id":"6091813840486400"},"history":{"title":"Session history management","description":"Method of manipulating the user's browser's session history in JavaScript using history.pushState, history.replaceState and the popstate event","spec":"https://html.spec.whatwg.org/multipage/browsers.html#dom-history-pushstate","status":"cr","links":[{"url":"http://www.adequatelygood.com/2010/7/Saner-HTML5-History-Management","title":"Introduction to history management"},{"url":"https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history","title":"MDN article"},{"url":"http://html5demos.com/history","title":"Demo page"},{"url":"https://github.com/browserstate/history.js","title":"History.js polyfill "},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/features.js#native-history-state","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/dom/History","title":"WebPlatform Docs"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"a","5.1":"a","6":"a","6.1":"a","7":"a","7.1":"a","8":"a"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"a","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"y","2.3":"y","3":"n","4":"n","4.1":"n","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"a"}},"notes":"Older iOS versions and Android 4.0.4 claim support, but implementation is too buggy to be useful. Partial support in other Safari browsers refers to other buggy behavior.","notes_by_num":{},"usage_perc_y":77.3,"usage_perc_a":6.51,"ucprefix":false,"parent":"","keywords":"onpushstate,onreplacestate","ie_id":"","chrome_id":""},"json":{"title":"JSON parsing","description":"Method of converting JavaScript objects to JSON strings and JSON back to objects using JSON.stringify() and JSON.parse()","spec":"http://es5.github.com/#x15.12","status":"other","links":[{"url":"https://developer.mozilla.org/En/Using_native_JSON","title":"MDN article"},{"url":"http://www.json.org/js.html","title":"JSON in JS (includes script w/support)"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/json.js#json","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/apis/json","title":"WebPlatform Docs"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"y","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Requires document to be in IE8+ [standards mode](http://msdn.microsoft.com/en-us/library/cc288325%28VS.85%29.aspx) to work in IE8.","notes_by_num":{},"usage_perc_y":95.92,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"classlist":{"title":"classList (DOMTokenList )","description":"Method of easily manipulating classes on elements, using the DOMTokenList object.","spec":"http://www.w3.org/TR/dom/#dom-element-classlist","status":"wd","links":[{"url":"http://hacks.mozilla.org/2010/01/classlist-in-firefox-3-6/","title":"Mozilla Hacks article"},{"url":"https://github.com/eligrey/classList.js","title":"Polyfill script"},{"url":"http://docs.webplatform.org/wiki/dom/Element/classList","title":"WebPlatform Docs"},{"url":"http://www.sitepoint.com/exploring-classlist-api/","title":"SitePoint article"},{"url":"http://aurelio.audero.it/demo/classlist-api-demo.html","title":"Demo using classList"}],"categories":["DOM","HTML5"],"stats":{"ie":{"5.5":"p","6":"p","7":"p","8":"p","9":"p","10":"y","11":"y"},"firefox":{"2":"p","3":"p","3.5":"p","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"p","5":"p","6":"p","7":"p","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"p","3.2":"p","4":"p","5":"p","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"p","9.5-9.6":"p","10.0-10.1":"p","10.5":"p","10.6":"p","11":"p","11.1":"p","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"p","4.0-4.1":"p","4.2-4.3":"p","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"p"},"android":{"2.1":"p","2.2":"p","2.3":"p","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"p","11":"p","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":85.23,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"text-overflow":{"title":"CSS3 Text-overflow","description":"Append ellipsis when text overflows its containing element","spec":"http://www.w3.org/TR/css3-ui/#text-overflow0","status":"wd","links":[{"url":"https://github.com/rmorse/AutoEllipsis","title":"jQuery polyfill for Firefox"},{"url":"https://developer.mozilla.org/En/CSS/Text-overflow","title":"MDN article"},{"url":"http://www.css3files.com/text/","title":"Information page"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/css.js#css-text-overflow","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/css/properties/text-overflow","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y"},"firefox":{"2":"p","3":"p","3.5":"p","3.6":"p","4":"p","5":"p","6":"p","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y x","9.5-9.6":"y x","10.0-10.1":"y x","10.5":"y x","10.6":"y x","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y x","11":"y x","11.1":"y x","11.5":"y x","12":"y x","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":96.05,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"textoverflow,ellipsis","ie_id":"","chrome_id":""},"webm":{"title":"WebM video format","description":"Multimedia format designed to provide a royalty-free, high-quality open video compression format for use with HTML5 video. WebM supports the video codec VP8 and VP9.","spec":"http://www.webmproject.org/","status":"other","links":[{"url":"https://tools.google.com/dlpage/webmmf","title":"Codec for IE9 support"},{"url":"http://www.broken-links.com/2010/09/01/playing-webm-in-safari-with-plugins/","title":"Info on supporting WebM in Safari"},{"url":"http://webmproject.org","title":"Official website"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/video.js#video-webm","title":"has.js test"},{"url":"http://perian.org/","title":"Perian :Mac OSX Webm Codec install"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"p","10":"p","11":"p"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"a","5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"p","4":"p","5":"p","5.1":"p","6":"p","6.1":"p","7":"p","7.1":"p","8":"p"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"a","11":"a","11.1":"a","11.5":"a","11.6":"a","12":"a","12.1":"a","15":"a","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"a","3":"a","4":"a","4.1":"a","4.2-4.3":"a","4.4":"a","4.4.3":"a"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"a"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"p"},"and_uc":{"9.9":"y"}},"notes":"Will work in IE9+ and Safari/MacOSX provided the user has the WebM codecs installed. Partial support indicates that at least one codec is supported but not all.","notes_by_num":{},"usage_perc_y":55.5,"usage_perc_a":9.46,"ucprefix":false,"parent":"video","keywords":"matroska","ie_id":"","chrome_id":"6362186595172352"},"mpeg4":{"title":"MPEG-4/H.264 video format","description":"Commonly used video compression format (not royalty-free)","spec":"http://ip.hhi.de/imagecom_G1/assets/pdfs/csvt_overview_0305.pdf","status":"other","links":[{"url":"http://en.wikipedia.org/wiki/H.264/MPEG-4_AVC","title":"Wikipedia article"},{"url":"http://www.interoperabilitybridges.com/html5-extension-for-wmp-plugin","title":"Firefox extension allowing support in Win7"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"a","2.2":"a","2.3":"a","3":"a","4":"a","4.1":"a","4.2-4.3":"a","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"a"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"a"}},"notes":"The Android 2.3 browser currently requires [specific handling](http://www.broken-links.com/2010/07/08/making-html5-video-work-on-android-phones/) to play videos\r\n\r\nFirefox supports H.264 on Windows 7 and later since version 21. Firefox supports H.264 on Linux since version 26 if the appropriate gstreamer plug-ins are installed.\r\n\r\nPartial support for Firefox refers to the lack of support in OSX & some Linux platforms, for Android Firefox it refers to the inability of hardware acceleration.","notes_by_num":{},"usage_perc_y":66.39,"usage_perc_a":20.61,"ucprefix":false,"parent":"video","keywords":"avc,mp4,mpv,mov,aac,h264","ie_id":"","chrome_id":""},"ogv":{"title":"Ogg/Theora video format","description":"Free lossy video compression format.","spec":"http://theora.org/doc/","status":"other","links":[{"url":"http://en.wikipedia.org/wiki/Theora","title":"Wikipedia article"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"p","10":"p","11":"p"},"firefox":{"2":"n","3":"n","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y"},"ie_mob":{"10":"p"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":50.69,"usage_perc_a":0,"ucprefix":false,"parent":"video","keywords":"xiph","ie_id":"","chrome_id":""},"wordwrap":{"title":"CSS3 Overflow-wrap","description":"Allows lines to be broken within words if an otherwise unbreakable string is too long to fit. Currently mostly supported using the `word-wrap` property.","spec":"http://www.w3.org/TR/css3-text/#overflow-wrap","status":"wd","links":[{"url":"https://developer.mozilla.org/En/CSS/Word-wrap","title":"MDN article"},{"url":"http://www.css3files.com/text/#wordwrap","title":"Information page"},{"url":"http://docs.webplatform.org/wiki/css/properties/word-wrap","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a"},"firefox":{"2":"n","3":"n","3.5":"a","3.6":"a","4":"a","5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"a","35":"a","36":"a"},"chrome":{"4":"a","5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"a","3.2":"a","4":"a","5":"a","5.1":"a","6":"a","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"a","10.6":"a","11":"a","11.1":"a","11.5":"a","11.6":"a","12":"a","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"a","4.0-4.1":"a","4.2-4.3":"a","5.0-5.1":"a","6.0-6.1":"a","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"a"},"android":{"2.1":"a","2.2":"a","2.3":"a","3":"a","4":"a","4.1":"a","4.2-4.3":"a","4.4":"y","4.4.3":"y"},"bb":{"7":"a","10":"y"},"op_mob":{"10":"a","11":"a","11.1":"a","11.5":"a","12":"a","12.1":"a","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"a"},"ie_mob":{"10":"a"},"and_uc":{"9.9":"a"}},"notes":"Partial support refers to requiring the legacy name \"word-wrap\" (rather than overflow-wrap) to work.","notes_by_num":{},"usage_perc_y":52.41,"usage_perc_a":43.81,"ucprefix":false,"parent":"","keywords":"wordwrap,word-wrap","ie_id":"","chrome_id":""},"progressmeter":{"title":"Progress & Meter","description":"Method of indicating a progress state (progress element) or the current level of a gauge (meter element).\r\n","spec":"https://html.spec.whatwg.org/multipage/forms.html#the-progress-element","status":"wd","links":[{"url":"https://dev.opera.com/articles/new-form-features-in-html5/#newoutput","title":"Dev.Opera article"},{"url":"http://html5doctor.com/measure-up-with-the-meter-tag/","title":"HTML5 Doctor on meter element "},{"url":"http://peter.sh/examples/?/html/meter-progress.html","title":"Examples of progress and meter elements"},{"url":"http://docs.webplatform.org/wiki/html/elements/progress","title":"WebPlatform Docs"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"a","11":"a"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"a","8":"a"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"a"},"and_uc":{"9.9":"y"}},"notes":"Partial support in Firefox 6-15, IE10 & iOS7 Safari refers to supporting the progress element, but not the meter element. iOS7 Safari also does not support \"indeterminate\" progress elements.","notes_by_num":{},"usage_perc_y":62.25,"usage_perc_a":17.68,"ucprefix":false,"parent":"forms","keywords":"","ie_id":"","chrome_id":""},"object-fit":{"title":"CSS3 object-fit/object-position","description":"Method of specifying how an object (image or video) should fit inside its box. object-fit options include \"contain\" (fit according to aspect ratio), \"fill\" (stretches object to fill) and \"cover\" (overflows box but maintains ratio), where object-position allows the object to be repositioned like background-image does.","spec":"http://www.w3.org/TR/css3-images/","status":"cr","links":[{"url":"https://dev.opera.com/articles/view/css3-object-fit-object-position/","title":"Dev.Opera article"},{"url":"http://docs.webplatform.org/wiki/css/properties/object-fit","title":"WebPlatform Docs"},{"url":"https://github.com/anselmh/object-fit","title":"object-fit JavaScript-Polyfill"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"u","35":"u","36":"u"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"a #1","8":"a #1"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"y x","11":"y x","11.1":"y x","11.5":"y x","11.6":"y x","12":"y x","12.1":"y x","15":"n","16":"n","17":"n","18":"n","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"a #1"},"op_mini":{"5.0-8.0":"y x"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"y x","11.1":"y x","11.5":"y x","12":"y x","12.1":"y x","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{"1":"Partial support in Safari refers to support for `object-fit` but not `object-position`."},"usage_perc_y":43.14,"usage_perc_a":1.81,"ucprefix":false,"parent":"","keywords":"objectfit,objectposition","ie_id":"objectfitandobjectposition","chrome_id":"5302669702856704"},"xhr2":{"title":"XMLHttpRequest 2","description":"Adds more functionality to AJAX requests like file uploads, transfer progress information and the ability to send form data.","spec":"http://www.w3.org/TR/XMLHttpRequest2/","status":"wd","links":[{"url":"https://developer.mozilla.org/en/XMLHttpRequest/FormData","title":"MDN article on FormData"},{"url":"https://github.com/3nr1c/jUri.js","title":"Polyfill for FormData object"},{"url":"http://docs.webplatform.org/wiki/apis/xhr/XMLHttpRequest","title":"WebPlatform Docs"}],"categories":["DOM","JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"a","3.6":"a","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"u","5":"u","6":"u","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":85.28,"usage_perc_a":0.13,"ucprefix":false,"parent":"","keywords":"formdata","ie_id":"","chrome_id":""},"minmaxwh":{"title":"CSS min/max-width/height","description":"Method of setting a minimum or maximum width or height to an element. ","spec":"http://www.w3.org/TR/CSS21/visudet.html#min-max-widths","status":"rec","links":[{"url":"http://code.google.com/p/ie7-js/","title":"JS library with support"},{"url":"http://docs.webplatform.org/wiki/css/properties/min-width","title":"WebPlatform Docs"},{"url":"http://www.impressivewebs.com/min-max-width-height-css/","title":"CSS Basics post"}],"categories":["CSS2"],"stats":{"ie":{"5.5":"p","6":"p","7":"y","8":"y","9":"y","10":"y","11":"y"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"IE7 does not support \"inherit\" as a value on any of these properties. IE8 has some bugs with max-width/height combined with overflow: auto/scroll.","notes_by_num":{},"usage_perc_y":96.14,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"min-width,min-height,max-width,max-height","ie_id":"","chrome_id":""},"details":{"title":"Details & Summary elements","description":"The <details> element generates a simple no-JavaScript widget to show/hide element contents, optionally by clicking on its child <summary> element.","spec":"https://html.spec.whatwg.org/multipage/forms.html#the-details-element","status":"wd","links":[{"url":"https://mathiasbynens.be/notes/html5-details-jquery","title":"jQuery fallback script"},{"url":"https://gist.github.com/370590","title":"Fallback script"},{"url":"http://html5doctor.com/summary-figcaption-element/","title":"HTML5 Doctor article"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/features.js#native-details","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/html/elements/details","title":"WebPlatform Docs"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"p","3.5":"p","3.6":"p","4":"p","5":"p","6":"p","7":"p","8":"p","9":"p","10":"p","11":"p","12":"p","13":"p","14":"p","15":"p","16":"p","17":"p","18":"p","19":"p","20":"p","21":"p","22":"p","23":"p","24":"p","25":"p","26":"p","27":"p","28":"p","29":"p","30":"p","31":"p","32":"p","33":"p","34":"p","35":"p","36":"p"},"chrome":{"4":"p","5":"p","6":"p","7":"p","8":"p","9":"p","10":"p","11":"p","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"p","3.2":"p","4":"p","5":"p","5.1":"p","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"p","9.5-9.6":"p","10.0-10.1":"p","10.5":"p","10.6":"p","11":"p","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"p","4.0-4.1":"p","4.2-4.3":"p","5.0-5.1":"p","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"p"},"android":{"2.1":"p","2.2":"p","2.3":"p","3":"p","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"p","10":"y"},"op_mob":{"10":"p","11":"p","11.1":"p","11.5":"p","12":"p","12.1":"p","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":60.69,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"detailssummary","chrome_id":"5348024557502464"},"text-stroke":{"title":"CSS text-stroke","description":"Method of declaring the outline (stroke) width and color for text.","spec":"http://developer.apple.com/library/safari/documentation/appleapplications/reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266-_webkit_text_stroke","status":"unoff","links":[{"url":"http://css-tricks.com/7405-adding-stroke-to-web-text/","title":"Information & workarounds"},{"url":"http://www.westciv.com/tools/textStroke/","title":"Live editor"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"u","35":"u","36":"u"},"chrome":{"4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x","37":"y x","38":"y x","39":"y x","40":"y x","41":"y x"},"safari":{"3.1":"y x","3.2":"y x","4":"y x","5":"y x","5.1":"y x","6":"y x","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x"},"ios_saf":{"3.2":"a x","4.0-4.1":"y x","4.2-4.3":"y x","5.0-5.1":"y x","6.0-6.1":"y x","7.0-7.1":"y x","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y x","2.2":"y x","2.3":"y x","3":"n","4":"y x","4.1":"y x","4.2-4.3":"y x","4.4":"y x","4.4.3":"y x"},"bb":{"7":"y x","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y x"},"and_chr":{"38":"y x"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Does not yet appear in any W3C specification. Was briefly included in a spec as the \"text-outline\" property, but this was removed.","notes_by_num":{},"usage_perc_y":59.62,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"textstroke,stroke-color,stroke-width,fill-color","ie_id":"","chrome_id":""},"inline-block":{"title":"CSS inline-block","description":"Method of displaying an element as a block while flowing it with text. ","spec":"http://www.w3.org/TR/CSS21/visuren.html#fixed-positioning","status":"rec","links":[{"url":"http://robertnyman.com/2010/02/24/css-display-inline-block-why-it-rocks-and-why-it-sucks/","title":"Blog post w/info"},{"url":"http://blog.mozilla.com/webdev/2009/02/20/cross-browser-inline-block/","title":"Info on cross browser support"},{"url":"http://docs.webplatform.org/wiki/css/properties/display","title":"WebPlatform Docs"}],"categories":["CSS2"],"stats":{"ie":{"5.5":"a","6":"a","7":"a","8":"y","9":"y","10":"y","11":"y"},"firefox":{"2":"a x","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Only supported in IE6 and IE7 on elements with a display of \"inline\" by default. [Alternative properties](http://blog.mozilla.com/webdev/2009/02/20/cross-browser-inline-block/) are available to provide complete cross-browser support.","notes_by_num":{},"usage_perc_y":96.03,"usage_perc_a":0.3,"ucprefix":false,"parent":"","keywords":"inlineblock","ie_id":"","chrome_id":""},"notifications":{"title":"Web Notifications","description":"Method of alerting the user outside of a web page by displaying notifications (that do not require interaction by the user).","spec":"http://www.w3.org/TR/notifications/","status":"wd","links":[{"url":"http://www.html5rocks.com/tutorials/notifications/quick/","title":"HTML5 Rocks tutorial"},{"url":"http://www.chromium.org/developers/design-documents/desktop-notifications/api-specification","title":"Chromium API"},{"url":"https://addons.mozilla.org/en-us/firefox/addon/221523/","title":"Add-on "},{"url":"https://developer.mozilla.org/en-US/docs/Web/API/notification","title":"MDN Notifications"},{"url":"http://www.sitepoint.com/introduction-web-notifications-api/","title":"SitePoint article"},{"url":"http://aurelio.audero.it/demo/web-notifications-api-demo.html","title":"Demo"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"a x","6":"a x","7":"a x","8":"a x","9":"a x","10":"a x","11":"a x","12":"a x","13":"a x","14":"a x","15":"a x","16":"a x","17":"a x","18":"a x","19":"a x","20":"a x","21":"a x","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"a x","4.4.3":"a x"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"a x"},"and_chr":{"38":"n"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":47.52,"usage_perc_a":2.41,"ucprefix":false,"parent":"","keywords":"","ie_id":"webnotifications","chrome_id":"5064350557536256"},"stream":{"title":"getUserMedia/Stream API","description":"Method of accessing external device data (such as a webcam video stream). Formerly this was envisioned as the <device> element.","spec":"http://www.w3.org/TR/mediacapture-streams/","status":"wd","links":[{"url":"https://dev.opera.com/blog/webcam-orientation-preview/","title":"Technology preview from Opera"},{"url":"http://docs.webplatform.org/wiki/dom/Navigator/getUserMedia","title":"WebPlatform Docs"}],"categories":["HTML5","JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x","37":"y x","38":"y x","39":"y x","40":"y x","41":"y x"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"y","12.1":"y","15":"n","16":"n","17":"n","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"y","12.1":"y","24":"y x"},"and_chr":{"38":"y"},"and_ff":{"32":"y x"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y x"}},"notes":"","notes_by_num":{},"usage_perc_y":57.29,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"camera,device,getUserMedia,media stream,Media Capture API","ie_id":"mediacaptureandstreams","chrome_id":"6067380039974912,6605041225957376"},"svg-img":{"title":"SVG in HTML img element","description":"Method of displaying SVG images in HTML using <img>","spec":"https://html.spec.whatwg.org/multipage/embedded-content.html","status":"cr","links":[{"url":"http://blog.dholbert.org/2010/10/svg-as-image.html","title":"Blog post with examples"},{"url":"http://www.codedread.com/blog/","title":"Blog with SVGs an images"}],"categories":["SVG"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"a","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"a","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":91.04,"usage_perc_a":0.01,"ucprefix":false,"parent":"","keywords":"svg-as-img,svg-in-img","ie_id":"","chrome_id":""},"datalist":{"title":"Datalist element","description":"Method of setting a list of options for a user to select in a text field, while leaving the ability to enter a custom value.","spec":"https://html.spec.whatwg.org/multipage/forms.html#the-datalist-element","status":"wd","links":[{"url":"http://hacks.mozilla.org/2010/11/firefox-4-html5-forms/","title":"Mozilla Hacks article"},{"url":"http://afarkas.github.com/webshim/demos/","title":"HTML5 Library including datalist support"},{"url":"https://developer.mozilla.org/en/HTML/Element/datalist","title":"MDN reference"},{"url":"http://docs.webplatform.org/wiki/html/elements/datalist","title":"WebPlatform Docs"},{"url":"http://demo.agektmr.com/datalist/","title":"Eiji Kitamura's options demos & tests"},{"url":"http://github.com/thgreasi/datalist-polyfill","title":"Minimal Datalist polyfill w/tutorial"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"p","10":"a","11":"a"},"firefox":{"2":"p","3":"p","3.5":"p","3.6":"p","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"p","5":"p","6":"p","7":"p","8":"p","9":"p","10":"p","11":"p","12":"p","13":"p","14":"p","15":"p","16":"p","17":"p","18":"p","19":"n","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"p","3.2":"p","4":"p","5":"p","5.1":"p","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"p","4.0-4.1":"p","4.2-4.3":"p","5.0-5.1":"p","6.0-6.1":"p","7.0-7.1":"p","8":"p"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"p","2.2":"p","2.3":"p","3":"p","4":"p","4.1":"p","4.2-4.3":"p","4.4":"p","4.4.3":"y"},"bb":{"7":"p","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"p"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"p"},"and_uc":{"9.9":"y"}},"notes":"Partial support in IE10 refers to [significantly buggy behavior](http://playground.onereason.eu/2013/04/ie10s-lousy-support-for-datalists/).","notes_by_num":{},"usage_perc_y":57.94,"usage_perc_a":9.66,"ucprefix":false,"parent":"forms","keywords":"list attribute","ie_id":"datalistelement","chrome_id":"6090950820495360"},"dataset":{"title":"dataset & data-* attributes","description":"Method of applying and accessing custom data to elements.","spec":"https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes","status":"wd","links":[{"url":"http://html5doctor.com/html5-custom-data-attributes/","title":"HTML5 Doctor article"},{"url":"http://html5demos.com/dataset","title":"Demo using dataset"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/dom.js#dom-dataset","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/html/attributes/data-*","title":"WebPlatform Docs"},{"url":"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset","title":"MDN Reference - dataset"},{"url":"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes","title":"MDN Guide - Using data-* attributes"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"y"},"firefox":{"2":"a","3":"a","3.5":"a","3.6":"a","4":"a","5":"a","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"a","5":"a","6":"a","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"a","3.2":"a","4":"a","5":"a","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"a","9.5-9.6":"a","10.0-10.1":"a","10.5":"a","10.6":"a","11":"a","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"a","4.0-4.1":"a","4.2-4.3":"a","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"a"},"android":{"2.1":"a","2.2":"a","2.3":"a","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"a","11":"a","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"a"},"and_uc":{"9.9":"y"}},"notes":"Partial support refers to being able to use `data-*` attributes and access them using `getAttribute`. \r\n\r\n\"Supported\" refers to accessing the values using the `dataset` property. Current spec only refers to support on HTML elements, only some browsers also have support for SVG/MathML elements.","notes_by_num":{},"usage_perc_y":82.36,"usage_perc_a":13.97,"ucprefix":false,"parent":"","keywords":"DOMStringMap","ie_id":"","chrome_id":""},"css-grid":{"title":"CSS Grid Layout","description":"Method of using a grid concept to lay out content, providing a mechanism for authors to divide available space for lay out into columns and rows using a set of predictable sizing behaviors","spec":"http://www.w3.org/TR/css3-grid-layout/","status":"wd","links":[{"url":"http://blogs.msdn.com/b/ie/archive/2011/04/14/ie10-platform-preview-and-css-features-for-adaptive-layouts.aspx","title":"IE Blog post"},{"url":"https://bugs.webkit.org/show_bug.cgi?id=60731","title":"Webkit (Chrome, Safari, etc.) feature request"},{"url":"https://bugzilla.mozilla.org/show_bug.cgi?id=616605","title":"Mozilla (Firefox) feature request"},{"url":"https://github.com/codler/Grid-Layout-Polyfill","title":"Grid Layout Polyfill"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"p","10":"a x #2","11":"a x #2"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"p","20":"p","21":"p","22":"p","23":"p","24":"p","25":"p","26":"p","27":"p","28":"p","29":"p","30":"p","31":"p","32":"p","33":"p","34":"u","35":"u","36":"u"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"p","26":"p","27":"p","28":"p","29":"p d #1","30":"p d #1","31":"p d #1","32":"p d #1","33":"p d #1","34":"p d #1","35":"p d #1","36":"p d #1","37":"p d #1","38":"p d #1","39":"p d #1","40":"p d #1","41":"p d #1"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"p","6.1":"p","7":"p","7.1":"p","8":"p"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"p","7.0-7.1":"p","8":"p"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"p","4.4":"p","4.4.3":"p"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"p"},"and_chr":{"38":"p"},"and_ff":{"32":"n"},"ie_mob":{"10":"a x #2"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{"1":"Enabled in Chrome through the \"experimental Web Platform features\" flag in chrome://flags","2":"Partial support in IE refers to supporting an [older version](http://www.w3.org/TR/2011/WD-css3-grid-layout-20110407/) of the specification."},"usage_perc_y":0,"usage_perc_a":10.1,"ucprefix":false,"parent":"","keywords":"grids,grid-row,grid-column","ie_id":"grid","chrome_id":"4589636412243968"},"menu":{"title":"Toolbar/context menu","description":"Method of defining a toolbar menu, a context menu or a list of (interactive) options using the <menu> element.","spec":"https://html.spec.whatwg.org/multipage/forms.html#the-menu-element","status":"cr","links":[{"url":"https://bug617528.bugzilla.mozilla.org/attachment.cgi?id=554309","title":"Demo"},{"url":"http://addyosmani.github.com/jQuery-contextMenu/","title":"jQuery polyfill"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/events.js#event-contextmenu","title":"has.js test"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"a","35":"a","36":"a"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n","38":"n","39":"n","40":"n","41":"n"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Partial support in Firefox refers to being limited to context menus, not toolbar menus.","notes_by_num":{},"usage_perc_y":0,"usage_perc_a":12.91,"ucprefix":false,"parent":"","keywords":"contextmenu,menuitem,command","ie_id":"","chrome_id":""},"rem":{"title":"rem (root em) units","description":"Type of unit similar to \"em\", but relative only to the root element, not any parent element. Thus compounding does not occur as it does with \"em\" units.","spec":"http://www.w3.org/TR/css3-values/#font-relative-lengths","status":"cr","links":[{"url":"http://snook.ca/archives/html_and_css/font-size-with-rem","title":"Article on usage"},{"url":"https://github.com/chuckcarpenter/REM-unit-polyfill","title":"REM Polyfill"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"u","5":"u","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":88.65,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"rems","ie_id":"","chrome_id":""},"ttf":{"title":"TTF/OTF - TrueType and OpenType font support","description":"Support for the TrueType (.ttf)and OpenType (.otf) outline font formats in @font-face. ","spec":"http://developer.apple.com/fonts/TTRefMan/index.html","status":"other","links":[{"url":"http://stackoverflow.com/questions/17694143/what-is-the-status-of-ttf-support-in-internet-explorer","title":"What is the status of TTF support in Internet Explorer?"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"a","10":"a","11":"a"},"firefox":{"2":"n","3":"n","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"u"},"and_uc":{"9.9":"y"}},"notes":"Partial support in IE9 refers to the fonts only working [when set to be \"installable\"](http://blogs.msdn.com/b/ie/archive/2010/07/15/the-css-corner-better-web-typography-for-better-design.aspx).","notes_by_num":{},"usage_perc_y":76.37,"usage_perc_a":12.06,"ucprefix":false,"parent":"fontface","keywords":"","ie_id":"","chrome_id":""},"touch":{"title":"Touch events","description":"Method of registering when, where and how the interface is touched, for devices with a touch screen. These DOM events are similar to mousedown, mousemove, etc.","spec":"http://www.w3.org/TR/touch-events/","status":"rec","links":[{"url":"http://www.quirksmode.org/mobile/tableTouch.html","title":"Detailed support tables"},{"url":"http://www.quirksmode.org/m/tests/drag2.html","title":"Multi-touch demo"},{"url":"http://schepers.cc/getintouch","title":"Information on the spec development"},{"url":"http://msdn.microsoft.com/en-us/library/ie/hh673557(v=vs.85).aspx","title":"Internet Explorer's gesture and touch implementation."},{"url":"http://github.com/CamHenlin/TouchPolyfill","title":"Touch polyfill for supporting touch events on Internet Explorer"}],"categories":["DOM","JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"p","11":"p"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"a","5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"n d #1","26":"n d #1","27":"n d #1","28":"n d #1","29":"n d #1","30":"n d #1","31":"n d #1","32":"n d #1","33":"n d #1","34":"n d #1","35":"n d #1","36":"n d #1"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"p"},"and_uc":{"9.9":"y"}},"notes":"Internet Explorer implements Pointer Events specification which supports more input devices than Touch Events one.\r\n\r\nThere is a library on GitHub that is working toward bringing W3C touch events to IE 10 and 11: https://github.com/CamHenlin/TouchPolyfill \r\n\r\nRemoved support in Firefox refers to desktop Firefox only.","notes_by_num":{"1":"Can be enabled in Firefox using the dom.w3c_touch_events.enabled flag (disabled by default for site compatibility reasons)"},"usage_perc_y":59.24,"usage_perc_a":0.58,"ucprefix":false,"parent":"","keywords":"touchstart,touchend,touchmove,touchenter,touchleave,touchcancel","ie_id":"touchevents","chrome_id":"6296903092273152"},"matchesselector":{"title":"matches() DOM method","description":"Method of testing whether or not a DOM element matches a given selector. Formerly known (and largely supported with prefix) as matchesSelector.","spec":"http://www.w3.org/TR/selectors-api2/","status":"wd","links":[{"url":"https://developer.mozilla.org/en/DOM/Element.mozMatchesSelector","title":"MDN article"},{"url":"http://docs.webplatform.org/wiki/dom/HTMLElement/matchesSelector","title":"WebPlatform Docs"}],"categories":["DOM","JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"a x","10":"a x","11":"a x"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"a x","4":"a x","5":"a x","6":"a x","7":"a x","8":"a x","9":"a x","10":"a x","11":"a x","12":"a x","13":"a x","14":"a x","15":"a x","16":"a x","17":"a x","18":"a x","19":"a x","20":"a x","21":"a x","22":"a x","23":"a x","24":"a x","25":"a x","26":"a x","27":"a x","28":"a x","29":"a x","30":"a x","31":"a x","32":"a x","33":"a x","34":"y","35":"y","36":"y"},"chrome":{"4":"a x","5":"a x","6":"a x","7":"a x","8":"a x","9":"a x","10":"a x","11":"a x","12":"a x","13":"a x","14":"a x","15":"a x","16":"a x","17":"a x","18":"a x","19":"a x","20":"a x","21":"a x","22":"a x","23":"a x","24":"a x","25":"a x","26":"a x","27":"a x","28":"a x","29":"a x","30":"a x","31":"a x","32":"a x","33":"a x","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"a x","5.1":"a x","6":"a x","6.1":"a x","7":"a x","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"a x","11.6":"a x","12":"a x","12.1":"a x","15":"a x","16":"a x","17":"a x","18":"a x","19":"a x","20":"a x","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"a x","4.2-4.3":"a x","5.0-5.1":"a x","6.0-6.1":"a x","7.0-7.1":"a x","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"a x","2.3":"a x","3":"a x","4":"a x","4.1":"a x","4.2-4.3":"a x","4.4":"a x","4.4.3":"a x"},"bb":{"7":"a x","10":"a x"},"op_mob":{"10":"n","11":"n","11.1":"a x","11.5":"a x","12":"a x","12.1":"a x","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"a x"},"ie_mob":{"10":"a x"},"and_uc":{"9.9":"a x"}},"notes":"Partial support refers to supporting the older specification's \"matchesSelector\" name rather than just \"matches\".","notes_by_num":{},"usage_perc_y":39.84,"usage_perc_a":48.84,"ucprefix":false,"parent":"","keywords":" matchesSelector","ie_id":"","chrome_id":""},"pointer-events":{"title":"CSS pointer-events (for HTML)","description":"This CSS property, when set to \"none\" allows elements to not receive hover/click events, instead the event will occur on anything behind it. ","spec":"http://wiki.csswg.org/spec/css4-ui#pointer-events","status":"unoff","links":[{"url":"http://robertnyman.com/2010/03/22/css-pointer-events-to-allow-clicks-on-underlying-elements/","title":"Article & tutorial"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/css.js#css-pointerevents","title":"has.js test"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y"}},"notes":"Already part of the SVG specification, and all SVG-supporting browsers appear to support the property on SVG elements.","notes_by_num":{},"usage_perc_y":83.33,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"pointerevents","ie_id":"csspointerevents","chrome_id":""},"blobbuilder":{"title":"Blob constructing","description":"Construct Blobs (binary large objects) either using the BlobBuilder API (deprecated) or the Blob constructor.","spec":"http://www.w3.org/TR/file-writer-api/#the-blobbuilder-interface","status":"wd","links":[{"url":"https://developer.mozilla.org/en/DOM/BlobBuilder","title":"MDN article on BlobBuilder"},{"url":"https://developer.mozilla.org/en-US/docs/DOM/Blob","title":"MDN article on Blobs"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"a x","7":"a x","8":"a x","9":"a x","10":"a x","11":"a x","12":"a x","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"a x","9":"a x","10":"a x","11":"a x","12":"a x","13":"a x","14":"a x","15":"a x","16":"a x","17":"a x","18":"a x","19":"a x","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"a x","4":"a x","4.1":"a x","4.2-4.3":"a x","4.4":"a x","4.4.3":"a x"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"a x"}},"notes":"Partial support refers to only supporting the now deprecated BlobBuilder to create blobs.","notes_by_num":{},"usage_perc_y":74.6,"usage_perc_a":9.69,"ucprefix":true,"parent":"fileapi","keywords":"","ie_id":"blob","chrome_id":"5328783104016384"},"filereader":{"title":"FileReader API","description":"Method of reading the contents of a File or Blob object into memory","spec":"http://www.w3.org/TR/FileAPI/#dfn-filereader","status":"wd","links":[{"url":"https://developer.mozilla.org/en/DOM/FileReader","title":"FileReader API"},{"url":"http://docs.webplatform.org/wiki/apis/file/FileReader","title":"WebPlatform Docs"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":84.55,"usage_perc_a":0,"ucprefix":false,"parent":"fileapi","keywords":"","ie_id":"filereader","chrome_id":"5171003185430528"},"filesystem":{"title":"Filesystem & FileWriter API","description":"Method of reading and writing files to a sandboxed file system.","spec":"http://www.w3.org/TR/file-system-api/","status":"unoff","links":[{"url":"http://www.html5rocks.com/en/tutorials/file/filesystem/","title":"HTML5 Rocks tutorial"},{"url":"http://docs.webplatform.org/wiki/apis/filesystem","title":"WebPlatform Docs"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"a x","9":"a x","10":"a x","11":"a x","12":"a x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x","37":"y x","38":"y x","39":"y x","40":"y x","41":"y x"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y x"},"and_chr":{"38":"y x"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"The File API: Directories and System specification is no longer being maintained and support may be dropped in future versions.","notes_by_num":{},"usage_perc_y":41.49,"usage_perc_a":0.18,"ucprefix":false,"parent":"","keywords":"filewriter","ie_id":"filewriter","chrome_id":"5452478162141184"},"bloburls":{"title":"Blob URLs","description":"Method of creating URL handles to the specified File or Blob object.","spec":"http://www.w3.org/TR/FileAPI/#url","status":"wd","links":[{"url":"https://developer.mozilla.org/en/DOM/window.URL.createObjectURL","title":"MDN article"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"y x","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"y x","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"y x","4.1":"y x","4.2-4.3":"y x","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y x"}},"notes":"","notes_by_num":{},"usage_perc_y":83.63,"usage_perc_a":0,"ucprefix":false,"parent":"fileapi","keywords":"createobjecturl","ie_id":"","chrome_id":""},"rellist":{"title":"relList (DOMTokenList)","description":"Method of easily manipulating rel attribute values on elements, using the DOMTokenList object (similar to classList).","spec":"https://html.spec.whatwg.org/multipage/semantics.html#dom-a-rellist","status":"wd","links":[{"url":"https://developer.mozilla.org/en-US/docs/DOM/DOMTokenList","title":"MDN - DOMTokenList"}],"categories":["DOM","HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n","38":"n","39":"n","40":"n","41":"n"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":11.37,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"typedarrays":{"title":"Typed Arrays","description":"JavaScript typed arrays provide a mechanism for accessing raw binary data much more efficiently.\r\n","spec":"http://www.khronos.org/registry/typedarray/specs/latest/","status":"other","links":[{"url":"https://developer.mozilla.org/en/javascript_typed_arrays","title":"MDN article"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":85.03,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"float64array,dataview,uint8array","ie_id":"typedarrays","chrome_id":"5135818813341696"},"deviceorientation":{"title":"DeviceOrientation events","description":"API for detecting orientation and motion events from the device running the browser.","spec":"http://www.w3.org/TR/orientation-event/","status":"wd","links":[{"url":"http://www.html5rocks.com/en/tutorials/device/orientation/","title":"HTML5 Rocks tutorial"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/features.js#native-orientation","title":"has.js test"},{"url":"http://html5labs.interoperabilitybridges.com/prototypes/device-orientation-events/device-orientation-events/info","title":"DeviceOrientation implementation prototype for IE10"},{"url":"http://aurelio.audero.it/demo/device-orientation-api-demo.html","title":"Demo"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"a"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"p","4":"p","5":"p","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"a","35":"a","36":"a"},"chrome":{"4":"n","5":"n","6":"n","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"a","35":"a","36":"a","37":"a","38":"a","39":"a","40":"a","41":"a"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"a","5.0-5.1":"a","6.0-6.1":"a","7.0-7.1":"a","8":"a"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"a","4":"a","4.1":"a","4.2-4.3":"a","4.4":"a","4.4.3":"a"},"bb":{"7":"n","10":"a"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"y","12.1":"y","24":"a"},"and_chr":{"38":"a"},"and_ff":{"32":"a"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"a"}},"notes":"Partial support refers to the lack of compassneedscalibration event. Partial support also refers to the lack of devicemotion event support for Chrome 30- and Opera. Opera Mobile 14 lost the ondevicemotion event support. Firefox 3.6, 4 and 5 support the non-standard [MozOrientation](https://developer.mozilla.org/en/DOM/MozOrientation) event.","notes_by_num":{},"usage_perc_y":0.06,"usage_perc_a":78.69,"ucprefix":false,"parent":"","keywords":"","ie_id":"deviceorientation,devicemotion","chrome_id":"5874690627207168,5556931766779904"},"script-defer":{"title":"defer attribute for external scripts","description":"The boolean defer attribute on script elements allows the external JavaScript file to run when the DOM is loaded, without delaying page load first.","spec":"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-defer","status":"cr","links":[{"url":"https://developer.mozilla.org/en/HTML/Element/script#Attributes","title":"MDN article"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/script.js#script-defer","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/html/attributes/defer","title":"WebPlatform Docs"}],"categories":["DOM","HTML5"],"stats":{"ie":{"5.5":"a","6":"a","7":"a","8":"a","9":"a","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Partial support in older IE refers to a buggy implementation (see issue)","notes_by_num":{},"usage_perc_y":85.09,"usage_perc_a":6.64,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"nav-timing":{"title":"Navigation Timing API","description":"API for accessing timing information related to navigation and elements.","spec":"http://www.w3.org/TR/navigation-timing/","status":"rec","links":[{"url":"https://developer.mozilla.org/en/API/navigationTiming","title":"MDN article"},{"url":"http://www.html5rocks.com/en/tutorials/webperformance/basics/","title":"HTML5 Rocks tutorial"},{"url":"http://docs.webplatform.org/wiki/apis/navigation_timing","title":"WebPlatform Docs"}],"categories":["DOM","JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":77.99,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"performance,performance.timing","ie_id":"navigationtimingapi","chrome_id":"5584144679567360"},"audio-api":{"title":"Web Audio API","description":"High-level JavaScript API for processing and synthesizing audio","spec":"http://www.w3.org/TR/webaudio/","status":"wd","links":[{"url":"https://github.com/corbanbrook/audionode.js","title":"Polyfill to support Web Audio API in Firefox"},{"url":"http://docs.webplatform.org/wiki/apis/webaudio","title":"WebPlatform Docs"},{"url":"http://www.doboism.com/projects/webaudio-compatibility/","title":"Additional browser compatibility tests for specific features"},{"url":"https://github.com/g200kg/WAAPISim","title":"Polyfill to enable Web Audio API through Firefox Audio Data api or flash"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"y x","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"y x","7.0-7.1":"y x","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Firefox versions < 25 support an alternative, deprecated audio API.","notes_by_num":{},"usage_perc_y":63.73,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"web-audio","ie_id":"webaudioapi","chrome_id":"6261718720184320"},"css-regions":{"title":"CSS Regions","description":"Method of flowing content into multiple elements.","spec":"http://www.w3.org/TR/css3-regions/","status":"wd","links":[{"url":"http://html.adobe.com/webstandards/cssregions/","title":"Adobe demos and samples"},{"url":"http://msdn.microsoft.com/en-us/ie/hh272902#_CSSConnected","title":"IE10 developer guide info"},{"url":"http://docs.webplatform.org/wiki/css/atrules/@region","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"a x","11":"a x"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"a x","16":"a x","17":"a x","18":"a x","19":"n d","20":"n d","21":"n d","22":"n d","23":"n d","24":"n d","25":"n d","26":"n d","27":"n d","28":"n d","29":"n d","30":"n d","31":"n d","32":"n d","33":"n d","34":"n d","35":"n","36":"n","37":"n","38":"n","39":"n","40":"n","41":"n"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"y x","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"n"},"ie_mob":{"10":"a x"},"and_uc":{"9.9":"y x"}},"notes":"Support in IE10 and IE11 is limited to using an iframe as a content source with the `-ms-flow-into: flow_name;` and `-ms-flow-from: flow_name;` syntax. ","notes_by_num":{},"usage_perc_y":12.77,"usage_perc_a":10.21,"ucprefix":false,"parent":"","keywords":"","ie_id":"regions","chrome_id":"5655612935372800"},"spellcheck-attribute":{"title":"Spellcheck attribute","description":"Attribute for `input`/`textarea` fields to enable/disable the browser's spellchecker.","spec":"https://html.spec.whatwg.org/multipage/interaction.html#spelling-and-grammar-checking","status":"cr","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/HTML/Controlling_spell_checking_in_HTML_formsControlling_spell_checking_in_HTML_forms","title":"MDN article"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"a","4.0-4.1":"a","4.2-4.3":"a","5.0-5.1":"a","6.0-6.1":"a","7.0-7.1":"a","8":"a"},"op_mini":{"5.0-8.0":"a"},"android":{"2.1":"a","2.2":"a","2.3":"a","3":"a","4":"a","4.1":"a","4.2-4.3":"a","4.4":"a","4.4.3":"a"},"bb":{"7":"a","10":"a"},"op_mob":{"10":"a","11":"a","11.1":"a","11.5":"a","12":"a","12.1":"a","24":"a"},"and_chr":{"38":"a"},"and_ff":{"32":"a"},"ie_mob":{"10":"a"},"and_uc":{"9.9":"a"}},"notes":"The partial support in mobile browsers results from their OS generally having built-in spell checking instead of using the wavy underline to indicate misspelled words. `spellcheck=\"false\"` does not seem to have any effect in these browsers.","notes_by_num":{},"usage_perc_y":60.34,"usage_perc_a":28.96,"ucprefix":false,"parent":"","keywords":"spelling","ie_id":"","chrome_id":""},"fullscreen":{"title":"Full Screen API","description":"API for allowing content (like a video or canvas element) to take up the entire screen.","spec":"http://www.w3.org/TR/fullscreen/","status":"wd","links":[{"url":"https://developer.mozilla.org/en/DOM/Using_full-screen_mode","title":"MDN article"},{"url":"http://jlongster.com/2011/11/21/canvas.html","title":"Blog post"},{"url":"http://hacks.mozilla.org/2012/01/using-the-fullscreen-api-in-web-browsers/","title":"Mozilla hacks article"},{"url":"http://docs.webplatform.org/wiki/dom/Element/requestFullscreen","title":"WebPlatform Docs"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"y x"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"a x","11":"a x","12":"a x","13":"a x","14":"a x","15":"a x","16":"a x","17":"a x","18":"a x","19":"a x","20":"a x","21":"a x","22":"a x","23":"a x","24":"a x","25":"a x","26":"a x","27":"a x","28":"a x","29":"a x","30":"a x","31":"a x","32":"a x","33":"a x","34":"a x","35":"a x","36":"a x"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"a x","16":"a x","17":"a x","18":"a x","19":"a x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x","37":"y x","38":"y x","39":"y x","40":"y x","41":"y x"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"a x","6":"y x","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"y","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"a"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y x"},"and_chr":{"38":"y x"},"and_ff":{"32":"a x"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Partial support refers to supporting an earlier draft of the spec.","notes_by_num":{},"usage_perc_y":51.57,"usage_perc_a":13.69,"ucprefix":false,"parent":"","keywords":"full-screen","ie_id":"fullscreenapi","chrome_id":"5259513871466496"},"requestanimationframe":{"title":"requestAnimationFrame","description":"API allowing a more efficient way of running script-based animation, compared to traditional methods using timeouts.","spec":"http://www.w3.org/TR/animation-timing/#requestAnimationFrame","status":"cr","links":[{"url":"http://paulirish.com/2011/requestanimationframe-for-smart-animating/","title":"Blog post"},{"url":"http://hacks.mozilla.org/2011/08/animating-with-javascript-from-setinterval-to-requestanimationframe/","title":"Mozilla Hacks article"},{"url":"http://docs.webplatform.org/wiki/dom/Window/requestAnimationFrame","title":"WebPlatform Docs"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"y x","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"y x","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":79.75,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"requestanimationframe","chrome_id":"5233400470306816"},"input-range":{"title":"Range input type","description":"Form field type that allows the user to select a value using a slider widget.","spec":"https://html.spec.whatwg.org/multipage/forms.html#range-state-(type=range)","status":"wd","links":[{"url":"https://github.com/fryn/html5slider","title":"Polyfill for Firefox"},{"url":"https://github.com/freqdec/fd-slider","title":"Cross-browser polyfill"},{"url":"http://tutorialzine.com/2011/12/what-you-need-to-know-html5-range-input/","title":"Tutorial"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/form.js#input-type-range","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/html/elements/input/type/range","title":"WebPlatform Docs"},{"url":"https://github.com/andreruffert/rangeslider.js","title":"rangeslider.js polyfill"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"u","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"a","2.2":"a","2.3":"a","3":"a","4":"a","4.1":"a","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Currently all Android browsers with partial support hide the slider input field by default. However, the element [can be styled](http://tiffanybbrown.com/2012/02/07/input-typerange-and-androids-stock-browser/) to be made visible and usable.","notes_by_num":{},"usage_perc_y":82.26,"usage_perc_a":3.18,"ucprefix":false,"parent":"forms","keywords":"input type=\"range\"","ie_id":"","chrome_id":""},"matchmedia":{"title":"matchMedia","description":"API for finding out whether or not a media query applies to the document.","spec":"http://www.w3.org/TR/cssom-view/#dom-window-matchmedia","status":"wd","links":[{"url":"https://github.com/paulirish/matchMedia.js/","title":"matchMedia.js polyfill"},{"url":"https://developer.mozilla.org/en/DOM/window.matchMedia","title":"MDN article"},{"url":"https://developer.mozilla.org/en/CSS/Using_media_queries_from_code","title":"MDN tutorial"},{"url":"http://docs.webplatform.org/wiki/css/media_queries/apis/matchMedia","title":"WebPlatform Docs"}],"categories":["DOM","JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":84.91,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"mediaquerylist","ie_id":"matchmedia","chrome_id":"4677872220372992"},"input-datetime":{"title":"Date and time input types","description":"Form field widget to easily allow users to enter a date or a time, generally by using a calendar/time input widget. Previously there was also a single field for both date & time, but this has been deprecated.","spec":"https://html.spec.whatwg.org/multipage/forms.html#date-state-(type=date)","status":"cr","links":[{"url":"http://net.tutsplus.com/tutorials/javascript-ajax/quick-tip-cross-browser-datepickers-within-minutes/","title":"Datepicker tutorial w/polyfill"},{"url":"https://github.com/zoltan-dulac/html5Forms.js","title":"Polyfill for HTML5 forms"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/form.js#input-type-datetime;input-type-datetime-local","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/html/elements/input/type/date","title":"WebPlatform Docs"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y"}},"notes":"Partial support in iOS refers to a lack of support for attributes like step, min, or max.\r\n\r\nOlder versions of Safari provide date-formatted text fields, but no real calendar widget.\r\n\r\nSome modified versions of the Android 4.x browser do have support for date/time fields.","notes_by_num":{},"usage_perc_y":53.97,"usage_perc_a":0,"ucprefix":false,"parent":"forms","keywords":"datepicker,timepicker,input type=\"date\",input type=\"time\"","ie_id":"","chrome_id":"6640933999214592"},"input-color":{"title":"Color input type","description":"Form field allowing the user to select a color.","spec":"https://html.spec.whatwg.org/multipage/forms.html#color-state-(type=color)","status":"wd","links":[{"url":"http://www.html5tutorial.info/html5-color.php","title":"Tutorial"},{"url":"https://github.com/jonstipe/color-polyfill","title":"Polyfill"},{"url":"http://docs.webplatform.org/wiki/html/elements/input/type/color","title":"WebPlatform Docs"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"n","16":"n","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"a"}},"notes":"","notes_by_num":{},"usage_perc_y":54.95,"usage_perc_a":3.11,"ucprefix":false,"parent":"forms","keywords":"colour,input type=\"color\"","ie_id":"","chrome_id":""},"input-number":{"title":"Number input type","description":"Form field type for numbers.","spec":"https://html.spec.whatwg.org/multipage/forms.html#number-state-(type=number)","status":"wd","links":[{"url":"http://www.html5tutorial.info/html5-number.php","title":"Tutorial"},{"url":"https://github.com/jonstipe/number-polyfill","title":"Polyfill"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/form.js#input-type-number","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/html/elements/input/type/number","title":"WebPlatform Docs"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"a","11":"a"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"a","4.0-4.1":"a","4.2-4.3":"a","5.0-5.1":"a","6.0-6.1":"a","7.0-7.1":"a","8":"a"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"a","4.1":"a","4.2-4.3":"a","4.4":"a","4.4.3":"a"},"bb":{"7":"n","10":"a"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"a"},"and_chr":{"38":"a"},"and_ff":{"32":"a"},"ie_mob":{"10":"a"},"and_uc":{"9.9":"a"}},"notes":"iOS Safari, Android 4, Chrome for Android show number input, but do not use \"step\", \"min\" or \"max\" attributes or show increment/decrement buttons. Internet Explorer 10 and 11 do not show increment/decrement buttons.","notes_by_num":{},"usage_perc_y":49.21,"usage_perc_a":34.51,"ucprefix":false,"parent":"forms","keywords":"spinner,input type=\"number\"","ie_id":"","chrome_id":""},"iframe-sandbox":{"title":"sandbox attribute for iframes","description":"Method of running external site pages with reduced privileges (e.g. no JavaScript) in iframes","spec":"https://html.spec.whatwg.org/multipage/embedded-content.html#attr-iframe-sandbox","status":"cr","links":[{"url":"http://blog.chromium.org/2010/05/security-in-depth-html5s-sandbox.html","title":"Chromium blog article"},{"url":"http://msdn.microsoft.com/en-us/hh563496","title":"MSDN article"},{"url":"http://docs.webplatform.org/wiki/html/attributes/sandbox","title":"WebPlatform Docs"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":84.36,"usage_perc_a":0.97,"ucprefix":false,"parent":"","keywords":"","ie_id":"iframesandboxattribute","chrome_id":"5715536319086592"},"css-counters":{"title":"CSS Counters","description":"Method of controlling number values in generated content, using the counter-reset and counter-increment properties.","spec":"http://www.w3.org/TR/CSS21/generate.html#counters","status":"wd","links":[{"url":"http://onwebdev.blogspot.com/2012/02/css-counters-tutorial.html","title":"Tutorial and information"},{"url":"https://developer.mozilla.org/en/CSS_Counters","title":"MDN article"},{"url":"http://docs.webplatform.org/wiki/css/properties/counter-reset","title":"WebPlatform Docs"}],"categories":["CSS2"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"y","9":"y","10":"y","11":"y"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":96.04,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"css-resize":{"title":"CSS resize property","description":"Method of allowing an element to be resized by the user, with options to limit to a given direction. ","spec":"http://www.w3.org/TR/css3-ui/#resize","status":"wd","links":[{"url":"http://css-tricks.com/almanac/properties/r/resize/","title":"CSS Tricks info"},{"url":"http://davidwalsh.name/textarea-resize","title":"On textarea resizing"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y x","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"a","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Opera 12.10+ currently only supports the resize property for textarea elements.","notes_by_num":{},"usage_perc_y":58.36,"usage_perc_a":0.23,"ucprefix":false,"parent":"","keywords":"horizontal,vertical","ie_id":"","chrome_id":""},"input-placeholder":{"title":"input placeholder attribute","description":"Method of setting placeholder text for text-like input fields, to suggest the expected inserted information.","spec":"https://html.spec.whatwg.org/multipage/forms.html#attr-input-placeholder","status":"cr","links":[{"url":"http://www.zachleat.com/web/placeholder/","title":"Article on usage"},{"url":"https://github.com/mathiasbynens/jquery-placeholder","title":"Polyfill"},{"url":"https://raw.github.com/phiggins42/has.js/master/detect/form.js#input-attr-placeholder","title":"has.js test"},{"url":"http://docs.webplatform.org/wiki/html/attributes/placeholder","title":"WebPlatform Docs"},{"url":"https://code.google.com/p/android/issues/detail?id=24626","title":"Issue 24626: Placeholder text for an input type="}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"a","3.2":"a","4":"a","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"a","11.1":"a","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"a","4.1":"a","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Partial support in older Safari and Opera versions refers to lacking placeholder support on textarea elements. ","notes_by_num":{},"usage_perc_y":83.83,"usage_perc_a":2.48,"ucprefix":false,"parent":"forms","keywords":"","ie_id":"","chrome_id":""},"spdy":{"title":"SPDY networking protocol","description":"Networking protocol for low-latency transport of content over the web.","spec":"http://tools.ietf.org/html/draft-mbelshe-httpbis-spdy-00","status":"unoff","links":[{"url":"http://en.wikipedia.org/wiki/SPDY","title":"Wikipedia"},{"url":"http://dev.chromium.org/spdy/spdy-whitepaper","title":"SPDY whitepaper"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"a"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"u"}},"notes":"","notes_by_num":{},"usage_perc_y":62.45,"usage_perc_a":7.37,"ucprefix":false,"parent":"","keywords":"","ie_id":"spdy3","chrome_id":"5152586365665280"},"css-repeating-gradients":{"title":"CSS Repeating Gradients","description":"Method of defining a repeating linear or radial color gradient as a CSS image.","spec":"http://www.w3.org/TR/css3-images/#repeating-gradients","status":"cr","links":[{"url":"https://developer.mozilla.org/en/CSS/repeating-linear-gradient","title":"MDN article"},{"url":"http://www.css3files.com/gradient/#repeatinglineargradient","title":"Information page"},{"url":"http://docs.webplatform.org/wiki/css/repeating-linear-gradient","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"y x","4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"y x","6":"y x","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"a x","11.5":"a x","11.6":"y x","12":"y x","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"y x","6.0-6.1":"y x","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"y x","4.1":"y x","4.2-4.3":"y x","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"a x","11.5":"a x","12":"y x","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y x"}},"notes":"Firefox 10+, Chrome 26+ and Opera 11.6+ also support the new \"to (side)\" syntax.","notes_by_num":{},"usage_perc_y":85.1,"usage_perc_a":0.02,"ucprefix":false,"parent":"css-gradients","keywords":"","ie_id":"","chrome_id":""},"css-filters":{"title":"CSS Filter Effects","description":"Method of applying filter effects (like blur, grayscale, brightness, contrast and hue) to elements, previously only possible by using SVG.","spec":"http://www.w3.org/TR/filter-effects/","status":"wd","links":[{"url":"http://html5-demos.appspot.com/static/css/filters/index.html","title":"Demo file for WebKit browsers"},{"url":"http://www.html5rocks.com/en/tutorials/filters/understanding-css/","title":"HTML5Rocks article"},{"url":"http://dl.dropbox.com/u/3260327/angular/CSS3ImageManipulation.html","title":"Filter editor"},{"url":"http://bennettfeely.com/filters/","title":"Filter Playground"}],"categories":["CSS","CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"a","4":"a","5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"a d","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x","37":"y x","38":"y x","39":"y x","40":"y x","41":"y x"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"y x","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"y x","7.0-7.1":"y x","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y x","4.4.3":"y x"},"bb":{"7":"n","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y x"},"and_chr":{"38":"y x"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y x"}},"notes":"Note that this property is significantly different from and incompatible with Microsoft's [older \"filter\" property](http://msdn.microsoft.com/en-us/library/ie/ms530752%28v=vs.85%29.aspx).\r\n\r\nPartial support in Firefox 31 [only with url() version](https://developer.mozilla.org/en-US/docs/Web/CSS/filter#Browser_compatibility)","notes_by_num":{},"usage_perc_y":56.25,"usage_perc_a":13.08,"ucprefix":false,"parent":"","keywords":"sepia,hue-rotate,invert,saturate","ie_id":"filters","chrome_id":""},"getcomputedstyle":{"title":"getComputedStyle","description":"API to get the current computed CSS styles applied to an element. This may be the current value applied by an animation or as set by a stylesheet.","spec":"http://www.w3.org/TR/cssom/#dom-window-getcomputedstyle","status":"rec","links":[{"url":"https://developer.mozilla.org/en/DOM/window.getComputedStyle","title":"MDN article"},{"url":"http://ie.microsoft.com/testdrive/HTML5/getComputedStyle/","title":"Demo"},{"url":"http://snipplr.com/view/13523/","title":"Polyfill for IE"},{"url":"http://docs.webplatform.org/wiki/css/cssom/methods/getComputedStyle","title":"WebPlatform Docs"}],"categories":["CSS3","DOM","JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"a","3.5":"a","3.6":"a","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"a","5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"a","3.2":"a","4":"a","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"a","9.5-9.6":"a","10.0-10.1":"a","10.5":"a","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"a","4.0-4.1":"a","4.2-4.3":"a","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"a"},"android":{"2.1":"a","2.2":"a","2.3":"a","3":"a","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"a","10":"y"},"op_mob":{"10":"a","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"Partial support in older Firefox versions refers to requiring the second parameter to be included.\r\n\r\nPartial support in all other browsers refers to not supporting getComputedStyle on pseudo-elements.","notes_by_num":{},"usage_perc_y":87.57,"usage_perc_a":4.5,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"word-break":{"title":"CSS3 word-break","description":"Property to prevent or allow words to be broken over multiple lines between letters.","spec":"http://www.w3.org/TR/css3-text/#word-break","status":"wd","links":[{"url":"https://developer.mozilla.org/en/CSS/word-break","title":"MDN article"},{"url":"http://docs.webplatform.org/wiki/css/properties/word-break","title":"WebPlatform Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"a","5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"a","35":"a","36":"a","37":"a","38":"a","39":"a","40":"a","41":"a"},"safari":{"3.1":"a","3.2":"a","4":"a","5":"a","5.1":"a","6":"a","6.1":"a","7":"a","7.1":"a","8":"a"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a"},"ios_saf":{"3.2":"a","4.0-4.1":"a","4.2-4.3":"a","5.0-5.1":"a","6.0-6.1":"a","7.0-7.1":"a","8":"a"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"a","2.2":"a","2.3":"a","3":"a","4":"a","4.1":"a","4.2-4.3":"a","4.4":"a","4.4.3":"a"},"bb":{"7":"a","10":"a"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"a"},"and_chr":{"38":"a"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"a"}},"notes":"Partial support refers to supporting the \"break-all\" value, but not the \"keep-all\" value.","notes_by_num":{},"usage_perc_y":29.48,"usage_perc_a":62.73,"ucprefix":false,"parent":"","keywords":"break-all,keep-all","ie_id":"","chrome_id":""},"viewport-units":{"title":"Viewport units: vw, vh, vmin, vmax","description":"Length units representing 1% of the viewport size for viewport width (vw), height (vh), the smaller of the two (vmin), or the larger of the two (vmax).","spec":"http://www.w3.org/TR/css3-values/#viewport-relative-lengths","status":"cr","links":[{"url":"http://css-tricks.com/viewport-sized-typography/","title":"Blog post"},{"url":"https://github.com/saabi/vminpoly","title":"Polyfill"},{"url":"https://github.com/rodneyrehm/viewport-units-buggyfill","title":"Buggyfill - Polyfill that fixes buggy support"},{"url":"http://blog.rodneyrehm.de/archives/34-iOS7-Mobile-Safari-And-Viewport-Units.html","title":"Back-Forward issue blog post"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"a","10":"a","11":"a"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"a","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"a","7.0-7.1":"a","8":"a"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"a"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"a #1"},"and_uc":{"9.9":"n"}},"notes":"Partial support in IE9 refers to supporting \"vm\" instead of \"vmin\".\r\n\r\nPartial support in IE10 refers to lack of \"vmax\" support.\r\n\r\nPartial support in iOS7 is due to buggy behavior of the \"vh\" unit (see [workaround](https://gist.github.com/pburtchaell/e702f441ba9b3f76f587)).\r\n\r\nAll other partial support refers to not supporting the \"vmax\" unit. ","notes_by_num":{},"usage_perc_y":57.35,"usage_perc_a":20.71,"ucprefix":false,"parent":"","keywords":"vm,viewport-percentage","ie_id":"","chrome_id":""},"contentsecuritypolicy":{"title":"Content Security Policy 1.0","description":"Mitigate cross-site scripting attacks by whitelisting allowed sources of script, style, and other resources.","spec":"http://www.w3.org/TR/CSP/","status":"cr","links":[{"url":"http://html5rocks.com/en/tutorials/security/content-security-policy/","title":"HTML5Rocks article"},{"url":"http://content-security-policy.com/","title":"CSP Examples & Quick Reference"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"a #1","11":"a #1"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y #1","5":"y #1","6":"y #1","7":"y #1","8":"y #1","9":"y #1","10":"y #1","11":"y #1","12":"y #1","13":"y #1","14":"y #1","15":"y #1","16":"y #1","17":"y #1","18":"y #1","19":"y #1","20":"y #1","21":"y #1","22":"y #1","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"y #2","15":"y #2","16":"y #2","17":"y #2","18":"y #2","19":"y #2","20":"y #2","21":"y #2","22":"y #2","23":"y #2","24":"y #2","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"a #2","6":"y #2","6.1":"y #2","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"a #2","6.0-6.1":"y #2","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y #2"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"a #1"},"and_uc":{"9.9":"y x"}},"notes":"The standard HTTP header is `Content-Security-Policy` which is used unless otherwise noted.","notes_by_num":{"1":"Supported through the `X-Content-Security-Policy` header","2":"Supported through the `X-Webkit-CSP` header"},"usage_perc_y":69.46,"usage_perc_a":10.72,"ucprefix":false,"parent":"","keywords":"csp,security,header","ie_id":"contentsecuritypolicy","chrome_id":"5205088045891584"},"pagevisibility":{"title":"Page Visibility","description":"JavaScript API for determining whether a document is visible on the display","spec":"http://www.w3.org/TR/page-visibility/","status":"rec","links":[{"url":"https://developer.mozilla.org/en-US/docs/DOM/Using_the_Page_Visibility_API","title":"MDN article"},{"url":"http://docs.webplatform.org/wiki/apis/timing/properties/visibilityState","title":"WebPlatform Docs"},{"url":"http://www.sitepoint.com/introduction-to-page-visibility-api/","title":"SitePoint article"},{"url":"http://aurelio.audero.it/demo/page-visibility-api-demo.html","title":"Demo"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"y","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y x","4.4.3":"y x"},"bb":{"7":"n","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y x"}},"notes":"","notes_by_num":{},"usage_perc_y":79.26,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"visibilitystate","ie_id":"pagevisibilityapi","chrome_id":"5689697795833856"},"stricttransportsecurity":{"title":"Strict Transport Security","description":"Declare that a website is only accessible over a secure connection (HTTPS).","spec":"http://tools.ietf.org/html/rfc6797","status":"other","links":[{"url":"http://dev.chromium.org/sts","title":"Chromium article"},{"url":"https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security","title":"MDN article"},{"url":"https://www.owasp.org/index.php/HTTP_Strict_Transport_Security","title":"OWASP article"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"u","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"u"}},"notes":"The HTTP header is 'Strict-Transport-Security'.","notes_by_num":{},"usage_perc_y":60.34,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"sts,hsts,security,header","ie_id":"httpstricttransportsecurityhsts","chrome_id":"4941480133132288"},"style-scoped":{"title":"Scoped CSS","description":"Allows CSS rules to be scoped to part of the document, based on the position of the style element.","spec":"https://html.spec.whatwg.org/multipage/semantics.html#attr-style-scoped","status":"cr","links":[{"url":"https://github.com/PM5544/scoped-polyfill","title":"Polyfill"},{"url":"http://html5doctor.com/the-scoped-attribute/","title":"HTML5 Doctor article"},{"url":"http://updates.html5rocks.com/2012/03/A-New-Experimental-Feature-style-scoped","title":"HTML5Rocks article"}],"categories":["CSS","HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n d #1","21":"n d #1","22":"n d #1","23":"n d #1","24":"n d #1","25":"n d #1","26":"n d #1","27":"n d #1","28":"n d #1","29":"n d #1","30":"n d #1","31":"n d #1","32":"n d #1","33":"n d #1","34":"n d #1","35":"n d #1","36":"n d #1","37":"n","38":"n","39":"n","40":"n","41":"n"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"u","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{"1":"Enabled in Chrome through the \"experimental Web Platform features\" flag in chrome://flags"},"usage_perc_y":15.51,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"scope","ie_id":"scopedstyles","chrome_id":"5374137958662144"},"svg-fragment":{"title":"SVG fragment identifiers","description":"Method of displaying only a part of an SVG image by defining a view ID or view box dimensions as the file's fragment identifier.","spec":"http://www.w3.org/TR/SVG/linking.html#SVGFragmentIdentifiers","status":"rec","links":[{"url":"http://www.broken-links.com/2012/08/14/better-svg-sprites-with-fragment-identifiers/","title":"Blog post"}],"categories":["SVG"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"y","8":"y"},"opera":{"9":"u","9.5-9.6":"u","10.0-10.1":"u","10.5":"u","10.6":"u","11":"u","11.1":"u","11.5":"u","11.6":"u","12":"u","12.1":"y","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"u","11":"u","11.1":"u","11.5":"u","12":"u","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":64.29,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"fragments,sprite","ie_id":"","chrome_id":""},"outline":{"title":"CSS outline","description":"The CSS outline property is a shorthand property for setting one or more of the individual outline properties outline-style, outline-width and outline-color in a single rule. In most cases the use of this shortcut is preferable and more convenient.","spec":"http://www.w3.org/TR/CSS2/ui.html#propdef-outline","status":"rec","links":[{"url":"http://dev.w3.org/csswg/css3-ui/#outline","title":"CSS Basic User Interface Module Level 3"},{"url":"https://developer.mozilla.org/en-US/docs/CSS/outline","title":"Mozilla Developer Network: outline"}],"categories":["CSS2"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"y","9":"y #1","10":"y #1","11":"y #1"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y #1","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y #1"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{"1":"Also supports the value of `invert` for `outline-color`. (support of this value is optional for browsers)"},"usage_perc_y":92.92,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"-moz-outline,outline-width,outline-style,outline-color","ie_id":"","chrome_id":""},"download":{"title":"Download attribute","description":"When used on an anchor, this attribute signifies that the resource it points to should be downloaded by the browser rather than navigate to it.","spec":"https://html.spec.whatwg.org/multipage/semantics.html#downloading-resources","status":"wd","links":[{"url":"http://updates.html5rocks.com/2011/08/Downloading-resources-in-HTML5-a-download","title":"HTML5Rocks post"},{"url":"http://html5-demos.appspot.com/static/a.download.html","title":"Demo: creating a text file and downloading it."}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":55.59,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"download,a.download,a[download],download attribute","ie_id":"adownloadattribute","chrome_id":"6473924464345088"},"pointer":{"title":"Pointer events","description":"This specification integrates various inputs from mice, touchscreens, and pens, making separate implementations no longer necessary and authoring for cross-device pointers easier. Not to be mistaken with the unrelated \"pointer-events\" CSS property.","spec":"http://www.w3.org/TR/pointerevents/","status":"cr","links":[{"url":"http://blogs.msdn.com/b/ie/archive/2011/09/20/touch-input-for-ie10-and-metro-style-apps.aspx","title":"Implementation of Pointer Events in IE10"},{"url":"http://blogs.msdn.com/b/eternalcoding/archive/2013/01/16/hand-js-a-polyfill-for-supporting-pointer-events-on-every-browser.aspx","title":"Hand.js, the polyfill for browsers only supporting Touch Events"},{"url":"http://blogs.msdn.com/b/davrous/archive/2013/02/20/handling-touch-in-your-html5-apps-thanks-to-the-pointer-events-of-ie10-and-windows-8.aspx","title":"Article & tutorial"}],"categories":["DOM","JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"a x","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"p","7":"p","8":"p","9":"p","10":"p","11":"p","12":"p","13":"p","14":"p","15":"p","16":"p","17":"p","18":"p","19":"p","20":"p","21":"p","22":"p","23":"p","24":"p","25":"p","26":"p","27":"p","28":"p","29":"p","30":"p","31":"p","32":"p","33":"p","34":"p","35":"p","36":"p"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"p","23":"p","24":"p","25":"p","26":"p","27":"p","28":"p","29":"p","30":"p","31":"p","32":"p","33":"p","34":"p","35":"p","36":"p","37":"p","38":"p","39":"p","40":"p","41":"p"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"u","7":"u","7.1":"u","8":"u"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"p","16":"p","17":"p","18":"p","19":"p","20":"p","21":"p","22":"p","23":"p","24":"p","25":"p","26":"p"},"ios_saf":{"3.2":"p","4.0-4.1":"p","4.2-4.3":"p","5.0-5.1":"p","6.0-6.1":"p","7.0-7.1":"p","8":"p"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"p","2.2":"p","2.3":"p","3":"p","4":"p","4.1":"p","4.2-4.3":"p","4.4":"p","4.4.3":"p"},"bb":{"7":"p","10":"p"},"op_mob":{"10":"n","11":"p","11.1":"p","11.5":"p","12":"p","12.1":"p","24":"p"},"and_chr":{"38":"p"},"and_ff":{"32":"p"},"ie_mob":{"10":"a x"},"and_uc":{"9.9":"p"}},"notes":"Partial support in IE10 refers the lack of pointerenter and pointerleave events. Firefox Nightly provides 'dom.w3c_pointer_events.enabled' option to support this specification starting with version 28.","notes_by_num":{},"usage_perc_y":7.37,"usage_perc_a":2.73,"ucprefix":false,"parent":"","keywords":"pointerdown,pointermove,pointerup,pointercancel,pointerover,pointerout,pointerenter,pointerleave","ie_id":"pointerevents","chrome_id":"4504699138998272"},"user-select-none":{"title":"CSS user-select: none","description":"Method of preventing text/element selection using CSS. ","spec":"https://developer.mozilla.org/en-US/docs/CSS/user-select","status":"unoff","links":[{"url":"https://developer.mozilla.org/en-US/docs/CSS/user-select","title":"MDN article"},{"url":"http://css-tricks.com/almanac/properties/u/user-select/","title":"CSS Tricks article"},{"url":"http://msdn.microsoft.com/en-us/library/ie/hh781492(v=vs.85).aspx","title":"MSDN Documentation"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y x","11":"y x"},"firefox":{"2":"y x","3":"y x","3.5":"y x","3.6":"y x","4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x"},"chrome":{"4":"u","5":"u","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x","37":"y x","38":"y x","39":"y x","40":"y x","41":"y x"},"safari":{"3.1":"y x","3.2":"y x","4":"y x","5":"y x","5.1":"y x","6":"y x","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x"},"ios_saf":{"3.2":"y x","4.0-4.1":"y x","4.2-4.3":"y x","5.0-5.1":"y x","6.0-6.1":"y x","7.0-7.1":"y x","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y x","2.2":"y x","2.3":"y x","3":"y x","4":"y x","4.1":"y x","4.2-4.3":"y x","4.4":"y x","4.4.3":"y x"},"bb":{"7":"y x","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y x"},"and_chr":{"38":"y x"},"and_ff":{"32":"y x"},"ie_mob":{"10":"y x"},"and_uc":{"9.9":"y x"}},"notes":"Currently the user-select property does not appear in any W3C specification. Support information here is only for \"none\" value, not others.","notes_by_num":{},"usage_perc_y":86.13,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"webp":{"title":"WebP image format","description":"Image format that supports lossy and lossless compression, as well as animation and alpha transparency.","spec":"https://developers.google.com/speed/webp/","status":"other","links":[{"url":"https://developers.google.com/speed/webp/","title":"Official website"},{"url":"http://antimatter15.github.io/weppy/demo.html","title":"Polyfill for browsers with WebM support"},{"url":"http://libwebpjs.appspot.com/","title":"Decoder in JS"},{"url":"http://webpjs.appspot.com/","title":"Polyfill for browsers with or without WebM support (i.e. IE6-IE9, Safari/iOS version 6.1 and below; Firefox versions 24 and bel"},{"url":"https://developers.google.com/speed/webp/faq#which_web_browsers_natively_support_webp","title":"Official website FAQ - Which web browsers natively support WebP?"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"p","5":"p","6":"p","7":"p","8":"p","9":"p","10":"p","11":"p","12":"p","13":"p","14":"p","15":"p","16":"p","17":"p","18":"p","19":"p","20":"p","21":"p","22":"p","23":"p","24":"p","25":"p","26":"p","27":"p","28":"p","29":"p","30":"p","31":"p","32":"p","33":"p","34":"p","35":"p","36":"p"},"chrome":{"4":"n","5":"n","6":"p","7":"p","8":"p","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"p","11":"p","11.1":"a","11.5":"a","11.6":"a","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"a","4.1":"a","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"a","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y"}},"notes":"Partial support in older Chrome, Opera and Android refers to browser not supporting lossless and alpha versions of WebP. Animated webp images are supported in Chrome 32+ and Opera 19+.","notes_by_num":{},"usage_perc_y":51.01,"usage_perc_a":3.18,"ucprefix":false,"parent":"","keywords":"","ie_id":"webpimageformatsupport","chrome_id":"6471725441089536,4785074604081152"},"intrinsic-width":{"title":"Intrinsic & Extrinsic Sizing","description":"Allows for the heights and widths to be specified in intrinsic values using the fill-available, max-content, min-content, and fit-content properties.","spec":"http://www.w3.org/TR/css3-sizing/","status":"wd","links":[{"url":"http://demosthenes.info/blog/662/Design-From-the-Inside-Out-With-CSS-MinContent","title":"Min-Content tutorial"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x","37":"y x","38":"y x","39":"y x","40":"y x","41":"y x"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"y x","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y x","4.4.3":"y x"},"bb":{"7":"n","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y x"},"and_chr":{"38":"y x"},"and_ff":{"32":"y x"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Prefixes are on the values, not the property names (e.g. -webkit-min-content) Firefox currently supports the \"-moz-available\" property rather than \"-moz-fill-available\".","notes_by_num":{},"usage_perc_y":65.42,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"fill-available,max-content,min-content,fit-content,contain-floats","ie_id":"cssintrinsicsizing","chrome_id":"5901353784180736"},"cryptography":{"title":"Web Cryptography","description":"JavaScript API for performing basic cryptographic operations in web applications","spec":"http://www.w3.org/TR/WebCryptoAPI/","status":"wd","links":[{"url":"http://polycrypt.net/","title":"PolyCrypt: A WebCrypto Polyfill"},{"url":"http://www.slideshare.net/Channy/the-history-and-status-of-web-crypto-api","title":"The History and Status of Web Crypto API"},{"url":"http://research.microsoft.com/en-us/projects/msrjscrypto/","title":"Microsoft Research JavaScript Cryptography Library"}],"categories":["HTML5","JS API"],"stats":{"ie":{"5.5":"n","6":"p","7":"p","8":"p","9":"p","10":"p","11":"a #1"},"firefox":{"2":"p","3":"p","3.5":"p","3.6":"p","4":"p","5":"p","6":"p","7":"p","8":"p","9":"p","10":"p","11":"p","12":"p","13":"p","14":"p","15":"p","16":"p","17":"p","18":"p","19":"p","20":"p","21":"p","22":"p","23":"p","24":"p","25":"p","26":"p","27":"p","28":"p","29":"p","30":"p","31":"p","32":"n d #2","33":"n d #2","34":"n d #2","35":"y","36":"y"},"chrome":{"4":"p","5":"p","6":"p","7":"p","8":"p","9":"p","10":"p","11":"p","12":"p","13":"p","14":"p","15":"p","16":"p","17":"p","18":"p","19":"p","20":"p","21":"p","22":"p","23":"p","24":"p","25":"p","26":"p","27":"p","28":"p","29":"p","30":"p","31":"p","32":"p","33":"p","34":"p","35":"p","36":"p","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"p","3.2":"p","4":"p","5":"p","5.1":"p","6":"p","6.1":"p","7":"p","7.1":"y x #3","8":"y x #3"},"opera":{"9":"p","9.5-9.6":"p","10.0-10.1":"p","10.5":"p","10.6":"p","11":"p","11.1":"p","11.5":"p","11.6":"p","12":"p","12.1":"p","15":"p","16":"p","17":"p","18":"p","19":"p","20":"p","21":"p","22":"p","23":"p","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"p","4.0-4.1":"p","4.2-4.3":"p","5.0-5.1":"p","6.0-6.1":"p","7.0-7.1":"p","8":"y x #3"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"p","2.2":"p","2.3":"p","3":"p","4":"p","4.1":"p","4.2-4.3":"p","4.4":"p","4.4.3":"p"},"bb":{"7":"p","10":"p"},"op_mob":{"10":"p","11":"p","11.1":"p","11.5":"p","12":"p","12.1":"p","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"p"},"ie_mob":{"10":"p"},"and_uc":{"9.9":"p"}},"notes":"Many browsers support the `[crypto.getRandomValues()](#feat=getrandomvalues)` method, but not actual cryptography functionality under `crypto.subtle`. \r\n\r\nAs the specification is currently still in development, users may be better off using polyfills or libraries like [PolyCrypt](http://polycrypt.net/). \r\n\r\nFirefox also has support for [unofficial features](https://developer.mozilla.org/en-US/docs/JavaScript_crypto). \r\n\r\nIn Chrome the API is only usable over secure connections. ([corresponding bug](https://code.google.com/p/chromium/issues/detail?id=373032))","notes_by_num":{"1":"Support in IE11 is based an older version of the specification. ","2":"Supported in Firefox behind the `dom.webcrypto.enabled` flag. ","3":"Supported in Safari using the `crypto.webkitSubtle` prefix"},"usage_perc_y":33.59,"usage_perc_a":7.37,"ucprefix":false,"parent":"","keywords":"subtle,subtlecrypto","ie_id":"webcryptoapi","chrome_id":"5030265697075200"},"template":{"title":"HTML templates","description":"Method of declaring a portion of reusable markup that is parsed but not rendered until cloned.","spec":"https://html.spec.whatwg.org/multipage/scripting.html#the-template-element","status":"wd","links":[{"url":"http://www.html5rocks.com/en/tutorials/webcomponents/template/","title":"HTML5Rocks - HTML's New template Tag"},{"url":"http://polymer-project.org","title":"Polymer project (polyfill & web components framework)"}],"categories":["DOM","HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":56.47,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"web components, template","ie_id":"templateelement","chrome_id":"5207287069147136"},"opus":{"title":"Opus","description":"Royalty-free open audio codec by IETF, which incorporated SILK from Skype and CELT from Xiph.org, to serve higher sound quality and lower latency at the same bitrate.","spec":"http://tools.ietf.org/html/rfc6716","status":"other","links":[{"url":"https://hacks.mozilla.org/2012/07/firefox-beta-15-supports-the-new-opus-audio-format/","title":"Introduction of Opus by Mozilla"},{"url":"http://www.ietf.org/mail-archive/web/rtcweb/current/msg04953.html","title":"Google's statement about the use of VP8 and Opus codec for WebRTC standard"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"For Opera the Linux version may be able to play it when the GStreamer module is up to date and the served mime-type is 'audio/ogg'.","notes_by_num":{},"usage_perc_y":43.8,"usage_perc_a":0,"ucprefix":false,"parent":"audio","keywords":"","ie_id":"","chrome_id":"4891189287321600"},"jpegxr":{"title":"JPEG XR image format","description":"The latest JPEG image format of Joint Photographic Experts Group which boasts better compression and supports lossless compression, alpha channel, and 48-bit deep color over normal jpg format.","spec":"http://www.itu.int/rec/T-REC-T.832","status":"other","links":[{"url":"http://msdn.microsoft.com/en-us/library/windows/desktop/hh707223(v=vs.85).aspx","title":"Microsoft JPEG XR Codec Overview"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n","38":"n","39":"n","40":"n","41":"n"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"n"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":12.49,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"channel-messaging":{"title":"Channel messaging","description":"Method for having two-way communication between browsing contexts (using MessageChannel)","spec":"http://www.w3.org/TR/webmessaging/#channel-messaging","status":"cr","links":[{"url":"https://dev.opera.com/articles/view/window-postmessage-messagechannel/#channel","title":"An Introduction to HTML5 web messaging"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n d #1","27":"n d #1","28":"n d #1","29":"n d #1","30":"n d #1","31":"n d #1","32":"n d #1","33":"n d #1","34":"n d #1","35":"n d #1","36":"n d #1"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"u","10.0-10.1":"u","10.5":"u","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"u","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{"1":"Supported in Firefox behind the `dom.messageChannel.enabled` flag."},"usage_perc_y":67.96,"usage_perc_a":0,"ucprefix":false,"parent":"x-doc-messaging","keywords":"","ie_id":"messagechannels","chrome_id":"6710044586409984"},"css3-tabsize":{"title":"CSS3 tab-size","description":"Method of customizing the width of the tab character. Only effective using 'white-space: pre' or 'white-space: pre-wrap'.","spec":"http://www.w3.org/TR/css3-text/#tab-size1","status":"wd","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/tab-size","title":"MDN article"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"y x","11":"y x","11.1":"y x","11.5":"y x","11.6":"y x","12":"y x","12.1":"y x","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y x"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"n","11":"y x","11.1":"y x","11.5":"y x","12":"y x","12.1":"y x","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y x"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":69.33,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"tab-size,tab-width","ie_id":"","chrome_id":""},"mutationobserver":{"title":"Mutation Observer","description":"Method for observing and reacting to changes to the DOM. Replaces MutationEvents, which is deprecated.","spec":"http://www.w3.org/TR/dom/","status":"wd","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver","title":"MutationObserver from MDN"},{"url":"https://github.com/Polymer/MutationObservers","title":"Polyfill"}],"categories":["DOM","JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"p","10":"p","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"y x","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"y x","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"p","4.1":"p","4.2-4.3":"p","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"p"},"and_uc":{"9.9":"y x"}},"notes":"When the content of a node with a single CharacterData child node is changed by innerHTML attribute and the node have a single different one as a result, WebKit browsers consider it as a characterData mutation of the child CharacterData node, while other browsers think it as a childList mutation of the parent node.","notes_by_num":{},"usage_perc_y":76.39,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"MutationObserver","ie_id":"mutationobservers","chrome_id":"5021194726146048"},"css-selection":{"title":"::selection CSS pseudo-element","description":"The ::selection CSS pseudo-element applies rules to the portion of a document that has been highlighted (e.g., selected with the mouse or another pointing device) by the user.","spec":"https://developer.mozilla.org/en-US/docs/Web/CSS/::selection","status":"unoff","links":[{"url":"http://quirksmode.org/css/selectors/selection.html","title":"::selection test"},{"url":"http://docs.webplatform.org/wiki/css/selectors/pseudo-elements/::selection","title":"WebPlatform Docs"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"y x","3":"y x","3.5":"y x","3.6":"y x","4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"u","11":"u","11.1":"u","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":72.99,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"::selection,selection","ie_id":"","chrome_id":""},"css-placeholder":{"title":":placeholder-shown CSS pseudo-class","description":"The :placeholder-shown pseudo-class represents the placeholder contents of a form field with placeholder text.","spec":"http://dev.w3.org/csswg/selectors/#placeholder","status":"unoff","links":[{"url":"http://msdn.microsoft.com/en-us/library/ie/hh772745(v=vs.85).aspx","title":"MSDN article"},{"url":"http://css-tricks.com/snippets/css/style-placeholder-text/","title":"CSS-Tricks article with all prefixes"},{"url":"http://wiki.csswg.org/ideas/placeholder-styling","title":"CSSWG discussion"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"a x","11":"a x"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"a x","5":"a x","6":"a x","7":"a x","8":"a x","9":"a x","10":"a x","11":"a x","12":"a x","13":"a x","14":"a x","15":"a x","16":"a x","17":"a x","18":"a x","19":"a x","20":"a x","21":"a x","22":"a x","23":"a x","24":"a x","25":"a x","26":"a x","27":"a x","28":"a x","29":"a x","30":"a x","31":"a x","32":"a x","33":"a x","34":"a x","35":"a x","36":"a x"},"chrome":{"4":"a x","5":"a x","6":"a x","7":"a x","8":"a x","9":"a x","10":"a x","11":"a x","12":"a x","13":"a x","14":"a x","15":"a x","16":"a x","17":"a x","18":"a x","19":"a x","20":"a x","21":"a x","22":"a x","23":"a x","24":"a x","25":"a x","26":"a x","27":"a x","28":"a x","29":"a x","30":"a x","31":"a x","32":"a x","33":"a x","34":"a x","35":"a x","36":"a x","37":"a x","38":"a x","39":"a x","40":"a x","41":"a x"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"a x","5.1":"a x","6":"a x","6.1":"a x","7":"a x","7.1":"a x","8":"a x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"a x","16":"a x","17":"a x","18":"a x","19":"a x","20":"a x","21":"a x","22":"a x","23":"a x","24":"a x","25":"a x","26":"a x"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"a x","5.0-5.1":"a x","6.0-6.1":"a x","7.0-7.1":"a x","8":"a x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"a x","2.2":"a x","2.3":"a x","3":"a x","4":"a x","4.1":"a x","4.2-4.3":"a x","4.4":"a x","4.4.3":"a x"},"bb":{"7":"u","10":"a x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"a x"},"and_chr":{"38":"a x"},"and_ff":{"32":"a x"},"ie_mob":{"10":"a x"},"and_uc":{"9.9":"a x"}},"notes":"Partial support refers to support for alternative syntax: ::-webkit-input-placeholder (Chrome/Safari/Opera),\r\n::-moz-placeholder (Firefox) and \r\n:-ms-input-placeholder (IE). ","notes_by_num":{},"usage_perc_y":0,"usage_perc_a":85.75,"ucprefix":false,"parent":"","keywords":"::placeholder,placeholder","ie_id":"","chrome_id":""},"canvas-blending":{"title":"Canvas blend modes","description":"Method of defining the effect resulting from overlaying two layers on a Canvas element. ","spec":"http://www.w3.org/TR/compositing-1/#blending","status":"wd","links":[{"url":"http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/","title":"Blog post"}],"categories":["Canvas"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":63.65,"usage_perc_a":0,"ucprefix":false,"parent":"canvas","keywords":"","ie_id":"compositingandblendingincanvas2d","chrome_id":""},"clipboard":{"title":"Clipboard API","description":"API to provide copy, cut and paste functionality using the OS clipboard.","spec":"http://www.w3.org/TR/clipboard-apis/","status":"wd","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent","title":"MDN page on ClipboardEvent"},{"url":"http://www.deluxeblogtips.com/2010/06/javascript-copy-to-clipboard.html","title":"Blog post on cross-browser usage"}],"categories":["JS API"],"stats":{"ie":{"5.5":"a #1","6":"a #1","7":"a #1","8":"a #1","9":"a #1","10":"a #1","11":"a #1"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"a","35":"a","36":"a","37":"a","38":"a","39":"a","40":"a","41":"a"},"safari":{"3.1":"u","3.2":"u","4":"a","5":"a","5.1":"a","6":"a","6.1":"a","7":"a","7.1":"a","8":"a"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"a","6.0-6.1":"a","7.0-7.1":"a","8":"a"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"a","4.4.3":"a"},"bb":{"7":"n","10":"a"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"a"},"and_chr":{"38":"a"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Partial support in IE refers using [a non-standard method](http://msdn.microsoft.com/en-us/library/ie/ms535220%28v=vs.85%29.aspx) of interacting with the clipboard. For other browsers it refers to not supporting the ClipboardEvent constructor.","notes_by_num":{},"usage_perc_y":12.28,"usage_perc_a":70.44,"ucprefix":false,"parent":"","keywords":"cut,copy,paste,clipboarddata","ie_id":"","chrome_id":""},"rtcpeerconnection":{"title":"WebRTC Peer-to-peer connections","description":"Method of allowing two users to communicate directly, browser to browser using the RTCPeerConnection API.","spec":"http://www.w3.org/TR/webrtc/#peer-to-peer-connections","status":"wd","links":[{"url":"http://www.webrtc.org/","title":"WebRTC Project site"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x","37":"y x","38":"y x","39":"y x","40":"y x","41":"y x"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y x"},"and_chr":{"38":"y x"},"and_ff":{"32":"y x"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"BlackBerry 10 recognizes RTCPeerConnection but real support is unconfirmed.","notes_by_num":{},"usage_perc_y":53.12,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"webrtcwebrtcv10api","chrome_id":"6612462929444864"},"css3-cursors":{"title":"CSS3 Cursors (original values)","description":"CSS3 cursor values added in the 2004 spec, including none, context-menu, cell, vertical-text, alias, copy, no-drop, not-allowed, nesw-resize, nwse-resize, col-resize, row-resize and all-scroll. ","spec":"http://www.w3.org/TR/css3-ui/#cursor","status":"wd","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor","title":"MDN Documentation"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"a","6":"a","7":"a","8":"a","9":"y","10":"y","11":"y"},"firefox":{"2":"a","3":"a","3.5":"a","3.6":"a","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"a","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"a","3.2":"a","4":"a","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"a","9.5-9.6":"a","10.0-10.1":"a","10.5":"a","10.6":"a","11":"a","11.1":"a","11.5":"a","11.6":"a","12":"a","12.1":"a","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"u"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Partial support in IE refers to no support for the alias, cell, copy, ew-resize, ns-resize, nesw-resize, nwse-resize or context-menu cursors. Opera 12.10- does not support 'none' or a URI.","notes_by_num":{},"usage_perc_y":62.46,"usage_perc_a":4.91,"ucprefix":false,"parent":"","keywords":"cursors, pointers","ie_id":"","chrome_id":""},"css3-cursors-newer":{"title":"CSS3 Cursors (new values)","description":"Support for `zoom-in` and `zoom-out` values for the CSS3 `cursor` property.","spec":"http://www.w3.org/TR/css3-ui/#cursor","status":"wd","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor","title":"MDN Documentation"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"y x","3":"y x","3.5":"y x","3.6":"y x","4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y x","3.2":"y x","4":"y x","5":"y x","5.1":"y x","6":"y x","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"y","12":"y","12.1":"y","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"y x","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Chrome, Safari and Firefox also support the unofficial `grab` and `grabbing` values (with prefix)","notes_by_num":{},"usage_perc_y":51.09,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"cursors, pointers","ie_id":"","chrome_id":""},"webvtt":{"title":"WebVTT - Web Video Text Tracks","description":"Format for marking up text captions for multimedia resources.","spec":"http://dev.w3.org/html5/webvtt/","status":"unoff","links":[{"url":"http://www.html5rocks.com/en/tutorials/track/basics/","title":"Getting Started With the Track Element"},{"url":"https://dev.opera.com/articles/view/an-introduction-to-webvtt-and-track/","title":"An Introduction to WebVTT and track"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n d","25":"n d","26":"n d","27":"n d","28":"n d","29":"n d","30":"n d","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"WebVTT must be used with the <track> element.\r\n\r\nFirefox currently lacks support for the for ::cue pseudoelement.","notes_by_num":{},"usage_perc_y":73.46,"usage_perc_a":0,"ucprefix":false,"parent":"video","keywords":"captions,track","ie_id":"","chrome_id":"6719115557339136"},"promises":{"title":"Promises","description":"A promise represents the eventual result of an asynchronous operation.","spec":"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects","status":"other","links":[{"url":"http://promises-aplus.github.io/promises-spec/","title":"Promises/A+ spec"},{"url":"http://www.chromestatus.com/features/5681726336532480","title":"Chromium dashboard - ES6 Promises"},{"url":"http://www.html5rocks.com/en/tutorials/es6/promises/","title":"JavaScript Promises: There and back again - HTML5 Rocks"},{"url":"https://github.com/jakearchibald/ES6-Promises","title":"A polyfill for ES6-style Promises"}],"categories":["JS API"],"stats":{"ie":{"5.5":"p","6":"p","7":"p","8":"p","9":"p","10":"p","11":"p"},"firefox":{"2":"p","3":"p","3.5":"p","3.6":"p","4":"p","5":"p","6":"p","7":"p","8":"p","9":"p","10":"p","11":"p","12":"p","13":"p","14":"p","15":"p","16":"p","17":"p","18":"p","19":"p","20":"p","21":"p","22":"p","23":"p","24":"p","25":"p","26":"p","27":"a","28":"a","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"p","5":"p","6":"p","7":"p","8":"p","9":"p","10":"p","11":"p","12":"p","13":"p","14":"p","15":"p","16":"p","17":"p","18":"p","19":"p","20":"p","21":"p","22":"p","23":"p","24":"p","25":"p","26":"p","27":"p","28":"p","29":"p","30":"p","31":"p","32":"a","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"p","3.2":"p","4":"p","5":"p","5.1":"p","6":"p","6.1":"p","7":"p","7.1":"y","8":"y"},"opera":{"9":"p","9.5-9.6":"p","10.0-10.1":"p","10.5":"p","10.6":"p","11":"p","11.1":"p","11.5":"p","11.6":"p","12":"p","12.1":"p","15":"p","16":"p","17":"p","18":"p","19":"a","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"p","4.0-4.1":"p","4.2-4.3":"p","5.0-5.1":"p","6.0-6.1":"p","7.0-7.1":"p","8":"y"},"op_mini":{"5.0-8.0":"p"},"android":{"2.1":"p","2.2":"p","2.3":"p","3":"p","4":"p","4.1":"p","4.2-4.3":"p","4.4":"p","4.4.3":"p"},"bb":{"7":"p","10":"p"},"op_mob":{"10":"p","11":"p","11.1":"p","11.5":"p","12":"p","12.1":"p","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"p"},"and_uc":{"9.9":"p"}},"notes":"","notes_by_num":{},"usage_perc_y":52.13,"usage_perc_a":0.52,"ucprefix":false,"parent":"","keywords":"futures","ie_id":"","chrome_id":"5681726336532480"},"css-sticky":{"title":"CSS position:sticky","description":"Keeps elements positioned as \"fixed\" or \"relative\" depending on how it appears in the viewport. As a result the element is \"stuck\" when necessary while scrolling.","spec":"http://dev.w3.org/csswg/css-position/#sticky-positioning","status":"unoff","links":[{"url":"http://updates.html5rocks.com/2012/08/Stick-your-landings-position-sticky-lands-in-WebKit","title":"HTML5Rocks"},{"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/position","title":"MDN article"},{"url":"http://docs.webplatform.org/wiki/css/properties/position","title":"WebPlatform Docs"},{"url":"https://github.com/filamentgroup/fixed-sticky","title":"Polyfill"},{"url":"https://github.com/wilddeer/stickyfill","title":"Another polyfill"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n d #1","27":"n d #1","28":"n d #1","29":"n d #1","30":"n d #1","31":"n d #1","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n d #2","24":"n d #2","25":"n d #2","26":"n d #2","27":"n d #2","28":"n d #2","29":"n d #2","30":"n d #2","31":"n d #2","32":"n d #2","33":"n d #2","34":"n d #2","35":"n d #2","36":"n d #2","37":"n","38":"n","39":"n","40":"n","41":"n"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"y x","7.0-7.1":"y x","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{"1":"Can be enabled in Firefox by setting the about:config preference layout.css.sticky.enabled to true","2":"Enabled in Chrome through the \"experimental Web Platform features\" flag in chrome://flags"},"usage_perc_y":16.82,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"positionsticky","chrome_id":"6190250464378880"},"dialog":{"title":"Dialog element","description":"Method of easily creating custom dialog boxes to display to the user with modal or non-modal options. Also includes a `::backdrop` pseudo-element for behind the element.","spec":"https://html.spec.whatwg.org/multipage/forms.html#the-dialog-element","status":"wd","links":[{"url":"https://github.com/GoogleChrome/dialog-polyfill","title":"Polyfill"}],"categories":["DOM","HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"u","35":"u","36":"u"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n d #1","33":"n d #1","34":"n d #1","35":"n d #1","36":"n d #1","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"u"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n d #2","20":"n d #2","21":"n d #2","22":"n d #2","23":"n d #2","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"u"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{"1":"Enabled through the \"Experimental Web Platform features\" flag in `chrome://flags`","2":"Enabled through the \"Experimental Web Platform features\" flag in `opera://flags`"},"usage_perc_y":31.76,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"HTMLDialogElement,showModal,backdrop","ie_id":"","chrome_id":"5770237022568448"},"css-variables":{"title":"CSS Variables","description":"Permits the declaration and usage of cascading variables in stylesheets.","spec":"http://www.w3.org/TR/css-variables/","status":"wd","links":[{"url":"https://hacks.mozilla.org/2013/12/css-variables-in-firefox-nightly/","title":"Mozilla hacks article (older syntax)"},{"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables","title":"MDN article"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n","38":"n","39":"u","40":"u","41":"u"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":10.91,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"css variables","ie_id":"cssvariables","chrome_id":"6401356696911872"},"vibration":{"title":"Vibration API","description":"Method to access the vibration mechanism of the hosting device.","spec":"http://www.w3.org/TR/vibration/","status":"wd","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/Guide/API/Vibration","title":"MDN article"},{"url":"http://davidwalsh.name/vibration-api","title":"Vibration API sample code & demo"},{"url":"http://code.tutsplus.com/tutorials/html5-vibration-api--mobile-22585","title":"Tuts+ article"},{"url":"http://aurelio.audero.it/demo/vibration-api-demo.html","title":"Demo"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":57.57,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"vibration,mobile,device","ie_id":"vibrationapi","chrome_id":"5698768766763008"},"css-backgroundblendmode":{"title":"CSS background-blend-mode","description":"Allows blending between CSS background images, gradients, and colors.","spec":"http://www.w3.org/TR/compositing-1/#background-blend-mode","status":"cr","links":[{"url":"http://codepen.io/bennettfeely/pen/rxoAc","title":"codepen example"},{"url":"https://medium.com/web-design-technique/6b51bf53743a","title":"Blog post"},{"url":"http://bennettfeely.com/gradients","title":"Demo"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":50.63,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"css blend modes,css blending modes,blending,multiply,screen,background","ie_id":"","chrome_id":"5768037999312896"},"css-mixblendmode":{"title":"Blending of HTML/SVG elements","description":"Allows blending between arbitrary SVG and HTML elements","spec":"http://www.w3.org/TR/compositing-1/#mix-blend-mode","status":"cr","links":[{"url":"http://codepen.io/bennettfeely/pen/csjzd","title":"codepen example"},{"url":"http://css-tricks.com/basics-css-blend-modes/","title":"Blog post"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n d #1","30":"n d #1","31":"n d #1","32":"n d #1","33":"n d #1","34":"n d #1","35":"n d #1","36":"n d #1","37":"n d #1","38":"n d #1","39":"n d #1","40":"n d #1","41":"n d #1"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{"1":"Enabled in Chrome through the \"experimental Web Platform features\" flag in chrome://flags"},"usage_perc_y":8.72,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"css blend modes,css blending modes","ie_id":"mixblendmode","chrome_id":"6362616360337408"},"web-speech":{"title":"Web Speech API","description":"Method to provide speech input and text-to-speech output features in a web browser.","spec":"https://dvcs.w3.org/hg/speech-api/raw-file/tip/speechapi.html","status":"unoff","links":[{"url":"http://updates.html5rocks.com/2013/01/Voice-Driven-Web-Apps-Introduction-to-the-Web-Speech-API","title":"HTML5Rocks article"},{"url":"http://www.sitepoint.com/introducing-web-speech-api/","title":"SitePoint article"},{"url":"http://aurelio.audero.it/demo/web-speech-api-demo.html","title":"Demo"},{"url":"http://zenorocha.github.io/voice-elements/","title":"Advanced demo and resource"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"a x","26":"a x","27":"a x","28":"a x","29":"a x","30":"a x","31":"a x","32":"a x","33":"a x","34":"a x","35":"a x","36":"a x","37":"a x","38":"a x","39":"a x","40":"a x","41":"a x"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"a x","7":"a x","7.1":"a","8":"a"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"a x","8":"a x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"a x"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Partial support in Chrome refers to some attributes missing. Partial support in Safari refers to only Speech Synthesis supported.","notes_by_num":{},"usage_perc_y":0,"usage_perc_a":49.74,"ucprefix":false,"parent":"","keywords":"speech,recognition,ASR","ie_id":"webspeechapiinput","chrome_id":"5908775487668224"},"high-resolution-time":{"title":"High Resolution Time API","description":"Method to provide the current time in sub-millisecond resolution and such that it is not subject to system clock skew or adjustments. Called using `performance.now()`","spec":"http://www.w3.org/TR/hr-time/","status":"rec","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/API/Performance.now()","title":"MDN article"},{"url":"http://updates.html5rocks.com/2012/08/When-milliseconds-are-not-enough-performance-now","title":"HTML5Rocks article"},{"url":"http://www.sitepoint.com/discovering-the-high-resolution-time-api/","title":"SitePoint article"},{"url":"http://aurelio.audero.it/demo/high-resolution-time-api-demo.html","title":"Demo"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"y x","21":"y x","22":"y x","23":"y x","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":70.58,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"performance,now,testing","ie_id":"highresolutiontime","chrome_id":"5349124069130240"},"battery-status":{"title":"Battery Status API","description":"Method to provide information about the battery status of the hosting device.","spec":"http://www.w3.org/TR/battery-status/","status":"cr","links":[{"url":"https://developer.mozilla.org/en-US/docs/WebAPI/Battery_Status","title":"MDN Docs"},{"url":"http://www.smartjava.org/examples/webapi-battery/","title":"Simple demo"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"a x #1","11":"a x #1","12":"a x #1","13":"a x #1","14":"a x #1","15":"a x #1","16":"a #1","17":"a #1","18":"a #1","19":"a #1","20":"a #1","21":"a #1","22":"a #1","23":"a #1","24":"a #1","25":"a #1","26":"a #1","27":"a #1","28":"a #1","29":"a #1","30":"a #1","31":"a #1","32":"a #1","33":"a #1","34":"a #1","35":"a #1","36":"a #1"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n d","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"y"},"and_ff":{"32":"a #1"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"a #1"}},"notes":"","notes_by_num":{"1":"Partial support refers to support for the older specification's `navigator.battery` rather than `navigator.getBattery()` to access the `BatteryManager`."},"usage_perc_y":8.01,"usage_perc_a":16.09,"ucprefix":false,"parent":"","keywords":"navigator.battery,navigator.getbattery,batterymanager","ie_id":"batterystatusapi","chrome_id":"4537134732017664"},"text-decoration":{"title":"text-decoration styling","description":"Method of defining the type, style and color of lines in the text-decoration property.","spec":"http://www.w3.org/TR/css-text-decor-3/#line-decoration","status":"cr","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style","title":"MDN Documentation for text-decoration-style"},{"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color","title":"MDN Documentation for text-decoration-color"},{"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line","title":"MDN Documentation for text-decoration-line"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n x d #1","27":"n x d #1","28":"n x d #1","29":"n x d #1","30":"n x d #1","31":"n x d #1","32":"n x d #1","33":"n x d #1","34":"n x d #1","35":"n x d #1","36":"n x d #1","37":"n x d #1","38":"n x d #1","39":"n x d #1","40":"n x d #1","41":"n x d #1"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"a x #2","8":"a x #2"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"a x #2"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y x"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{"1":"Enabled in Chrome through the \"experimental Web Platform features\" flag in chrome://flags","2":"Partial support in Safari refers to not supporting the text-decoration-style property."},"usage_perc_y":13.08,"usage_perc_a":1.81,"ucprefix":false,"parent":"","keywords":"text-decoration-line,text-decoration-style,text-decoration-color","ie_id":"","chrome_id":""},"speech-synthesis":{"title":"Speech Synthesis API","description":"A web API for controlling a text-to-speech output.","spec":"https://dvcs.w3.org/hg/speech-api/raw-file/tip/speechapi.html#tts-section","status":"unoff","links":[{"url":"http://updates.html5rocks.com/2014/01/Web-apps-that-talk---Introduction-to-the-Speech-Synthesis-API","title":"HTML5Rocks article"},{"url":"http://www.sitepoint.com/talking-web-pages-and-the-speech-synthesis-api/","title":"SitePoint article"},{"url":"http://aurelio.audero.it/demo/speech-synthesis-api-demo.html","title":"Demo"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":47.27,"usage_perc_a":0,"ucprefix":false,"parent":"web-speech","keywords":"speech,synthesis,speechSynthesis,TTS,SpeechSynthesisUtterance,","ie_id":"webspeechapisynthesis","chrome_id":"4782875580825600"},"user-timing":{"title":"User Timing API","description":"Method to help web developers measure the performance of their applications by giving them access to high precision timestamps.","spec":"http://www.w3.org/TR/user-timing/","status":"rec","links":[{"url":"http://www.sitepoint.com/discovering-user-timing-api/","title":"SitePoint article"},{"url":"http://www.html5rocks.com/en/tutorials/webperformance/usertiming/","title":"HTML5Rocks article"},{"url":"https://gist.github.com/pmeenan/5902672","title":"Polyfill"},{"url":"http://aurelio.audero.it/demo/user-timing-api-demo.html","title":"Demo"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":52.52,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"performance,testing,mark,measure","ie_id":"usertimingapi","chrome_id":"5066549580791808"},"srcset":{"title":"Srcset attribute","description":"Allows authors to specify alternate high-resolution sources on `img` elements","spec":"https://html.spec.whatwg.org/multipage/embedded-content.html#attr-img-srcset","status":"other","links":[{"url":"https://www.webkit.org/blog/2910/improved-support-for-high-resolution-displays-with-the-srcset-image-attribute/","title":"Improved support for high-resolution displays with the srcset image attribute"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n d #1","33":"n d #1","34":"n d #1","35":"n d #1","36":"n d #1"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"a #2","35":"a #2","36":"a #2","37":"a #2","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"a #2","8":"a #2"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"a #2","22":"a #2","23":"a #2","24":"a #2","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"a #2"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"a #2"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{"1":"Can be enabled in Firefox by setting the about:config preference dom.image.srcset.enabled to true","2":"Supports the subset of the syntax for resolution switching (using the `x` descriptor), but not the full syntax that can be used with `sizes` (using the `w` descriptor)."},"usage_perc_y":8.02,"usage_perc_a":31.8,"ucprefix":false,"parent":"","keywords":"","ie_id":"imgsrcset","chrome_id":"4644337115725824"},"ambient-light":{"title":"Ambient Light API","description":"Defines events that provide information about the ambient light level, as measured by a device's light sensor.","spec":"http://www.w3.org/TR/ambient-light/","status":"cr","links":[{"url":"http://aurelio.audero.it/demo/ambient-light-api-demo.html","title":"Demo"},{"url":"http://modernweb.com/2014/05/27/introduction-to-the-ambient-light-api/","title":"Article"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n","38":"n","39":"n","40":"n","41":"n"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Firefox desktop supports this API only on Mac OS X. [Support for Windows 7 is in progress](https://bugzilla.mozilla.org/show_bug.cgi?id=754199)","notes_by_num":{},"usage_perc_y":12.28,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"ambientlightevents","chrome_id":"5298357018820608"},"will-change":{"title":"CSS will-change property","description":"Method of optimizing animations by informing the browser which elements will change and what properties will change.","spec":"http://www.w3.org/TR/css-will-change-1/","status":"wd","links":[{"url":"https://dev.opera.com/articles/css-will-change-property/","title":"Detailed article"},{"url":"http://aerotwist.com/blog/bye-bye-layer-hacks/","title":"Blog post"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n d #1","30":"n d #1","31":"n d #1","32":"n d #1","33":"n d #1","34":"n d #1","35":"n d #1","36":"n d #1"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"u"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"u"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{"1":"Supported in Firefox behind the `layout.css.will-change.enabled` flag"},"usage_perc_y":36.17,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"scroll-position","ie_id":"csswillchange","chrome_id":"5954199330226176"},"css-shapes":{"title":"CSS Shapes Level 1","description":"Allows geometric shapes to be set in CSS to define an area for text to flow around.","spec":"http://www.w3.org/TR/css-shapes/","status":"cr","links":[{"url":"http://html.adobe.com/webplatform/layout/shapes/","title":"Adobe demos and samples"},{"url":"http://html.adobe.com/webplatform/layout/shapes/browser-support/","title":"CSS shapes support test by Adobe"},{"url":"http://alistapart.com/article/css-shapes-101","title":"A List Apart article"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n d #1","35":"n d #1","36":"n d #1","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{"1":"Enabled in Chrome through the \"experimental Web Platform features\" flag in chrome://flags"},"usage_perc_y":33.58,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"circle,ellipse,polygon,inset,shape-outside,shape-inside","ie_id":"shapes","chrome_id":"5163890719588352"},"domcontentloaded":{"title":"DOMContentLoaded","description":"JavaScript event that fires when the DOM is loaded, but before all page assets are loaded (CSS, images, etc.).","spec":"https://html.spec.whatwg.org/multipage/syntax.html#stop-parsing","status":"other","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/Reference/Events/DOMContentLoaded","title":"MDN: DOMContentLoaded"}],"categories":["DOM"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"y","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"y","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":92.08,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"dom,domready,onload,contentloaded,document","ie_id":"","chrome_id":""},"proximity":{"title":"Proximity API","description":"Defines events that provide information about the distance between a device and an object, as measured by a proximity sensor.","spec":"http://www.w3.org/TR/proximity/","status":"cr","links":[{"url":"http://aurelio.audero.it/demo/proximity-api-demo.html","title":"Demo"},{"url":"http://www.sitepoint.com/introducing-proximity-api/","title":"SitePoint article"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n","38":"n","39":"n","40":"n","41":"n"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":12.74,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"kerning-pairs-ligatures":{"title":"Improved kerning pairs & ligatures","description":"Currently non-standard method of improving kerning pairs & ligatures using text-rendering: optimizeLegibility.","spec":"http://www.w3.org/TR/SVG11/painting.html#TextRenderingProperty","status":"unoff","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering","title":"MDN article"},{"url":"http://css-tricks.com/almanac/properties/t/text-rendering/","title":"CSS Tricks article"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"u","4.0-4.1":"u","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":75.02,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"optimizeLegibility,optimizeSpeed,geometricPrecision","ie_id":"","chrome_id":""},"iframe-seamless":{"title":"seamless attribute for iframes","description":"The seamless attribute makes an iframe's contents actually part of a page, and adopts the styles from its hosting page. ","spec":"http://www.w3.org/html/wg/drafts/html/master/single-page.html#attr-iframe-seamless","status":"wd","links":[{"url":"https://github.com/ornj/seamless-polyfill","title":"Experimental polyfill"},{"url":"http://labs.ft.com/2013/01/seamless-iframes-not-quite-seamless/","title":"Article"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"u","35":"u","36":"u"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n d","21":"n d","22":"n d","23":"n d","24":"n d","25":"n d","26":"n d","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n","38":"n","39":"u","40":"u","41":"u"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"u"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"u","26":"u"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"u"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y"}},"notes":"Chrome 20-26 had partial support behind a flag, though this was [later removed](http://crbug.com/229421). \r\n\r\nSafari 7 (& iOS 7 Safari) hides the border of seamless iframes and recognizes the 'seamless' DOM property, but does not provide actual support.","notes_by_num":{},"usage_perc_y":3.11,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"iframeseamlessattribute","chrome_id":"6630329993396224"},"css-image-orientation":{"title":"CSS3 image-orientation","description":"CSS property used generally to fix the intended orientation of an image. This can be done using 90 degree increments or based on the image's EXIF data using the \"from-image\" value.","spec":"http://www.w3.org/TR/css3-images/#image-orientation","status":"cr","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/image-orientation","title":"MDN article"},{"url":"http://sethfowler.org/blog/2013/09/13/new-in-firefox-26-css-image-orientation/","title":"Blog post"},{"url":"http://jsbin.com/EXUTolo/4","title":"Demo (Chinese)"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n","38":"n","39":"n","40":"n","41":"n"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"a","4.0-4.1":"a","4.2-4.3":"a","5.0-5.1":"a","6.0-6.1":"a","7.0-7.1":"a","8":"a"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Partial support in iOS refers to the browser using EXIF data by default, though it does not actually support the property. Opening the image in a new tab in Chrome results in the image shown in the orientation according to the EXIF data.","notes_by_num":{},"usage_perc_y":11.89,"usage_perc_a":7.49,"ucprefix":false,"parent":"","keywords":"image-orientation,from-image,flip","ie_id":"","chrome_id":""},"picture":{"title":"Picture element","description":"A responsive images method to control which image resource a user agent presents to a user, based on resolution, media query and/or support for a particular image format","spec":"https://html.spec.whatwg.org/multipage/embedded-content.html#the-picture-element","status":"wd","links":[{"url":"http://responsiveimages.org/demos/","title":"Demo"},{"url":"http://code.tutsplus.com/tutorials/better-responsive-images-with-the-picture-element--net-36583","title":"Tutorial"},{"url":"http://usecases.responsiveimages.org/","title":"Read about the use cases"},{"url":"http://responsiveimages.org/","title":"General information about Responsive Images"},{"url":"https://dev.opera.com/articles/responsive-images/","title":"Blog post on usage"},{"url":"http://www.html5rocks.com/tutorials/responsive/picture-element/","title":"HTML5 Rocks tutorial"}],"categories":["DOM","HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n d #3","35":"n d #3","36":"n d #3"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n d #1","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n d #2","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{"1":"Enabled in Chrome through the \"experimental Web Platform features\" flag in chrome://flags","2":"Enabled in Opera through the \"experimental Web Platform features\" flag in opera://flags","3":"Enabled in Firefox by setting the about:config preference dom.image.picture.enable to true"},"usage_perc_y":8.02,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"pictureelement","chrome_id":"5910974510923776"},"woff2":{"title":"WOFF 2.0 - A better web font compression format","description":"TrueType/OpenType font that provides better compression than WOFF 1.0.","spec":"http://www.w3.org/TR/WOFF2/","status":"wd","links":[{"url":"https://gist.github.com/sergejmueller/cf6b4f2133bcb3e2f64a","title":"Basics about WOFF 2.0"},{"url":"http://everythingfonts.com/ttf-to-woff2","title":"WOFF 2.0 converter"}],"categories":["Other"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":36.23,"usage_perc_a":0,"ucprefix":false,"parent":"fontface","keywords":"woff, fontface, webfonts","ie_id":"","chrome_id":"6718644721549312"},"text-size-adjust":{"title":"CSS text-size-adjust","description":"On mobile devices, the text-size-adjust CSS property allows Web authors to control if and how the text-inflating algorithm is applied to the textual content of the element it is applied to.","spec":"http://dev.w3.org/csswg/css-size-adjust/","status":"wd","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/text-size-adjust","title":"MDN Docs"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n","38":"n","39":"n","40":"n","41":"n"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"y x","6.0-6.1":"y x","7.0-7.1":"y x","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y x"},"ie_mob":{"10":"y x"},"and_uc":{"9.9":"y x"}},"notes":"","notes_by_num":{},"usage_perc_y":11.17,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"web-animation":{"title":"Web Animations API","description":"This function lets you create an animation purely in JavaScript and have it run as efficiently as any CSS Animation or Transition.","spec":"http://dev.w3.org/fxtf/web-animations/","status":"wd","links":[{"url":"http://updates.html5rocks.com/2014/05/Web-Animations---element-animate-is-now-in-Chrome-36","title":"HTML5 Rocks"},{"url":"http://updates.html5rocks.com/2013/12/New-Web-Animations-engine-in-Blink-drives-CSS-Animations-Transitions","title":"HTML5 Rocks"}],"categories":["DOM","JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":36.23,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"js,animation,animate","ie_id":"webanimationsjavascriptapi","chrome_id":"4854343836631040"},"resource-timing":{"title":"Resource Timing","description":"Method to help web developers to collect complete timing information related to resources on a document.","spec":"http://www.w3.org/TR/resource-timing/","status":"cr","links":[{"url":"http://aurelio.audero.it/demo/resource-timing-api-demo.html","title":"Demo"},{"url":"http://googledevelopers.blogspot.com/2013/12/measuring-network-performance-with.html","title":"Blog post"},{"url":"http://www.sitepoint.com/introduction-resource-timing-api/","title":"SitePoint article"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n d #1","32":"n d #1","33":"n d #1","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{"1":"Can be enabled in Firefox using the dom.enable_resource_timing flag"},"usage_perc_y":52.54,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"performance,testing,resource","ie_id":"resourcetimingapi","chrome_id":"5796350423728128"},"custom-elements":{"title":"Custom Elements","description":"Method of defining and using new types of DOM elements in a document.","spec":"http://www.w3.org/TR/custom-elements/","status":"wd","links":[{"url":"http://w3c.github.io/webcomponents/spec/custom/","title":"W3C Editor's Draft spec (closer to current implementations)"},{"url":"http://www.polymer-project.org/platform/custom-elements.html","title":"Polymer project (polyfill & web components framework)"},{"url":"http://www.html5rocks.com/tutorials/webcomponents/customelements/","title":"HTML5Rocks - Custom Elements: defining new elements in HTML"},{"url":"https://code.google.com/p/chromium/issues/detail?id=234509","title":"Chromium tracking bug: Implement Custom Elements"},{"url":"https://bugzilla.mozilla.org/show_bug.cgi?id=889230","title":"Firefox tracking bug: Implement Custom Elements (from Web Components)"},{"url":"http://status.modern.ie/customelements","title":"IE Web Platform Status and Roadmap: Custom Elements"}],"categories":["DOM","HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"p","11":"p"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n d #1","24":"n d #1","25":"n d #1","26":"n d #1","27":"n d #1","28":"n d #1","29":"n d #1","30":"p d #1","31":"p d #1","32":"p d #1","33":"p d #1","34":"p d #1","35":"p d #1","36":"p d #1"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n d","28":"n d","29":"n d","30":"n d","31":"n d","32":"n d","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"p","6.1":"p","7":"p","7.1":"p","8":"p"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n d","16":"n d","17":"n d","18":"n d","19":"n d","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"p","8":"p"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"u"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{"1":"Enabled through the \"dom.webcomponents.enabled\" preference in about:config"},"usage_perc_y":38.91,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"web components","ie_id":"customelements","chrome_id":"4642138092470272"},"imports":{"title":"HTML Imports","description":"Method of including and reusing HTML documents in other HTML documents.","spec":"http://www.w3.org/TR/html-imports/","status":"wd","links":[{"url":"http://www.polymer-project.org/platform/html-imports.html","title":"Polymer project (polyfill & web components framework)"},{"url":"http://www.html5rocks.com/tutorials/webcomponents/imports/","title":"HTML5Rocks - HTML Imports: #include for the web"},{"url":"https://code.google.com/p/chromium/issues/detail?id=240592","title":"Chromium tracking bug: Implement HTML Imports"},{"url":"https://bugzilla.mozilla.org/show_bug.cgi?id=877072","title":"Firefox tracking bug: Implement HTML Imports"},{"url":"http://status.modern.ie/htmlimports","title":"IE Web Platform Status and Roadmap: HTML Imports"}],"categories":["DOM","HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"p","11":"p"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"p","31":"p","32":"p d #1","33":"p d #1","34":"p d #1","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n d #2","31":"n d #2","32":"n d #2","33":"n d #2","34":"n d #2","35":"p d #3","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"p","6.1":"p","7":"p","7.1":"p","8":"p"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n d #4","18":"n d #4","19":"n d #4","20":"n d #4","21":"n d #4","22":"p d #5","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"p","8":"p"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"u"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"p"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{"1":"Enabled through the \"dom.webcomponents.enabled\" preference in about:config","2":"Enabled through the \"Enable HTML Imports\" flag in chrome://flags","3":"Enabled through the \"Experimental Web Platform features\" flag in chrome://flags","4":"Enabled through the \"Enable HTML Imports\" flag in opera://flags","5":"Enabled through the \"Experimental Web Platform features\" flag in opera://flags"},"usage_perc_y":36.24,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"web components","ie_id":"htmlimports","chrome_id":"5144752345317376"},"input-file-multiple":{"title":"Multiple file selection","description":"Allows users to select multiple files in the file picker.","spec":"https://html.spec.whatwg.org/multipage/forms.html#attr-input-multiple","status":"wd","links":[{"url":"https://code.google.com/p/chromium/issues/detail?id=348912","title":"Chrome bug (for Android)"},{"url":"http://www.raymondcamden.com/2012/2/28/Working-with-HTML5s-multiple-file-upload-support","title":"Article"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n #1"},"android":{"2.1":"n #1","2.2":"n #1","2.3":"n #1","3":"n #1","4":"n #1","4.1":"n #1","4.2-4.3":"n #1","4.4":"n #1","4.4.3":"n #1"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n #1","11":"n #1","11.1":"n #1","11.5":"n #1","12":"n #1","12.1":"n #1","24":"n #1"},"and_chr":{"38":"n #1"},"and_ff":{"32":"n #1"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n #1"}},"notes":"","notes_by_num":{"1":"Not supported when tested on Android, presumably an OS limitation. "},"usage_perc_y":68.01,"usage_perc_a":0,"ucprefix":false,"parent":"forms","keywords":"","ie_id":"","chrome_id":""},"atob-btoa":{"title":"Base64 encoding and decoding","description":"Utility functions for of encoding and decoding strings to and from base 64: window.atob() and window.btoa().","spec":"https://html.spec.whatwg.org/multipage/webappapis.html#atob","status":"other","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa","title":"MDN article on btoa()"},{"url":"https://developer.mozilla.org/en-US/docs/Web/API/Window.atob","title":"MDN article on atob()"},{"url":"https://github.com/davidchambers/Base64.js","title":"Polyfill"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"y","3.2":"y","4":"y","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"u","10.0-10.1":"u","10.5":"u","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"y","4.0-4.1":"y","4.2-4.3":"y","5.0-5.1":"y","6.0-6.1":"y","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"y"},"op_mob":{"10":"u","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":89.65,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"atob,btoa","ie_id":"","chrome_id":""},"css-appearance":{"title":"CSS Appearance","description":"The `appearance` property defines how elements (particularly form controls) appear by default. By setting the value to `none` the default appearance can be entirely redefined using other CSS properties.","spec":"http://wiki.csswg.org/spec/css4-ui#appearance","status":"unoff","links":[{"url":"http://css-tricks.com/almanac/properties/a/appearance/","title":"CSS Tricks article"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"y x","3":"y x","3.5":"y x","3.6":"y x","4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x"},"chrome":{"4":"y x","5":"y x","6":"y x","7":"y x","8":"y x","9":"y x","10":"y x","11":"y x","12":"y x","13":"y x","14":"y x","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x","37":"y x","38":"y x","39":"y x","40":"y x","41":"y x"},"safari":{"3.1":"y x","3.2":"y x","4":"y x","5":"y x","5.1":"y x","6":"y x","6.1":"y x","7":"y x","7.1":"y x","8":"y x"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y x","16":"y x","17":"y x","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x"},"ios_saf":{"3.2":"y x","4.0-4.1":"y x","4.2-4.3":"y x","5.0-5.1":"y x","6.0-6.1":"y x","7.0-7.1":"y x","8":"y x"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"y x","2.2":"y x","2.3":"y x","3":"y x","4":"y x","4.1":"y x","4.2-4.3":"y x","4.4":"y x","4.4.3":"y x"},"bb":{"7":"y x","10":"y x"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y x"},"and_chr":{"38":"y x"},"and_ff":{"32":"y x"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y x"}},"notes":"The `appearance` property currently does not appear in any CSS specification so there is no specifically correct usage.","notes_by_num":{},"usage_perc_y":76.06,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"css-background-offsets":{"title":"CSS background-position edge offsets","description":"Allows CSS background images to be positioned relative to the specified edge using the 3 to 4 value syntax. For example: `background-position: right 5px bottom 5px;` for positioning 5px from the bottom-right corner.","spec":"http://www.w3.org/TR/css3-background/#background-position","status":"wd","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/background-position","title":"MDN article on background-position"},{"url":"http://briantree.se/quick-tip-06-use-four-value-syntax-properly-position-background-images/","title":"Basic information"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"y"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"y"},"op_mob":{"10":"n","11":"y","11.1":"y","11.5":"y","12":"y","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":80.36,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"4 value syntax","ie_id":"","chrome_id":""},"css-supports-api":{"title":"CSS.supports() DOM API","description":"The CSS.supports() static methods returns a Boolean value indicating if the browser supports a given CSS feature, or not.","spec":"http://dev.w3.org/csswg/css-conditional/#the-css-interface","status":"cr","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/API/CSS.supports","title":"MDN Docs"},{"url":"http://jsbin.com/rimevilotari/1/edit","title":"Demo (Chinese)"},{"url":"https://dev.opera.com/articles/native-css-feature-detection/","title":"Native CSS Feature Detection via the @supports Rule"},{"url":"http://davidwalsh.name/css-supports","title":"CSS @supports"},{"url":"http://blog.csdn.net/hfahe/article/details/8619480","title":"Article (Chinese)"}],"categories":["DOM","JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n d","21":"n d","22":"n d","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"y #1","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"See also [@supports in CSS](#feat=css-featurequeries)\r\n\r\nSee the [WebKit Bug](http://trac.webkit.org/changeset/142739) for status in Safari","notes_by_num":{"1":"Opera 12 uses a different method name('window.supportsCSS')"},"usage_perc_y":54.58,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"conditional","ie_id":"conditionalrules","chrome_id":"4993981813358592"},"css-touch-action":{"title":"CSS touch-action property","description":"touch-action is a CSS property that controls filtering of gesture events, providing developers with a declarative mechanism to selectively disable touch scrolling (in one or both axes), pinch-zooming or double-tap-zooming.","spec":"http://www.w3.org/TR/pointerevents/#the-touch-action-css-property","status":"cr","links":[{"url":"http://docs.webplatform.org/wiki/css/properties/touch-action","title":"WebPlatform Docs"},{"url":"http://msdn.microsoft.com/en-us/library/windows/apps/hh767313.aspx","title":"MSDN Docs"},{"url":"http://updates.html5rocks.com/2013/12/300ms-tap-delay-gone-away","title":"300ms tap delay, gone away"},{"url":"http://blogs.telerik.com/appbuilder/posts/13-11-21/what-exactly-is.....-the-300ms-click-delay","title":"What Exactly Is..... The 300ms Click Delay"},{"url":"http://thx.github.io/mobile/300ms-click-delay/","title":"What Exactly Is..... The 300ms Click Delay(Chinese)"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y x #2","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n d #1","30":"n d #1","31":"n d #1","32":"n d #1","33":"n d #1","34":"n d #1","35":"n d #1","36":"n d #1"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"u"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"y x #2"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{"1":"Supported in Firefox behind the `layout.css.touch_action.enabled` flag, Firefox for Windows 8 Touch ('Metro') enabled by default.","2":"IE10+ has already supported these property which are not in standard at present such as'pinch-zoom','double-tap-zoom','cross-slide-x','cross-slide-y'."},"usage_perc_y":46.33,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"touch action","ie_id":"csstouchaction","chrome_id":"5912074022551552"},"autofocus":{"title":"Autofocus attribute","description":"Allows a form field to be immediately focused on page load.","spec":"https://html.spec.whatwg.org/multipage/forms.html#autofocusing-a-form-control:-the-autofocus-attribute","status":"wd","links":[{"url":"http://davidwalsh.name/autofocus","title":"Article on autofocus"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"y","5.1":"y","6":"y","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"y","10.0-10.1":"y","10.5":"y","10.6":"y","11":"y","11.1":"y","11.5":"y","11.6":"y","12":"y","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y","4.4.3":"y"},"bb":{"7":"y","10":"u"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":74.74,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"css-clip-path":{"title":"CSS clip-path property","description":"Method of defining the visible region of an element using SVG or a shape definition.","spec":"http://www.w3.org/TR/css-masking-1/#the-clip-path","status":"wd","links":[{"url":"http://css-tricks.com/almanac/properties/c/clip/","title":"CSS Tricks article"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"a #1","3.6":"a #1","4":"a #1","5":"a #1","6":"a #1","7":"a #1","8":"a #1","9":"a #1","10":"a #1","11":"a #1","12":"a #1","13":"a #1","14":"a #1","15":"a #1","16":"a #1","17":"a #1","18":"a #1","19":"a #1","20":"a #1","21":"a #1","22":"a #1","23":"a #1","24":"a #1","25":"a #1","26":"a #1","27":"a #1","28":"a #1","29":"a #1","30":"a #1","31":"a #1","32":"a #1","33":"a #1","34":"a #1","35":"a #1","36":"a #1"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"a x #2","25":"a x #2","26":"a x #2","27":"a x #2","28":"a x #2","29":"a x #2","30":"a x #2","31":"a x #2","32":"a x #2","33":"a x #2","34":"a x #2","35":"a x #2","36":"a x #2","37":"a x #2","38":"a x #2","39":"a x #2","40":"a x #2","41":"a x #2"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"a x #2","7.1":"a x #2","8":"a x #2"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"a x #2","16":"a x #2","17":"a x #2","18":"a x #2","19":"a x #2","20":"a x #2","21":"a x #2","22":"a x #2","23":"a x #2","24":"a x #2","25":"a x #2","26":"a x #2"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"a x #2","8":"a x #2"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"a x #2","4.4.3":"a x #2"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"a x #2"},"and_chr":{"38":"a x #2"},"and_ff":{"32":"a #1"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{"1":"Partial support refers to only supporting the `url()` syntax.","2":"Partial support refers to supporting shapes and the `url(#foo)` syntax for inline SVG, but not shapes in external SVGs."},"usage_perc_y":0,"usage_perc_a":64.88,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"getrandomvalues":{"title":"crypto.getRandomValues()","description":"Method of generating cryptographically random values.","spec":"http://www.w3.org/TR/WebCryptoAPI/#RandomSource-method-getRandomValues","status":"wd","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues","title":"MDN article"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"y x"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"y","7":"y","7.1":"y","8":"y"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"y","8":"y"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"y","4.4.3":"y"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":72.73,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"screen-orientation":{"title":"Screen Orientation","description":"Provides the ability to read the screen orientation state, to be informed when this state changes, and to be able to lock the screen orientation to a specific state.","spec":"http://www.w3.org/TR/screen-orientation/","status":"wd","links":[{"url":"http://aurelio.audero.it/demo/screen-orientation-api-demo.html","title":"Demo"},{"url":"https://developer.mozilla.org/en-US/docs/Web/API/Screen.orientation","title":"MDN article"},{"url":"http://www.sitepoint.com/introducing-screen-orientation-api/","title":"SitePoint article"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"y x"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"y x","19":"y x","20":"y x","21":"y x","22":"y x","23":"y x","24":"y x","25":"y x","26":"y x","27":"y x","28":"y x","29":"y x","30":"y x","31":"y x","32":"y x","33":"y x","34":"y x","35":"y x","36":"y x"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n","38":"n","39":"u","40":"u","41":"u"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y x"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"y"}},"notes":"","notes_by_num":{},"usage_perc_y":23.03,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"screenorientationapi","chrome_id":"6191285283061760"},"font-loading":{"title":"CSS Font Loading","description":"This CSS module defines a scripting interface to font faces in CSS, allowing font faces to be easily created and loaded from script. It also provides methods to track the loading status of an individual font, or of all the fonts on an entire page.","spec":"http://dev.w3.org/csswg/css-font-loading/","status":"cr","links":[{"url":"https://www.igvita.com/2014/01/31/optimizing-web-font-rendering-performance/#font-load-events","title":"Optimizing with font load events"}],"categories":["CSS3","JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":37.45,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":"6244676289953792"},"font-unicode-range":{"title":"Font unicode-range subsetting","description":"This @font-face descriptor defines the set of Unicode codepoints that may be supported by the font face for which it is declared. The descriptor value is a comma-delimited list of Unicode range (<urange>) values. The union of these ranges defines the set of codepoints that serves as a hint for user agents when deciding whether or not to download a font resource for a given text run.","spec":"http://dev.w3.org/csswg/css-fonts/#descdef-unicode-range","status":"cr","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/unicode-range","title":"MDN: unicode-range"},{"url":"https://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/css/property/unicode-range","title":"Safari CSS Reference: unicode-range"},{"url":"http://docs.webplatform.org/wiki/css/properties/unicode-range","title":"Web Platform Docs: unicode-range"}],"categories":["CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"a","10":"a","11":"a"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n"},"chrome":{"4":"a","5":"a","6":"a","7":"a","8":"a","9":"a","10":"a","11":"a","12":"a","13":"a","14":"a","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"a","24":"a","25":"a","26":"a","27":"a","28":"a","29":"a","30":"a","31":"a","32":"a","33":"a","34":"a","35":"a","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"a","3.2":"a","4":"a","5":"a","5.1":"a","6":"a","6.1":"a","7":"a","7.1":"a","8":"a"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"a","16":"a","17":"a","18":"a","19":"a","20":"a","21":"a","22":"a","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"a","4.0-4.1":"a","4.2-4.3":"a","5.0-5.1":"a","6.0-6.1":"a","7.0-7.1":"a","8":"a"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"a","2.2":"a","2.3":"a","3":"a","4":"a","4.1":"a","4.2-4.3":"a","4.4":"a","4.4.3":"a"},"bb":{"7":"u","10":"u"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"a"},"and_chr":{"38":"y"},"and_ff":{"32":"a"},"ie_mob":{"10":"a"},"and_uc":{"9.9":"a"}},"notes":"Partial support indicates that unnecessary code-ranges are downloaded by the browser - see [browser test matrix](https://docs.google.com/a/chromium.org/spreadsheets/d/18h-1gaosu4-KYxH8JUNL6ZDuOsOKmWfauoai3CS3hPY/edit?pli=1#gid=0).","notes_by_num":{},"usage_perc_y":36.23,"usage_perc_a":39.03,"ucprefix":false,"parent":"","keywords":"font face,unicode,unicode-range","ie_id":"","chrome_id":""},"gamepad":{"title":"Gamepad API","description":"API to support input from USB gamepad controllers though JavaScript.","spec":"http://www.w3.org/TR/gamepad/","status":"wd","links":[{"url":"http://luser.github.io/gamepadtest/","title":"Controller demo"},{"url":"https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API","title":"MDN article"},{"url":"http://www.html5rocks.com/en/tutorials/doodles/gamepad/","title":"HTML5Rocks article"},{"url":"http://gamedevelopment.tutsplus.com/tutorials/using-the-html5-gamepad-api-to-add-controller-support-to-browser-games--cms-21345","title":"Detailed tutorial"}],"categories":["JS API"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"y x","22":"y x","23":"y x","24":"y x","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"n"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"n"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":44.81,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"gamepadapi","chrome_id":"5118776383111168"},"css-font-stretch":{"title":"CSS font-stretch","description":"If a font has multiple types of variations based on the width of characters, the `font-stretch` property allows the appropriate one to be selected. The property in itself does not cause the browser to stretch to a font.","spec":"http://www.w3.org/TR/css-fonts-3/#font-stretch-prop","status":"cr","links":[{"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/font-stretch","title":"MDN article"},{"url":"http://css-tricks.com/almanac/properties/f/font-stretch/","title":"CSS Tricks article"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"n","5":"n","6":"n","7":"n","8":"n","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n","38":"n","39":"u","40":"u","41":"u"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"u"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"u","26":"u"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"u"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"n"}},"notes":"","notes_by_num":{},"usage_perc_y":25.5,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"font stretch","ie_id":"cssfontstretch","chrome_id":"4598830058176512"},"font-size-adjust":{"title":"CSS font-size-adjust","description":"Method of adjusting the font size in a matter that relates to the height of lowercase vs. uppercase letters. This makes it easier to set the size of fallback fonts.","spec":"http://www.w3.org/TR/css-fonts-3/#font-size-adjust-prop","status":"cr","links":[{"url":"http://webdesignernotebook.com/css/the-little-known-font-size-adjust-css3-property/","title":"Article on font-size-adjust"},{"url":"https://developer.mozilla.org/en-US/docs/Web/CSS/font-size-adjust","title":"MDN article on font-size-adjust"}],"categories":["CSS"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n","38":"n","39":"u","40":"u","41":"u"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"u"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"u","26":"u"},"ios_saf":{"3.2":"n","4.0-4.1":"n","4.2-4.3":"n","5.0-5.1":"n","6.0-6.1":"n","7.0-7.1":"n","8":"n"},"op_mini":{"5.0-8.0":"n"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"u"},"bb":{"7":"n","10":"n"},"op_mob":{"10":"n","11":"n","11.1":"n","11.5":"n","12":"n","12.1":"n","24":"n"},"and_chr":{"38":"n"},"and_ff":{"32":"n"},"ie_mob":{"10":"n"},"and_uc":{"9.9":"n"}},"notes":"Does not appear to work on Firefox mobile, despite recognition of the property.","notes_by_num":{},"usage_perc_y":13.18,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"link-icon-png":{"title":"PNG favicons","description":"Icon used by browsers to identify a webpage or site. While all browsers support the `.ico` format, the PNG format can be preferable.","spec":"https://html.spec.whatwg.org/multipage/semantics.html#rel-icon","status":"pr","links":[{"url":"http://css-tricks.com/favicon-quiz/","title":"Detailed info on favicons for various uses"}],"categories":["HTML5"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"y"},"firefox":{"2":"y","3":"y","3.5":"y","3.6":"y","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"y #1","5":"y #1","6":"y #1","7":"y #1","8":"y #1","9":"y #1","10":"y #1","11":"y #1","12":"y #1","13":"y #1","14":"y #1","15":"y #1","16":"y #1","17":"y #1","18":"y #1","19":"y #1","20":"y #1","21":"y #1","22":"y #1","23":"y #1","24":"y #1","25":"y #1","26":"y #1","27":"y #1","28":"y #1","29":"y #1","30":"y #1","31":"y #1","32":"y #1","33":"y #1","34":"y #1","35":"y #1","36":"y #1","37":"y #1","38":"y #1","39":"y #1","40":"y #1","41":"y #1"},"safari":{"3.1":"y #2","3.2":"y #2","4":"y #2","5":"y #2","5.1":"y #2","6":"y #2","6.1":"y #2","7":"y #2","7.1":"y #2","8":"y #2"},"opera":{"9":"y #3","9.5-9.6":"y #3","10.0-10.1":"y #3","10.5":"y #3","10.6":"y #3","11":"y #3","11.1":"y #3","11.5":"y #3","11.6":"y #3","12":"y #3","12.1":"y #3","15":"y #1","16":"y #1","17":"y #1","18":"y #1","19":"y #1","20":"y #1","21":"y #1","22":"y #1","23":"y #1","24":"y #1","25":"y #1","26":"y #1"},"ios_saf":{"3.2":"n #4","4.0-4.1":"n #4","4.2-4.3":"n #4","5.0-5.1":"n #4","6.0-6.1":"n #4","7.0-7.1":"n #4","8":"n #4"},"op_mini":{"5.0-8.0":"n #4"},"android":{"2.1":"y","2.2":"y","2.3":"y","3":"y","4":"y","4.1":"y","4.2-4.3":"y","4.4":"y #3","4.4.3":"y #3"},"bb":{"7":"y","10":"n #4"},"op_mob":{"10":"n #4","11":"n #4","11.1":"n #4","11.5":"n #4","12":"n #4","12.1":"n #4","24":"n #4"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"n #4"},"and_uc":{"9.9":"y #2"}},"notes":"Win8/IE10+ and iOS Safari support other types of icons for webpages too, using alternate tags.\r\n\r\nSee also [SVG favicons](#feat=link-icon-svg).","notes_by_num":{"1":"If both ICO and PNG are available, will use ICO over PNG if ICO has better matching sizes set.","2":"If both ICO and PNG are available, will ALWAYS use ICO file, regardless of sizes set.","3":"If multiple formats are available, will use the last one loaded, regardless of sizes (effectively picks at random).","4":"Does not use favicons at all (but may have alternative for bookmarks, etc)"},"usage_perc_y":76.28,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"link-icon-svg":{"title":"SVG favicons","description":"Icon used by browsers to identify a webpage or site. While all browsers support the `.ico` format, the SVG format can be preferable to more easily support higher resolutions or larger icons.","spec":"https://html.spec.whatwg.org/multipage/semantics.html#rel-icon","status":"pr","links":[{"url":"http://crbug.com/294179","title":"Chrome bug"}],"categories":["HTML5","SVG"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"n","4":"y","5":"y","6":"y","7":"y","8":"y","9":"y","10":"y","11":"y","12":"y","13":"y","14":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"n","5":"n","6":"n","7":"n","8":"n","9":"n","10":"n","11":"n","12":"n","13":"n","14":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"n","26":"n","27":"n","28":"n","29":"n","30":"n","31":"n","32":"n","33":"n","34":"n","35":"n","36":"n","37":"n","38":"n","39":"u","40":"u","41":"u"},"safari":{"3.1":"n","3.2":"n","4":"n","5":"n","5.1":"n","6":"n","6.1":"n","7":"n","7.1":"n","8":"u"},"opera":{"9":"n","9.5-9.6":"n","10.0-10.1":"n","10.5":"n","10.6":"n","11":"n","11.1":"n","11.5":"n","11.6":"n","12":"n","12.1":"n","15":"n","16":"n","17":"n","18":"n","19":"n","20":"n","21":"n","22":"n","23":"n","24":"n","25":"u","26":"u"},"ios_saf":{"3.2":"n #1","4.0-4.1":"n #1","4.2-4.3":"n #1","5.0-5.1":"n #1","6.0-6.1":"n #1","7.0-7.1":"n #1","8":"n #1"},"op_mini":{"5.0-8.0":"n #1"},"android":{"2.1":"n","2.2":"n","2.3":"n","3":"n","4":"n","4.1":"n","4.2-4.3":"n","4.4":"n","4.4.3":"u"},"bb":{"7":"n","10":"n #1"},"op_mob":{"10":"n #1","11":"n #1","11.1":"n #1","11.5":"n #1","12":"n #1","12.1":"n #1","24":"n #1"},"and_chr":{"38":"n"},"and_ff":{"32":"n"},"ie_mob":{"10":"n #1"},"and_uc":{"9.9":"n"}},"notes":"See also [PNG favicons](#feat=link-icon-png).","notes_by_num":{"1":"Does not use favicons at all"},"usage_perc_y":12.99,"usage_perc_a":0,"ucprefix":false,"parent":"","keywords":"","ie_id":"","chrome_id":""},"css-media-resolution":{"title":"Media Queries: resolution feature","description":"Allows a media query to be set based on the device pixels used per CSS unit. While the standard uses `min`/`max-resolution` for this, some browsers support the older non-standard `device-pixel-ratio` media query.","spec":"http://www.w3.org/TR/css3-mediaqueries/#resolution","status":"rec","links":[{"url":"http://www.w3.org/blog/CSS/2012/06/14/unprefix-webkit-device-pixel-ratio/","title":"How to unprefix -webkit-device-pixel-ratio"}],"categories":["CSS","CSS3"],"stats":{"ie":{"5.5":"n","6":"n","7":"n","8":"n","9":"a #1","10":"a #1","11":"a #1"},"firefox":{"2":"n","3":"n","3.5":"n","3.6":"a #1","4":"a #1","5":"a #1","6":"a #1","7":"a #1","8":"a #1","9":"a #1","10":"a #1","11":"a #1","12":"a #1","13":"a #1","14":"a #1","15":"a #1","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y","27":"y","28":"y","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y"},"chrome":{"4":"a x #2","5":"a x #2","6":"a x #2","7":"a x #2","8":"a x #2","9":"a x #2","10":"a x #2","11":"a x #2","12":"a x #2","13":"a x #2","14":"a x #2","15":"a x #2","16":"a x #2","17":"a x #2","18":"a x #2","19":"a x #2","20":"a x #2","21":"a x #2","22":"a x #2","23":"a x #2","24":"a x #2","25":"a x #2","26":"a x #2","27":"a x #2","28":"a x #2","29":"y","30":"y","31":"y","32":"y","33":"y","34":"y","35":"y","36":"y","37":"y","38":"y","39":"y","40":"y","41":"y"},"safari":{"3.1":"n","3.2":"n","4":"a x #2","5":"a x #2","5.1":"a x #2","6":"a x #2","6.1":"a x #2","7":"a x #2","7.1":"a x #2","8":"a x #2"},"opera":{"9":"u","9.5-9.6":"u","10.0-10.1":"u","10.5":"u","10.6":"u","11":"u","11.1":"u","11.5":"u","11.6":"u","12":"u","12.1":"y","15":"y","16":"y","17":"y","18":"y","19":"y","20":"y","21":"y","22":"y","23":"y","24":"y","25":"y","26":"y"},"ios_saf":{"3.2":"u","4.0-4.1":"a x #2","4.2-4.3":"a x #2","5.0-5.1":"a x #2","6.0-6.1":"a x #2","7.0-7.1":"a x #2","8":"a x #2"},"op_mini":{"5.0-8.0":"a #1"},"android":{"2.1":"u","2.2":"u","2.3":"u","3":"u","4":"a x #2","4.1":"a x #2","4.2-4.3":"a x #2","4.4":"y","4.4.3":"y"},"bb":{"7":"a x #2","10":"a x #2"},"op_mob":{"10":"u","11":"u","11.1":"u","11.5":"u","12":"u","12.1":"y","24":"y"},"and_chr":{"38":"y"},"and_ff":{"32":"y"},"ie_mob":{"10":"y"},"and_uc":{"9.9":"a x #2"}},"notes":"","notes_by_num":{"1":"Supports the `dpi unit`, but does not support `dppx` or `dpcm` units.","2":"Supported using the non-standard `min`/`max-device-pixel-ratio`"},"usage_perc_y":55.38,"usage_perc_a":35.65,"ucprefix":false,"parent":"css-mediaqueries","keywords":"@media,device-pixel-ratio,resolution","ie_id":"mediaqueriesresolutionfeature,dppxunitfortheresolutionmediaquery","chrome_id":"5944509615570944"}}}
},{}],45:[function(require,module,exports){
module.exports={
  "title":"CSS3 Background-image options",
  "description":"New properties to affect background images, including background-clip, background-origin and background-size",
  "spec":"http://www.w3.org/TR/css3-background/#backgrounds",
  "status":"cr",
  "links":[
    {
      "url":"http://www.standardista.com/css3/css3-background-properties",
      "title":"Detailed compatibility tables and demos"
    },
    {
      "url":"http://www.css3files.com/background/",
      "title":"Information page"
    },
    {
      "url":"https://github.com/louisremi/background-size-polyfill",
      "title":"Polyfill for IE7-8"
    }
  ],
  "bugs":[
    {
      "description":"iOS Safari has buggy behavior with `background-size: cover;` on a page's body."
    }
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"y",
      "10":"y",
      "11":"y"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"a x",
      "4":"y",
      "5":"y",
      "6":"y",
      "7":"y",
      "8":"y",
      "9":"y",
      "10":"y",
      "11":"y",
      "12":"y",
      "13":"y",
      "14":"y",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y"
    },
    "chrome":{
      "4":"y",
      "5":"y",
      "6":"y",
      "7":"y",
      "8":"y",
      "9":"y",
      "10":"y",
      "11":"y",
      "12":"y",
      "13":"y",
      "14":"y",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y",
      "37":"y",
      "38":"y",
      "39":"y",
      "40":"y",
      "41":"y"
    },
    "safari":{
      "3.1":"a",
      "3.2":"a",
      "4":"a",
      "5":"a",
      "5.1":"a",
      "6":"a",
      "6.1":"a",
      "7":"y",
      "7.1":"y",
      "8":"y"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"a x",
      "10.5":"y",
      "10.6":"y",
      "11":"y",
      "11.1":"y",
      "11.5":"y",
      "11.6":"y",
      "12":"y",
      "12.1":"y",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y"
    },
    "ios_saf":{
      "3.2":"a",
      "4.0-4.1":"a",
      "4.2-4.3":"a",
      "5.0-5.1":"a",
      "6.0-6.1":"a",
      "7.0-7.1":"y",
      "8":"y"
    },
    "op_mini":{
      "5.0-8.0":"a"
    },
    "android":{
      "2.1":"a x",
      "2.2":"y x",
      "2.3":"y x",
      "3":"y",
      "4":"y",
      "4.1":"y",
      "4.2-4.3":"y",
      "4.4":"y",
      "4.4.3":"y"
    },
    "bb":{
      "7":"y",
      "10":"y"
    },
    "op_mob":{
      "10":"y",
      "11":"y",
      "11.1":"y",
      "11.5":"y",
      "12":"y",
      "12.1":"y",
      "24":"y"
    },
    "and_chr":{
      "38":"y"
    },
    "and_ff":{
      "32":"y"
    },
    "ie_mob":{
      "10":"y"
    },
    "and_uc":{
      "9.9":"y"
    }
  },
  "notes":"Partial support in Opera Mini refers to not supporting background sizing or background attachments. However Opera Mini 7.5 supports background sizing (including cover and contain values).\r\n\r\nPartial support in Safari 6 refers to not supporting background sizing offset from edges syntax.",
  "notes_by_num":{
    
  },
  "usage_perc_y":86.85,
  "usage_perc_a":5.13,
  "ucprefix":false,
  "parent":"",
  "keywords":"",
  "ie_id":"",
  "chrome_id":"",
  "shown":true
}
},{}],46:[function(require,module,exports){
module.exports={
  "title":"CSS3 Border images",
  "description":"Method of using images for borders",
  "spec":"http://www.w3.org/TR/css3-background/#the-border-image",
  "status":"cr",
  "links":[
    {
      "url":"http://www.css3files.com/border/",
      "title":"Information page"
    },
    {
      "url":"http://docs.webplatform.org/wiki/css/properties/border-image",
      "title":"WebPlatform Docs"
    }
  ],
  "bugs":[
    
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"y"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"a x",
      "3.6":"a x",
      "4":"a x",
      "5":"a x",
      "6":"a x",
      "7":"a x",
      "8":"a x",
      "9":"a x",
      "10":"a x",
      "11":"a x",
      "12":"a x",
      "13":"a x",
      "14":"a x",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y"
    },
    "chrome":{
      "4":"a x",
      "5":"a x",
      "6":"a x",
      "7":"a x",
      "8":"a x",
      "9":"a x",
      "10":"a x",
      "11":"a x",
      "12":"a x",
      "13":"a x",
      "14":"a x",
      "15":"y x",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y",
      "37":"y",
      "38":"y",
      "39":"y",
      "40":"y",
      "41":"y"
    },
    "safari":{
      "3.1":"a x",
      "3.2":"a x",
      "4":"a x",
      "5":"a x",
      "5.1":"a x",
      "6":"y",
      "6.1":"y",
      "7":"y",
      "7.1":"y",
      "8":"y"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"a",
      "10.6":"a",
      "11":"a x",
      "11.1":"a x",
      "11.5":"a x",
      "11.6":"a x",
      "12":"a x",
      "12.1":"a x",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y"
    },
    "ios_saf":{
      "3.2":"a x",
      "4.0-4.1":"a x",
      "4.2-4.3":"a x",
      "5.0-5.1":"a x",
      "6.0-6.1":"y",
      "7.0-7.1":"y",
      "8":"y"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"a x",
      "2.2":"a x",
      "2.3":"a x",
      "3":"a x",
      "4":"a x",
      "4.1":"a x",
      "4.2-4.3":"a x",
      "4.4":"y",
      "4.4.3":"y"
    },
    "bb":{
      "7":"a x",
      "10":"y"
    },
    "op_mob":{
      "10":"n",
      "11":"a x",
      "11.1":"a x",
      "11.5":"a x",
      "12":"a x",
      "12.1":"a x",
      "24":"y"
    },
    "and_chr":{
      "38":"y"
    },
    "and_ff":{
      "32":"y"
    },
    "ie_mob":{
      "10":"n"
    },
    "and_uc":{
      "9.9":"y"
    }
  },
  "notes":"Note that both the border-style and border-width must be specified for border-images to work according to spec, though older implementations may not have this requirement. Partial support refers to supporting the shorthand syntax, but not the individual properties (border-image-source, border-image-slice, etc). ",
  "notes_by_num":{
    
  },
  "usage_perc_y":76.42,
  "usage_perc_a":7.3,
  "ucprefix":false,
  "parent":"",
  "keywords":"",
  "ie_id":"",
  "chrome_id":"",
  "shown":true
}
},{}],47:[function(require,module,exports){
module.exports={
  "title":"CSS3 Border-radius (rounded corners)",
  "description":"Method of making the border corners round",
  "spec":"http://www.w3.org/TR/css3-background/#the-border-radius",
  "status":"cr",
  "links":[
    {
      "url":"http://border-radius.com",
      "title":"Border-radius CSS Generator"
    },
    {
      "url":"http://muddledramblings.com/table-of-css3-border-radius-compliance",
      "title":"Detailed compliance table"
    },
    {
      "url":"http://www.css3files.com/border/#borderradius",
      "title":"Information page"
    },
    {
      "url":"http://css3pie.com/",
      "title":"Polyfill which includes border-radius"
    },
    {
      "url":"http://docs.webplatform.org/wiki/css/properties/border-radius",
      "title":"WebPlatform Docs"
    }
  ],
  "bugs":[
    {
      "description":"Safari does not apply `border-radius` correctly to image borders: http://stackoverflow.com/q/17202128"
    },
    {
      "description":"Android Browser 2.3 does not support % value for `border-radius`."
    },
    {
      "description":"Border-radius does not work on fieldset elements in IE9."
    },
    {
      "description":"The stock browser on the Samsung Galaxy S4 with Android 4.2 does not support the `border-radius` shorthand property but does support the long-hand properties for each corner like `border-top-left-radius`."
    }
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"y",
      "10":"y",
      "11":"y"
    },
    "firefox":{
      "2":"a x",
      "3":"y x",
      "3.5":"y x",
      "3.6":"y x",
      "4":"y",
      "5":"y",
      "6":"y",
      "7":"y",
      "8":"y",
      "9":"y",
      "10":"y",
      "11":"y",
      "12":"y",
      "13":"y",
      "14":"y",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y"
    },
    "chrome":{
      "4":"y x",
      "5":"y",
      "6":"y",
      "7":"y",
      "8":"y",
      "9":"y",
      "10":"y",
      "11":"y",
      "12":"y",
      "13":"y",
      "14":"y",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y",
      "37":"y",
      "38":"y",
      "39":"y",
      "40":"y",
      "41":"y"
    },
    "safari":{
      "3.1":"y x",
      "3.2":"y x",
      "4":"y x",
      "5":"y",
      "5.1":"y",
      "6":"y",
      "6.1":"y",
      "7":"y",
      "7.1":"y",
      "8":"y"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"y",
      "10.6":"y",
      "11":"y",
      "11.1":"y",
      "11.5":"y",
      "11.6":"y",
      "12":"y",
      "12.1":"y",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y"
    },
    "ios_saf":{
      "3.2":"y x",
      "4.0-4.1":"y",
      "4.2-4.3":"y",
      "5.0-5.1":"y",
      "6.0-6.1":"y",
      "7.0-7.1":"y",
      "8":"y"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"y x",
      "2.2":"y",
      "2.3":"y",
      "3":"y",
      "4":"y",
      "4.1":"y",
      "4.2-4.3":"y",
      "4.4":"y",
      "4.4.3":"y"
    },
    "bb":{
      "7":"y",
      "10":"y"
    },
    "op_mob":{
      "10":"n",
      "11":"y",
      "11.1":"y",
      "11.5":"y",
      "12":"y",
      "12.1":"y",
      "24":"y"
    },
    "and_chr":{
      "38":"y"
    },
    "and_ff":{
      "32":"y"
    },
    "ie_mob":{
      "10":"y"
    },
    "and_uc":{
      "9.9":"y"
    }
  },
  "notes":"",
  "notes_by_num":{
    
  },
  "usage_perc_y":88.91,
  "usage_perc_a":0.01,
  "ucprefix":false,
  "parent":"",
  "keywords":"roundedcorners, border radius,-moz-border-radius",
  "ie_id":"",
  "chrome_id":"",
  "shown":true
}
},{}],48:[function(require,module,exports){
module.exports={
  "title":"calc() as CSS unit value",
  "description":"Method of allowing calculated values for length units, i.e. `width: calc(100% - 3em)`",
  "spec":"http://www.w3.org/TR/css3-values/#calc",
  "status":"cr",
  "links":[
    {
      "url":"http://hacks.mozilla.org/2010/06/css3-calc/",
      "title":"Mozilla Hacks article"
    },
    {
      "url":"https://developer.mozilla.org/en/CSS/-moz-calc",
      "title":"MDN article"
    },
    {
      "url":"http://docs.webplatform.org/wiki/css/functions/calc",
      "title":"WebPlatform Docs"
    }
  ],
  "bugs":[
    {
      "description":"Safari 7.0 and older and Chrome 26 and older don't support viewport units in `calc()` expressions (fixed since then)."
    },
    {
      "description":"`calc()` doesn't work [inside a transform in IE](http://connect.microsoft.com/IE/feedback/details/814380/css3-using-calc-inside-a-transform-is-invalid)"
    },
    {
      "description":"IE9 appears to ignore `calc()` expressions when `display:table` is used."
    },
    {
      "description":"Safari 6 has a bug where an element with a width defined using `calc()` has its width reset when changing the height using JS (fixed in Safari 7)."
    }
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"a",
      "10":"y",
      "11":"y"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"n",
      "4":"y x",
      "5":"y x",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y"
    },
    "chrome":{
      "4":"n",
      "5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n",
      "12":"n",
      "13":"n",
      "14":"n",
      "15":"n",
      "16":"n",
      "17":"n",
      "18":"n",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y",
      "37":"y",
      "38":"y",
      "39":"y",
      "40":"y",
      "41":"y"
    },
    "safari":{
      "3.1":"n",
      "3.2":"n",
      "4":"n",
      "5":"n",
      "5.1":"n",
      "6":"y x",
      "6.1":"y",
      "7":"y",
      "7.1":"y",
      "8":"y"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"n",
      "12":"n",
      "12.1":"n",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y"
    },
    "ios_saf":{
      "3.2":"n",
      "4.0-4.1":"n",
      "4.2-4.3":"n",
      "5.0-5.1":"n",
      "6.0-6.1":"y x",
      "7.0-7.1":"y",
      "8":"y"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"n",
      "2.2":"n",
      "2.3":"n",
      "3":"n",
      "4":"n",
      "4.1":"n",
      "4.2-4.3":"n",
      "4.4":"y",
      "4.4.3":"y"
    },
    "bb":{
      "7":"n",
      "10":"y x"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "12":"n",
      "12.1":"n",
      "24":"y"
    },
    "and_chr":{
      "38":"y"
    },
    "and_ff":{
      "32":"y"
    },
    "ie_mob":{
      "10":"y"
    },
    "and_uc":{
      "9.9":"n"
    }
  },
  "notes":"Support can be somewhat emulated in older versions of IE using the non-standard `expression()` syntax. Partial support in IE9 refers to the browser crashing when used as a `background-position` value.",
  "notes_by_num":{
    
  },
  "usage_perc_y":76.32,
  "usage_perc_a":2.39,
  "ucprefix":false,
  "parent":"",
  "keywords":"",
  "ie_id":"csscalc",
  "chrome_id":"5765241438732288",
  "shown":true
}
},{}],49:[function(require,module,exports){
module.exports={
  "title":"CSS3 Animation",
  "description":"Complex method of animating certain properties of an element",
  "spec":"http://www.w3.org/TR/css3-animations/",
  "status":"wd",
  "links":[
    {
      "url":"http://robertnyman.com/2010/05/06/css3-animations/",
      "title":"Blog post on usage"
    },
    {
      "url":"http://www.css3files.com/animation/",
      "title":"Information page"
    },
    {
      "url":"http://docs.webplatform.org/wiki/css/properties/animations",
      "title":"WebPlatform Docs"
    }
  ],
  "bugs":[
    {
      "description":"'animation-fill-mode' property is not supported in Android browser below 2.3."
    },
    {
      "description":"iOS 6.1 and below do not support animation on pseudo-elements."
    },
    {
      "description":"@keyframes not supported in an inline or scoped stylesheet in Firefox (bug 830056)"
    }
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"y",
      "11":"y"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"n",
      "4":"n",
      "5":"y x",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y"
    },
    "chrome":{
      "4":"y x",
      "5":"y x",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y x",
      "30":"y x",
      "31":"y x",
      "32":"y x",
      "33":"y x",
      "34":"y x",
      "35":"y x",
      "36":"y x",
      "37":"y x",
      "38":"y x",
      "39":"y",
      "40":"y",
      "41":"y"
    },
    "safari":{
      "3.1":"n",
      "3.2":"n",
      "4":"y x",
      "5":"y x",
      "5.1":"y x",
      "6":"y x",
      "6.1":"y x",
      "7":"y x",
      "7.1":"y x",
      "8":"y x"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"n",
      "12":"y x",
      "12.1":"y",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y"
    },
    "ios_saf":{
      "3.2":"y x",
      "4.0-4.1":"y x",
      "4.2-4.3":"y x",
      "5.0-5.1":"y x",
      "6.0-6.1":"y x",
      "7.0-7.1":"y x",
      "8":"y x"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"a x",
      "2.2":"a x",
      "2.3":"a x",
      "3":"a x",
      "4":"y x",
      "4.1":"y x",
      "4.2-4.3":"y x",
      "4.4":"y x",
      "4.4.3":"y x"
    },
    "bb":{
      "7":"y x",
      "10":"y x"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "12":"n",
      "12.1":"y",
      "24":"y x"
    },
    "and_chr":{
      "38":"y x"
    },
    "and_ff":{
      "32":"y"
    },
    "ie_mob":{
      "10":"y"
    },
    "and_uc":{
      "9.9":"y x"
    }
  },
  "notes":"Partial support in Android browser refers to buggy behavior in different scenarios.",
  "notes_by_num":{
    
  },
  "usage_perc_y":85.39,
  "usage_perc_a":0.83,
  "ucprefix":false,
  "parent":"",
  "keywords":"animations,css-animations,keyframe,keyframes",
  "ie_id":"",
  "chrome_id":"",
  "shown":true
}
},{}],50:[function(require,module,exports){
module.exports={
  "title":"CSS3 Box-shadow",
  "description":"Method of displaying an inner or outer shadow effect to elements",
  "spec":"http://www.w3.org/TR/css3-background/#box-shadow",
  "status":"cr",
  "links":[
    {
      "url":"https://developer.mozilla.org/En/CSS/-moz-box-shadow",
      "title":"MDN article"
    },
    {
      "url":"http://westciv.com/tools/boxshadows/index.html",
      "title":"Live editor"
    },
    {
      "url":"http://tests.themasta.com/blogstuff/boxshadowdemo.html",
      "title":"Demo of various effects"
    },
    {
      "url":"http://www.css3files.com/shadow/",
      "title":"Information page"
    },
    {
      "url":"http://docs.webplatform.org/wiki/css/properties/box-shadow",
      "title":"WebPlatform Docs"
    }
  ],
  "bugs":[
    {
      "description":"Safari 6, iOS 6 and Android 2.3 default browser don't work with a 0px value for \"spread\".\r\ne.g. -webkit-box-shadow: 5px 1px 0px #f04e29;\r\ndoesn't work, but\r\n-webkit-box-shadow: 5px 1px 1px #f04e29\r\ndoes."
    }
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"y",
      "10":"y",
      "11":"y"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"y x",
      "3.6":"y x",
      "4":"y",
      "5":"y",
      "6":"y",
      "7":"y",
      "8":"y",
      "9":"y",
      "10":"y",
      "11":"y",
      "12":"y",
      "13":"y",
      "14":"y",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y"
    },
    "chrome":{
      "4":"y x",
      "5":"y x",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y",
      "11":"y",
      "12":"y",
      "13":"y",
      "14":"y",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y",
      "37":"y",
      "38":"y",
      "39":"y",
      "40":"y",
      "41":"y"
    },
    "safari":{
      "3.1":"a x",
      "3.2":"a x",
      "4":"a x",
      "5":"y x",
      "5.1":"y",
      "6":"y",
      "6.1":"y",
      "7":"y",
      "7.1":"y",
      "8":"y"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"y",
      "10.6":"y",
      "11":"y",
      "11.1":"y",
      "11.5":"y",
      "11.6":"y",
      "12":"y",
      "12.1":"y",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y"
    },
    "ios_saf":{
      "3.2":"a x",
      "4.0-4.1":"y x",
      "4.2-4.3":"y x",
      "5.0-5.1":"y",
      "6.0-6.1":"y",
      "7.0-7.1":"y",
      "8":"y"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"a x",
      "2.2":"a x",
      "2.3":"a x",
      "3":"a x",
      "4":"y",
      "4.1":"y",
      "4.2-4.3":"y",
      "4.4":"y",
      "4.4.3":"y"
    },
    "bb":{
      "7":"y x",
      "10":"y"
    },
    "op_mob":{
      "10":"n",
      "11":"y",
      "11.1":"y",
      "11.5":"y",
      "12":"y",
      "12.1":"y",
      "24":"y"
    },
    "and_chr":{
      "38":"y"
    },
    "and_ff":{
      "32":"y"
    },
    "ie_mob":{
      "10":"y"
    },
    "and_uc":{
      "9.9":"y"
    }
  },
  "notes":"Can be partially emulated in older IE versions using the non-standard \"shadow\" filter. Partial support in Safari, iOS Safari and Android Browser refers to missing \"inset\" and blur radius value support.",
  "notes_by_num":{
    
  },
  "usage_perc_y":87.92,
  "usage_perc_a":0.93,
  "ucprefix":false,
  "parent":"",
  "keywords":"box-shadows,boxshadows,box shadow,shaow",
  "ie_id":"",
  "chrome_id":"",
  "shown":true
}
},{}],51:[function(require,module,exports){
module.exports={
  "title":"CSS Filter Effects",
  "description":"Method of applying filter effects (like blur, grayscale, brightness, contrast and hue) to elements, previously only possible by using SVG.",
  "spec":"http://www.w3.org/TR/filter-effects/",
  "status":"wd",
  "links":[
    {
      "url":"http://html5-demos.appspot.com/static/css/filters/index.html",
      "title":"Demo file for WebKit browsers"
    },
    {
      "url":"http://www.html5rocks.com/en/tutorials/filters/understanding-css/",
      "title":"HTML5Rocks article"
    },
    {
      "url":"http://dl.dropbox.com/u/3260327/angular/CSS3ImageManipulation.html",
      "title":"Filter editor"
    },
    {
      "url":"http://bennettfeely.com/filters/",
      "title":"Filter Playground"
    }
  ],
  "bugs":[
    
  ],
  "categories":[
    "CSS",
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"a",
      "4":"a",
      "5":"a",
      "6":"a",
      "7":"a",
      "8":"a",
      "9":"a",
      "10":"a",
      "11":"a",
      "12":"a",
      "13":"a",
      "14":"a",
      "15":"a",
      "16":"a",
      "17":"a",
      "18":"a",
      "19":"a",
      "20":"a",
      "21":"a",
      "22":"a",
      "23":"a",
      "24":"a",
      "25":"a",
      "26":"a",
      "27":"a",
      "28":"a",
      "29":"a",
      "30":"a",
      "31":"a",
      "32":"a",
      "33":"a",
      "34":"a d",
      "35":"y",
      "36":"y"
    },
    "chrome":{
      "4":"n",
      "5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n",
      "12":"n",
      "13":"n",
      "14":"n",
      "15":"n",
      "16":"n",
      "17":"n",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y x",
      "30":"y x",
      "31":"y x",
      "32":"y x",
      "33":"y x",
      "34":"y x",
      "35":"y x",
      "36":"y x",
      "37":"y x",
      "38":"y x",
      "39":"y x",
      "40":"y x",
      "41":"y x"
    },
    "safari":{
      "3.1":"n",
      "3.2":"n",
      "4":"n",
      "5":"n",
      "5.1":"n",
      "6":"y x",
      "6.1":"y x",
      "7":"y x",
      "7.1":"y x",
      "8":"y x"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"n",
      "12":"n",
      "12.1":"n",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x"
    },
    "ios_saf":{
      "3.2":"n",
      "4.0-4.1":"n",
      "4.2-4.3":"n",
      "5.0-5.1":"n",
      "6.0-6.1":"y x",
      "7.0-7.1":"y x",
      "8":"y x"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"n",
      "2.2":"n",
      "2.3":"n",
      "3":"n",
      "4":"n",
      "4.1":"n",
      "4.2-4.3":"n",
      "4.4":"y x",
      "4.4.3":"y x"
    },
    "bb":{
      "7":"n",
      "10":"y x"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "12":"n",
      "12.1":"n",
      "24":"y x"
    },
    "and_chr":{
      "38":"y x"
    },
    "and_ff":{
      "32":"n"
    },
    "ie_mob":{
      "10":"n"
    },
    "and_uc":{
      "9.9":"y x"
    }
  },
  "notes":"Note that this property is significantly different from and incompatible with Microsoft's [older \"filter\" property](http://msdn.microsoft.com/en-us/library/ie/ms530752%28v=vs.85%29.aspx).\r\n\r\nPartial support in Firefox 31 [only with url() version](https://developer.mozilla.org/en-US/docs/Web/CSS/filter#Browser_compatibility)",
  "notes_by_num":{
    
  },
  "usage_perc_y":56.25,
  "usage_perc_a":13.08,
  "ucprefix":false,
  "parent":"",
  "keywords":"sepia,hue-rotate,invert,saturate",
  "ie_id":"filters",
  "chrome_id":"",
  "shown":true
}
},{}],52:[function(require,module,exports){
module.exports={
  "title":"CSS Gradients",
  "description":"Method of defining a linear or radial color gradient as a CSS image.",
  "spec":"http://www.w3.org/TR/css3-images/",
  "status":"cr",
  "links":[
    {
      "url":"http://www.colorzilla.com/gradient-editor/",
      "title":"Cross-browser editor"
    },
    {
      "url":"http://www.css3files.com/gradient/",
      "title":"Information page"
    },
    {
      "url":"http://css3pie.com/",
      "title":"Tool to emulate support in IE"
    },
    {
      "url":"http://docs.webplatform.org/wiki/css/functions/linear-gradient",
      "title":"WebPlatform Docs"
    }
  ],
  "bugs":[
    
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"y",
      "11":"y"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"y x",
      "4":"y x",
      "5":"y x",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y"
    },
    "chrome":{
      "4":"a x",
      "5":"a x",
      "6":"a x",
      "7":"a x",
      "8":"a x",
      "9":"a x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y",
      "37":"y",
      "38":"y",
      "39":"y",
      "40":"y",
      "41":"y"
    },
    "safari":{
      "3.1":"n",
      "3.2":"n",
      "4":"a x",
      "5":"a x",
      "5.1":"y x",
      "6":"y x",
      "6.1":"y",
      "7":"y",
      "7.1":"y",
      "8":"y"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"a x",
      "11.5":"a x",
      "11.6":"y x",
      "12":"y x",
      "12.1":"y",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y"
    },
    "ios_saf":{
      "3.2":"a x",
      "4.0-4.1":"a x",
      "4.2-4.3":"a x",
      "5.0-5.1":"y x",
      "6.0-6.1":"y x",
      "7.0-7.1":"y",
      "8":"y"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"a x",
      "2.2":"a x",
      "2.3":"a x",
      "3":"a x",
      "4":"y x",
      "4.1":"y x",
      "4.2-4.3":"y x",
      "4.4":"y",
      "4.4.3":"y"
    },
    "bb":{
      "7":"a x",
      "10":"y x"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"a x",
      "11.5":"a x",
      "12":"y x",
      "12.1":"y",
      "24":"y"
    },
    "and_chr":{
      "38":"y"
    },
    "and_ff":{
      "32":"y"
    },
    "ie_mob":{
      "10":"y"
    },
    "and_uc":{
      "9.9":"y x"
    }
  },
  "notes":"Syntax used by browsers with prefixed support may be incompatible with that for proper support. \r\n\r\nPartial support in Opera 11.10 and 11.50 also refers to only having support for linear gradients.\r\n\r\nSupport can be somewhat emulated in older IE versions using the non-standard \"gradient\" filter. \r\n\r\nFirefox 10+, Opera 11.6+, Chrome 26+ and IE10+ also support the new \"to (side)\" syntax.",
  "notes_by_num":{
    
  },
  "usage_perc_y":85.1,
  "usage_perc_a":1.29,
  "ucprefix":false,
  "parent":"",
  "keywords":"linear,linear-gradient,gradiant",
  "ie_id":"gradients",
  "chrome_id":"5785905063264256",
  "shown":true
}
},{}],53:[function(require,module,exports){
module.exports={
  "title":"CSS Hyphenation",
  "description":"Method of controlling when words at the end of lines should be hyphenated using the \"hyphens\" property.",
  "spec":"http://www.w3.org/TR/css3-text/#hyphenation",
  "status":"wd",
  "links":[
    {
      "url":"https://developer.mozilla.org/en/CSS/hyphens",
      "title":"MDN article"
    },
    {
      "url":"http://blog.fontdeck.com/post/9037028497/hyphens",
      "title":"Blog post"
    },
    {
      "url":"http://docs.webplatform.org/wiki/css/properties/hyphens",
      "title":"WebPlatform Docs"
    }
  ],
  "bugs":[
    
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"y x",
      "11":"y x"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"n",
      "4":"n",
      "5":"n",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y x",
      "30":"y x",
      "31":"y x",
      "32":"y x",
      "33":"y x",
      "34":"y x",
      "35":"y x",
      "36":"y x"
    },
    "chrome":{
      "4":"n",
      "5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n",
      "12":"n",
      "13":"n",
      "14":"n",
      "15":"n",
      "16":"n",
      "17":"n",
      "18":"n",
      "19":"n",
      "20":"n",
      "21":"n",
      "22":"n",
      "23":"n",
      "24":"n",
      "25":"n",
      "26":"n",
      "27":"n",
      "28":"n",
      "29":"n",
      "30":"n",
      "31":"n",
      "32":"n",
      "33":"n",
      "34":"n",
      "35":"n",
      "36":"n",
      "37":"n",
      "38":"n",
      "39":"n",
      "40":"n",
      "41":"n"
    },
    "safari":{
      "3.1":"n",
      "3.2":"n",
      "4":"n",
      "5":"n",
      "5.1":"y x",
      "6":"y x",
      "6.1":"y x",
      "7":"y x",
      "7.1":"y x",
      "8":"y x"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"n",
      "12":"n",
      "12.1":"n",
      "15":"n",
      "16":"n",
      "17":"n",
      "18":"n",
      "19":"n",
      "20":"n",
      "21":"n",
      "22":"n",
      "23":"n",
      "24":"n",
      "25":"n",
      "26":"n"
    },
    "ios_saf":{
      "3.2":"n",
      "4.0-4.1":"n",
      "4.2-4.3":"y x",
      "5.0-5.1":"y x",
      "6.0-6.1":"y x",
      "7.0-7.1":"y x",
      "8":"y x"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"n",
      "2.2":"n",
      "2.3":"n",
      "3":"n",
      "4":"n",
      "4.1":"n",
      "4.2-4.3":"n",
      "4.4":"n",
      "4.4.3":"n"
    },
    "bb":{
      "7":"n",
      "10":"n"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "12":"n",
      "12.1":"n",
      "24":"n"
    },
    "and_chr":{
      "38":"n"
    },
    "and_ff":{
      "32":"y x"
    },
    "ie_mob":{
      "10":"n"
    },
    "and_uc":{
      "9.9":"a x"
    }
  },
  "notes":"Chrome 29- and Android 4.0 Browser support \"-webkit-hyphens: none\", but not the \"auto\" property. Chrome 30+ doesn't support it either.",
  "notes_by_num":{
    
  },
  "usage_perc_y":33.47,
  "usage_perc_a":3.11,
  "ucprefix":false,
  "parent":"",
  "keywords":"hyphen,shy",
  "ie_id":"",
  "chrome_id":"",
  "shown":true
}
},{}],54:[function(require,module,exports){
module.exports={
  "title":"CSS Masks",
  "description":"Method of displaying part of an element, using a selected image as a mask",
  "spec":"http://www.w3.org/TR/css-masking/",
  "status":"cr",
  "links":[
    {
      "url":"http://docs.webplatform.org/wiki/css/properties/mask",
      "title":"WebPlatform Docs"
    },
    {
      "url":"http://www.html5rocks.com/en/tutorials/masking/adobe/",
      "title":"HTML5 Rocks article"
    },
    {
      "url":"http://thenittygritty.co/css-masking",
      "title":"Detailed blog post"
    }
  ],
  "bugs":[
    
  ],
  "categories":[
    "CSS"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"a",
      "3.6":"a",
      "4":"a",
      "5":"a",
      "6":"a",
      "7":"a",
      "8":"a",
      "9":"a",
      "10":"a",
      "11":"a",
      "12":"a",
      "13":"a",
      "14":"a",
      "15":"a",
      "16":"a",
      "17":"a",
      "18":"a",
      "19":"a",
      "20":"a",
      "21":"a",
      "22":"a",
      "23":"a",
      "24":"a",
      "25":"a",
      "26":"a",
      "27":"a",
      "28":"a",
      "29":"a",
      "30":"a",
      "31":"a",
      "32":"a",
      "33":"a",
      "34":"a",
      "35":"a",
      "36":"a"
    },
    "chrome":{
      "4":"a x",
      "5":"a x",
      "6":"a x",
      "7":"a x",
      "8":"a x",
      "9":"a x",
      "10":"a x",
      "11":"a x",
      "12":"a x",
      "13":"a x",
      "14":"a x",
      "15":"a x",
      "16":"a x",
      "17":"a x",
      "18":"a x",
      "19":"a x",
      "20":"a x",
      "21":"a x",
      "22":"a x",
      "23":"a x",
      "24":"a x",
      "25":"a x",
      "26":"a x",
      "27":"a x",
      "28":"a x",
      "29":"a x",
      "30":"a x",
      "31":"a x",
      "32":"a x",
      "33":"a x",
      "34":"a x",
      "35":"a x",
      "36":"a x",
      "37":"a x",
      "38":"a x",
      "39":"a x",
      "40":"a x",
      "41":"a x"
    },
    "safari":{
      "3.1":"n",
      "3.2":"n",
      "4":"a x",
      "5":"a x",
      "5.1":"a x",
      "6":"a x",
      "6.1":"a x",
      "7":"a x",
      "7.1":"a x",
      "8":"a x"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"n",
      "12":"n",
      "12.1":"n",
      "15":"a x",
      "16":"a x",
      "17":"a x",
      "18":"a x",
      "19":"a x",
      "20":"a x",
      "21":"a x",
      "22":"a x",
      "23":"a x",
      "24":"a x",
      "25":"a x",
      "26":"a x"
    },
    "ios_saf":{
      "3.2":"a x",
      "4.0-4.1":"a x",
      "4.2-4.3":"a x",
      "5.0-5.1":"a x",
      "6.0-6.1":"a x",
      "7.0-7.1":"a x",
      "8":"a x"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"a x",
      "2.2":"a x",
      "2.3":"a x",
      "3":"a x",
      "4":"a x",
      "4.1":"a x",
      "4.2-4.3":"a x",
      "4.4":"a x",
      "4.4.3":"a x"
    },
    "bb":{
      "7":"a x",
      "10":"a x"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "12":"n",
      "12.1":"n",
      "24":"a x"
    },
    "and_chr":{
      "38":"a x"
    },
    "and_ff":{
      "32":"a"
    },
    "ie_mob":{
      "10":"n"
    },
    "and_uc":{
      "9.9":"a x"
    }
  },
  "notes":"Partial support in WebKit/Blink browsers refers to supporting the mask-image and mask-box-image properties, but lacks support for othe parts of the spec. Partial support in Firefox refers to only support for inline SVG mask elements i.e. mask: url(#foo).",
  "notes_by_num":{
    
  },
  "usage_perc_y":0,
  "usage_perc_a":75.98,
  "ucprefix":false,
  "parent":"",
  "keywords":"",
  "ie_id":"masks",
  "chrome_id":"5381559662149632",
  "shown":true
}
},{}],55:[function(require,module,exports){
module.exports={
  "title":":placeholder-shown CSS pseudo-class",
  "description":"The :placeholder-shown pseudo-class represents the placeholder contents of a form field with placeholder text.",
  "spec":"http://dev.w3.org/csswg/selectors/#placeholder",
  "status":"unoff",
  "links":[
    {
      "url":"http://msdn.microsoft.com/en-us/library/ie/hh772745(v=vs.85).aspx",
      "title":"MSDN article"
    },
    {
      "url":"http://css-tricks.com/snippets/css/style-placeholder-text/",
      "title":"CSS-Tricks article with all prefixes"
    },
    {
      "url":"http://wiki.csswg.org/ideas/placeholder-styling",
      "title":"CSSWG discussion"
    }
  ],
  "bugs":[
    
  ],
  "categories":[
    "CSS"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"a x",
      "11":"a x"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"n",
      "4":"a x",
      "5":"a x",
      "6":"a x",
      "7":"a x",
      "8":"a x",
      "9":"a x",
      "10":"a x",
      "11":"a x",
      "12":"a x",
      "13":"a x",
      "14":"a x",
      "15":"a x",
      "16":"a x",
      "17":"a x",
      "18":"a x",
      "19":"a x",
      "20":"a x",
      "21":"a x",
      "22":"a x",
      "23":"a x",
      "24":"a x",
      "25":"a x",
      "26":"a x",
      "27":"a x",
      "28":"a x",
      "29":"a x",
      "30":"a x",
      "31":"a x",
      "32":"a x",
      "33":"a x",
      "34":"a x",
      "35":"a x",
      "36":"a x"
    },
    "chrome":{
      "4":"a x",
      "5":"a x",
      "6":"a x",
      "7":"a x",
      "8":"a x",
      "9":"a x",
      "10":"a x",
      "11":"a x",
      "12":"a x",
      "13":"a x",
      "14":"a x",
      "15":"a x",
      "16":"a x",
      "17":"a x",
      "18":"a x",
      "19":"a x",
      "20":"a x",
      "21":"a x",
      "22":"a x",
      "23":"a x",
      "24":"a x",
      "25":"a x",
      "26":"a x",
      "27":"a x",
      "28":"a x",
      "29":"a x",
      "30":"a x",
      "31":"a x",
      "32":"a x",
      "33":"a x",
      "34":"a x",
      "35":"a x",
      "36":"a x",
      "37":"a x",
      "38":"a x",
      "39":"a x",
      "40":"a x",
      "41":"a x"
    },
    "safari":{
      "3.1":"n",
      "3.2":"n",
      "4":"n",
      "5":"a x",
      "5.1":"a x",
      "6":"a x",
      "6.1":"a x",
      "7":"a x",
      "7.1":"a x",
      "8":"a x"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"n",
      "12":"n",
      "12.1":"n",
      "15":"a x",
      "16":"a x",
      "17":"a x",
      "18":"a x",
      "19":"a x",
      "20":"a x",
      "21":"a x",
      "22":"a x",
      "23":"a x",
      "24":"a x",
      "25":"a x",
      "26":"a x"
    },
    "ios_saf":{
      "3.2":"n",
      "4.0-4.1":"n",
      "4.2-4.3":"a x",
      "5.0-5.1":"a x",
      "6.0-6.1":"a x",
      "7.0-7.1":"a x",
      "8":"a x"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"a x",
      "2.2":"a x",
      "2.3":"a x",
      "3":"a x",
      "4":"a x",
      "4.1":"a x",
      "4.2-4.3":"a x",
      "4.4":"a x",
      "4.4.3":"a x"
    },
    "bb":{
      "7":"u",
      "10":"a x"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "12":"n",
      "12.1":"n",
      "24":"a x"
    },
    "and_chr":{
      "38":"a x"
    },
    "and_ff":{
      "32":"a x"
    },
    "ie_mob":{
      "10":"a x"
    },
    "and_uc":{
      "9.9":"a x"
    }
  },
  "notes":"Partial support refers to support for alternative syntax: ::-webkit-input-placeholder (Chrome/Safari/Opera),\r\n::-moz-placeholder (Firefox) and \r\n:-ms-input-placeholder (IE). ",
  "notes_by_num":{
    
  },
  "usage_perc_y":0,
  "usage_perc_a":85.75,
  "ucprefix":false,
  "parent":"",
  "keywords":"::placeholder,placeholder",
  "ie_id":"",
  "chrome_id":"",
  "shown":true
}
},{}],56:[function(require,module,exports){
module.exports={
  "title":"::selection CSS pseudo-element",
  "description":"The ::selection CSS pseudo-element applies rules to the portion of a document that has been highlighted (e.g., selected with the mouse or another pointing device) by the user.",
  "spec":"https://developer.mozilla.org/en-US/docs/Web/CSS/::selection",
  "status":"unoff",
  "links":[
    {
      "url":"http://quirksmode.org/css/selectors/selection.html",
      "title":"::selection test"
    },
    {
      "url":"http://docs.webplatform.org/wiki/css/selectors/pseudo-elements/::selection",
      "title":"WebPlatform Docs"
    }
  ],
  "bugs":[
    {
      "description":"::selection does not work on input elements in Chrome (tested on OS X and Windows XP)"
    }
  ],
  "categories":[
    "CSS"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"y",
      "10":"y",
      "11":"y"
    },
    "firefox":{
      "2":"y x",
      "3":"y x",
      "3.5":"y x",
      "3.6":"y x",
      "4":"y x",
      "5":"y x",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y x",
      "30":"y x",
      "31":"y x",
      "32":"y x",
      "33":"y x",
      "34":"y x",
      "35":"y x",
      "36":"y x"
    },
    "chrome":{
      "4":"y",
      "5":"y",
      "6":"y",
      "7":"y",
      "8":"y",
      "9":"y",
      "10":"y",
      "11":"y",
      "12":"y",
      "13":"y",
      "14":"y",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y",
      "37":"y",
      "38":"y",
      "39":"y",
      "40":"y",
      "41":"y"
    },
    "safari":{
      "3.1":"y",
      "3.2":"y",
      "4":"y",
      "5":"y",
      "5.1":"y",
      "6":"y",
      "6.1":"y",
      "7":"y",
      "7.1":"y",
      "8":"y"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"y",
      "10.0-10.1":"y",
      "10.5":"y",
      "10.6":"y",
      "11":"y",
      "11.1":"y",
      "11.5":"y",
      "11.6":"y",
      "12":"y",
      "12.1":"y",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y"
    },
    "ios_saf":{
      "3.2":"n",
      "4.0-4.1":"n",
      "4.2-4.3":"n",
      "5.0-5.1":"n",
      "6.0-6.1":"n",
      "7.0-7.1":"n",
      "8":"n"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"n",
      "2.2":"n",
      "2.3":"n",
      "3":"n",
      "4":"n",
      "4.1":"n",
      "4.2-4.3":"n",
      "4.4":"y",
      "4.4.3":"y"
    },
    "bb":{
      "7":"n",
      "10":"n"
    },
    "op_mob":{
      "10":"u",
      "11":"u",
      "11.1":"u",
      "11.5":"y",
      "12":"y",
      "12.1":"y",
      "24":"y"
    },
    "and_chr":{
      "38":"y"
    },
    "and_ff":{
      "32":"n"
    },
    "ie_mob":{
      "10":"y"
    },
    "and_uc":{
      "9.9":"n"
    }
  },
  "notes":"",
  "notes_by_num":{
    
  },
  "usage_perc_y":72.99,
  "usage_perc_a":0,
  "ucprefix":false,
  "parent":"",
  "keywords":"::selection,selection",
  "ie_id":"",
  "chrome_id":"",
  "shown":true
}
},{}],57:[function(require,module,exports){
module.exports={
  "title":"CSS position:sticky",
  "description":"Keeps elements positioned as \"fixed\" or \"relative\" depending on how it appears in the viewport. As a result the element is \"stuck\" when necessary while scrolling.",
  "spec":"http://dev.w3.org/csswg/css-position/#sticky-positioning",
  "status":"unoff",
  "links":[
    {
      "url":"http://updates.html5rocks.com/2012/08/Stick-your-landings-position-sticky-lands-in-WebKit",
      "title":"HTML5Rocks"
    },
    {
      "url":"https://developer.mozilla.org/en-US/docs/Web/CSS/position",
      "title":"MDN article"
    },
    {
      "url":"http://docs.webplatform.org/wiki/css/properties/position",
      "title":"WebPlatform Docs"
    },
    {
      "url":"https://github.com/filamentgroup/fixed-sticky",
      "title":"Polyfill"
    },
    {
      "url":"https://github.com/wilddeer/stickyfill",
      "title":"Another polyfill"
    }
  ],
  "bugs":[
    {
      "description":"Firefox and Safari do not appear to support [sticky table headers](http://jsfiddle.net/Mf4YT/2/). (see also [Firefox bug](https://bugzilla.mozilla.org/show_bug.cgi?id=925259))"
    }
  ],
  "categories":[
    "CSS"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"n",
      "4":"n",
      "5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n",
      "12":"n",
      "13":"n",
      "14":"n",
      "15":"n",
      "16":"n",
      "17":"n",
      "18":"n",
      "19":"n",
      "20":"n",
      "21":"n",
      "22":"n",
      "23":"n",
      "24":"n",
      "25":"n",
      "26":"n d #1",
      "27":"n d #1",
      "28":"n d #1",
      "29":"n d #1",
      "30":"n d #1",
      "31":"n d #1",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y"
    },
    "chrome":{
      "4":"n",
      "5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n",
      "12":"n",
      "13":"n",
      "14":"n",
      "15":"n",
      "16":"n",
      "17":"n",
      "18":"n",
      "19":"n",
      "20":"n",
      "21":"n",
      "22":"n",
      "23":"n d #2",
      "24":"n d #2",
      "25":"n d #2",
      "26":"n d #2",
      "27":"n d #2",
      "28":"n d #2",
      "29":"n d #2",
      "30":"n d #2",
      "31":"n d #2",
      "32":"n d #2",
      "33":"n d #2",
      "34":"n d #2",
      "35":"n d #2",
      "36":"n d #2",
      "37":"n",
      "38":"n",
      "39":"n",
      "40":"n",
      "41":"n"
    },
    "safari":{
      "3.1":"n",
      "3.2":"n",
      "4":"n",
      "5":"n",
      "5.1":"n",
      "6":"n",
      "6.1":"y x",
      "7":"y x",
      "7.1":"y x",
      "8":"y x"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"n",
      "12":"n",
      "12.1":"n",
      "15":"n",
      "16":"n",
      "17":"n",
      "18":"n",
      "19":"n",
      "20":"n",
      "21":"n",
      "22":"n",
      "23":"n",
      "24":"n",
      "25":"n",
      "26":"n"
    },
    "ios_saf":{
      "3.2":"n",
      "4.0-4.1":"n",
      "4.2-4.3":"n",
      "5.0-5.1":"n",
      "6.0-6.1":"y x",
      "7.0-7.1":"y x",
      "8":"y x"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"n",
      "2.2":"n",
      "2.3":"n",
      "3":"n",
      "4":"n",
      "4.1":"n",
      "4.2-4.3":"n",
      "4.4":"n",
      "4.4.3":"n"
    },
    "bb":{
      "7":"n",
      "10":"n"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "12":"n",
      "12.1":"n",
      "24":"n"
    },
    "and_chr":{
      "38":"n"
    },
    "and_ff":{
      "32":"y"
    },
    "ie_mob":{
      "10":"n"
    },
    "and_uc":{
      "9.9":"n"
    }
  },
  "notes":"",
  "notes_by_num":{
    "1":"Can be enabled in Firefox by setting the about:config preference layout.css.sticky.enabled to true",
    "2":"Enabled in Chrome through the \"experimental Web Platform features\" flag in chrome://flags"
  },
  "usage_perc_y":16.82,
  "usage_perc_a":0,
  "ucprefix":false,
  "parent":"",
  "keywords":"",
  "ie_id":"positionsticky",
  "chrome_id":"6190250464378880",
  "shown":true
}
},{}],58:[function(require,module,exports){
module.exports={
  "title":"CSS3 Transitions",
  "description":"Simple method of animating certain properties of an element",
  "spec":"http://www.w3.org/TR/css3-transitions/",
  "status":"wd",
  "links":[
    {
      "url":"http://www.webdesignerdepot.com/2010/01/css-transitions-101/",
      "title":"Article on usage"
    },
    {
      "url":"http://www.css3files.com/transition/",
      "title":"Information page"
    },
    {
      "url":"http://www.the-art-of-web.com/css/timing-function/",
      "title":"Examples on timing functions"
    },
    {
      "url":"http://www.opera.com/docs/specs/presto2.12/css/transitions/",
      "title":"Animation of property types support in Opera"
    },
    {
      "url":"http://docs.webplatform.org/wiki/css/properties/transition",
      "title":"WebPlatform Docs"
    }
  ],
  "bugs":[
    {
      "description":"Not supported on any pseudo-elements besides ::before and ::after for Firefox, Chrome 26+, Opera 16+ and IE10+."
    },
    {
      "description":"Transitionable properties with calc() derived values are not supported below and including IE11 (http://connect.microsoft.com/IE/feedback/details/762719/css3-calc-bug-inside-transition-or-transform)"
    },
    {
      "description":"'background-size' is not supported below and including IE10"
    }
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"y",
      "11":"y"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"n",
      "4":"y x",
      "5":"y x",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y"
    },
    "chrome":{
      "4":"y x",
      "5":"y x",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y",
      "37":"y",
      "38":"y",
      "39":"y",
      "40":"y",
      "41":"y"
    },
    "safari":{
      "3.1":"y x",
      "3.2":"y x",
      "4":"y x",
      "5":"y x",
      "5.1":"y x",
      "6":"y x",
      "6.1":"y",
      "7":"y",
      "7.1":"y",
      "8":"y"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"y x",
      "10.6":"y x",
      "11":"y x",
      "11.1":"y x",
      "11.5":"y x",
      "11.6":"y x",
      "12":"y x",
      "12.1":"y",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y"
    },
    "ios_saf":{
      "3.2":"y x",
      "4.0-4.1":"y x",
      "4.2-4.3":"y x",
      "5.0-5.1":"y x",
      "6.0-6.1":"y x",
      "7.0-7.1":"y",
      "8":"y"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"y x",
      "2.2":"y x",
      "2.3":"y x",
      "3":"y x",
      "4":"y x",
      "4.1":"y x",
      "4.2-4.3":"y x",
      "4.4":"y",
      "4.4.3":"y"
    },
    "bb":{
      "7":"y x",
      "10":"y x"
    },
    "op_mob":{
      "10":"y x",
      "11":"y x",
      "11.1":"y x",
      "11.5":"y x",
      "12":"y x",
      "12.1":"y",
      "24":"y"
    },
    "and_chr":{
      "38":"y"
    },
    "and_ff":{
      "32":"y"
    },
    "ie_mob":{
      "10":"y"
    },
    "and_uc":{
      "9.9":"y x"
    }
  },
  "notes":"",
  "notes_by_num":{
    
  },
  "usage_perc_y":86.32,
  "usage_perc_a":0,
  "ucprefix":false,
  "parent":"",
  "keywords":"css transition",
  "ie_id":"",
  "chrome_id":"",
  "shown":true
}
},{}],59:[function(require,module,exports){
module.exports={
  "title":"CSS3 Box-sizing",
  "description":"Method of specifying whether or not an element's borders and padding should be included in size units",
  "spec":"http://www.w3.org/TR/css3-ui/#box-sizing",
  "status":"wd",
  "links":[
    {
      "url":"https://developer.mozilla.org/En/CSS/Box-sizing",
      "title":"MDN article"
    },
    {
      "url":"http://www.456bereastreet.com/archive/201104/controlling_width_with_css3_box-sizing/",
      "title":"Blog post"
    },
    {
      "url":"https://github.com/Schepp/box-sizing-polyfill",
      "title":"Polyfill for IE"
    },
    {
      "url":"http://css-tricks.com/box-sizing/",
      "title":"CSS Tricks"
    },
    {
      "url":"http://docs.webplatform.org/wiki/css/properties/box-sizing",
      "title":"WebPlatform Docs"
    }
  ],
  "bugs":[
    {
      "description":"Android browsers do not calculate correctly the dimensions (width and height) of the HTML select element."
    },
    {
      "description":"Safari 6.0.x does not use box-sizing on elements with display: table;"
    },
    {
      "description":"IE9 will subtract the width of the scrollbar to the width of the element when set to position: absolute, overflow: auto / overflow-y: scroll"
    },
    {
      "description":"IE 8 ignores `box-sizing: border-box` if min/max-width/height is used."
    }
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"p",
      "6":"p",
      "7":"p",
      "8":"a",
      "9":"a",
      "10":"a",
      "11":"a"
    },
    "firefox":{
      "2":"y x",
      "3":"y x",
      "3.5":"y x",
      "3.6":"y x",
      "4":"y x",
      "5":"y x",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y"
    },
    "chrome":{
      "4":"a x",
      "5":"a x",
      "6":"a x",
      "7":"a x",
      "8":"a x",
      "9":"a x",
      "10":"a",
      "11":"a",
      "12":"a",
      "13":"a",
      "14":"a",
      "15":"a",
      "16":"a",
      "17":"a",
      "18":"a",
      "19":"a",
      "20":"a",
      "21":"a",
      "22":"a",
      "23":"a",
      "24":"a",
      "25":"a",
      "26":"a",
      "27":"a",
      "28":"a",
      "29":"a",
      "30":"a",
      "31":"a",
      "32":"a",
      "33":"a",
      "34":"a",
      "35":"a",
      "36":"a",
      "37":"a",
      "38":"a",
      "39":"a",
      "40":"a",
      "41":"a"
    },
    "safari":{
      "3.1":"a x",
      "3.2":"a x",
      "4":"a x",
      "5":"a x",
      "5.1":"a",
      "6":"a",
      "6.1":"a",
      "7":"a",
      "7.1":"a",
      "8":"a"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"a",
      "10.0-10.1":"a",
      "10.5":"a",
      "10.6":"a",
      "11":"a",
      "11.1":"a",
      "11.5":"a",
      "11.6":"a",
      "12":"a",
      "12.1":"a",
      "15":"a",
      "16":"a",
      "17":"a",
      "18":"a",
      "19":"a",
      "20":"a",
      "21":"a",
      "22":"a",
      "23":"a",
      "24":"a",
      "25":"a",
      "26":"a"
    },
    "ios_saf":{
      "3.2":"a x",
      "4.0-4.1":"a x",
      "4.2-4.3":"a x",
      "5.0-5.1":"a",
      "6.0-6.1":"a",
      "7.0-7.1":"a",
      "8":"a"
    },
    "op_mini":{
      "5.0-8.0":"a"
    },
    "android":{
      "2.1":"a x",
      "2.2":"a x",
      "2.3":"a x",
      "3":"a x",
      "4":"a",
      "4.1":"a",
      "4.2-4.3":"a",
      "4.4":"a",
      "4.4.3":"a"
    },
    "bb":{
      "7":"a x",
      "10":"a"
    },
    "op_mob":{
      "10":"a",
      "11":"a",
      "11.1":"a",
      "11.5":"a",
      "12":"a",
      "12.1":"a",
      "24":"a"
    },
    "and_chr":{
      "38":"a"
    },
    "and_ff":{
      "32":"y"
    },
    "ie_mob":{
      "10":"a"
    },
    "and_uc":{
      "9.9":"a"
    }
  },
  "notes":"Partial support refers to supporting only the `content-box` and `border-box` values, not `padding-box` (which was added to the spec later).",
  "notes_by_num":{
    
  },
  "usage_perc_y":13.33,
  "usage_perc_a":82.7,
  "ucprefix":false,
  "parent":"",
  "keywords":"border-box,content-box,padding-box",
  "ie_id":"",
  "chrome_id":"",
  "shown":true
}
},{}],60:[function(require,module,exports){
module.exports={
  "title":"CSS3 Cursors (new values)",
  "description":"Support for `zoom-in` and `zoom-out` values for the CSS3 `cursor` property.",
  "spec":"http://www.w3.org/TR/css3-ui/#cursor",
  "status":"wd",
  "links":[
    {
      "url":"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor",
      "title":"MDN Documentation"
    }
  ],
  "bugs":[
    
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n"
    },
    "firefox":{
      "2":"y x",
      "3":"y x",
      "3.5":"y x",
      "3.6":"y x",
      "4":"y x",
      "5":"y x",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y"
    },
    "chrome":{
      "4":"y x",
      "5":"y x",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y x",
      "30":"y x",
      "31":"y x",
      "32":"y x",
      "33":"y x",
      "34":"y x",
      "35":"y x",
      "36":"y x",
      "37":"y",
      "38":"y",
      "39":"y",
      "40":"y",
      "41":"y"
    },
    "safari":{
      "3.1":"y x",
      "3.2":"y x",
      "4":"y x",
      "5":"y x",
      "5.1":"y x",
      "6":"y x",
      "6.1":"y x",
      "7":"y x",
      "7.1":"y x",
      "8":"y x"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"y",
      "12":"y",
      "12.1":"y",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y",
      "25":"y",
      "26":"y"
    },
    "ios_saf":{
      "3.2":"n",
      "4.0-4.1":"n",
      "4.2-4.3":"n",
      "5.0-5.1":"n",
      "6.0-6.1":"n",
      "7.0-7.1":"n",
      "8":"n"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"n",
      "2.2":"n",
      "2.3":"n",
      "3":"n",
      "4":"n",
      "4.1":"n",
      "4.2-4.3":"n",
      "4.4":"n",
      "4.4.3":"n"
    },
    "bb":{
      "7":"y x",
      "10":"y x"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "12":"n",
      "12.1":"n",
      "24":"n"
    },
    "and_chr":{
      "38":"n"
    },
    "and_ff":{
      "32":"n"
    },
    "ie_mob":{
      "10":"n"
    },
    "and_uc":{
      "9.9":"n"
    }
  },
  "notes":"Chrome, Safari and Firefox also support the unofficial `grab` and `grabbing` values (with prefix)",
  "notes_by_num":{
    
  },
  "usage_perc_y":51.09,
  "usage_perc_a":0,
  "ucprefix":false,
  "parent":"",
  "keywords":"cursors, pointers",
  "ie_id":"",
  "chrome_id":"",
  "shown":true
}
},{}],61:[function(require,module,exports){
module.exports={
  "title":"CSS3 tab-size",
  "description":"Method of customizing the width of the tab character. Only effective using 'white-space: pre' or 'white-space: pre-wrap'.",
  "spec":"http://www.w3.org/TR/css3-text/#tab-size1",
  "status":"wd",
  "links":[
    {
      "url":"https://developer.mozilla.org/en-US/docs/Web/CSS/tab-size",
      "title":"MDN article"
    }
  ],
  "bugs":[
    
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"n",
      "4":"y x",
      "5":"y x",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y x",
      "30":"y x",
      "31":"y x",
      "32":"y x",
      "33":"y x",
      "34":"y x",
      "35":"y x",
      "36":"y x"
    },
    "chrome":{
      "4":"n",
      "5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n",
      "12":"n",
      "13":"n",
      "14":"n",
      "15":"n",
      "16":"n",
      "17":"n",
      "18":"n",
      "19":"n",
      "20":"n",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y",
      "37":"y",
      "38":"y",
      "39":"y",
      "40":"y",
      "41":"y"
    },
    "safari":{
      "3.1":"n",
      "3.2":"n",
      "4":"n",
      "5":"n",
      "5.1":"n",
      "6":"n",
      "6.1":"y",
      "7":"y",
      "7.1":"y",
      "8":"y"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"y x",
      "11":"y x",
      "11.1":"y x",
      "11.5":"y x",
      "11.6":"y x",
      "12":"y x",
      "12.1":"y x",
      "15":"y",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y"
    },
    "ios_saf":{
      "3.2":"n",
      "4.0-4.1":"n",
      "4.2-4.3":"n",
      "5.0-5.1":"n",
      "6.0-6.1":"n",
      "7.0-7.1":"y",
      "8":"y"
    },
    "op_mini":{
      "5.0-8.0":"y x"
    },
    "android":{
      "2.1":"n",
      "2.2":"n",
      "2.3":"n",
      "3":"n",
      "4":"n",
      "4.1":"n",
      "4.2-4.3":"n",
      "4.4":"y",
      "4.4.3":"y"
    },
    "bb":{
      "7":"y",
      "10":"y"
    },
    "op_mob":{
      "10":"n",
      "11":"y x",
      "11.1":"y x",
      "11.5":"y x",
      "12":"y x",
      "12.1":"y x",
      "24":"y"
    },
    "and_chr":{
      "38":"y"
    },
    "and_ff":{
      "32":"y x"
    },
    "ie_mob":{
      "10":"n"
    },
    "and_uc":{
      "9.9":"n"
    }
  },
  "notes":"",
  "notes_by_num":{
    
  },
  "usage_perc_y":69.33,
  "usage_perc_a":0,
  "ucprefix":false,
  "parent":"",
  "keywords":"tab-size,tab-width",
  "ie_id":"",
  "chrome_id":"",
  "shown":true
}
},{}],62:[function(require,module,exports){
module.exports={
  "title":"Flexible Box Layout Module",
  "description":"Method of positioning elements in horizontal or vertical stacks.",
  "spec":"http://www.w3.org/TR/css3-flexbox/",
  "status":"cr",
  "links":[
    {
      "url":"http://bennettfeely.com/flexplorer/",
      "title":"Flexbox CSS generator"
    },
    {
      "url":"http://www.adobe.com/devnet/html5/articles/working-with-flexbox-the-new-spec.html",
      "title":"Article on using the latest spec"
    },
    {
      "url":"https://dev.opera.com/articles/view/advanced-cross-browser-flexbox/",
      "title":"Tutorial on cross-browser support"
    },
    {
      "url":"http://philipwalton.github.io/solved-by-flexbox/",
      "title":"Examples on how to solve common layout problems with flexbox"
    },
    {
      "url":"http://css-tricks.com/snippets/css/a-guide-to-flexbox/",
      "title":"A Complete Guide to Flexbox"
    },
    {
      "url":"http://the-echoplex.net/flexyboxes/",
      "title":"Flexbox playground and code generator"
    }
  ],
  "bugs":[
    {
      "description":"IE10 and IE11 default values for `flex` are `0 0 auto` rather than `0 1 auto`, as per the draft spec, as of September 2013."
    },
    {
      "description":"In IE10 and IE11, containers with `display: flex` and `flex-direction: column` will not properly calculate their flexed childrens' sizes if the container has `min-height` but no explicit `height` property. [See bug](https://connect.microsoft.com/IE/feedback/details/802625/min-height-and-flexbox-flex-direction-column-dont-work-together-in-ie-10-11-preview)."
    },
    {
      "description":"In Chrome and Safari, the height of (non flex) children are not recognized in percentages. However Firefox and IE recognize and scale the children based on percentage heights. [Chrome bug](http://crbug.com/341310)"
    }
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"a x #2",
      "11":"y"
    },
    "firefox":{
      "2":"a x #1",
      "3":"a x #1",
      "3.5":"a x #1",
      "3.6":"a x #1",
      "4":"a x #1",
      "5":"a x #1",
      "6":"a x #1",
      "7":"a x #1",
      "8":"a x #1",
      "9":"a x #1",
      "10":"a x #1",
      "11":"a x #1",
      "12":"a x #1",
      "13":"a x #1",
      "14":"a x #1",
      "15":"a x #1",
      "16":"a x #1",
      "17":"a x #1",
      "18":"a x #1",
      "19":"a x #1",
      "20":"a x #1",
      "21":"a x #1",
      "22":"a #3",
      "23":"a #3",
      "24":"a #3",
      "25":"a #3",
      "26":"a #3",
      "27":"a #3",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y"
    },
    "chrome":{
      "4":"a x #1",
      "5":"a x #1",
      "6":"a x #1",
      "7":"a x #1",
      "8":"a x #1",
      "9":"a x #1",
      "10":"a x #1",
      "11":"a x #1",
      "12":"a x #1",
      "13":"a x #1",
      "14":"a x #1",
      "15":"a x #1",
      "16":"a x #1",
      "17":"a x #1",
      "18":"a x #1",
      "19":"a x #1",
      "20":"a x #1",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y",
      "37":"y",
      "38":"y",
      "39":"y",
      "40":"y",
      "41":"y"
    },
    "safari":{
      "3.1":"a x #1",
      "3.2":"a x #1",
      "4":"a x #1",
      "5":"a x #1",
      "5.1":"a x #1",
      "6":"a x #1",
      "6.1":"y x",
      "7":"y x",
      "7.1":"y x",
      "8":"y x"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"n",
      "12":"n",
      "12.1":"y",
      "15":"y x",
      "16":"y x",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y"
    },
    "ios_saf":{
      "3.2":"a x #1",
      "4.0-4.1":"a x #1",
      "4.2-4.3":"a x #1",
      "5.0-5.1":"a x #1",
      "6.0-6.1":"a x #1",
      "7.0-7.1":"y x",
      "8":"y x"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"a x #1",
      "2.2":"a x #1",
      "2.3":"a x #1",
      "3":"a x #1",
      "4":"a x #1",
      "4.1":"a x #1",
      "4.2-4.3":"a x #1",
      "4.4":"y",
      "4.4.3":"y"
    },
    "bb":{
      "7":"a x #1",
      "10":"y x"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "12":"n",
      "12.1":"y",
      "24":"y"
    },
    "and_chr":{
      "38":"y"
    },
    "and_ff":{
      "32":"y"
    },
    "ie_mob":{
      "10":"a x #2"
    },
    "and_uc":{
      "9.9":"a x #1"
    }
  },
  "notes":"Most partial support refers to supporting an [older version](http://www.w3.org/TR/2009/WD-css3-flexbox-20090723/) of the specification or an [older syntax](http://www.w3.org/TR/2012/WD-css3-flexbox-20120322/).",
  "notes_by_num":{
    "1":"Only supports the [old flexbox](http://www.w3.org/TR/2009/WD-css3-flexbox-20090723) specification and does not support wrapping.",
    "2":"Only supports the [2012 syntax](http://www.w3.org/TR/2012/WD-css3-flexbox-20120322/)",
    "3":"Does not support flex-wrap or flex-flow properties"
  },
  "usage_perc_y":71.91,
  "usage_perc_a":14.53,
  "ucprefix":false,
  "parent":"",
  "keywords":"flex-box,flex-direction,flex-wrap,flex-flow,flex-grow,flex-basis",
  "ie_id":"flexbox",
  "chrome_id":"4837301406400512",
  "shown":true
}
},{}],63:[function(require,module,exports){
module.exports={
  "title":"Font feature settings",
  "description":"Method of applying advanced typographic and language-specific font features to supported OpenType fonts.",
  "spec":"http://w3.org/TR/css3-fonts/#font-rend-props",
  "status":"wd",
  "links":[
    {
      "url":"http://ie.microsoft.com/testdrive/Graphics/opentype/",
      "title":"Demo pages (IE/Firefox only)"
    },
    {
      "url":"http://hacks.mozilla.org/2010/11/firefox-4-font-feature-support/",
      "title":"Mozilla hacks article"
    },
    {
      "url":"http://html5accessibility.com/",
      "title":"Detailed tables on accessability support"
    },
    {
      "url":"http://docs.webplatform.org/wiki/css/properties/font-feature-settings",
      "title":"WebPlatform Docs"
    }
  ],
  "bugs":[
    
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"y",
      "11":"y"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"n",
      "4":"a x",
      "5":"a x",
      "6":"a x",
      "7":"a x",
      "8":"a x",
      "9":"a x",
      "10":"a x",
      "11":"a x",
      "12":"a x",
      "13":"a x",
      "14":"a x",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y x",
      "30":"y x",
      "31":"y x",
      "32":"y x",
      "33":"y x",
      "34":"y",
      "35":"y",
      "36":"y"
    },
    "chrome":{
      "4":"n",
      "5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n",
      "12":"n",
      "13":"n",
      "14":"n",
      "15":"n",
      "16":"a x",
      "17":"a x",
      "18":"a x",
      "19":"a x",
      "20":"a x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y x",
      "30":"y x",
      "31":"y x",
      "32":"y x",
      "33":"y x",
      "34":"y x",
      "35":"y x",
      "36":"y x",
      "37":"y x",
      "38":"y x",
      "39":"y x",
      "40":"y x",
      "41":"y x"
    },
    "safari":{
      "3.1":"n",
      "3.2":"n",
      "4":"a",
      "5":"a",
      "5.1":"a",
      "6":"a",
      "6.1":"n",
      "7":"n",
      "7.1":"n",
      "8":"n"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"n",
      "12":"n",
      "12.1":"n",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x"
    },
    "ios_saf":{
      "3.2":"a",
      "4.0-4.1":"a",
      "4.2-4.3":"a",
      "5.0-5.1":"a",
      "6.0-6.1":"a",
      "7.0-7.1":"n",
      "8":"n"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"n",
      "2.2":"n",
      "2.3":"n",
      "3":"n",
      "4":"n",
      "4.1":"n",
      "4.2-4.3":"n",
      "4.4":"y x",
      "4.4.3":"y x"
    },
    "bb":{
      "7":"n",
      "10":"y x"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "12":"n",
      "12.1":"n",
      "24":"y x"
    },
    "and_chr":{
      "38":"y x"
    },
    "and_ff":{
      "32":"y x"
    },
    "ie_mob":{
      "10":"n"
    },
    "and_uc":{
      "9.9":"y x"
    }
  },
  "notes":"Partial support in older Firefox versions refers to using an older syntax. Partial support in older Chrome versions refers to lacking support in Mac OS X. ",
  "notes_by_num":{
    
  },
  "usage_perc_y":68.46,
  "usage_perc_a":1.84,
  "ucprefix":false,
  "parent":"",
  "keywords":"font-feature,font-feature-settings,kern,kerning,font-variant-alternates,ligatures,font-variant-ligatures",
  "ie_id":"",
  "chrome_id":"",
  "shown":true
}
},{}],64:[function(require,module,exports){
module.exports={
  "title":"Full Screen API",
  "description":"API for allowing content (like a video or canvas element) to take up the entire screen.",
  "spec":"http://www.w3.org/TR/fullscreen/",
  "status":"wd",
  "links":[
    {
      "url":"https://developer.mozilla.org/en/DOM/Using_full-screen_mode",
      "title":"MDN article"
    },
    {
      "url":"http://jlongster.com/2011/11/21/canvas.html",
      "title":"Blog post"
    },
    {
      "url":"http://hacks.mozilla.org/2012/01/using-the-fullscreen-api-in-web-browsers/",
      "title":"Mozilla hacks article"
    },
    {
      "url":"http://docs.webplatform.org/wiki/dom/Element/requestFullscreen",
      "title":"WebPlatform Docs"
    }
  ],
  "bugs":[
    {
      "description":"Safari blocks access to keyboard events in fullscreen mode (as a security measure)."
    },
    {
      "description":"IE 11 does not allow scrolling when document.documentElement is set to full screen."
    },
    {
      "description":"IE 11 does not properly support fullscreen when opening from an iframe."
    },
    {
      "description":"IE 11 doesn't allow going to fullscreen mode when the event that triggers `msRequestFullscreen()` is a `keydown` event (`keypress` does work)"
    }
  ],
  "categories":[
    "JS API"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"y x"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"n",
      "4":"n",
      "5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"a x",
      "11":"a x",
      "12":"a x",
      "13":"a x",
      "14":"a x",
      "15":"a x",
      "16":"a x",
      "17":"a x",
      "18":"a x",
      "19":"a x",
      "20":"a x",
      "21":"a x",
      "22":"a x",
      "23":"a x",
      "24":"a x",
      "25":"a x",
      "26":"a x",
      "27":"a x",
      "28":"a x",
      "29":"a x",
      "30":"a x",
      "31":"a x",
      "32":"a x",
      "33":"a x",
      "34":"a x",
      "35":"a x",
      "36":"a x"
    },
    "chrome":{
      "4":"n",
      "5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n",
      "12":"n",
      "13":"n",
      "14":"n",
      "15":"a x",
      "16":"a x",
      "17":"a x",
      "18":"a x",
      "19":"a x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y x",
      "30":"y x",
      "31":"y x",
      "32":"y x",
      "33":"y x",
      "34":"y x",
      "35":"y x",
      "36":"y x",
      "37":"y x",
      "38":"y x",
      "39":"y x",
      "40":"y x",
      "41":"y x"
    },
    "safari":{
      "3.1":"n",
      "3.2":"n",
      "4":"n",
      "5":"n",
      "5.1":"a x",
      "6":"y x",
      "6.1":"y x",
      "7":"y x",
      "7.1":"y x",
      "8":"y x"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"n",
      "12":"n",
      "12.1":"y",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x"
    },
    "ios_saf":{
      "3.2":"n",
      "4.0-4.1":"n",
      "4.2-4.3":"n",
      "5.0-5.1":"n",
      "6.0-6.1":"n",
      "7.0-7.1":"n",
      "8":"n"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"n",
      "2.2":"n",
      "2.3":"n",
      "3":"n",
      "4":"n",
      "4.1":"n",
      "4.2-4.3":"n",
      "4.4":"n",
      "4.4.3":"n"
    },
    "bb":{
      "7":"n",
      "10":"a"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "12":"n",
      "12.1":"n",
      "24":"y x"
    },
    "and_chr":{
      "38":"y x"
    },
    "and_ff":{
      "32":"a x"
    },
    "ie_mob":{
      "10":"n"
    },
    "and_uc":{
      "9.9":"n"
    }
  },
  "notes":"Partial support refers to supporting an earlier draft of the spec.",
  "notes_by_num":{
    
  },
  "usage_perc_y":51.57,
  "usage_perc_a":13.69,
  "ucprefix":false,
  "parent":"",
  "keywords":"full-screen",
  "ie_id":"fullscreenapi",
  "chrome_id":"5259513871466496",
  "shown":true
}
},{}],65:[function(require,module,exports){
module.exports={
  "title":"Intrinsic & Extrinsic Sizing",
  "description":"Allows for the heights and widths to be specified in intrinsic values using the fill-available, max-content, min-content, and fit-content properties.",
  "spec":"http://www.w3.org/TR/css3-sizing/",
  "status":"wd",
  "links":[
    {
      "url":"http://demosthenes.info/blog/662/Design-From-the-Inside-Out-With-CSS-MinContent",
      "title":"Min-Content tutorial"
    }
  ],
  "bugs":[
    
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"n",
      "4":"y x",
      "5":"y x",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y x",
      "30":"y x",
      "31":"y x",
      "32":"y x",
      "33":"y x",
      "34":"y x",
      "35":"y x",
      "36":"y x"
    },
    "chrome":{
      "4":"n",
      "5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n",
      "12":"n",
      "13":"n",
      "14":"n",
      "15":"n",
      "16":"n",
      "17":"n",
      "18":"n",
      "19":"n",
      "20":"n",
      "21":"n",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y x",
      "30":"y x",
      "31":"y x",
      "32":"y x",
      "33":"y x",
      "34":"y x",
      "35":"y x",
      "36":"y x",
      "37":"y x",
      "38":"y x",
      "39":"y x",
      "40":"y x",
      "41":"y x"
    },
    "safari":{
      "3.1":"n",
      "3.2":"n",
      "4":"n",
      "5":"n",
      "5.1":"n",
      "6":"n",
      "6.1":"y x",
      "7":"y x",
      "7.1":"y x",
      "8":"y x"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"n",
      "12":"n",
      "12.1":"n",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x"
    },
    "ios_saf":{
      "3.2":"n",
      "4.0-4.1":"n",
      "4.2-4.3":"n",
      "5.0-5.1":"n",
      "6.0-6.1":"n",
      "7.0-7.1":"y x",
      "8":"y x"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"n",
      "2.2":"n",
      "2.3":"n",
      "3":"n",
      "4":"n",
      "4.1":"n",
      "4.2-4.3":"n",
      "4.4":"y x",
      "4.4.3":"y x"
    },
    "bb":{
      "7":"n",
      "10":"y x"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "12":"n",
      "12.1":"n",
      "24":"y x"
    },
    "and_chr":{
      "38":"y x"
    },
    "and_ff":{
      "32":"y x"
    },
    "ie_mob":{
      "10":"n"
    },
    "and_uc":{
      "9.9":"n"
    }
  },
  "notes":"Prefixes are on the values, not the property names (e.g. -webkit-min-content) Firefox currently supports the \"-moz-available\" property rather than \"-moz-fill-available\".",
  "notes_by_num":{
    
  },
  "usage_perc_y":65.42,
  "usage_perc_a":0,
  "ucprefix":false,
  "parent":"",
  "keywords":"fill-available,max-content,min-content,fit-content,contain-floats",
  "ie_id":"cssintrinsicsizing",
  "chrome_id":"5901353784180736",
  "shown":true
}
},{}],66:[function(require,module,exports){
module.exports={
  "title":"CSS3 Multiple column layout",
  "description":"Method of flowing information in multiple columns",
  "spec":"http://www.w3.org/TR/css3-multicol/",
  "status":"cr",
  "links":[
    {
      "url":"https://dev.opera.com/articles/view/css3-multi-column-layout/",
      "title":"Dev.Opera article"
    },
    {
      "url":"http://webdesign.tutsplus.com/tutorials/htmlcss-tutorials/an-introduction-to-the-css3-multiple-column-layout-module/",
      "title":"Introduction page"
    },
    {
      "url":"http://docs.webplatform.org/wiki/css/properties/column-width",
      "title":"WebPlatform Docs"
    },
    {
      "url":"https://github.com/BetleyWhitehorne/CSS3MultiColumn",
      "title":"Polyfill"
    }
  ],
  "bugs":[
    {
      "description":"In Firefox, the property `column-span` (or `-moz-column-span`) does not yet work. See [the bug](https://bugzilla.mozilla.org/show_bug.cgi?id=616436)."
    },
    {
      "description":"In Chrome, the `-webkit-column-count` directive does not yet work with print stylesheets. See the [following bug in Chromium](https://code.google.com/p/chromium/issues/detail?id=99358)."
    }
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"y",
      "11":"y"
    },
    "firefox":{
      "2":"a x",
      "3":"a x",
      "3.5":"a x",
      "3.6":"a x",
      "4":"a x",
      "5":"a x",
      "6":"a x",
      "7":"a x",
      "8":"a x",
      "9":"a x",
      "10":"a x",
      "11":"a x",
      "12":"a x",
      "13":"a x",
      "14":"a x",
      "15":"a x",
      "16":"a x",
      "17":"a x",
      "18":"a x",
      "19":"a x",
      "20":"a x",
      "21":"a x",
      "22":"a x",
      "23":"a x",
      "24":"a x",
      "25":"a x",
      "26":"a x",
      "27":"a x",
      "28":"a x",
      "29":"a x",
      "30":"a x",
      "31":"a x",
      "32":"a x",
      "33":"a x",
      "34":"a x",
      "35":"a x",
      "36":"a x"
    },
    "chrome":{
      "4":"a x",
      "5":"a x",
      "6":"a x",
      "7":"a x",
      "8":"a x",
      "9":"a x",
      "10":"a x",
      "11":"a x",
      "12":"a x",
      "13":"a x",
      "14":"a x",
      "15":"a x",
      "16":"a x",
      "17":"a x",
      "18":"a x",
      "19":"a x",
      "20":"a x",
      "21":"a x",
      "22":"a x",
      "23":"a x",
      "24":"a x",
      "25":"a x",
      "26":"a x",
      "27":"a x",
      "28":"a x",
      "29":"a x",
      "30":"a x",
      "31":"a x",
      "32":"a x",
      "33":"a x",
      "34":"a x",
      "35":"a x",
      "36":"a x",
      "37":"a x",
      "38":"a x",
      "39":"a x",
      "40":"a x",
      "41":"a x"
    },
    "safari":{
      "3.1":"a x",
      "3.2":"a x",
      "4":"a x",
      "5":"a x",
      "5.1":"a x",
      "6":"a x",
      "6.1":"a x",
      "7":"a x",
      "7.1":"a x",
      "8":"a x"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"y",
      "11.5":"y",
      "11.6":"y",
      "12":"y",
      "12.1":"y",
      "15":"a x",
      "16":"a x",
      "17":"a x",
      "18":"a x",
      "19":"a x",
      "20":"a x",
      "21":"a x",
      "22":"a x",
      "23":"a x",
      "24":"a x",
      "25":"a x",
      "26":"a x"
    },
    "ios_saf":{
      "3.2":"a x",
      "4.0-4.1":"a x",
      "4.2-4.3":"a x",
      "5.0-5.1":"a x",
      "6.0-6.1":"a x",
      "7.0-7.1":"a x",
      "8":"a x"
    },
    "op_mini":{
      "5.0-8.0":"y"
    },
    "android":{
      "2.1":"a x",
      "2.2":"a x",
      "2.3":"a x",
      "3":"a x",
      "4":"a x",
      "4.1":"a x",
      "4.2-4.3":"a x",
      "4.4":"a x",
      "4.4.3":"a x"
    },
    "bb":{
      "7":"a x",
      "10":"a x"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"y",
      "11.5":"y",
      "12":"y",
      "12.1":"y",
      "24":"a x"
    },
    "and_chr":{
      "38":"a x"
    },
    "and_ff":{
      "32":"a x"
    },
    "ie_mob":{
      "10":"y"
    },
    "and_uc":{
      "9.9":"a x"
    }
  },
  "notes":"Partial support refers to not supporting the `break-before`, `break-after`, `break-inside` properties. Webkit browsers do have equivalent support for the non-standard `-webkit-column-break-*` properties while Firefox supports `page-break-*` to accomplish the same result.",
  "notes_by_num":{
    
  },
  "usage_perc_y":13.56,
  "usage_perc_a":76.06,
  "ucprefix":false,
  "parent":"",
  "keywords":"column-count",
  "ie_id":"multicolumnfullsupport",
  "chrome_id":"6526151266664448",
  "shown":true
}
},{}],67:[function(require,module,exports){
module.exports={
  "title":"Pointer events",
  "description":"This specification integrates various inputs from mice, touchscreens, and pens, making separate implementations no longer necessary and authoring for cross-device pointers easier. Not to be mistaken with the unrelated \"pointer-events\" CSS property.",
  "spec":"http://www.w3.org/TR/pointerevents/",
  "status":"cr",
  "links":[
    {
      "url":"http://blogs.msdn.com/b/ie/archive/2011/09/20/touch-input-for-ie10-and-metro-style-apps.aspx",
      "title":"Implementation of Pointer Events in IE10"
    },
    {
      "url":"http://blogs.msdn.com/b/eternalcoding/archive/2013/01/16/hand-js-a-polyfill-for-supporting-pointer-events-on-every-browser.aspx",
      "title":"Hand.js, the polyfill for browsers only supporting Touch Events"
    },
    {
      "url":"http://blogs.msdn.com/b/davrous/archive/2013/02/20/handling-touch-in-your-html5-apps-thanks-to-the-pointer-events-of-ie10-and-windows-8.aspx",
      "title":"Article & tutorial"
    }
  ],
  "bugs":[
    
  ],
  "categories":[
    "DOM",
    "JS API"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"a x",
      "11":"y"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"n",
      "4":"n",
      "5":"n",
      "6":"p",
      "7":"p",
      "8":"p",
      "9":"p",
      "10":"p",
      "11":"p",
      "12":"p",
      "13":"p",
      "14":"p",
      "15":"p",
      "16":"p",
      "17":"p",
      "18":"p",
      "19":"p",
      "20":"p",
      "21":"p",
      "22":"p",
      "23":"p",
      "24":"p",
      "25":"p",
      "26":"p",
      "27":"p",
      "28":"p",
      "29":"p",
      "30":"p",
      "31":"p",
      "32":"p",
      "33":"p",
      "34":"p",
      "35":"p",
      "36":"p"
    },
    "chrome":{
      "4":"n",
      "5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n",
      "12":"n",
      "13":"n",
      "14":"n",
      "15":"n",
      "16":"n",
      "17":"n",
      "18":"n",
      "19":"n",
      "20":"n",
      "21":"n",
      "22":"p",
      "23":"p",
      "24":"p",
      "25":"p",
      "26":"p",
      "27":"p",
      "28":"p",
      "29":"p",
      "30":"p",
      "31":"p",
      "32":"p",
      "33":"p",
      "34":"p",
      "35":"p",
      "36":"p",
      "37":"p",
      "38":"p",
      "39":"p",
      "40":"p",
      "41":"p"
    },
    "safari":{
      "3.1":"n",
      "3.2":"n",
      "4":"n",
      "5":"n",
      "5.1":"n",
      "6":"n",
      "6.1":"u",
      "7":"u",
      "7.1":"u",
      "8":"u"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"n",
      "12":"n",
      "12.1":"n",
      "15":"p",
      "16":"p",
      "17":"p",
      "18":"p",
      "19":"p",
      "20":"p",
      "21":"p",
      "22":"p",
      "23":"p",
      "24":"p",
      "25":"p",
      "26":"p"
    },
    "ios_saf":{
      "3.2":"p",
      "4.0-4.1":"p",
      "4.2-4.3":"p",
      "5.0-5.1":"p",
      "6.0-6.1":"p",
      "7.0-7.1":"p",
      "8":"p"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"p",
      "2.2":"p",
      "2.3":"p",
      "3":"p",
      "4":"p",
      "4.1":"p",
      "4.2-4.3":"p",
      "4.4":"p",
      "4.4.3":"p"
    },
    "bb":{
      "7":"p",
      "10":"p"
    },
    "op_mob":{
      "10":"n",
      "11":"p",
      "11.1":"p",
      "11.5":"p",
      "12":"p",
      "12.1":"p",
      "24":"p"
    },
    "and_chr":{
      "38":"p"
    },
    "and_ff":{
      "32":"p"
    },
    "ie_mob":{
      "10":"a x"
    },
    "and_uc":{
      "9.9":"p"
    }
  },
  "notes":"Partial support in IE10 refers the lack of pointerenter and pointerleave events. Firefox Nightly provides 'dom.w3c_pointer_events.enabled' option to support this specification starting with version 28.",
  "notes_by_num":{
    
  },
  "usage_perc_y":7.37,
  "usage_perc_a":2.73,
  "ucprefix":false,
  "parent":"",
  "keywords":"pointerdown,pointermove,pointerup,pointercancel,pointerover,pointerout,pointerenter,pointerleave",
  "ie_id":"pointerevents",
  "chrome_id":"4504699138998272",
  "shown":true
}
},{}],68:[function(require,module,exports){
module.exports={
  "title":"text-decoration styling",
  "description":"Method of defining the type, style and color of lines in the text-decoration property.",
  "spec":"http://www.w3.org/TR/css-text-decor-3/#line-decoration",
  "status":"cr",
  "links":[
    {
      "url":"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style",
      "title":"MDN Documentation for text-decoration-style"
    },
    {
      "url":"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color",
      "title":"MDN Documentation for text-decoration-color"
    },
    {
      "url":"https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-line",
      "title":"MDN Documentation for text-decoration-line"
    }
  ],
  "bugs":[
    
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"n",
      "4":"n",
      "5":"n",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y x",
      "30":"y x",
      "31":"y x",
      "32":"y x",
      "33":"y x",
      "34":"y x",
      "35":"y x",
      "36":"y x"
    },
    "chrome":{
      "4":"n",
      "5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n",
      "12":"n",
      "13":"n",
      "14":"n",
      "15":"n",
      "16":"n",
      "17":"n",
      "18":"n",
      "19":"n",
      "20":"n",
      "21":"n",
      "22":"n",
      "23":"n",
      "24":"n",
      "25":"n",
      "26":"n x d #1",
      "27":"n x d #1",
      "28":"n x d #1",
      "29":"n x d #1",
      "30":"n x d #1",
      "31":"n x d #1",
      "32":"n x d #1",
      "33":"n x d #1",
      "34":"n x d #1",
      "35":"n x d #1",
      "36":"n x d #1",
      "37":"n x d #1",
      "38":"n x d #1",
      "39":"n x d #1",
      "40":"n x d #1",
      "41":"n x d #1"
    },
    "safari":{
      "3.1":"n",
      "3.2":"n",
      "4":"n",
      "5":"n",
      "5.1":"n",
      "6":"n",
      "6.1":"n",
      "7":"n",
      "7.1":"a x #2",
      "8":"a x #2"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"n",
      "12":"n",
      "12.1":"n",
      "15":"n",
      "16":"n",
      "17":"n",
      "18":"n",
      "19":"n",
      "20":"n",
      "21":"n",
      "22":"n",
      "23":"n",
      "24":"n",
      "25":"n",
      "26":"n"
    },
    "ios_saf":{
      "3.2":"n",
      "4.0-4.1":"n",
      "4.2-4.3":"n",
      "5.0-5.1":"n",
      "6.0-6.1":"n",
      "7.0-7.1":"n",
      "8":"a x #2"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"n",
      "2.2":"n",
      "2.3":"n",
      "3":"n",
      "4":"n",
      "4.1":"n",
      "4.2-4.3":"n",
      "4.4":"n",
      "4.4.3":"n"
    },
    "bb":{
      "7":"n",
      "10":"n"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "12":"n",
      "12.1":"n",
      "24":"n"
    },
    "and_chr":{
      "38":"n"
    },
    "and_ff":{
      "32":"y x"
    },
    "ie_mob":{
      "10":"n"
    },
    "and_uc":{
      "9.9":"n"
    }
  },
  "notes":"",
  "notes_by_num":{
    "1":"Enabled in Chrome through the \"experimental Web Platform features\" flag in chrome://flags",
    "2":"Partial support in Safari refers to not supporting the text-decoration-style property."
  },
  "usage_perc_y":13.08,
  "usage_perc_a":1.81,
  "ucprefix":false,
  "parent":"",
  "keywords":"text-decoration-line,text-decoration-style,text-decoration-color",
  "ie_id":"",
  "chrome_id":"",
  "shown":true
}
},{}],69:[function(require,module,exports){
module.exports={
  "title":"CSS text-size-adjust",
  "description":"On mobile devices, the text-size-adjust CSS property allows Web authors to control if and how the text-inflating algorithm is applied to the textual content of the element it is applied to.",
  "spec":"http://dev.w3.org/csswg/css-size-adjust/",
  "status":"wd",
  "links":[
    {
      "url":"https://developer.mozilla.org/en-US/docs/Web/CSS/text-size-adjust",
      "title":"MDN Docs"
    }
  ],
  "bugs":[
    {
      "description":"There is a bug in Webkit-based desktop browsers. If -webkit-text-size-adjust is explicitely set to none, Webkit-based desktop browsers, like Chrome or Safari, instead of ignoring the property, will prevent the user to zoom in or out the Web page."
    },
    {
      "description":"If the viewport in IE Phone is set using <meta> element, the value of the CSS text-size-adjust property is ignored."
    }
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"n",
      "4":"n",
      "5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n",
      "12":"n",
      "13":"n",
      "14":"n",
      "15":"n",
      "16":"n",
      "17":"n",
      "18":"n",
      "19":"n",
      "20":"n",
      "21":"n",
      "22":"n",
      "23":"n",
      "24":"n",
      "25":"n",
      "26":"n",
      "27":"n",
      "28":"n",
      "29":"n",
      "30":"n",
      "31":"n",
      "32":"n",
      "33":"n",
      "34":"n",
      "35":"n",
      "36":"n"
    },
    "chrome":{
      "4":"n",
      "5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n",
      "12":"n",
      "13":"n",
      "14":"n",
      "15":"n",
      "16":"n",
      "17":"n",
      "18":"n",
      "19":"n",
      "20":"n",
      "21":"n",
      "22":"n",
      "23":"n",
      "24":"n",
      "25":"n",
      "26":"n",
      "27":"n",
      "28":"n",
      "29":"n",
      "30":"n",
      "31":"n",
      "32":"n",
      "33":"n",
      "34":"n",
      "35":"n",
      "36":"n",
      "37":"n",
      "38":"n",
      "39":"n",
      "40":"n",
      "41":"n"
    },
    "safari":{
      "3.1":"n",
      "3.2":"n",
      "4":"n",
      "5":"n",
      "5.1":"n",
      "6":"n",
      "6.1":"n",
      "7":"n",
      "7.1":"n",
      "8":"n"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"n",
      "12":"n",
      "12.1":"n",
      "15":"n",
      "16":"n",
      "17":"n",
      "18":"n",
      "19":"n",
      "20":"n",
      "21":"n",
      "22":"n",
      "23":"n",
      "24":"n",
      "25":"n",
      "26":"n"
    },
    "ios_saf":{
      "3.2":"n",
      "4.0-4.1":"n",
      "4.2-4.3":"n",
      "5.0-5.1":"y x",
      "6.0-6.1":"y x",
      "7.0-7.1":"y x",
      "8":"y x"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"n",
      "2.2":"n",
      "2.3":"n",
      "3":"n",
      "4":"n",
      "4.1":"n",
      "4.2-4.3":"n",
      "4.4":"n",
      "4.4.3":"n"
    },
    "bb":{
      "7":"n",
      "10":"n"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "12":"n",
      "12.1":"n",
      "24":"n"
    },
    "and_chr":{
      "38":"n"
    },
    "and_ff":{
      "32":"y x"
    },
    "ie_mob":{
      "10":"y x"
    },
    "and_uc":{
      "9.9":"y x"
    }
  },
  "notes":"",
  "notes_by_num":{
    
  },
  "usage_perc_y":11.17,
  "usage_perc_a":0,
  "ucprefix":false,
  "parent":"",
  "keywords":"",
  "ie_id":"",
  "chrome_id":"",
  "shown":true
}
},{}],70:[function(require,module,exports){
module.exports={
  "title":"CSS3 Transforms",
  "description":"Method of transforming an element including rotating, scaling, etc.",
  "spec":"http://www.w3.org/TR/css3-2d-transforms/",
  "status":"wd",
  "links":[
    {
      "url":"http://www.westciv.com/tools/transforms/",
      "title":"Live editor"
    },
    {
      "url":"https://developer.mozilla.org/en/CSS/-moz-transform",
      "title":"MDN article"
    },
    {
      "url":"http://www.webresourcesdepot.com/cross-browser-css-transforms-csssandpaper/",
      "title":"Workaround script for IE"
    },
    {
      "url":"http://www.css3files.com/transform/",
      "title":"Information page"
    },
    {
      "url":"http://www.useragentman.com/IETransformsTranslator/",
      "title":"Converter for IE"
    },
    {
      "url":"https://raw.github.com/phiggins42/has.js/master/detect/css.js#css-transform",
      "title":"has.js test"
    },
    {
      "url":"http://docs.webplatform.org/wiki/css/transforms/transform",
      "title":"WebPlatform Docs"
    }
  ],
  "bugs":[
    {
      "description":"Scaling transforms in Android 2.3 fails to scale element background images."
    },
    {
      "description":"Firefox and IE don't support CSS transforms on SVG elements (though SVG transform attributes do work)."
    },
    {
      "description":"Transforms may break position:fixed styles of contained elements"
    }
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"p",
      "7":"p",
      "8":"p",
      "9":"y x",
      "10":"y",
      "11":"y"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"y x",
      "3.6":"y x",
      "4":"y x",
      "5":"y x",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y"
    },
    "chrome":{
      "4":"y x",
      "5":"y x",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y x",
      "30":"y x",
      "31":"y x",
      "32":"y x",
      "33":"y x",
      "34":"y x",
      "35":"y x",
      "36":"y",
      "37":"y",
      "38":"y",
      "39":"y",
      "40":"y",
      "41":"y"
    },
    "safari":{
      "3.1":"y x",
      "3.2":"y x",
      "4":"y x",
      "5":"y x",
      "5.1":"y x",
      "6":"y x",
      "6.1":"y x",
      "7":"y x",
      "7.1":"y x",
      "8":"y x"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"y x",
      "10.6":"y x",
      "11":"y x",
      "11.1":"y x",
      "11.5":"y x",
      "11.6":"y x",
      "12":"y x",
      "12.1":"y",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y"
    },
    "ios_saf":{
      "3.2":"y x",
      "4.0-4.1":"y x",
      "4.2-4.3":"y x",
      "5.0-5.1":"y x",
      "6.0-6.1":"y x",
      "7.0-7.1":"y x",
      "8":"y x"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"y x",
      "2.2":"y x",
      "2.3":"y x",
      "3":"y x",
      "4":"y x",
      "4.1":"y x",
      "4.2-4.3":"y x",
      "4.4":"y x",
      "4.4.3":"y x"
    },
    "bb":{
      "7":"y x",
      "10":"y x"
    },
    "op_mob":{
      "10":"n",
      "11":"y",
      "11.1":"y",
      "11.5":"y",
      "12":"y",
      "12.1":"y",
      "24":"y"
    },
    "and_chr":{
      "38":"y"
    },
    "and_ff":{
      "32":"y"
    },
    "ie_mob":{
      "10":"y"
    },
    "and_uc":{
      "9.9":"y x"
    }
  },
  "notes":"The scale transform can be emulated in IE < 9 using Microsoft's \"zoom\" extension, others are (not easily) possible using the MS Matrix filter",
  "notes_by_num":{
    
  },
  "usage_perc_y":88.85,
  "usage_perc_a":0,
  "ucprefix":false,
  "parent":"",
  "keywords":"transformation,translate,rotation,rotate,scale,css-transforms",
  "ie_id":"transforms",
  "chrome_id":"6437640580628480",
  "shown":true
}
},{}],71:[function(require,module,exports){
module.exports={
  "title":"CSS3 3D Transforms",
  "description":"Method of transforming an element in the third dimension using the `transform` property. Includes support for the `perspective` property to set the perspective in z-space and the `backface-visibility` property to toggle display of the reverse side of a 3D-transformed element.",
  "spec":"http://www.w3.org/TR/css3-3d-transforms/",
  "status":"wd",
  "links":[
    {
      "url":"http://css3.bradshawenterprises.com/flip/",
      "title":"Multi-browser demo"
    },
    {
      "url":"http://hacks.mozilla.org/2011/10/css-3d-transformations-in-firefox-nightly/",
      "title":"Mozilla hacks article"
    },
    {
      "url":"http://thewebrocks.com/demos/3D-css-tester/",
      "title":"3D CSS Tester"
    },
    {
      "url":"https://raw.github.com/phiggins42/has.js/master/detect/css.js#css-transform",
      "title":"has.js test"
    },
    {
      "url":"http://docs.webplatform.org/wiki/css/transforms/transform",
      "title":"WebPlatform Docs"
    },
    {
      "url":"http://desandro.github.io/3dtransforms/",
      "title":"Intro to CSS 3D transforms"
    }
  ],
  "bugs":[
    {
      "description":"Some configurations of Linux and older Windows machines (those without WebGL support) have trouble with 3D transforms and will treat them as if `perspective` was set as `none`."
    },
    {
      "description":"Firefox on Windows [incorrectly renders plugin content within no-op 3D transforms](https://bugzilla.mozilla.org/show_bug.cgi?id=1048279)."
    }
  ],
  "categories":[
    "CSS3"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"a",
      "11":"a"
    },
    "firefox":{
      "2":"n",
      "3":"n",
      "3.5":"n",
      "3.6":"n",
      "4":"n",
      "5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y",
      "17":"y",
      "18":"y",
      "19":"y",
      "20":"y",
      "21":"y",
      "22":"y",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y",
      "27":"y",
      "28":"y",
      "29":"y",
      "30":"y",
      "31":"y",
      "32":"y",
      "33":"y",
      "34":"y",
      "35":"y",
      "36":"y"
    },
    "chrome":{
      "4":"n",
      "5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"n",
      "11":"n",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y x",
      "30":"y x",
      "31":"y x",
      "32":"y x",
      "33":"y x",
      "34":"y x",
      "35":"y x",
      "36":"y",
      "37":"y",
      "38":"y",
      "39":"y",
      "40":"y",
      "41":"y"
    },
    "safari":{
      "3.1":"n",
      "3.2":"n",
      "4":"y x",
      "5":"y x",
      "5.1":"y x",
      "6":"y x",
      "6.1":"y x",
      "7":"y x",
      "7.1":"y x",
      "8":"y x"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"n",
      "12":"n",
      "12.1":"n",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y",
      "24":"y",
      "25":"y",
      "26":"y"
    },
    "ios_saf":{
      "3.2":"y x",
      "4.0-4.1":"y x",
      "4.2-4.3":"y x",
      "5.0-5.1":"y x",
      "6.0-6.1":"y x",
      "7.0-7.1":"y x",
      "8":"y x"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"n",
      "2.2":"n",
      "2.3":"n",
      "3":"y x",
      "4":"y x",
      "4.1":"y x",
      "4.2-4.3":"y x",
      "4.4":"y x",
      "4.4.3":"y x"
    },
    "bb":{
      "7":"y x",
      "10":"y x"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "12":"n",
      "12.1":"n",
      "24":"y"
    },
    "and_chr":{
      "38":"y"
    },
    "and_ff":{
      "32":"y"
    },
    "ie_mob":{
      "10":"a"
    },
    "and_uc":{
      "9.9":"y x"
    }
  },
  "notes":"Partial support in IE refers to not supporting [the transform-style: preserve-3d property](http://msdn.microsoft.com/en-us/library/ie/hh673529%28v=vs.85%29.aspx#the_ms_transform_style_property). This prevents nesting 3D transformed elements.",
  "notes_by_num":{
    
  },
  "usage_perc_y":74.67,
  "usage_perc_a":10.1,
  "ucprefix":false,
  "parent":"",
  "keywords":"css 3d,3dtransforms,translate3d,backface visibility,perspective",
  "ie_id":"transforms,csstransformspreserve3d",
  "chrome_id":"6437640580628480",
  "shown":true
}
},{}],72:[function(require,module,exports){
module.exports={
  "title":"CSS user-select: none",
  "description":"Method of preventing text/element selection using CSS. ",
  "spec":"https://developer.mozilla.org/en-US/docs/CSS/user-select",
  "status":"unoff",
  "links":[
    {
      "url":"https://developer.mozilla.org/en-US/docs/CSS/user-select",
      "title":"MDN article"
    },
    {
      "url":"http://css-tricks.com/almanac/properties/u/user-select/",
      "title":"CSS Tricks article"
    },
    {
      "url":"http://msdn.microsoft.com/en-us/library/ie/hh781492(v=vs.85).aspx",
      "title":"MSDN Documentation"
    }
  ],
  "bugs":[
    
  ],
  "categories":[
    "CSS"
  ],
  "stats":{
    "ie":{
      "5.5":"n",
      "6":"n",
      "7":"n",
      "8":"n",
      "9":"n",
      "10":"y x",
      "11":"y x"
    },
    "firefox":{
      "2":"y x",
      "3":"y x",
      "3.5":"y x",
      "3.6":"y x",
      "4":"y x",
      "5":"y x",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y x",
      "30":"y x",
      "31":"y x",
      "32":"y x",
      "33":"y x",
      "34":"y x",
      "35":"y x",
      "36":"y x"
    },
    "chrome":{
      "4":"u",
      "5":"u",
      "6":"y x",
      "7":"y x",
      "8":"y x",
      "9":"y x",
      "10":"y x",
      "11":"y x",
      "12":"y x",
      "13":"y x",
      "14":"y x",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x",
      "27":"y x",
      "28":"y x",
      "29":"y x",
      "30":"y x",
      "31":"y x",
      "32":"y x",
      "33":"y x",
      "34":"y x",
      "35":"y x",
      "36":"y x",
      "37":"y x",
      "38":"y x",
      "39":"y x",
      "40":"y x",
      "41":"y x"
    },
    "safari":{
      "3.1":"y x",
      "3.2":"y x",
      "4":"y x",
      "5":"y x",
      "5.1":"y x",
      "6":"y x",
      "6.1":"y x",
      "7":"y x",
      "7.1":"y x",
      "8":"y x"
    },
    "opera":{
      "9":"n",
      "9.5-9.6":"n",
      "10.0-10.1":"n",
      "10.5":"n",
      "10.6":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "11.6":"n",
      "12":"n",
      "12.1":"n",
      "15":"y x",
      "16":"y x",
      "17":"y x",
      "18":"y x",
      "19":"y x",
      "20":"y x",
      "21":"y x",
      "22":"y x",
      "23":"y x",
      "24":"y x",
      "25":"y x",
      "26":"y x"
    },
    "ios_saf":{
      "3.2":"y x",
      "4.0-4.1":"y x",
      "4.2-4.3":"y x",
      "5.0-5.1":"y x",
      "6.0-6.1":"y x",
      "7.0-7.1":"y x",
      "8":"y x"
    },
    "op_mini":{
      "5.0-8.0":"n"
    },
    "android":{
      "2.1":"y x",
      "2.2":"y x",
      "2.3":"y x",
      "3":"y x",
      "4":"y x",
      "4.1":"y x",
      "4.2-4.3":"y x",
      "4.4":"y x",
      "4.4.3":"y x"
    },
    "bb":{
      "7":"y x",
      "10":"y x"
    },
    "op_mob":{
      "10":"n",
      "11":"n",
      "11.1":"n",
      "11.5":"n",
      "12":"n",
      "12.1":"n",
      "24":"y x"
    },
    "and_chr":{
      "38":"y x"
    },
    "and_ff":{
      "32":"y x"
    },
    "ie_mob":{
      "10":"y x"
    },
    "and_uc":{
      "9.9":"y x"
    }
  },
  "notes":"Currently the user-select property does not appear in any W3C specification. Support information here is only for \"none\" value, not others.",
  "notes_by_num":{
    
  },
  "usage_perc_y":86.13,
  "usage_perc_a":0,
  "ucprefix":false,
  "parent":"",
  "keywords":"",
  "ie_id":"",
  "chrome_id":"",
  "shown":true
}
},{}],73:[function(require,module,exports){
var Container = require('./container');

// CSS at-rule like “this.keyframes name { }”.
//
// Can contain declarations (like this.font-face or this.page) ot another rules.
var AtRule = (function(super$0){"use strict";var PRS$0 = (function(o,t){o["__proto__"]={"a":t};return o["a"]===t})({},{});var DP$0 = Object.defineProperty;var GOPD$0 = Object.getOwnPropertyDescriptor;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,GOPD$0(s,p));}}return t};var SP$0 = Object.setPrototypeOf||function(o,p){o["__proto__"]=p;return o};var OC$0 = Object.create;if(!PRS$0)MIXIN$0(AtRule, super$0);var proto$0={};
    function AtRule(defaults) {
        this.type = 'atrule';
        super$0.call(this, defaults);
    }if(super$0!==null)SP$0(AtRule,super$0);AtRule.prototype = OC$0(super$0!==null?super$0.prototype:null,{"constructor":{"value":AtRule,"configurable":true,"writable":true}});DP$0(AtRule,"prototype",{"configurable":false,"enumerable":false,"writable":false});

    // Different style for this.encoding and this.page at-rules.
    proto$0.styleType = function() {
        return this.type + ((this.rules || this.decls) ? '-body' : '-bodiless');
    };

    proto$0.defaultStyle = function(type) {
        if ( type == 'atrule-body' ) {
            return { between: ' ', after: this.defaultAfter() };
        } else {
            return { between: '' };
        }
    };

    // Load into at-rule mixin for selected content type
    proto$0.addMixin = function(type) {
        var mixin = type == 'rules' ? Container.WithRules : Container.WithDecls;
        if ( !mixin ) return;

        for ( var name in mixin.prototype ) {
            if ( name == 'constructor' ) continue;
            var value = mixin.prototype[name];

            var container = Container.prototype[name] == value;
            var detector  = name == 'append' || name == 'prepend';
            if ( container && !detector ) continue;

            this[name] = value;
        }
        mixin.apply(this);
    };

    // Stringify at-rule
    proto$0.stringify = function(builder, last) {
        var style = this.style();

        var name   = '@' + this.name;
        var params = this.params ? this.stringifyRaw('params') : '';

        if ( typeof(this.afterName) != 'undefined' ) {
            name += this.afterName;
        } else if ( params ) {
            name += ' ';
        }

        if ( this.rules || this.decls ) {
            this.stringifyBlock(builder, name + params + style.between + '{');

        } else {
            if ( this.before ) builder(this.before);
            var semicolon = (!last || this.semicolon) ? ';' : '';
            builder(name + params + style.between + semicolon, this);
        }
    };

    // Hack to detect container type by child type
    proto$0.append = function(child) {
        var mixin = child.type == 'decl' ? 'decls' : 'rules';
        this.addMixin(mixin);
        return this.append(child);
    };

    // Hack to detect container type by child type
    proto$0.prepend = function(child) {
        var mixin = child.type == 'decl' ? 'decls' : 'rules';
        this.addMixin(mixin);
        return this.prepend(child);
    };
MIXIN$0(AtRule.prototype,proto$0);proto$0=void 0;return AtRule;})(Container);

module.exports = AtRule;

},{"./container":75}],74:[function(require,module,exports){
var Node = require('./node');

// CSS comment between declarations or rules
var Comment = (function(super$0){"use strict";var PRS$0 = (function(o,t){o["__proto__"]={"a":t};return o["a"]===t})({},{});var DP$0 = Object.defineProperty;var GOPD$0 = Object.getOwnPropertyDescriptor;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,GOPD$0(s,p));}}return t};var SP$0 = Object.setPrototypeOf||function(o,p){o["__proto__"]=p;return o};var OC$0 = Object.create;if(!PRS$0)MIXIN$0(Comment, super$0);var proto$0={};
    function Comment(defaults) {
        this.type = 'comment';
        super$0.call(this, defaults);
    }if(super$0!==null)SP$0(Comment,super$0);Comment.prototype = OC$0(super$0!==null?super$0.prototype:null,{"constructor":{"value":Comment,"configurable":true,"writable":true}});DP$0(Comment,"prototype",{"configurable":false,"enumerable":false,"writable":false});

    // Default spaces for new node
    proto$0.defaultStyle = function() {
       return { left: ' ', right: ' ' };
    };

    // Stringify declaration
    proto$0.stringify = function(builder) {
        var style = this.style();
        if ( this.before ) builder(this.before);
        builder('/*' + style.left + this.text + style.right + '*/', this);
    };
MIXIN$0(Comment.prototype,proto$0);proto$0=void 0;return Comment;})(Node);

module.exports = Comment;

},{"./node":80}],75:[function(require,module,exports){
var PRS$0 = (function(o,t){o["__proto__"]={"a":t};return o["a"]===t})({},{});var DP$0 = Object.defineProperty;var GOPD$0 = Object.getOwnPropertyDescriptor;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,GOPD$0(s,p));}}return t};var SP$0 = Object.setPrototypeOf||function(o,p){o["__proto__"]=p;return o};var OC$0 = Object.create;var Node        = require('./node');
var Declaration = require('./declaration');

// CSS node, that contain another nodes (like at-rules or rules with selectors)
var Container = (function(super$0){"use strict";function Container() {super$0.apply(this, arguments)}if(!PRS$0)MIXIN$0(Container, super$0);if(super$0!==null)SP$0(Container,super$0);Container.prototype = OC$0(super$0!==null?super$0.prototype:null,{"constructor":{"value":Container,"configurable":true,"writable":true}, first: {"get": first$get$0, "configurable":true,"enumerable":true}, last: {"get": last$get$0, "configurable":true,"enumerable":true}, list: {"get": list$get$0, "configurable":true,"enumerable":true}});DP$0(Container,"prototype",{"configurable":false,"enumerable":false,"writable":false});var proto$0={};var S_ITER$0 = typeof Symbol!=='undefined'&&Symbol&&Symbol.iterator||'@@iterator';var S_MARK$0 = typeof Symbol!=='undefined'&&Symbol&&Symbol["__setObjectSetter__"];function GET_ITER$0(v){if(v){if(Array.isArray(v))return 0;var f;if(S_MARK$0)S_MARK$0(v);if(typeof v==='object'&&typeof (f=v[S_ITER$0])==='function'){if(S_MARK$0)S_MARK$0(void 0);return f.call(v);}if(S_MARK$0)S_MARK$0(void 0);if((v+'')==='[object Generator]')return v;}throw new Error(v+' is not iterable')};
    // Stringify container childs
    proto$0.stringifyContent = function(builder) {
        if ( !this.rules && !this.decls ) return;

        var i, last = this.list.length - 1;
        if ( this.rules ) {
            for ( i = 0; i < this.rules.length; i++ ) {
                this.rules[i].stringify(builder, last == i);
            }

        } else if ( this.decls ) {
            for ( i = 0; i < this.decls.length; i++ ) {
                this.decls[i].stringify(builder, last != i || this.semicolon);
            }
        }
    };

    // Generate default spaces before }
    proto$0.defaultAfter = function() {
        if ( this.list.length === 0 ) {
            return '';
        } else {
            var last = this.list[0].before;
            if ( typeof(last) != 'undefined' && last.indexOf("\n") == -1 ) {
                return this.list[0].before;
            } else {
                return "\n";
            }
        }
    };

    // Stringify node with start (for example, selector) and brackets block
    // with child inside
    proto$0.stringifyBlock = function(builder, start) {
        var style = this.style();

        if ( this.before ) builder(this.before);
        builder(start, this, 'start');

        this.stringifyContent(builder);

        if ( style.after ) builder(style.after);
        builder('}', this, 'end');
    };

    // Add child to end of list without any checks.
    // Please, use `append()` method, `push()` is mostly for parser.
    proto$0.push = function(child) {
        child.parent = this;
        this.list.push(child);
        return this;
    };

    // Execute `callback` on every child element. First arguments will be child
    // node, second will be index.
    //
    //   css.each( (rule, i) => {
    //       console.log(rule.type + ' at ' + i);
    //   });
    //
    // It is safe for add and remove elements to list while iterating:
    //
    //  css.each( (rule) => {
    //      css.insertBefore( rule, addPrefix(rule) );
    //      # On next iteration will be next rule, regardless of that
    //      # list size was increased
    //  });
    proto$0.each = function(callback) {
        if ( !this.lastEach ) this.lastEach = 0;
        if ( !this.indexes )  this.indexes = { };

        this.lastEach += 1;
        var id = this.lastEach;
        this.indexes[id] = 0;

        var list = this.list;
        if ( !list ) return;

        var index, result;
        while ( this.indexes[id] < list.length ) {

          index  = this.indexes[id];
          result = callback(list[index], index);
          if ( result === false ) break;

          this.indexes[id] += 1;
        }

        delete this.indexes[id];

        if ( result === false ) return false;
    };

    // Execute callback on every child in all rules inside.
    //
    // First argument will be child node, second will be index inside parent.
    //
    //   css.eachInside( (node, i) => {
    //       console.log(node.type + ' at ' + i);
    //   });
    //
    // Also as `each` it is safe of insert/remove nodes inside iterating.
    proto$0.eachInside = function(callback) {
        return this.each( function(child, i)  {
            var result = callback(child, i);

            if ( result !== false && child.eachInside ) {
                result = child.eachInside(callback);
            }

            if ( result === false ) return result;
        });
    };

    // Execute callback on every declaration in all rules inside.
    // It will goes inside at-rules recursivelly.
    //
    // First argument will be declaration node, second will be index inside
    // parent rule.
    //
    //   css.eachDecl( (decl, i) => {
    //       console.log(decl.prop + ' in ' + decl.parent.selector + ':' + i);
    //   });
    //
    // Also as `each` it is safe of insert/remove nodes inside iterating.
    proto$0.eachDecl = function(callback) {
        // Different realization will be inside subclasses
    };

    // Execute callback on every block comment (only between rules
    // and declarations, not inside selectors and values) in all rules inside.
    //
    // First argument will be comment node, second will be index inside
    // parent rule.
    //
    //   css.eachComment( (comment, i) => {
    //       console.log(comment.content + ' at ' + i);
    //   });
    //
    // Also as `each` it is safe of insert/remove nodes inside iterating.
    proto$0.eachComment = function(callback) {
        return this.eachInside( function(child, i)  {
            if ( child.type == 'comment' ) {
                var result = callback(child, i);
                if ( result === false ) return result;
            }
        });
    };

    // Add child to container.
    //
    //   css.append(rule);
    //
    // You can add declaration by hash:
    //
    //   rule.append({ prop: 'color', value: 'black' });
    proto$0.append = function(child) {var $D$0;var $D$1;var $D$2;
        var childs = this.normalize(child, this.list[this.list.length - 1]);
        $D$0 = GET_ITER$0(childs);$D$2 = $D$0 === 0;$D$1 = ($D$2 ? childs.length : void 0);for ( child ;$D$2 ? ($D$0 < $D$1) : !($D$1 = $D$0["next"]())["done"];){child = ($D$2 ? childs[$D$0++] : $D$1["value"]);
            this.list.push(child);
        };$D$0 = $D$1 = $D$2 = void 0;
        return this;
    };

    // Add child to beginning of container
    //
    //   css.prepend(rule);
    //
    // You can add declaration by hash:
    //
    //   rule.prepend({ prop: 'color', value: 'black' });
    proto$0.prepend = function(child) {var $D$3;var $D$4;var $D$5;
        var childs = this.normalize(child, this.list[0], 'prepend').reverse();
        $D$3 = GET_ITER$0(childs);$D$5 = $D$3 === 0;$D$4 = ($D$5 ? childs.length : void 0);for ( child ;$D$5 ? ($D$3 < $D$4) : !($D$4 = $D$3["next"]())["done"];){child = ($D$5 ? childs[$D$3++] : $D$4["value"]);
            this.list.unshift(child);
        };$D$3 = $D$4 = $D$5 = void 0;

        for ( var id in this.indexes ) {
            this.indexes[id] = this.indexes[id] + childs.length;
        }

        return this;
    };

    // Insert new `added` child before `exist`.
    // You can set node object or node index (it will be faster) in `exist`.
    //
    //   css.insertAfter(1, rule);
    //
    // You can add declaration by hash:
    //
    //   rule.insertBefore(1, { prop: 'color', value: 'black' });
    proto$0.insertBefore = function(exist, add) {var $D$6;var $D$7;var $D$8;
        exist = this.index(exist);

        var type   = exist === 0 ? 'prepend' : false;
        var childs = this.normalize(add, this.list[exist], type).reverse();
        $D$6 = GET_ITER$0(childs);$D$8 = $D$6 === 0;$D$7 = ($D$8 ? childs.length : void 0);for ( var child ;$D$8 ? ($D$6 < $D$7) : !($D$7 = $D$6["next"]())["done"];){child = ($D$8 ? childs[$D$6++] : $D$7["value"]);
            this.list.splice(exist, 0, child);
        };$D$6 = $D$7 = $D$8 = void 0;

        for ( var id in this.indexes ) {
            this.indexes[id] = this.indexes[id] + childs.length;
        }

        return this;
    };

    // Insert new `added` child after `exist`.
    // You can set node object or node index (it will be faster) in `exist`.
    //
    //   css.insertAfter(1, rule);
    //
    // You can add declaration by hash:
    //
    //   rule.insertAfter(1, { prop: 'color', value: 'black' });
    proto$0.insertAfter = function(exist, add) {var $D$9;var $D$10;var $D$11;
        exist = this.index(exist);

        var childs = this.normalize(add, this.list[exist]).reverse();
        $D$9 = GET_ITER$0(childs);$D$11 = $D$9 === 0;$D$10 = ($D$11 ? childs.length : void 0);for ( var child ;$D$11 ? ($D$9 < $D$10) : !($D$10 = $D$9["next"]())["done"];){child = ($D$11 ? childs[$D$9++] : $D$10["value"]);
            this.list.splice(exist + 1, 0, child);
        };$D$9 = $D$10 = $D$11 = void 0;

        for ( var id in this.indexes ) {
            this.indexes[id] = this.indexes[id] + childs.length;
        }

        return this;
    };

    // Remove `child` by index or node.
    //
    //   css.remove(2);
    proto$0.remove = function(child) {
        child = this.index(child);
        this.list.splice(child, 1);

        for ( var id in this.indexes ) {
            var index = this.indexes[id];
            if ( index >= child ) {
                this.indexes[id] = index - 1;
            }
        }

        return this;
    };

    // Return true if all childs return true in `condition`.
    // Just shorcut for `list.every`.
    proto$0.every = function(condition) {
        return this.list.every(condition);
    };

    // Return true if one or more childs return true in `condition`.
    // Just shorcut for `list.some`.
    proto$0.some = function(condition) {
        return this.list.some(condition);
    };

    // Return index of child
    proto$0.index = function(child) {
        if ( typeof(child) == 'number' ) {
            return child;
        } else {
            return this.list.indexOf(child);
        }
    };

    // Shortcut to get first child
    function first$get$0() {
        if ( !this.list ) return undefined;
        return this.list[0];
    }

    // Shortcut to get first child
    function last$get$0() {
        if ( !this.list ) return undefined;
        return this.list[this.list.length - 1];
    }

    // Shortcut to get current list
    function list$get$0() {
        return this.rules || this.decls;
    }

    // Normalize child before insert. Copy before from `sample`.
    proto$0.normalize = function(child, sample) {var $D$12;var $D$13;var $D$14;
        var childs;
        if ( child.type == 'root' ) {
            childs = child.rules;
        } else if ( Array.isArray(child) ) {
            childs = child.map( function(i ) {return i.clone()} );
        } else {
            if ( child.parent ) {
                child = child.clone();
            }
            childs = [child];
        }

        $D$12 = GET_ITER$0(childs);$D$14 = $D$12 === 0;$D$13 = ($D$14 ? childs.length : void 0);for ( child ;$D$14 ? ($D$12 < $D$13) : !($D$13 = $D$12["next"]())["done"];){child = ($D$14 ? childs[$D$12++] : $D$13["value"]);
            child.parent = this;
            if ( typeof(child.before) == 'undefined' && sample ) {
                child.before = sample.before;
            }
        };$D$12 = $D$13 = $D$14 = void 0;

        return childs;
    };
MIXIN$0(Container.prototype,proto$0);proto$0=void 0;return Container;})(Node);

// Container with another rules, like this.media at-rule
 Container.WithRules = ((function(super$0){"use strict";if(!PRS$0)MIXIN$0(constructor$0, super$0);var proto$0={};
    function constructor$0(defaults) {
        this.rules = [];
        super$0.call(this, defaults);
    }if(super$0!==null)SP$0(constructor$0,super$0);constructor$0.prototype = OC$0(super$0!==null?super$0.prototype:null,{"constructor":{"value":constructor$0,"configurable":true,"writable":true}});DP$0(constructor$0,"prototype",{"configurable":false,"enumerable":false,"writable":false});

    // Execute `callback` on every declaration in all rules inside.
    // It will goes inside at-rules recursivelly.
    //
    // See documentation in `Container#eachDecl`.
    proto$0.eachDecl = function(callback) {
        return this.each( function(child)  {
            if ( child.eachDecl ) {
                var result = child.eachDecl(callback);
                if ( result === false ) return result;
            }
        });
    };

    // Execute `callback` on every rule in conatiner and inside child at-rules.
    //
    // First argument will be rule node, second will be index inside parent.
    //
    //   css.eachRule( (rule, i) => {
    //       if ( parent.type == 'atrule' ) {
    //           console.log(rule.selector + ' in ' + rule.parent.name);
    //       } else {
    //           console.log(rule.selector + ' at ' + i);
    //       }
    //   });
    proto$0.eachRule = function(callback) {
        return this.each( function(child, i)  {
            var result;
            if ( child.type == 'rule' ) {
                result = callback(child, i);
            } else if ( child.eachRule ) {
                result = child.eachRule(callback);
            }
            if ( result === false ) return result;
        });
    };

    // Execute `callback` on every at-rule in conatiner and inside at-rules.
    //
    // First argument will be at-rule node, second will be index inside parent.
    //
    //   css.eachAtRule( (atrule, parent, i) => {
    //       if ( parent.type == 'atrule' ) {
    //           console.log(atrule.name + ' in ' + atrule.parent.name);
    //       } else {
    //           console.log(atrule.name + ' at ' + i);
    //       }
    //   });
    proto$0.eachAtRule = function(callback) {
        return this.eachInside( function(child, i)  {
            if ( child.type == 'atrule' ) {
                var result = callback(child, i);
                if ( result === false ) return result;
            }
        });
    };
MIXIN$0(constructor$0.prototype,proto$0);proto$0=void 0;return constructor$0;})(Container));

// Container with another rules, like this.media at-rule
 Container.WithDecls = ((function(super$0){"use strict";if(!PRS$0)MIXIN$0(constructor$1, super$0);var proto$0={};
    function constructor$1(defaults) {
        this.decls = [];
        super$0.call(this, defaults);
    }if(super$0!==null)SP$0(constructor$1,super$0);constructor$1.prototype = OC$0(super$0!==null?super$0.prototype:null,{"constructor":{"value":constructor$1,"configurable":true,"writable":true}});DP$0(constructor$1,"prototype",{"configurable":false,"enumerable":false,"writable":false});

    // Allow to define new declaration as hash
    proto$0.normalize = function(child, sample, type) {
        if ( !child.type && !Array.isArray(child) ) {
            child = new Declaration(child);
        }
        return super$0.prototype.normalize.call(this, child, sample, type);
    };

    // Execute callback on every declaration.
    //
    // See documentation in `Container#eachDecl`.
    proto$0.eachDecl = function(callback) {
        return this.each( function(child, i)  {
            if ( child.type == 'decl' ) {
                var result = callback(child, i);
                if ( result === false ) return result;
            }
        });
    };
MIXIN$0(constructor$1.prototype,proto$0);proto$0=void 0;return constructor$1;})(Container));

module.exports = Container;

},{"./declaration":77,"./node":80}],76:[function(require,module,exports){
(function (process){
// Error while CSS parsing
var CssSyntaxError = (function(super$0){"use strict";var PRS$0 = (function(o,t){o["__proto__"]={"a":t};return o["a"]===t})({},{});var DP$0 = Object.defineProperty;var GOPD$0 = Object.getOwnPropertyDescriptor;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,GOPD$0(s,p));}}return t};var SP$0 = Object.setPrototypeOf||function(o,p){o["__proto__"]=p;return o};var OC$0 = Object.create;if(!PRS$0)MIXIN$0(CssSyntaxError, super$0);var proto$0={};
    function CssSyntaxError(text, source, pos, file) {
        this.file     = file;
        this.line     = pos.line;
        this.column   = pos.column;
        this.source   = source;
        this.reason   = text;

        this.message  = file ? file : '<css input>';
        this.message += ':' + pos.line + ':' + pos.column + ': ' + text;
    }if(super$0!==null)SP$0(CssSyntaxError,super$0);CssSyntaxError.prototype = OC$0(super$0!==null?super$0.prototype:null,{"constructor":{"value":CssSyntaxError,"configurable":true,"writable":true}});DP$0(CssSyntaxError,"prototype",{"configurable":false,"enumerable":false,"writable":false});

    proto$0.highlight = function(color) {
        var num   = this.line - 1;
        var lines = this.source.split('\n');

        var prev   = num > 0 ? lines[num - 1] + '\n' : '';
        var broken = lines[num];
        var next   = num < lines.length - 1 ? '\n' + lines[num + 1] : '';

        var mark = '\n';
        for ( var i = 0; i < this.column - 1; i++ ) {
            mark += ' ';
        }

        if ( typeof(color) == 'undefined' && typeof(process) != 'undefined' ) {
            if ( process.stdout && process.env ) {
                color = process.stdout.isTTY &&
                       !process.env.NODE_DISABLE_COLORS;
            }
        }

        if ( color ) {
            mark += "\x1B[1;31m^\x1B[0m";
        } else {
            mark += '^';
        }

        return prev + broken + mark + next;
    };

    proto$0.toString = function() {
        return this.message + "\n" + this.highlight();
    };
MIXIN$0(CssSyntaxError.prototype,proto$0);proto$0=void 0;return CssSyntaxError;})(Error);

module.exports = CssSyntaxError;

}).call(this,require('_process'))
},{"_process":106}],77:[function(require,module,exports){
var Node   = require('./node');
var vendor = require('./vendor');

// CSS declaration like “color: black” in rules
var Declaration = (function(super$0){"use strict";var PRS$0 = (function(o,t){o["__proto__"]={"a":t};return o["a"]===t})({},{});var DP$0 = Object.defineProperty;var GOPD$0 = Object.getOwnPropertyDescriptor;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,GOPD$0(s,p));}}return t};var SP$0 = Object.setPrototypeOf||function(o,p){o["__proto__"]=p;return o};var OC$0 = Object.create;if(!PRS$0)MIXIN$0(Declaration, super$0);var proto$0={};
    function Declaration(defaults) {
        this.type = 'decl';
        super$0.call(this, defaults);
    }if(super$0!==null)SP$0(Declaration,super$0);Declaration.prototype = OC$0(super$0!==null?super$0.prototype:null,{"constructor":{"value":Declaration,"configurable":true,"writable":true}});DP$0(Declaration,"prototype",{"configurable":false,"enumerable":false,"writable":false});

    proto$0.defaultStyle = function() {
        return { before: "\n    ", between: ': ' };
    };

    // Stringify declaration
    proto$0.stringify = function(builder, semicolon) {
        var style = this.style();

        if ( style.before ) builder(style.before);
        var string = this.prop + style.between + this.stringifyRaw('value');

        if ( this.important ) {
            string += this._important || ' !important';
        }

        if ( semicolon ) string += ';';
        builder(string, this);
    };

    // Clean `before` and `between` property in clone to copy it from new
    // parent rule
    proto$0.clone = function() {var overrides = arguments[0];if(overrides === void 0)overrides = { };
        var cloned = super$0.prototype.clone.call(this, overrides);
        delete cloned.before;
        delete cloned.between;
        return cloned;
    };
MIXIN$0(Declaration.prototype,proto$0);proto$0=void 0;return Declaration;})(Node);

module.exports = Declaration;

},{"./node":80,"./vendor":87}],78:[function(require,module,exports){
// Methods to parse list and split it to array
var list = {

    // Split string to array by separator symbols with function and inside strings
    // cheching
    split: function (string, separators, last) {var S_ITER$0 = typeof Symbol!=='undefined'&&Symbol&&Symbol.iterator||'@@iterator';var S_MARK$0 = typeof Symbol!=='undefined'&&Symbol&&Symbol["__setObjectSetter__"];function GET_ITER$0(v){if(v){if(Array.isArray(v))return 0;var f;if(S_MARK$0)S_MARK$0(v);if(typeof v==='object'&&typeof (f=v[S_ITER$0])==='function'){if(S_MARK$0)S_MARK$0(void 0);return f.call(v);}if(S_MARK$0)S_MARK$0(void 0);if((v+'')==='[object Generator]')return v;}throw new Error(v+' is not iterable')};var $D$0;var $D$1;var $D$2;
        var array   = [];
        var current = '';
        var split   = false;

        var func    = 0;
        var quote   = false;
        var escape  = false;

        for ( var i = 0; i < string.length; i++ ) {
            var letter = string[i];

            if ( quote ) {
                if ( escape ) {
                    escape = false;
                } else if ( letter == '\\' ) {
                    escape = true;
                } else if ( letter == quote ) {
                    quote = false;
                }
            } else if ( letter == '"' || letter == "'" ) {
                quote = letter;
            } else if ( letter == '(' ) {
                func += 1;
            } else if ( letter == ')' ) {
                if ( func > 0 ) func -= 1;
            } else if ( func === 0 ) {
                $D$0 = GET_ITER$0(separators);$D$2 = $D$0 === 0;$D$1 = ($D$2 ? separators.length : void 0);for ( var separator ;$D$2 ? ($D$0 < $D$1) : !($D$1 = $D$0["next"]())["done"];){separator = ($D$2 ? separators[$D$0++] : $D$1["value"]);
                    if ( letter == separator ) split = true;
                };$D$0 = $D$1 = $D$2 = void 0;
            }

            if ( split ) {
                if ( current !== '' ) array.push(current.trim());
                current = '';
                split   = false;
            } else {
                current += letter;
            }
        }

        if ( last || current !== '' ) array.push(current.trim());
        return array;
    },

    // Split list devided by space:
    //
    //   list.space('a b') #=> ['a', 'b']
    //
    // It check for fuction and strings:
    //
    //   list.space('calc(1px + 1em) "b c"') #=> ['calc(1px + 1em)', '"b c"']
    space: function (string) {
        return this.split(string, [' ', "\n", "\t"]);
    },

    // Split list devided by comma
    //
    //   list.comma('a, b') #=> ['a', 'b']
    //
    // It check for fuction and strings:
    //
    //   list.comma('rgba(0, 0, 0, 0) white') #=> ['rgba(0, 0, 0, 0)', '"white"']
    comma: function (string) {
        return this.split(string, [','], true);
    }

};

module.exports = list;

},{}],79:[function(require,module,exports){
var Result = require('./result');

var mozilla = require('source-map');
var Base64  = require('js-base64').Base64;
var path    = require('path');

// All tools to generate source maps
var MapGenerator = (function(){"use strict";var PRS$0 = (function(o,t){o["__proto__"]={"a":t};return o["a"]===t})({},{});var DP$0 = Object.defineProperty;var GOPD$0 = Object.getOwnPropertyDescriptor;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,GOPD$0(s,p));}}return t};var proto$0={};
    function MapGenerator(root, opts) {
        this.root    = root;
        this.opts    = opts;
        this.mapOpts = opts.map || { };
    }DP$0(MapGenerator,"prototype",{"configurable":false,"enumerable":false,"writable":false});

    // Should map be generated
    proto$0.isMap = function() {
        if ( typeof(this.opts.map) != 'undefined' ) {
            return !!this.opts.map;
        } else {
            return this.previous().length > 0;
        }
    };

    // Return source map arrays from previous compilation step (like Sass)
    proto$0.previous = function() {var this$0 = this;
        if ( !this.previousMaps ) {
            this.previousMaps = [];
            this.root.eachInside( function(node)  {
                if ( node.source && node.source.map ) {
                    if ( this$0.previousMaps.indexOf(node.source.map) == -1 ) {
                        this$0.previousMaps.push(node.source.map);
                    }
                }
            });
        }

        return this.previousMaps;
    };

    // Should we inline source map to annotation comment
    proto$0.isInline = function() {
        if ( typeof(this.mapOpts.inline) != 'undefined' ) {
            return this.mapOpts.inline;
        }
        return this.previous().some( function(i ) {return i.inline} );
    };

    // Should we set sourcesContent
    proto$0.isSourcesContent = function() {
        if ( typeof(this.mapOpts.sourcesContent) != 'undefined' ) {
            return this.mapOpts.sourcesContent;
        }
        return this.previous().some( function(i ) {return i.withContent()} );
    };

    // Clear source map annotation comment
    proto$0.clearAnnotation = function() {
        var last = this.root.last;
        if ( !last ) return;
        if ( last.type != 'comment' ) return;

        if ( last.text.match(/^# sourceMappingURL=/) ) {
            last.removeSelf();
        }
    };

    // Set origin CSS content
    proto$0.setSourcesContent = function() {var this$0 = this;
        var already = { };
        this.root.eachInside( function(node)  {
            var file = node.source.file || node.source.id;
            if ( node.source && !already[file] ) {
                already[file] = true;
                var relative = this$0.relative(file);
                this$0.map.setSourceContent(relative, node.source.content);
            }
        });
    };

    // Apply source map from previous compilation step (like Sass)
    proto$0.applyPrevMaps = function() {var S_ITER$0 = typeof Symbol!=='undefined'&&Symbol&&Symbol.iterator||'@@iterator';var S_MARK$0 = typeof Symbol!=='undefined'&&Symbol&&Symbol["__setObjectSetter__"];function GET_ITER$0(v){if(v){if(Array.isArray(v))return 0;var f;if(S_MARK$0)S_MARK$0(v);if(typeof v==='object'&&typeof (f=v[S_ITER$0])==='function'){if(S_MARK$0)S_MARK$0(void 0);return f.call(v);}if(S_MARK$0)S_MARK$0(void 0);if((v+'')==='[object Generator]')return v;}throw new Error(v+' is not iterable')};var $D$0;var $D$1;var $D$2;var $D$3;
        $D$3 = (this.previous());$D$0 = GET_ITER$0($D$3);$D$2 = $D$0 === 0;$D$1 = ($D$2 ? $D$3.length : void 0);for ( var prev ;$D$2 ? ($D$0 < $D$1) : !($D$1 = $D$0["next"]())["done"];){prev = ($D$2 ? $D$3[$D$0++] : $D$1["value"]);
            var from = this.relative(prev.file);
            var root = prev.root || path.dirname(prev.file);
            var map;

            if ( this.mapOpts.sourcesContent === false ) {
                map = new mozilla.SourceMapConsumer(prev.text);
                map.sourcesContent = map.sourcesContent.map( function(i ) {return null} );
            } else {
                map = prev.consumer();
            }

            this.map.applySourceMap(map, from, this.relative(root));
        };$D$0 = $D$1 = $D$2 = $D$3 = void 0;
    };

    // Should we add annotation comment
    proto$0.isAnnotation = function() {
        if ( this.isInline() ) {
            return true ;
        } else if ( typeof(this.mapOpts.annotation) != 'undefined' ) {
            return this.mapOpts.annotation;
        } else if ( this.previous().length ) {
            return this.previous().some( function(i ) {return i.annotation} );
        } else {
            return true;
        }
    };

    // Add source map annotation comment if it is needed
    proto$0.addAnnotation = function() {
        var content;

        if ( this.isInline() ) {
            content = "data:application/json;base64," +
                       Base64.encode( this.map.toString() );

        } else if ( typeof(this.mapOpts.annotation) == 'string' ) {
            content = this.mapOpts.annotation;

        } else {
            content = this.outputFile() + '.map';
        }

        this.css += "\n/*# sourceMappingURL=" + content + " */";
    };

    // Return output CSS file path
    proto$0.outputFile = function() {
        return this.opts.to ? this.relative(this.opts.to) : 'to.css';
    };

    // Return Result object with map
    proto$0.generateMap = function() {
        this.stringify();
        if ( this.isSourcesContent() )    this.setSourcesContent();
        if ( this.previous().length > 0 ) this.applyPrevMaps();
        if ( this.isAnnotation() )        this.addAnnotation();

        if ( this.isInline() ) {
            return [this.css];
        } else {
            return [this.css, this.map];
        }
    };

    // Return path relative from output CSS file
    proto$0.relative = function(file) {
        var from = this.opts.to ? path.dirname(this.opts.to) : '.';

        if ( typeof(this.mapOpts.annotation) == 'string' ) {
            from = path.dirname( path.resolve(from, this.mapOpts.annotation) );
        }

        file = path.relative(from, file);
        if ( path.sep == '\\' ) {
            return file.replace(/\\/g, '/');
        } else {
            return file;
        }
    };

    // Return path of node source for map
    proto$0.sourcePath = function(node) {
        return this.relative(node.source.file || node.source.id);
    };

    // Return CSS string and source map
    proto$0.stringify = function() {var this$0 = this;
        this.css = '';
        this.map = new mozilla.SourceMapGenerator({ file: this.outputFile() });

        var line   = 1;
        var column = 1;

        var lines, last;
        var builder = function(str, node, type)  {
            this$0.css += str;

            if ( node && node.source && node.source.start && type != 'end' ) {
                this$0.map.addMapping({
                    source:   this$0.sourcePath(node),
                    original: {
                        line:   node.source.start.line,
                        column: node.source.start.column - 1
                    },
                    generated: {
                        line:   line,
                        column: column - 1
                    }
                });
            }

            lines = str.match(/\n/g);
            if ( lines ) {
                line  += lines.length;
                last   = str.lastIndexOf("\n");
                column = str.length - last;
            } else {
                column = column + str.length;
            }

            if ( node && node.source && node.source.end && type != 'start' ) {
              this$0.map.addMapping({
                  source:   this$0.sourcePath(node),
                  original: {
                      line:   node.source.end.line,
                      column: node.source.end.column
                  },
                  generated: {
                      line:   line,
                      column: column
                  }
              });
            }
        };

        this.root.stringify(builder);
    };

    // Return Result object with or without map
    proto$0.generate = function() {
        this.clearAnnotation();

        if ( this.isMap() ) {
            return this.generateMap();
        } else {
            return [this.root.toString()];
        }
    };
MIXIN$0(MapGenerator.prototype,proto$0);proto$0=void 0;return MapGenerator;})();

module.exports = MapGenerator;

},{"./result":84,"js-base64":88,"path":105,"source-map":89}],80:[function(require,module,exports){
// Recursivly clone objects
var clone = function (obj, parent) {
    if ( typeof(obj) != 'object' ) return obj;
    var cloned = new obj.constructor();

    for ( var name in obj ) {
        if ( !obj.hasOwnProperty(name) ) continue;
        var value = obj[name];

        if ( name == 'parent' && typeof(value) == 'object' ) {
            if (parent) cloned[name] = parent;
        } else if ( name == 'source' ) {
            cloned[name] = value;
        } else if ( value instanceof Array ) {
            cloned[name] = value.map( function(i ) {return clone(i, cloned)} );
        } else {
            cloned[name] = clone(value, cloned);
        }
    }

    return cloned;
};

// Is `obj` has all keys from `keys`. Return `false` of object with keys from
// `keys` and values from `obj`.
var keys = function (obj, keys) {
    var all = { };

    for ( var key in keys ) {
        if ( typeof(obj[key]) == 'undefined' ) {
            return false;
        } else {
            all[key] = obj[key];
        }
    }

    return all;
};

// Some common methods for all CSS nodes
var Node = (function(){"use strict";var PRS$0 = (function(o,t){o["__proto__"]={"a":t};return o["a"]===t})({},{});var DP$0 = Object.defineProperty;var GOPD$0 = Object.getOwnPropertyDescriptor;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,GOPD$0(s,p));}}return t};var proto$0={};
    function Node() {var defaults = arguments[0];if(defaults === void 0)defaults = { };
        for ( var name in defaults ) {
            this[name] = defaults[name];
        }
    }DP$0(Node,"prototype",{"configurable":false,"enumerable":false,"writable":false});

    // Remove this node from parent
    //
    //   decl.removeSelf();
    //
    // Note, that removing by index is faster:
    //
    //   rule.each( (decl, i) => rule.remove(i) );
    proto$0.removeSelf = function() {
        if ( this.parent ) {
            this.parent.remove(this);
        }
        return this;
    };

    // Shortcut to insert nodes before and remove self.
    //
    //   importNode.replace( loadedRoot );
    proto$0.replace = function(nodes) {
        this.parent.insertBefore(this, nodes);
        this.parent.remove(this);
        return this;
    };

    // Return CSS string of current node
    //
    //   decl.toString(); //=> "  color: black"
    proto$0.toString = function() {
        var result  = '';
        var builder = function(str)  {return result += str};
        this.stringify(builder);
        return result;
    };

    // Clone current node
    //
    //   rule.append( decl.clone() );
    //
    // You can override properties while cloning:
    //
    //   rule.append( decl.clone({ value: '0' }) );
    proto$0.clone = function() {var overrides = arguments[0];if(overrides === void 0)overrides = { };
        var cloned = clone(this);
        for ( var name in overrides ) {
            cloned[name] = overrides[name];
        }
        return cloned;
    };

    // Remove `parent` node on cloning to fix circular structures
    proto$0.toJSON = function() {
        var fixed = { };

        for ( var name in this ) {
            if ( !this.hasOwnProperty(name) ) continue;
            if ( name == 'parent' ) continue;
            var value = this[name];

            if ( value instanceof Array ) {
                fixed[name] = value.map( function(i)  {
                    return (typeof(i) == 'object' && i.toJSON) ? i.toJSON() : i;
                });
            } else if ( typeof(value) == 'object' && value.toJSON ) {
                fixed[name] = value.toJSON();
            } else {
                fixed[name] = value;
            }
        }

        return fixed;
    };

    // Default code style
    proto$0.defaultStyle = function() {
        return { };
    };

    // Allow to split node with same type by other critera.
    // For example, to use different style for bodiless at-rules.
    proto$0.styleType = function() {
        return this.type;
    };

    // Copy code style from first node with same type
    proto$0.style = function() {var this$0 = this;
        var type     = this.styleType();
        var defaults = this.defaultStyle(type);

        var all = keys(this, defaults);
        if ( all ) return all;

        var styled = defaults;
        if ( this.parent ) {

            var root = this;
            while ( root.parent ) root = root.parent;

            if ( !root.styleCache ) root.styleCache = { };
            if ( root.styleCache[type] ) {
                styled = root.styleCache[type];

            } else {
                root.eachInside( function(another)  {
                    if ( another.styleType() != type ) return;
                    if ( this$0 == another )             return;

                    all = keys(another, styled);
                    if ( all ) {
                        styled = all;
                        return false;
                    }
                });

                root.styleCache[type] = styled;
            }
        }

        var merge = { };
        for ( var key in styled ) {
            if ( typeof(this[key]) == 'undefined' ) {
                merge[key] = styled[key];
            } else {
                merge[key] = this[key];
            }
        }

        return merge;
    };

    // Use raw value if origin was not changed
    proto$0.stringifyRaw = function(prop) {
        var value = this[prop];
        var raw   = this['_' + prop];
        if ( raw && raw.value === value ) {
            return raw.raw;
        } else {
            return value;
        }
    };
MIXIN$0(Node.prototype,proto$0);proto$0=void 0;return Node;})();

module.exports = Node;

},{}],81:[function(require,module,exports){
var CssSyntaxError = require('./css-syntax-error');
var PreviousMap    = require('./previous-map');
var Declaration    = require('./declaration');
var Comment        = require('./comment');
var AtRule         = require('./at-rule');
var Root           = require('./root');
var Rule           = require('./rule');

var path = require('path');

var isSpace = /\s/;

var sequence = 0;

// CSS parser
var Parser = (function(){"use strict";var PRS$0 = (function(o,t){o["__proto__"]={"a":t};return o["a"]===t})({},{});var DP$0 = Object.defineProperty;var GOPD$0 = Object.getOwnPropertyDescriptor;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,GOPD$0(s,p));}}return t};var proto$0={};
    function Parser(source) {var opts = arguments[1];if(opts === void 0)opts = { };
        this.source = source.toString();
        this.opts   = opts;

        sequence    += 1;
        this.id      = ((new Date()).valueOf() * 10  + sequence).toString();
        this.root    = new Root();
        this.current = this.root;
        this.parents = [this.current];
        this.type    = 'rules';
        this.types   = [this.type];

        this.pos    = -1;
        this.line   = 1;
        this.lines  = [];
        this.column = 0;
        this.buffer = '';
    }DP$0(Parser,"prototype",{"configurable":false,"enumerable":false,"writable":false});

    proto$0.loop = function() {
        this.next  = this.source[0];
        var length = this.source.length - 1;
        while ( this.pos < length ) {
            this.move();
            this.nextLetter();
        }
        this.endFile();
    };

    proto$0.setMap = function() {
        var map = new PreviousMap(this.root, this.opts, this.id);
        if ( map.text ) {
            this.root.prevMap = map;
            this.root.eachInside( function(i ) {return i.source.map = map} );
        }
    };

    proto$0.nextLetter = function() {
        return this.inString()   ||
               this.inComment()  ||
               this.isComment()  ||
               this.isString()   ||

               this.isWrong()    ||

               this.inAtrule()   || this.isAtrule()   ||
               this.isBlockEnd() ||
               this.inSelector() || this.isSelector() ||
               this.inProperty() || this.isProperty() || this.inValue();
    };

    // Parsers

    proto$0.inString = function(close) {
        if ( this.quote ) {
            if ( this.escape && !close ) {
                this.escape = false;
            } else if ( this.letter == '\\' ) {
                this.escape = true;
            } else if ( this.letter == this.quote || close ) {
                this.quote = undefined;
            }
            this.trimmed += this.letter;

            return true;
        }
    };

    proto$0.isString = function() {
        if ( this.letter == '"' || this.letter == "'" ) {
            this.quote    = this.letter;
            this.quotePos = { line: this.line, column: this.column };
            this.trimmed += this.letter;

            return true;
        }
    };

    proto$0.inComment = function(close) {var $D$0;
        if ( this.inside('comment') ) {
            if ( close || ( this.letter == '*' && this.next == '/' ) ) {
                var text, left, right;
                text = ($D$0 = this.startSpaces(this.prevBuffer()))[0], left = $D$0[1], $D$0;
                text = ($D$0 = this.endSpaces(text))[0], right = $D$0[1], $D$0;
                this.current.text  = text;
                this.current.left  = left;
                this.current.right = right;
                this.move();
                this.pop();
            ;$D$0 = void 0}
            return true;

        } else if ( this.inside('value-comment') ) {
            if ( close || ( this.letter == '*' && this.next == '/' ) ) {
                this.popType();
                this.move();
            }
            return true;
        }
    };

    proto$0.isComment = function() {
        if ( this.letter == '/' && this.next == '*' ) {
            if ( this.inside('rules') || this.inside('decls') ) {
                this.init( new Comment() );
                this.addType('comment');
                this.move();
                this.buffer = '';
            } else {
                this.commentPos = { line: this.line, column: this.column };
                this.addType('value-comment');
                this.move();
                return true;
            }
        }
    };

    proto$0.isWrong = function() {
        if ( this.letter == '{' ) {
            if ( this.inside('decls') || this.inside('value') ) {
                this.error("Unexpected {");
            }
        }

        if ( this.inside('prop') ) {
            if ( this.letter == '}' || this.letter == ';') {
                if ( this.opts.safe ) {
                    var string = this.current.before + this.buffer;
                    this.current.parent.decls.pop();
                    this.pop();
                    this.buffer    = string;
                    this.semicolon = this.prevSemicolon;
                } else {
                    this.error('Missing property value');
                }
            }
        }
    };

    proto$0.isAtrule = function() {
        if ( this.letter == '@' && this.inside('rules') ) {
            this.init( new AtRule() );
            this.current.name = '';
            this.addType('atrule-name');

            return true;
        }
    };

    proto$0.inAtrule = function(close) {var $D$1;
        if ( this.inside('atrule-name') ) {
            if ( this.space() ) {
                this.checkAtruleName();
                this.buffer  = this.buffer.substr(this.current.name.length);
                this.trimmed = '';
                this.setType('atrule-param');

            } else if ( this.letter == ';' || this.letter == '{' || close ) {
                this.current.between = '';
                this.checkAtruleName();
                this.endAtruleParams();

            } else {
                this.current.name += this.letter;
            }
            return true;

        } else if ( this.inside('atrule-param') ) {
            if ( this.letter == ';' || this.letter == '{' || close ) {
                var raw, left, right;
                raw = ($D$1 = this.startSpaces( this.prevBuffer() ))[0], left = $D$1[1], $D$1;
                raw = ($D$1 = this.endSpaces(raw))[0], right = $D$1[1], $D$1;
                this.raw('params', this.trimmed.trim(), raw);
                if ( this.current.params ) {
                    this.current.afterName = left;
                    this.current.between   = right;
                } else {
                    this.current.afterName = '';
                    this.current.between   = left + right;
                }
                this.endAtruleParams();

            ;$D$1 = void 0} else {
                this.trimmed += this.letter;
            }
            return true;
        }
    };

    proto$0.inSelector = function() {var $D$2;
        if ( this.inside('selector') ) {
            if ( this.letter == '{' ) {
                var raw, spaces;
                raw = ($D$2 = this.endSpaces( this.prevBuffer() ))[0], spaces = $D$2[1], $D$2;
                this.raw('selector', this.trimmed.trim(), raw);
                this.current.between = spaces;
                this.semicolon = false;
                this.buffer    = '';
                this.setType('decls');
            ;$D$2 = void 0} else {
                this.trimmed += this.letter;
            }

            return true;
        }
    };

    proto$0.isSelector = function() {
        if ( !this.space() && this.inside('rules') ) {
            this.init( new Rule() );

            if ( this.letter == '{' ) {
                this.addType('decls');
                this.current.selector = '';
                this.current.between  = '';
                this.semicolon = false;
                this.buffer    = '';
            } else {
                this.addType('selector');
                this.buffer  = this.letter;
                this.trimmed = this.letter;
            }

            return true;
        }
    };

    proto$0.isBlockEnd = function(close) {var this$0 = this;
        if ( this.letter == '}' || close ) {
            if ( this.parents.length == 1 ) {
                if ( !this.opts.safe ) {
                    this.error('Unexpected }');
                }
            } else {
                if ( this.inside('value') ) {
                    this.fixEnd( function()  {return this$0.inValue('close')} );
                } else if ( this.inside('prop') && this.opts.safe ) {
                    this.inProperty('close');
                } else {
                    if ( this.semicolon ) this.current.semicolon = true;
                    this.current.after = this.prevBuffer();
                }
                this.pop();
            }

            return true;
        }
    };

    proto$0.inProperty = function(close) {
        if ( this.inside('prop') ) {
            if ( this.letter == ':' || close ) {
                if ( this.buffer[0] == '*' || this.buffer[0] == '_' ) {
                    this.current.before += this.buffer[0];
                    this.trimmed = this.trimmed.substr(1);
                    this.buffer  = this.buffer.substr(1);
                }

                this.current.prop = this.trimmed.trim();
                var length = this.current.prop.length;
                this.current.between = this.prevBuffer().substr(length);
                this.buffer = '';

                if ( close ) {
                    this.current.value = '';
                    this.pop();
                } else {
                    this.setType('value');
                }
                this.trimmed = '';
            } else if ( this.letter == '{' ) {
                this.error('Unexpected { in decls');
            } else {
                this.trimmed += this.letter;
            }

            return true;
        }
    };

    proto$0.isProperty = function() {
        if ( this.inside('decls') && !this.space() && this.letter != ';' ) {
            this.init( new Declaration() );
            this.addType('prop');
            this.buffer        = this.letter;
            this.trimmed       = this.letter;
            this.prevSemicolon = this.semicolon;
            this.semicolon     = false;

            return true;
        }
    };

    proto$0.inValue = function(close) {var $D$3;
        if ( this.inside('value') ) {
            if ( this.letter == '(' ) {
                this.inBrackets = true;
            } else if ( this.inBrackets && this.letter == ')' ) {
                this.inBrackets = false;
            }

            if ( (this.letter == ';' && !this.inBrackets) || close ) {
                if ( this.letter == ';' ) this.semicolon = true;

                var raw, spaces;
                raw = ($D$3 = this.startSpaces(this.prevBuffer()))[0], spaces = $D$3[1], $D$3;
                var trim      = this.trimmed.trim();

                if ( raw.indexOf('!important') != -1 ) {
                    var match = raw.match(/\s+!important\s*$/);
                    if ( match ) {
                        this.current.important  = true;
                        this.current._important = match[0];
                        raw  = raw.slice(0, -match[0].length);
                        trim = trim.replace(/\s+!important$/, '');
                    }
                }

                this.raw('value', trim, raw);
                this.current.between += ':' + spaces;
                this.pop();
            ;$D$3 = void 0} else {
                this.trimmed += this.letter;
            }

            return true;
        }
    };

    proto$0.endFile = function() {var this$0 = this;
        if ( this.inside('atrule-param') || this.inside('atrule-name') ) {
            this.fixEnd( function()  {return this$0.inAtrule('close')} );
        }

        if ( this.inside('comment') || this.inside('value-comment') ) {
            if ( this.opts.safe ) {
                this.buffer += '/';
                this.inComment('close');
                this.closeBlocks();
            } else {
                if ( this.inside('comment') ) {
                    this.error('Unclosed comment', this.current.source.start);
                } else {
                    this.error('Unclosed comment', this.commentPos);
                }
            }

        } else if ( this.parents.length > 1 ) {
            if ( this.opts.safe ) {
                this.closeBlocks();
            } else {
                this.error('Unclosed block', this.current.source.start);
            }

        } else if ( this.quote ) {
            if ( this.opts.safe ) {
                this.inString('close');
                this.closeBlocks();
            } else {
                this.error('Unclosed quote', this.quotePos);
            }

        } else {
            this.root.after = this.buffer;
        }
    };

    // Helpers

    proto$0.error = function(message) {var pos = arguments[1];if(pos === void 0)pos = { line: this.line, column: this.column };
        throw new CssSyntaxError(message, this.source, pos, this.opts.from);
    };

    proto$0.move = function() {
        this.pos    += 1;
        this.column += 1;
        this.letter  = this.next;
        this.next    = this.source[this.pos + 1];
        this.buffer += this.letter;

        if ( this.letter == "\n" ) {
            this.lines[this.line] = this.column - 1;
            this.line  += 1;
            this.column = 0;
        }
    };

    proto$0.prevBuffer = function() {
        return this.buffer.slice(0, -1);
    };

    proto$0.inside = function(type) {
        return this.type == type;
    };

    proto$0.space = function() {
        return this.letter.trim() === '';
    };

    proto$0.init = function(node) {
        this.current.push(node);
        this.parents.push(node);
        this.current = node;

        this.current.source = {
            start: {
                line:   this.line,
                column: this.column
            },
            content: this.source
        };
        if ( this.opts.from ) {
            this.current.source.file = path.resolve(this.opts.from);
        } else {
            this.current.source.id = this.id;
        }
        this.current.before = this.buffer.slice(0, -1);
        this.buffer = '';
    };

    proto$0.raw = function(prop, value, origin) {
        this.current[prop] = value;
        if ( value != origin ) {
            this.current['_' + prop] = { value: value, raw: origin };
        }
    };

    proto$0.fixEnd = function(callback) {
        var start, after;
        if ( this.letter == '}' ) {
            start = this.buffer.search(/\s*\}$/);
            after = this.buffer.slice(start, -1);
        } else {
            start = this.buffer.search(/\s*$/);
            after = this.buffer.substr(start);
        }
        this.buffer = this.buffer.substr(0, start + 1);

        var el = this.current;
        callback.apply(this);

        var lines = after.match(/\n/g);
        if ( lines ) {
            el.source.end.line -= lines.length;
            var all  = this.lines[el.source.end.line];
            var last = after.indexOf("\n");
            if ( last == -1 ) last = after.length;
            el.source.end.column = all - last;
        } else {
            el.source.end.column -= after.length;
        }

        this.current.after = after;
        this.buffer = after;
    };

    proto$0.pop = function() {
        this.current.source.end = {
            line:   this.line,
            column: this.column
        };

        this.popType();
        this.parents.pop();
        this.current = this.parents[this.parents.length - 1];
        this.buffer  = '';
    };

    proto$0.addType = function(type) {
        this.types.push(type);
        this.type = type;
    };

    proto$0.setType = function(type) {
        this.types[this.types.length - 1] = type;
        this.type = type;
    };

    proto$0.popType = function() {
        this.types.pop();
        this.type = this.types[this.types.length - 1];
    };

    proto$0.atruleType = function() {
        var name = this.current.name.toLowerCase();
        if ( name == 'page' || name == 'font-face' ) {
            return 'decls';
        } else if ( name.slice(-8) == 'viewport' ) {
            return 'decls';
        } else {
            return 'rules';
        }
    };

    proto$0.endAtruleParams = function() {
        if ( this.letter == '{' ) {
            var type = this.atruleType();
            this.current.addMixin(type);
            this.setType(type);
            this.buffer = '';
        } else {
            if ( this.letter == ';' ) this.current.semicolon = true;
            this.pop();
        }
    };

    proto$0.checkAtruleName = function() {
        if ( this.current.name === '' ) this.error('At-rule without name');
    };

    proto$0.startSpaces = function(string) {
        var match = string.match(/^\s+/);
        if ( match ) {
            var pos = match[0].length;
            return [string.substr(pos), match[0]];
        } else {
            return [string, ''];
        }
    };

    proto$0.endSpaces = function(string) {
        var match = string.match(/\s+$/);
        if ( match ) {
            var pos = match[0].length;
            return [string.slice(0, -pos), match[0]];
        } else {
            return [string, ''];
        }
    };

    proto$0.closeBlocks = function() {
        for ( var i = 0; i < this.parents.length; i++ ) {
            this.buffer += '{';
            this.isBlockEnd('close');
        }
    };
MIXIN$0(Parser.prototype,proto$0);proto$0=void 0;return Parser;})();

module.exports = function (source) {var opts = arguments[1];if(opts === void 0)opts = { };
    if ( opts.map == 'inline' ) opts.map = { inline: true };

    var parser = new Parser(source, opts);
    parser.loop();
    parser.setMap();

    return parser.root;
};

},{"./at-rule":73,"./comment":74,"./css-syntax-error":76,"./declaration":77,"./previous-map":83,"./root":85,"./rule":86,"path":105}],82:[function(require,module,exports){
var Declaration = require('./declaration');
var Comment     = require('./comment');
var AtRule      = require('./at-rule');
var Result      = require('./result');
var Rule        = require('./rule');
var Root        = require('./root');

// List of functions to process CSS
var PostCSS = (function(){"use strict";var PRS$0 = (function(o,t){o["__proto__"]={"a":t};return o["a"]===t})({},{});var DP$0 = Object.defineProperty;var GOPD$0 = Object.getOwnPropertyDescriptor;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,GOPD$0(s,p));}}return t};var proto$0={};
    function PostCSS() {var processors = arguments[0];if(processors === void 0)processors = [];var this$0 = this;
        this.processors = processors.map( function(i)  {return this$0.normalize(i)} );
    }DP$0(PostCSS,"prototype",{"configurable":false,"enumerable":false,"writable":false});

    // Add another function to CSS processors
    proto$0.use = function(processor) {
        processor = this.normalize(processor);
        this.processors.push(processor);
        return this;
    };

    // Process CSS throw installed processors
    proto$0.process = function(css) {var S_ITER$0 = typeof Symbol!=='undefined'&&Symbol&&Symbol.iterator||'@@iterator';var S_MARK$0 = typeof Symbol!=='undefined'&&Symbol&&Symbol["__setObjectSetter__"];function GET_ITER$0(v){if(v){if(Array.isArray(v))return 0;var f;if(S_MARK$0)S_MARK$0(v);if(typeof v==='object'&&typeof (f=v[S_ITER$0])==='function'){if(S_MARK$0)S_MARK$0(void 0);return f.call(v);}if(S_MARK$0)S_MARK$0(void 0);if((v+'')==='[object Generator]')return v;}throw new Error(v+' is not iterable')};var $D$0;var $D$1;var $D$2;var $D$3;var opts = arguments[1];if(opts === void 0)opts = { };
        if ( opts.map == 'inline' ) opts.map = { inline: true };

        var parsed;
        if ( css instanceof Root ) {
            parsed = css;
        } else if ( css instanceof Result ) {
            parsed = css.root;
        } else {
            parsed = postcss.parse(css, opts);
        }

        $D$3 = (this.processors);$D$0 = GET_ITER$0($D$3);$D$2 = $D$0 === 0;$D$1 = ($D$2 ? $D$3.length : void 0);for ( var processor ;$D$2 ? ($D$0 < $D$1) : !($D$1 = $D$0["next"]())["done"];){processor = ($D$2 ? $D$3[$D$0++] : $D$1["value"]);
            var returned = processor(parsed, opts);
            if ( returned instanceof Root ) parsed = returned;
        };$D$0 = $D$1 = $D$2 = $D$3 = void 0;

        return parsed.toResult(opts);
    };

    // Return processor function
    proto$0.normalize = function(processor) {
        var type = typeof(processor);
        if ( (type == 'object' || type == 'function') && processor.postcss ) {
            return processor.postcss;
        } else {
            return processor;
        }
    };
MIXIN$0(PostCSS.prototype,proto$0);proto$0=void 0;return PostCSS;})();

// Framework for CSS postprocessors
//
//   var processor = postcss(function (css) {
//       // Change nodes in css
//   });
//   processor.process(css)
var postcss = function () {var SLICE$0 = Array.prototype.slice;var processors = SLICE$0.call(arguments, 0);
    return new PostCSS(processors);
};

// Compile CSS to nodes
postcss.parse = require('./parse');

// Nodes shortcuts
postcss.comment = function (defaults) {
    return new Comment(defaults);
};
postcss.atRule = function (defaults) {
    return new AtRule(defaults);
};
postcss.decl = function (defaults) {
    return new Declaration(defaults);
};
postcss.rule = function (defaults) {
    return new Rule(defaults);
};
postcss.root = function (defaults) {
    return new Root(defaults);
};

module.exports = postcss;

},{"./at-rule":73,"./comment":74,"./declaration":77,"./parse":81,"./result":84,"./root":85,"./rule":86}],83:[function(require,module,exports){
var mozilla = require('source-map');
var Base64  = require('js-base64').Base64;
var path    = require('path');
var fs      = require('fs');

// Detect previous map
var PreviousMap = (function(){"use strict";var PRS$0 = (function(o,t){o["__proto__"]={"a":t};return o["a"]===t})({},{});var DP$0 = Object.defineProperty;var GOPD$0 = Object.getOwnPropertyDescriptor;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,GOPD$0(s,p));}}return t};var proto$0={};
    function PreviousMap(root, opts, id) {
        this.file = opts.from || id;

        this.loadAnnotation(root);
        var inlinePrefix = '# sourceMappingURL=data:';
        this.inline = this.startWith(this.annotation, inlinePrefix);

        var text = this.loadMap(opts.map ? opts.map.prev : undefined);
        if ( text ) this.text = text;
    }DP$0(PreviousMap,"prototype",{"configurable":false,"enumerable":false,"writable":false});

    // Return SourceMapConsumer object to read map
    proto$0.consumer = function() {
        if ( !this.consumerCache ) {
            this.consumerCache = new mozilla.SourceMapConsumer(this.text);
        }
        return this.consumerCache;
    };

    // Is map has sources content
    proto$0.withContent = function() {
        return !!(this.consumer().sourcesContent &&
                  this.consumer().sourcesContent.length > 0);
    };

    // Is `string` is starting with `start`
    proto$0.startWith = function(string, start) {
        if ( !string ) return false;
        return string.substr(0, start.length) == start;
    };

    // Load for annotation comment from previous compilation step
    proto$0.loadAnnotation = function(root) {
        var last = root.last;
        if ( !last ) return;
        if ( last.type != 'comment' ) return;

        if ( this.startWith(last.text, '# sourceMappingURL=') ) {
            this.annotation = last.text;
        }
    };

    // Encode different type of inline
    proto$0.decodeInline = function(text) {
        var uri    = '# sourceMappingURL=data:application/json,';
        var base64 = '# sourceMappingURL=data:application/json;base64,';

        if ( this.startWith(text, uri) ) {
            return decodeURIComponent( text.substr(uri.length) );

        } else if ( this.startWith(text, base64) ) {
            return Base64.decode( text.substr(base64.length) );

        } else {
            var encoding = text.match(/ata:application\/json;([^,]+),/)[1];
            throw new Error('Unsupported source map encoding ' + encoding);
        }
    };

    // Load previous map
    proto$0.loadMap = function(prev) {
        if ( prev === false ) return;

        if ( prev ) {
            if ( typeof(prev) == 'string' ) {
                return prev;
            } else if ( prev instanceof mozilla.SourceMapConsumer ) {
                return mozilla.SourceMapGenerator
                    .fromSourceMap(prev).toString();
            } else if ( prev instanceof mozilla.SourceMapGenerator ) {
                return prev.toString();
            } else if ( typeof(prev) == 'object' && prev.mappings ) {
                return JSON.stringify(prev);
            } else {
                throw new Error('Unsupported previous source map format: ' +
                    prev.toString());
            }

        } else if ( this.inline ) {
            return this.decodeInline(this.annotation);

        } else if ( this.annotation ) {
            var map = this.annotation.replace('# sourceMappingURL=', '');
            if ( this.file ) map = path.join(path.dirname(this.file), map);

            this.root = path.dirname(map);
            if ( fs.existsSync && fs.existsSync(map) ) {
                return fs.readFileSync(map, 'utf-8').toString().trim();
            }
        }
    };
MIXIN$0(PreviousMap.prototype,proto$0);proto$0=void 0;return PreviousMap;})();

module.exports = PreviousMap;

},{"fs":100,"js-base64":88,"path":105,"source-map":89}],84:[function(require,module,exports){
var MapGenerator = require('./map-generator');

// Object with processed CSS
var Result = (function(){"use strict";var PRS$0 = (function(o,t){o["__proto__"]={"a":t};return o["a"]===t})({},{});var DP$0 = Object.defineProperty;var GOPD$0 = Object.getOwnPropertyDescriptor;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,GOPD$0(s,p));}}return t};var DPS$0 = Object.defineProperties;var proto$0={};
    function Result(root) {var opts = arguments[1];if(opts === void 0)opts = { };
        this.root = root;
        this.opts = opts;
    }DPS$0(Result.prototype,{map: {"get": map$get$0, "configurable":true,"enumerable":true}, css: {"get": css$get$0, "configurable":true,"enumerable":true}});DP$0(Result,"prototype",{"configurable":false,"enumerable":false,"writable":false});

    // Lazy method to return source map
    function map$get$0() {
        if ( !this.cssCached ) this.stringify();
        return this.mapCached;
    }

    // Lazy method to return CSS string
    function css$get$0() {
        if ( !this.cssCached ) this.stringify();
        return this.cssCached;
    }

    // Return CSS string on any try to print
    proto$0.toString = function() {
        return this.css;
    };

    // Generate CSS and map
    proto$0.stringify = function() {
        var map = new MapGenerator(this.root, this.opts);
        var generated  = map.generate();
        this.cssCached = generated[0];
        this.mapCached = generated[1];
    };
MIXIN$0(Result.prototype,proto$0);proto$0=void 0;return Result;})();

module.exports = Result;

},{"./map-generator":79}],85:[function(require,module,exports){
var Declaration = require('./declaration');
var Container   = require('./container');
var Comment     = require('./comment');
var AtRule      = require('./at-rule');
var Result      = require('./result');
var Rule        = require('./rule');

// Root of CSS
var Root = (function(super$0){"use strict";var PRS$0 = (function(o,t){o["__proto__"]={"a":t};return o["a"]===t})({},{});var DP$0 = Object.defineProperty;var GOPD$0 = Object.getOwnPropertyDescriptor;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,GOPD$0(s,p));}}return t};var SP$0 = Object.setPrototypeOf||function(o,p){o["__proto__"]=p;return o};var OC$0 = Object.create;if(!PRS$0)MIXIN$0(Root, super$0);var proto$0={};
    function Root(defaults) {
        this.type  = 'root';
        this.rules = [];
        super$0.call(this, defaults);
    }if(super$0!==null)SP$0(Root,super$0);Root.prototype = OC$0(super$0!==null?super$0.prototype:null,{"constructor":{"value":Root,"configurable":true,"writable":true}});DP$0(Root,"prototype",{"configurable":false,"enumerable":false,"writable":false});

    // Fix spaces on insert before first rule
    proto$0.normalize = function(child, sample, type) {var S_ITER$0 = typeof Symbol!=='undefined'&&Symbol&&Symbol.iterator||'@@iterator';var S_MARK$0 = typeof Symbol!=='undefined'&&Symbol&&Symbol["__setObjectSetter__"];function GET_ITER$0(v){if(v){if(Array.isArray(v))return 0;var f;if(S_MARK$0)S_MARK$0(v);if(typeof v==='object'&&typeof (f=v[S_ITER$0])==='function'){if(S_MARK$0)S_MARK$0(void 0);return f.call(v);}if(S_MARK$0)S_MARK$0(void 0);if((v+'')==='[object Generator]')return v;}throw new Error(v+' is not iterable')};var $D$0;var $D$1;var $D$2;
        var childs = super$0.prototype.normalize.call(this, child, sample, type);

        $D$0 = GET_ITER$0(childs);$D$2 = $D$0 === 0;$D$1 = ($D$2 ? childs.length : void 0);for ( child ;$D$2 ? ($D$0 < $D$1) : !($D$1 = $D$0["next"]())["done"];){child = ($D$2 ? childs[$D$0++] : $D$1["value"]);
            if ( type == 'prepend' ) {
                if ( this.rules.length > 1 ) {
                    sample.before = this.rules[1].before;
                } else if ( this.rules.length == 1 ) {
                    sample.before = this.after;
                }
            } else {
                if ( this.rules.length > 1 ) {
                    child.before = sample.before;
                } else {
                    child.before = this.after;
                }
            }
        };$D$0 = $D$1 = $D$2 = void 0;

        return childs;
    };

    // Stringify styles
    proto$0.stringify = function(builder) {
        this.stringifyContent(builder);
        if ( this.after) builder(this.after);
    };

    // Generate processing result with optional source map
    proto$0.toResult = function() {var opts = arguments[0];if(opts === void 0)opts = { };
        return new Result(this, opts);
    };
MIXIN$0(Root.prototype,proto$0);proto$0=void 0;return Root;})(Container.WithRules);

module.exports = Root;

},{"./at-rule":73,"./comment":74,"./container":75,"./declaration":77,"./result":84,"./rule":86}],86:[function(require,module,exports){
var Container   = require('./container');
var Declaration = require('./declaration');
var list        = require('./list');

// CSS rule like “a { }”
var Rule = (function(super$0){"use strict";var PRS$0 = (function(o,t){o["__proto__"]={"a":t};return o["a"]===t})({},{});var DP$0 = Object.defineProperty;var GOPD$0 = Object.getOwnPropertyDescriptor;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,GOPD$0(s,p));}}return t};var SP$0 = Object.setPrototypeOf||function(o,p){o["__proto__"]=p;return o};var OC$0 = Object.create;if(!PRS$0)MIXIN$0(Rule, super$0);var proto$0={};
    function Rule(defaults) {
        this.type = 'rule';
        super$0.call(this, defaults);
    }if(super$0!==null)SP$0(Rule,super$0);Rule.prototype = OC$0(super$0!==null?super$0.prototype:null,{"constructor":{"value":Rule,"configurable":true,"writable":true}, selectors: {"get": selectors$get$0, "set": selectors$set$0, "configurable":true,"enumerable":true}});DP$0(Rule,"prototype",{"configurable":false,"enumerable":false,"writable":false});

    // Different style for empty and non-empty rules
    proto$0.styleType = function() {
        return this.type + (this.decls.length ? '-body' : '-empty');
    };

    proto$0.defaultStyle = function(type) {
        if ( type == 'rule-body' ) {
            return { between: ' ', after: this.defaultAfter() };
        } else {
            return { between: ' ', after: '' };
        }
    };

    // Shortcut to get selectors as array

    function selectors$get$0() {
        return list.comma(this.selector);
    }

    function selectors$set$0(values) {
        this.selector = values.join(', ');
    }

    // Stringify rule
    proto$0.stringify = function(builder) {
        this.stringifyBlock(builder,
            this.stringifyRaw('selector') + this.style().between + '{');
    };
MIXIN$0(Rule.prototype,proto$0);proto$0=void 0;return Rule;})(Container.WithDecls);

module.exports = Rule;

},{"./container":75,"./declaration":77,"./list":78}],87:[function(require,module,exports){
// Methods to work with vendor prefixes
var vendor = {

    // Return vendor prefix from property name, if it exists
    //
    //   vendor.prefix('-moz-box-sizing') #=> '-moz-'
    //   vendor.prefix('box-sizing')      #=> ''
    prefix: function (prop) {
        if ( prop[0] == '-' ) {
            var sep = prop.indexOf('-', 1);
            return prop.substr(0, sep + 1);
        } else {
            return '';
        }
    },

    // Remove prefix from property name
    //
    //   vendor.prefix('-moz-box-sizing') #=> 'box-sizing'
    //   vendor.prefix('box-sizing')      #=> 'box-sizing'
    unprefixed: function (prop) {
        if ( prop[0] == '-' ) {
            var sep = prop.indexOf('-', 1);
            return prop.substr(sep + 1);
        } else {
            return prop;
        }
    }

};

module.exports = vendor;

},{}],88:[function(require,module,exports){
(function (global){
/*
 * $Id: base64.js,v 2.15 2014/04/05 12:58:57 dankogai Exp dankogai $
 *
 *  Licensed under the MIT license.
 *    http://opensource.org/licenses/mit-license
 *
 *  References:
 *    http://en.wikipedia.org/wiki/Base64
 */

(function(global) {
    'use strict';
    // existing version for noConflict()
    var _Base64 = global.Base64;
    var version = "2.1.5";
    // if node.js, we use Buffer
    var buffer;
    if (typeof module !== 'undefined' && module.exports) {
        buffer = require('buffer').Buffer;
    }
    // constants
    var b64chars
        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    var b64tab = function(bin) {
        var t = {};
        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;
        return t;
    }(b64chars);
    var fromCharCode = String.fromCharCode;
    // encoder stuff
    var cb_utob = function(c) {
        if (c.length < 2) {
            var cc = c.charCodeAt(0);
            return cc < 0x80 ? c
                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))
                                + fromCharCode(0x80 | (cc & 0x3f)))
                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))
                   + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
                   + fromCharCode(0x80 | ( cc         & 0x3f)));
        } else {
            var cc = 0x10000
                + (c.charCodeAt(0) - 0xD800) * 0x400
                + (c.charCodeAt(1) - 0xDC00);
            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))
                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))
                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
                    + fromCharCode(0x80 | ( cc         & 0x3f)));
        }
    };
    var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
    var utob = function(u) {
        return u.replace(re_utob, cb_utob);
    };
    var cb_encode = function(ccc) {
        var padlen = [0, 2, 1][ccc.length % 3],
        ord = ccc.charCodeAt(0) << 16
            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)
            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),
        chars = [
            b64chars.charAt( ord >>> 18),
            b64chars.charAt((ord >>> 12) & 63),
            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),
            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)
        ];
        return chars.join('');
    };
    var btoa = global.btoa ? function(b) {
        return global.btoa(b);
    } : function(b) {
        return b.replace(/[\s\S]{1,3}/g, cb_encode);
    };
    var _encode = buffer
        ? function (u) { return (new buffer(u)).toString('base64') } 
    : function (u) { return btoa(utob(u)) }
    ;
    var encode = function(u, urisafe) {
        return !urisafe 
            ? _encode(u)
            : _encode(u).replace(/[+\/]/g, function(m0) {
                return m0 == '+' ? '-' : '_';
            }).replace(/=/g, '');
    };
    var encodeURI = function(u) { return encode(u, true) };
    // decoder stuff
    var re_btou = new RegExp([
        '[\xC0-\xDF][\x80-\xBF]',
        '[\xE0-\xEF][\x80-\xBF]{2}',
        '[\xF0-\xF7][\x80-\xBF]{3}'
    ].join('|'), 'g');
    var cb_btou = function(cccc) {
        switch(cccc.length) {
        case 4:
            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)
                |    ((0x3f & cccc.charCodeAt(1)) << 12)
                |    ((0x3f & cccc.charCodeAt(2)) <<  6)
                |     (0x3f & cccc.charCodeAt(3)),
            offset = cp - 0x10000;
            return (fromCharCode((offset  >>> 10) + 0xD800)
                    + fromCharCode((offset & 0x3FF) + 0xDC00));
        case 3:
            return fromCharCode(
                ((0x0f & cccc.charCodeAt(0)) << 12)
                    | ((0x3f & cccc.charCodeAt(1)) << 6)
                    |  (0x3f & cccc.charCodeAt(2))
            );
        default:
            return  fromCharCode(
                ((0x1f & cccc.charCodeAt(0)) << 6)
                    |  (0x3f & cccc.charCodeAt(1))
            );
        }
    };
    var btou = function(b) {
        return b.replace(re_btou, cb_btou);
    };
    var cb_decode = function(cccc) {
        var len = cccc.length,
        padlen = len % 4,
        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)
            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)
            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)
            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),
        chars = [
            fromCharCode( n >>> 16),
            fromCharCode((n >>>  8) & 0xff),
            fromCharCode( n         & 0xff)
        ];
        chars.length -= [0, 0, 2, 1][padlen];
        return chars.join('');
    };
    var atob = global.atob ? function(a) {
        return global.atob(a);
    } : function(a){
        return a.replace(/[\s\S]{1,4}/g, cb_decode);
    };
    var _decode = buffer
        ? function(a) { return (new buffer(a, 'base64')).toString() }
    : function(a) { return btou(atob(a)) };
    var decode = function(a){
        return _decode(
            a.replace(/[-_]/g, function(m0) { return m0 == '-' ? '+' : '/' })
                .replace(/[^A-Za-z0-9\+\/]/g, '')
        );
    };
    var noConflict = function() {
        var Base64 = global.Base64;
        global.Base64 = _Base64;
        return Base64;
    };
    // export Base64
    global.Base64 = {
        VERSION: version,
        atob: atob,
        btoa: btoa,
        fromBase64: decode,
        toBase64: encode,
        utob: utob,
        encode: encode,
        encodeURI: encodeURI,
        btou: btou,
        decode: decode,
        noConflict: noConflict
    };
    // if ES5 is available, make Base64.extendString() available
    if (typeof Object.defineProperty === 'function') {
        var noEnum = function(v){
            return {value:v,enumerable:false,writable:true,configurable:true};
        };
        global.Base64.extendString = function () {
            Object.defineProperty(
                String.prototype, 'fromBase64', noEnum(function () {
                    return decode(this)
                }));
            Object.defineProperty(
                String.prototype, 'toBase64', noEnum(function (urisafe) {
                    return encode(this, urisafe)
                }));
            Object.defineProperty(
                String.prototype, 'toBase64URI', noEnum(function () {
                    return encode(this, true)
                }));
        };
    }
    // that's it!
})(this);

if (this['Meteor']) {
    Base64 = global.Base64; // for normal export in Meteor.js
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"buffer":101}],89:[function(require,module,exports){
/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
exports.SourceMapGenerator = require('./source-map/source-map-generator').SourceMapGenerator;
exports.SourceMapConsumer = require('./source-map/source-map-consumer').SourceMapConsumer;
exports.SourceNode = require('./source-map/source-node').SourceNode;

},{"./source-map/source-map-consumer":94,"./source-map/source-map-generator":95,"./source-map/source-node":96}],90:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var util = require('./util');

  /**
   * A data structure which is a combination of an array and a set. Adding a new
   * member is O(1), testing for membership is O(1), and finding the index of an
   * element is O(1). Removing elements from the set is not supported. Only
   * strings are supported for membership.
   */
  function ArraySet() {
    this._array = [];
    this._set = {};
  }

  /**
   * Static method for creating ArraySet instances from an existing array.
   */
  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
    var set = new ArraySet();
    for (var i = 0, len = aArray.length; i < len; i++) {
      set.add(aArray[i], aAllowDuplicates);
    }
    return set;
  };

  /**
   * Add the given string to this set.
   *
   * @param String aStr
   */
  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
    var isDuplicate = this.has(aStr);
    var idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates) {
      this._array.push(aStr);
    }
    if (!isDuplicate) {
      this._set[util.toSetString(aStr)] = idx;
    }
  };

  /**
   * Is the given string a member of this set?
   *
   * @param String aStr
   */
  ArraySet.prototype.has = function ArraySet_has(aStr) {
    return Object.prototype.hasOwnProperty.call(this._set,
                                                util.toSetString(aStr));
  };

  /**
   * What is the index of the given string in the array?
   *
   * @param String aStr
   */
  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
    if (this.has(aStr)) {
      return this._set[util.toSetString(aStr)];
    }
    throw new Error('"' + aStr + '" is not in the set.');
  };

  /**
   * What is the element at the given index?
   *
   * @param Number aIdx
   */
  ArraySet.prototype.at = function ArraySet_at(aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) {
      return this._array[aIdx];
    }
    throw new Error('No element indexed by ' + aIdx);
  };

  /**
   * Returns the array representation of this set (which has the proper indices
   * indicated by indexOf). Note that this is a copy of the internal array used
   * for storing the members so that no one can mess with internal state.
   */
  ArraySet.prototype.toArray = function ArraySet_toArray() {
    return this._array.slice();
  };

  exports.ArraySet = ArraySet;

});

},{"./util":97,"amdefine":98}],91:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var base64 = require('./base64');

  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
  // length quantities we use in the source map spec, the first bit is the sign,
  // the next four bits are the actual value, and the 6th bit is the
  // continuation bit. The continuation bit tells us whether there are more
  // digits in this value following this digit.
  //
  //   Continuation
  //   |    Sign
  //   |    |
  //   V    V
  //   101011

  var VLQ_BASE_SHIFT = 5;

  // binary: 100000
  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

  // binary: 011111
  var VLQ_BASE_MASK = VLQ_BASE - 1;

  // binary: 100000
  var VLQ_CONTINUATION_BIT = VLQ_BASE;

  /**
   * Converts from a two-complement value to a value where the sign bit is
   * is placed in the least significant bit.  For example, as decimals:
   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
   */
  function toVLQSigned(aValue) {
    return aValue < 0
      ? ((-aValue) << 1) + 1
      : (aValue << 1) + 0;
  }

  /**
   * Converts to a two-complement value from a value where the sign bit is
   * is placed in the least significant bit.  For example, as decimals:
   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
   */
  function fromVLQSigned(aValue) {
    var isNegative = (aValue & 1) === 1;
    var shifted = aValue >> 1;
    return isNegative
      ? -shifted
      : shifted;
  }

  /**
   * Returns the base 64 VLQ encoded value.
   */
  exports.encode = function base64VLQ_encode(aValue) {
    var encoded = "";
    var digit;

    var vlq = toVLQSigned(aValue);

    do {
      digit = vlq & VLQ_BASE_MASK;
      vlq >>>= VLQ_BASE_SHIFT;
      if (vlq > 0) {
        // There are still more digits in this value, so we must make sure the
        // continuation bit is marked.
        digit |= VLQ_CONTINUATION_BIT;
      }
      encoded += base64.encode(digit);
    } while (vlq > 0);

    return encoded;
  };

  /**
   * Decodes the next base 64 VLQ value from the given string and returns the
   * value and the rest of the string via the out parameter.
   */
  exports.decode = function base64VLQ_decode(aStr, aOutParam) {
    var i = 0;
    var strLen = aStr.length;
    var result = 0;
    var shift = 0;
    var continuation, digit;

    do {
      if (i >= strLen) {
        throw new Error("Expected more digits in base 64 VLQ value.");
      }
      digit = base64.decode(aStr.charAt(i++));
      continuation = !!(digit & VLQ_CONTINUATION_BIT);
      digit &= VLQ_BASE_MASK;
      result = result + (digit << shift);
      shift += VLQ_BASE_SHIFT;
    } while (continuation);

    aOutParam.value = fromVLQSigned(result);
    aOutParam.rest = aStr.slice(i);
  };

});

},{"./base64":92,"amdefine":98}],92:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var charToIntMap = {};
  var intToCharMap = {};

  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    .split('')
    .forEach(function (ch, index) {
      charToIntMap[ch] = index;
      intToCharMap[index] = ch;
    });

  /**
   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
   */
  exports.encode = function base64_encode(aNumber) {
    if (aNumber in intToCharMap) {
      return intToCharMap[aNumber];
    }
    throw new TypeError("Must be between 0 and 63: " + aNumber);
  };

  /**
   * Decode a single base 64 digit to an integer.
   */
  exports.decode = function base64_decode(aChar) {
    if (aChar in charToIntMap) {
      return charToIntMap[aChar];
    }
    throw new TypeError("Not a valid base 64 digit: " + aChar);
  };

});

},{"amdefine":98}],93:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  /**
   * Recursive implementation of binary search.
   *
   * @param aLow Indices here and lower do not contain the needle.
   * @param aHigh Indices here and higher do not contain the needle.
   * @param aNeedle The element being searched for.
   * @param aHaystack The non-empty array being searched.
   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
   */
  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare) {
    // This function terminates when one of the following is true:
    //
    //   1. We find the exact element we are looking for.
    //
    //   2. We did not find the exact element, but we can return the next
    //      closest element that is less than that element.
    //
    //   3. We did not find the exact element, and there is no next-closest
    //      element which is less than the one we are searching for, so we
    //      return null.
    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
    var cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) {
      // Found the element we are looking for.
      return aHaystack[mid];
    }
    else if (cmp > 0) {
      // aHaystack[mid] is greater than our needle.
      if (aHigh - mid > 1) {
        // The element is in the upper half.
        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare);
      }
      // We did not find an exact match, return the next closest one
      // (termination case 2).
      return aHaystack[mid];
    }
    else {
      // aHaystack[mid] is less than our needle.
      if (mid - aLow > 1) {
        // The element is in the lower half.
        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare);
      }
      // The exact needle element was not found in this haystack. Determine if
      // we are in termination case (2) or (3) and return the appropriate thing.
      return aLow < 0
        ? null
        : aHaystack[aLow];
    }
  }

  /**
   * This is an implementation of binary search which will always try and return
   * the next lowest value checked if there is no exact hit. This is because
   * mappings between original and generated line/col pairs are single points,
   * and there is an implicit region between each of them, so a miss just means
   * that you aren't on the very start of a region.
   *
   * @param aNeedle The element you are looking for.
   * @param aHaystack The array that is being searched.
   * @param aCompare A function which takes the needle and an element in the
   *     array and returns -1, 0, or 1 depending on whether the needle is less
   *     than, equal to, or greater than the element, respectively.
   */
  exports.search = function search(aNeedle, aHaystack, aCompare) {
    return aHaystack.length > 0
      ? recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare)
      : null;
  };

});

},{"amdefine":98}],94:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var util = require('./util');
  var binarySearch = require('./binary-search');
  var ArraySet = require('./array-set').ArraySet;
  var base64VLQ = require('./base64-vlq');

  /**
   * A SourceMapConsumer instance represents a parsed source map which we can
   * query for information about the original file positions by giving it a file
   * position in the generated source.
   *
   * The only parameter is the raw source map (either as a JSON string, or
   * already parsed to an object). According to the spec, source maps have the
   * following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - sources: An array of URLs to the original source files.
   *   - names: An array of identifiers which can be referrenced by individual mappings.
   *   - sourceRoot: Optional. The URL root from which all sources are relative.
   *   - sourcesContent: Optional. An array of contents of the original source files.
   *   - mappings: A string of base64 VLQs which contain the actual mappings.
   *   - file: Optional. The generated file this source map is associated with.
   *
   * Here is an example source map, taken from the source map spec[0]:
   *
   *     {
   *       version : 3,
   *       file: "out.js",
   *       sourceRoot : "",
   *       sources: ["foo.js", "bar.js"],
   *       names: ["src", "maps", "are", "fun"],
   *       mappings: "AA,AB;;ABCDE;"
   *     }
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
   */
  function SourceMapConsumer(aSourceMap) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
    }

    var version = util.getArg(sourceMap, 'version');
    var sources = util.getArg(sourceMap, 'sources');
    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
    // requires the array) to play nice here.
    var names = util.getArg(sourceMap, 'names', []);
    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
    var mappings = util.getArg(sourceMap, 'mappings');
    var file = util.getArg(sourceMap, 'file', null);

    // Once again, Sass deviates from the spec and supplies the version as a
    // string rather than a number, so we use loose equality checking here.
    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }

    // Pass `true` below to allow duplicate names and sources. While source maps
    // are intended to be compressed and deduplicated, the TypeScript compiler
    // sometimes generates source maps with duplicates in them. See Github issue
    // #72 and bugzil.la/889492.
    this._names = ArraySet.fromArray(names, true);
    this._sources = ArraySet.fromArray(sources, true);

    this.sourceRoot = sourceRoot;
    this.sourcesContent = sourcesContent;
    this._mappings = mappings;
    this.file = file;
  }

  /**
   * Create a SourceMapConsumer from a SourceMapGenerator.
   *
   * @param SourceMapGenerator aSourceMap
   *        The source map that will be consumed.
   * @returns SourceMapConsumer
   */
  SourceMapConsumer.fromSourceMap =
    function SourceMapConsumer_fromSourceMap(aSourceMap) {
      var smc = Object.create(SourceMapConsumer.prototype);

      smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
      smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                              smc.sourceRoot);
      smc.file = aSourceMap._file;

      smc.__generatedMappings = aSourceMap._mappings.slice()
        .sort(util.compareByGeneratedPositions);
      smc.__originalMappings = aSourceMap._mappings.slice()
        .sort(util.compareByOriginalPositions);

      return smc;
    };

  /**
   * The version of the source mapping spec that we are consuming.
   */
  SourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(SourceMapConsumer.prototype, 'sources', {
    get: function () {
      return this._sources.toArray().map(function (s) {
        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
      }, this);
    }
  });

  // `__generatedMappings` and `__originalMappings` are arrays that hold the
  // parsed mapping coordinates from the source map's "mappings" attribute. They
  // are lazily instantiated, accessed via the `_generatedMappings` and
  // `_originalMappings` getters respectively, and we only parse the mappings
  // and create these arrays once queried for a source location. We jump through
  // these hoops because there can be many thousands of mappings, and parsing
  // them is expensive, so we only want to do it if we must.
  //
  // Each object in the arrays is of the form:
  //
  //     {
  //       generatedLine: The line number in the generated code,
  //       generatedColumn: The column number in the generated code,
  //       source: The path to the original source file that generated this
  //               chunk of code,
  //       originalLine: The line number in the original source that
  //                     corresponds to this chunk of generated code,
  //       originalColumn: The column number in the original source that
  //                       corresponds to this chunk of generated code,
  //       name: The name of the original symbol which generated this chunk of
  //             code.
  //     }
  //
  // All properties except for `generatedLine` and `generatedColumn` can be
  // `null`.
  //
  // `_generatedMappings` is ordered by the generated positions.
  //
  // `_originalMappings` is ordered by the original positions.

  SourceMapConsumer.prototype.__generatedMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
    get: function () {
      if (!this.__generatedMappings) {
        this.__generatedMappings = [];
        this.__originalMappings = [];
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__generatedMappings;
    }
  });

  SourceMapConsumer.prototype.__originalMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
    get: function () {
      if (!this.__originalMappings) {
        this.__generatedMappings = [];
        this.__originalMappings = [];
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__originalMappings;
    }
  });

  SourceMapConsumer.prototype._nextCharIsMappingSeparator =
    function SourceMapConsumer_nextCharIsMappingSeparator(aStr) {
      var c = aStr.charAt(0);
      return c === ";" || c === ",";
    };

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  SourceMapConsumer.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var str = aStr;
      var temp = {};
      var mapping;

      while (str.length > 0) {
        if (str.charAt(0) === ';') {
          generatedLine++;
          str = str.slice(1);
          previousGeneratedColumn = 0;
        }
        else if (str.charAt(0) === ',') {
          str = str.slice(1);
        }
        else {
          mapping = {};
          mapping.generatedLine = generatedLine;

          // Generated column.
          base64VLQ.decode(str, temp);
          mapping.generatedColumn = previousGeneratedColumn + temp.value;
          previousGeneratedColumn = mapping.generatedColumn;
          str = temp.rest;

          if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
            // Original source.
            base64VLQ.decode(str, temp);
            mapping.source = this._sources.at(previousSource + temp.value);
            previousSource += temp.value;
            str = temp.rest;
            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
              throw new Error('Found a source, but no line and column');
            }

            // Original line.
            base64VLQ.decode(str, temp);
            mapping.originalLine = previousOriginalLine + temp.value;
            previousOriginalLine = mapping.originalLine;
            // Lines are stored 0-based
            mapping.originalLine += 1;
            str = temp.rest;
            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
              throw new Error('Found a source and line, but no column');
            }

            // Original column.
            base64VLQ.decode(str, temp);
            mapping.originalColumn = previousOriginalColumn + temp.value;
            previousOriginalColumn = mapping.originalColumn;
            str = temp.rest;

            if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
              // Original name.
              base64VLQ.decode(str, temp);
              mapping.name = this._names.at(previousName + temp.value);
              previousName += temp.value;
              str = temp.rest;
            }
          }

          this.__generatedMappings.push(mapping);
          if (typeof mapping.originalLine === 'number') {
            this.__originalMappings.push(mapping);
          }
        }
      }

      this.__generatedMappings.sort(util.compareByGeneratedPositions);
      this.__originalMappings.sort(util.compareByOriginalPositions);
    };

  /**
   * Find the mapping that best matches the hypothetical "needle" mapping that
   * we are searching for in the given "haystack" of mappings.
   */
  SourceMapConsumer.prototype._findMapping =
    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                           aColumnName, aComparator) {
      // To return the position we are searching for, we must first find the
      // mapping for the given position and then return the opposite position it
      // points to. Because the mappings are sorted, we can use binary search to
      // find the best mapping.

      if (aNeedle[aLineName] <= 0) {
        throw new TypeError('Line must be greater than or equal to 1, got '
                            + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError('Column must be greater than or equal to 0, got '
                            + aNeedle[aColumnName]);
      }

      return binarySearch.search(aNeedle, aMappings, aComparator);
    };

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.
   *   - column: The column number in the generated source.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.
   *   - column: The column number in the original source, or null.
   *   - name: The original identifier, or null.
   */
  SourceMapConsumer.prototype.originalPositionFor =
    function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };

      var mapping = this._findMapping(needle,
                                      this._generatedMappings,
                                      "generatedLine",
                                      "generatedColumn",
                                      util.compareByGeneratedPositions);

      if (mapping && mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source != null && this.sourceRoot != null) {
          source = util.join(this.sourceRoot, source);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: util.getArg(mapping, 'name', null)
        };
      }

      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * availible.
   */
  SourceMapConsumer.prototype.sourceContentFor =
    function SourceMapConsumer_sourceContentFor(aSource) {
      if (!this.sourcesContent) {
        return null;
      }

      if (this.sourceRoot != null) {
        aSource = util.relative(this.sourceRoot, aSource);
      }

      if (this._sources.has(aSource)) {
        return this.sourcesContent[this._sources.indexOf(aSource)];
      }

      var url;
      if (this.sourceRoot != null
          && (url = util.urlParse(this.sourceRoot))) {
        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
        // many users. We can help them out when they expect file:// URIs to
        // behave like it would if they were running a local HTTP server. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
        if (url.scheme == "file"
            && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
        }

        if ((!url.path || url.path == "/")
            && this._sources.has("/" + aSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
        }
      }

      throw new Error('"' + aSource + '" is not in the SourceMap.');
    };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.
   *   - column: The column number in the original source.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.
   *   - column: The column number in the generated source, or null.
   */
  SourceMapConsumer.prototype.generatedPositionFor =
    function SourceMapConsumer_generatedPositionFor(aArgs) {
      var needle = {
        source: util.getArg(aArgs, 'source'),
        originalLine: util.getArg(aArgs, 'line'),
        originalColumn: util.getArg(aArgs, 'column')
      };

      if (this.sourceRoot != null) {
        needle.source = util.relative(this.sourceRoot, needle.source);
      }

      var mapping = this._findMapping(needle,
                                      this._originalMappings,
                                      "originalLine",
                                      "originalColumn",
                                      util.compareByOriginalPositions);

      if (mapping) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null)
        };
      }

      return {
        line: null,
        column: null
      };
    };

  SourceMapConsumer.GENERATED_ORDER = 1;
  SourceMapConsumer.ORIGINAL_ORDER = 2;

  /**
   * Iterate over each mapping between an original source/line/column and a
   * generated line/column in this source map.
   *
   * @param Function aCallback
   *        The function that is called with each mapping.
   * @param Object aContext
   *        Optional. If specified, this object will be the value of `this` every
   *        time that `aCallback` is called.
   * @param aOrder
   *        Either `SourceMapConsumer.GENERATED_ORDER` or
   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
   *        iterate over the mappings sorted by the generated file's line/column
   *        order or the original's source/line/column order, respectively. Defaults to
   *        `SourceMapConsumer.GENERATED_ORDER`.
   */
  SourceMapConsumer.prototype.eachMapping =
    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

      var mappings;
      switch (order) {
      case SourceMapConsumer.GENERATED_ORDER:
        mappings = this._generatedMappings;
        break;
      case SourceMapConsumer.ORIGINAL_ORDER:
        mappings = this._originalMappings;
        break;
      default:
        throw new Error("Unknown order of iteration.");
      }

      var sourceRoot = this.sourceRoot;
      mappings.map(function (mapping) {
        var source = mapping.source;
        if (source != null && sourceRoot != null) {
          source = util.join(sourceRoot, source);
        }
        return {
          source: source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name
        };
      }).forEach(aCallback, context);
    };

  exports.SourceMapConsumer = SourceMapConsumer;

});

},{"./array-set":90,"./base64-vlq":91,"./binary-search":93,"./util":97,"amdefine":98}],95:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var base64VLQ = require('./base64-vlq');
  var util = require('./util');
  var ArraySet = require('./array-set').ArraySet;

  /**
   * An instance of the SourceMapGenerator represents a source map which is
   * being built incrementally. You may pass an object with the following
   * properties:
   *
   *   - file: The filename of the generated source.
   *   - sourceRoot: A root for all relative URLs in this source map.
   */
  function SourceMapGenerator(aArgs) {
    if (!aArgs) {
      aArgs = {};
    }
    this._file = util.getArg(aArgs, 'file', null);
    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
    this._sources = new ArraySet();
    this._names = new ArraySet();
    this._mappings = [];
    this._sourcesContents = null;
  }

  SourceMapGenerator.prototype._version = 3;

  /**
   * Creates a new SourceMapGenerator based on a SourceMapConsumer
   *
   * @param aSourceMapConsumer The SourceMap.
   */
  SourceMapGenerator.fromSourceMap =
    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot: sourceRoot
      });
      aSourceMapConsumer.eachMapping(function (mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };

        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }

          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };

          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }

        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };

  /**
   * Add a single mapping from original source line and column to the generated
   * source's line and column for this source map being created. The mapping
   * object should have the following properties:
   *
   *   - generated: An object with the generated line and column positions.
   *   - original: An object with the original line and column positions.
   *   - source: The original source file (relative to the sourceRoot).
   *   - name: An optional original token name for this mapping.
   */
  SourceMapGenerator.prototype.addMapping =
    function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, 'generated');
      var original = util.getArg(aArgs, 'original', null);
      var source = util.getArg(aArgs, 'source', null);
      var name = util.getArg(aArgs, 'name', null);

      this._validateMapping(generated, original, source, name);

      if (source != null && !this._sources.has(source)) {
        this._sources.add(source);
      }

      if (name != null && !this._names.has(name)) {
        this._names.add(name);
      }

      this._mappings.push({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source: source,
        name: name
      });
    };

  /**
   * Set the source content for a source file.
   */
  SourceMapGenerator.prototype.setSourceContent =
    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
      }

      if (aSourceContent != null) {
        // Add the source content to the _sourcesContents map.
        // Create a new _sourcesContents map if the property is null.
        if (!this._sourcesContents) {
          this._sourcesContents = {};
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        // Remove the source file from the _sourcesContents map.
        // If the _sourcesContents map is empty, set the property to null.
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };

  /**
   * Applies the mappings of a sub-source-map for a specific source file to the
   * source map being generated. Each mapping to the supplied source file is
   * rewritten using the supplied source map. Note: The resolution for the
   * resulting mappings is the minimium of this map and the supplied map.
   *
   * @param aSourceMapConsumer The source map to be applied.
   * @param aSourceFile Optional. The filename of the source file.
   *        If omitted, SourceMapConsumer's file property will be used.
   * @param aSourceMapPath Optional. The dirname of the path to the source map
   *        to be applied. If relative, it is relative to the SourceMapConsumer.
   *        This parameter is needed when the two source maps aren't in the same
   *        directory, and the source map to be applied contains relative source
   *        paths. If so, those relative source paths need to be rewritten
   *        relative to the SourceMapGenerator.
   */
  SourceMapGenerator.prototype.applySourceMap =
    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      // If aSourceFile is omitted, we will use the file property of the SourceMap
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(
            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
            'or the source map\'s "file" property. Both were omitted.'
          );
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      // Make "sourceFile" relative if an absolute Url is passed.
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      // Applying the SourceMap can add and remove items from the sources and
      // the names array.
      var newSources = new ArraySet();
      var newNames = new ArraySet();

      // Find mappings for the "sourceFile"
      this._mappings.forEach(function (mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          // Check if it can be mapped by the source map, then update the mapping.
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            // Copy mapping
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util.join(aSourceMapPath, mapping.source)
            }
            if (sourceRoot != null) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }

        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }

        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }

      }, this);
      this._sources = newSources;
      this._names = newNames;

      // Copy sourcesContents of applied map.
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile = util.join(aSourceMapPath, sourceFile);
          }
          if (sourceRoot != null) {
            sourceFile = util.relative(sourceRoot, sourceFile);
          }
          this.setSourceContent(sourceFile, content);
        }
      }, this);
    };

  /**
   * A mapping can have one of the three levels of data:
   *
   *   1. Just the generated position.
   *   2. The Generated position, original position, and original source.
   *   3. Generated and original position, original source, as well as a name
   *      token.
   *
   * To maintain consistency, we validate that any new mapping being added falls
   * in to one of these categories.
   */
  SourceMapGenerator.prototype._validateMapping =
    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                                aName) {
      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
          && aGenerated.line > 0 && aGenerated.column >= 0
          && !aOriginal && !aSource && !aName) {
        // Case 1.
        return;
      }
      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
               && aGenerated.line > 0 && aGenerated.column >= 0
               && aOriginal.line > 0 && aOriginal.column >= 0
               && aSource) {
        // Cases 2 and 3.
        return;
      }
      else {
        throw new Error('Invalid mapping: ' + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };

  /**
   * Serialize the accumulated mappings in to the stream of base 64 VLQs
   * specified by the source map format.
   */
  SourceMapGenerator.prototype._serializeMappings =
    function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = '';
      var mapping;

      // The mappings must be guaranteed to be in sorted order before we start
      // serializing them or else the generated line numbers (which are defined
      // via the ';' separators) will be all messed up. Note: it might be more
      // performant to maintain the sorting as we insert them, rather than as we
      // serialize them, but the big O is the same either way.
      this._mappings.sort(util.compareByGeneratedPositions);

      for (var i = 0, len = this._mappings.length; i < len; i++) {
        mapping = this._mappings[i];

        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            result += ';';
            previousGeneratedLine++;
          }
        }
        else {
          if (i > 0) {
            if (!util.compareByGeneratedPositions(mapping, this._mappings[i - 1])) {
              continue;
            }
            result += ',';
          }
        }

        result += base64VLQ.encode(mapping.generatedColumn
                                   - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;

        if (mapping.source != null) {
          result += base64VLQ.encode(this._sources.indexOf(mapping.source)
                                     - previousSource);
          previousSource = this._sources.indexOf(mapping.source);

          // lines are stored 0-based in SourceMap spec version 3
          result += base64VLQ.encode(mapping.originalLine - 1
                                     - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;

          result += base64VLQ.encode(mapping.originalColumn
                                     - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;

          if (mapping.name != null) {
            result += base64VLQ.encode(this._names.indexOf(mapping.name)
                                       - previousName);
            previousName = this._names.indexOf(mapping.name);
          }
        }
      }

      return result;
    };

  SourceMapGenerator.prototype._generateSourcesContent =
    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function (source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents,
                                                    key)
          ? this._sourcesContents[key]
          : null;
      }, this);
    };

  /**
   * Externalize the source map.
   */
  SourceMapGenerator.prototype.toJSON =
    function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }

      return map;
    };

  /**
   * Render the source map being generated to a string.
   */
  SourceMapGenerator.prototype.toString =
    function SourceMapGenerator_toString() {
      return JSON.stringify(this);
    };

  exports.SourceMapGenerator = SourceMapGenerator;

});

},{"./array-set":90,"./base64-vlq":91,"./util":97,"amdefine":98}],96:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
  var util = require('./util');

  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
  // operating systems these days (capturing the result).
  var REGEX_NEWLINE = /(\r?\n)/;

  // Matches a Windows-style newline, or any character.
  var REGEX_CHARACTER = /\r\n|[\s\S]/g;

  /**
   * SourceNodes provide a way to abstract over interpolating/concatenating
   * snippets of generated JavaScript source code while maintaining the line and
   * column information associated with the original source code.
   *
   * @param aLine The original line number.
   * @param aColumn The original column number.
   * @param aSource The original source's filename.
   * @param aChunks Optional. An array of strings which are snippets of
   *        generated JS, or other SourceNodes.
   * @param aName The original identifier.
   */
  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
    this.children = [];
    this.sourceContents = {};
    this.line = aLine == null ? null : aLine;
    this.column = aColumn == null ? null : aColumn;
    this.source = aSource == null ? null : aSource;
    this.name = aName == null ? null : aName;
    if (aChunks != null) this.add(aChunks);
  }

  /**
   * Creates a SourceNode from generated code and a SourceMapConsumer.
   *
   * @param aGeneratedCode The generated code
   * @param aSourceMapConsumer The SourceMap for the generated code
   * @param aRelativePath Optional. The path that relative sources in the
   *        SourceMapConsumer should be relative to.
   */
  SourceNode.fromStringWithSourceMap =
    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      // The SourceNode we want to fill with the generated code
      // and the SourceMap
      var node = new SourceNode();

      // All even indices of this array are one line of the generated code,
      // while all odd indices are the newlines between two adjacent lines
      // (since `REGEX_NEWLINE` captures its match).
      // Processed fragments are removed from this array, by calling `shiftNextLine`.
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var shiftNextLine = function() {
        var lineContents = remainingLines.shift();
        // The last line of a file might not have a newline.
        var newLine = remainingLines.shift() || "";
        return lineContents + newLine;
      };

      // We need to remember the position of "remainingLines"
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;

      // The generate SourceNodes we need a code range.
      // To extract it current and last mapping is used.
      // Here we store the last mapping.
      var lastMapping = null;

      aSourceMapConsumer.eachMapping(function (mapping) {
        if (lastMapping !== null) {
          // We add the code from "lastMapping" to "mapping":
          // First check if there is a new line in between.
          if (lastGeneratedLine < mapping.generatedLine) {
            var code = "";
            // Associate first line with "lastMapping"
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
            // The remaining code is added without mapping
          } else {
            // There is no new line in between.
            // Associate the code between "lastGeneratedColumn" and
            // "mapping.generatedColumn" with "lastMapping"
            var nextLine = remainingLines[0];
            var code = nextLine.substr(0, mapping.generatedColumn -
                                          lastGeneratedColumn);
            remainingLines[0] = nextLine.substr(mapping.generatedColumn -
                                                lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            // No more remaining code, continue
            lastMapping = mapping;
            return;
          }
        }
        // We add the generated code until the first mapping
        // to the SourceNode without any mapping.
        // Each line is added as separate string.
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[0];
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      // We have processed all mappings.
      if (remainingLines.length > 0) {
        if (lastMapping) {
          // Associate the remaining code in the current line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        // and add the remaining lines without any mapping
        node.add(remainingLines.join(""));
      }

      // Copy sourcesContent into SourceNode
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util.join(aRelativePath, sourceFile);
          }
          node.setSourceContent(sourceFile, content);
        }
      });

      return node;

      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === undefined) {
          node.add(code);
        } else {
          var source = aRelativePath
            ? util.join(aRelativePath, mapping.source)
            : mapping.source;
          node.add(new SourceNode(mapping.originalLine,
                                  mapping.originalColumn,
                                  source,
                                  code,
                                  mapping.name));
        }
      }
    };

  /**
   * Add a chunk of generated JS to this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.add = function SourceNode_add(aChunk) {
    if (Array.isArray(aChunk)) {
      aChunk.forEach(function (chunk) {
        this.add(chunk);
      }, this);
    }
    else if (aChunk instanceof SourceNode || typeof aChunk === "string") {
      if (aChunk) {
        this.children.push(aChunk);
      }
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Add a chunk of generated JS to the beginning of this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
    if (Array.isArray(aChunk)) {
      for (var i = aChunk.length-1; i >= 0; i--) {
        this.prepend(aChunk[i]);
      }
    }
    else if (aChunk instanceof SourceNode || typeof aChunk === "string") {
      this.children.unshift(aChunk);
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Walk over the tree of JS snippets in this node and its children. The
   * walking function is called once for each snippet of JS and is passed that
   * snippet and the its original associated source's line/column location.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
    var chunk;
    for (var i = 0, len = this.children.length; i < len; i++) {
      chunk = this.children[i];
      if (chunk instanceof SourceNode) {
        chunk.walk(aFn);
      }
      else {
        if (chunk !== '') {
          aFn(chunk, { source: this.source,
                       line: this.line,
                       column: this.column,
                       name: this.name });
        }
      }
    }
  };

  /**
   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
   * each of `this.children`.
   *
   * @param aSep The separator.
   */
  SourceNode.prototype.join = function SourceNode_join(aSep) {
    var newChildren;
    var i;
    var len = this.children.length;
    if (len > 0) {
      newChildren = [];
      for (i = 0; i < len-1; i++) {
        newChildren.push(this.children[i]);
        newChildren.push(aSep);
      }
      newChildren.push(this.children[i]);
      this.children = newChildren;
    }
    return this;
  };

  /**
   * Call String.prototype.replace on the very right-most source snippet. Useful
   * for trimming whitespace from the end of a source node, etc.
   *
   * @param aPattern The pattern to replace.
   * @param aReplacement The thing to replace the pattern with.
   */
  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
    var lastChild = this.children[this.children.length - 1];
    if (lastChild instanceof SourceNode) {
      lastChild.replaceRight(aPattern, aReplacement);
    }
    else if (typeof lastChild === 'string') {
      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
    }
    else {
      this.children.push(''.replace(aPattern, aReplacement));
    }
    return this;
  };

  /**
   * Set the source content for a source file. This will be added to the SourceMapGenerator
   * in the sourcesContent field.
   *
   * @param aSourceFile The filename of the source file
   * @param aSourceContent The content of the source file
   */
  SourceNode.prototype.setSourceContent =
    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };

  /**
   * Walk over the tree of SourceNodes. The walking function is called for each
   * source file content and is passed the filename and source content.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walkSourceContents =
    function SourceNode_walkSourceContents(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i] instanceof SourceNode) {
          this.children[i].walkSourceContents(aFn);
        }
      }

      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };

  /**
   * Return the string representation of this source node. Walks over the tree
   * and concatenates all the various snippets together to one string.
   */
  SourceNode.prototype.toString = function SourceNode_toString() {
    var str = "";
    this.walk(function (chunk) {
      str += chunk;
    });
    return str;
  };

  /**
   * Returns the string representation of this source node along with a source
   * map.
   */
  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
    var generated = {
      code: "",
      line: 1,
      column: 0
    };
    var map = new SourceMapGenerator(aArgs);
    var sourceMappingActive = false;
    var lastOriginalSource = null;
    var lastOriginalLine = null;
    var lastOriginalColumn = null;
    var lastOriginalName = null;
    this.walk(function (chunk, original) {
      generated.code += chunk;
      if (original.source !== null
          && original.line !== null
          && original.column !== null) {
        if(lastOriginalSource !== original.source
           || lastOriginalLine !== original.line
           || lastOriginalColumn !== original.column
           || lastOriginalName !== original.name) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
        lastOriginalSource = original.source;
        lastOriginalLine = original.line;
        lastOriginalColumn = original.column;
        lastOriginalName = original.name;
        sourceMappingActive = true;
      } else if (sourceMappingActive) {
        map.addMapping({
          generated: {
            line: generated.line,
            column: generated.column
          }
        });
        lastOriginalSource = null;
        sourceMappingActive = false;
      }
      chunk.match(REGEX_CHARACTER).forEach(function (ch, idx, array) {
        if (REGEX_NEWLINE.test(ch)) {
          generated.line++;
          generated.column = 0;
          // Mappings end at eol
          if (idx + 1 === array.length) {
            lastOriginalSource = null;
            sourceMappingActive = false;
          } else if (sourceMappingActive) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
        } else {
          generated.column += ch.length;
        }
      });
    });
    this.walkSourceContents(function (sourceFile, sourceContent) {
      map.setSourceContent(sourceFile, sourceContent);
    });

    return { code: generated.code, map: map };
  };

  exports.SourceNode = SourceNode;

});

},{"./source-map-generator":95,"./util":97,"amdefine":98}],97:[function(require,module,exports){
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function') {
    var define = require('amdefine')(module, require);
}
define(function (require, exports, module) {

  /**
   * This is a helper function for getting values from parameter/options
   * objects.
   *
   * @param args The object we are extracting values from
   * @param name The name of the property we are getting.
   * @param defaultValue An optional value to return if the property is missing
   * from the object. If this is not specified and the property is missing, an
   * error will be thrown.
   */
  function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
      return aArgs[aName];
    } else if (arguments.length === 3) {
      return aDefaultValue;
    } else {
      throw new Error('"' + aName + '" is a required argument.');
    }
  }
  exports.getArg = getArg;

  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
  var dataUrlRegexp = /^data:.+\,.+$/;

  function urlParse(aUrl) {
    var match = aUrl.match(urlRegexp);
    if (!match) {
      return null;
    }
    return {
      scheme: match[1],
      auth: match[2],
      host: match[3],
      port: match[4],
      path: match[5]
    };
  }
  exports.urlParse = urlParse;

  function urlGenerate(aParsedUrl) {
    var url = '';
    if (aParsedUrl.scheme) {
      url += aParsedUrl.scheme + ':';
    }
    url += '//';
    if (aParsedUrl.auth) {
      url += aParsedUrl.auth + '@';
    }
    if (aParsedUrl.host) {
      url += aParsedUrl.host;
    }
    if (aParsedUrl.port) {
      url += ":" + aParsedUrl.port
    }
    if (aParsedUrl.path) {
      url += aParsedUrl.path;
    }
    return url;
  }
  exports.urlGenerate = urlGenerate;

  /**
   * Normalizes a path, or the path portion of a URL:
   *
   * - Replaces consequtive slashes with one slash.
   * - Removes unnecessary '.' parts.
   * - Removes unnecessary '<dir>/..' parts.
   *
   * Based on code in the Node.js 'path' core module.
   *
   * @param aPath The path or url to normalize.
   */
  function normalize(aPath) {
    var path = aPath;
    var url = urlParse(aPath);
    if (url) {
      if (!url.path) {
        return aPath;
      }
      path = url.path;
    }
    var isAbsolute = (path.charAt(0) === '/');

    var parts = path.split(/\/+/);
    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
      part = parts[i];
      if (part === '.') {
        parts.splice(i, 1);
      } else if (part === '..') {
        up++;
      } else if (up > 0) {
        if (part === '') {
          // The first part is blank if the path is absolute. Trying to go
          // above the root is a no-op. Therefore we can remove all '..' parts
          // directly after the root.
          parts.splice(i + 1, up);
          up = 0;
        } else {
          parts.splice(i, 2);
          up--;
        }
      }
    }
    path = parts.join('/');

    if (path === '') {
      path = isAbsolute ? '/' : '.';
    }

    if (url) {
      url.path = path;
      return urlGenerate(url);
    }
    return path;
  }
  exports.normalize = normalize;

  /**
   * Joins two paths/URLs.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be joined with the root.
   *
   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
   *   first.
   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
   *   is updated with the result and aRoot is returned. Otherwise the result
   *   is returned.
   *   - If aPath is absolute, the result is aPath.
   *   - Otherwise the two paths are joined with a slash.
   * - Joining for example 'http://' and 'www.example.com' is also supported.
   */
  function join(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    if (aPath === "") {
      aPath = ".";
    }
    var aPathUrl = urlParse(aPath);
    var aRootUrl = urlParse(aRoot);
    if (aRootUrl) {
      aRoot = aRootUrl.path || '/';
    }

    // `join(foo, '//www.example.org')`
    if (aPathUrl && !aPathUrl.scheme) {
      if (aRootUrl) {
        aPathUrl.scheme = aRootUrl.scheme;
      }
      return urlGenerate(aPathUrl);
    }

    if (aPathUrl || aPath.match(dataUrlRegexp)) {
      return aPath;
    }

    // `join('http://', 'www.example.com')`
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
      aRootUrl.host = aPath;
      return urlGenerate(aRootUrl);
    }

    var joined = aPath.charAt(0) === '/'
      ? aPath
      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

    if (aRootUrl) {
      aRootUrl.path = joined;
      return urlGenerate(aRootUrl);
    }
    return joined;
  }
  exports.join = join;

  /**
   * Make a path relative to a URL or another path.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be made relative to aRoot.
   */
  function relative(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }

    aRoot = aRoot.replace(/\/$/, '');

    // XXX: It is possible to remove this block, and the tests still pass!
    var url = urlParse(aRoot);
    if (aPath.charAt(0) == "/" && url && url.path == "/") {
      return aPath.slice(1);
    }

    return aPath.indexOf(aRoot + '/') === 0
      ? aPath.substr(aRoot.length + 1)
      : aPath;
  }
  exports.relative = relative;

  /**
   * Because behavior goes wacky when you set `__proto__` on objects, we
   * have to prefix all the strings in our set with an arbitrary character.
   *
   * See https://github.com/mozilla/source-map/pull/31 and
   * https://github.com/mozilla/source-map/issues/30
   *
   * @param String aStr
   */
  function toSetString(aStr) {
    return '$' + aStr;
  }
  exports.toSetString = toSetString;

  function fromSetString(aStr) {
    return aStr.substr(1);
  }
  exports.fromSetString = fromSetString;

  function strcmp(aStr1, aStr2) {
    var s1 = aStr1 || "";
    var s2 = aStr2 || "";
    return (s1 > s2) - (s1 < s2);
  }

  /**
   * Comparator between two mappings where the original positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same original source/line/column, but different generated
   * line and column the same. Useful when searching for a mapping with a
   * stubbed out mapping.
   */
  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp;

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp || onlyCompareOriginal) {
      return cmp;
    }

    cmp = strcmp(mappingA.name, mappingB.name);
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp) {
      return cmp;
    }

    return mappingA.generatedColumn - mappingB.generatedColumn;
  };
  exports.compareByOriginalPositions = compareByOriginalPositions;

  /**
   * Comparator between two mappings where the generated positions are
   * compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same generated line and column, but different
   * source/name/original line and column the same. Useful when searching for a
   * mapping with a stubbed out mapping.
   */
  function compareByGeneratedPositions(mappingA, mappingB, onlyCompareGenerated) {
    var cmp;

    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp || onlyCompareGenerated) {
      return cmp;
    }

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp) {
      return cmp;
    }

    return strcmp(mappingA.name, mappingB.name);
  };
  exports.compareByGeneratedPositions = compareByGeneratedPositions;

});

},{"amdefine":98}],98:[function(require,module,exports){
(function (process,__filename){
/** vim: et:ts=4:sw=4:sts=4
 * @license amdefine 0.1.0 Copyright (c) 2011, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/amdefine for details
 */

/*jslint node: true */
/*global module, process */
'use strict';

/**
 * Creates a define for node.
 * @param {Object} module the "module" object that is defined by Node for the
 * current module.
 * @param {Function} [requireFn]. Node's require function for the current module.
 * It only needs to be passed in Node versions before 0.5, when module.require
 * did not exist.
 * @returns {Function} a define function that is usable for the current node
 * module.
 */
function amdefine(module, requireFn) {
    'use strict';
    var defineCache = {},
        loaderCache = {},
        alreadyCalled = false,
        path = require('path'),
        makeRequire, stringRequire;

    /**
     * Trims the . and .. from an array of path segments.
     * It will keep a leading path segment if a .. will become
     * the first path segment, to help with module name lookups,
     * which act like paths, but can be remapped. But the end result,
     * all paths that use this function should look normalized.
     * NOTE: this method MODIFIES the input array.
     * @param {Array} ary the array of path segments.
     */
    function trimDots(ary) {
        var i, part;
        for (i = 0; ary[i]; i+= 1) {
            part = ary[i];
            if (part === '.') {
                ary.splice(i, 1);
                i -= 1;
            } else if (part === '..') {
                if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
                    //End of the line. Keep at least one non-dot
                    //path segment at the front so it can be mapped
                    //correctly to disk. Otherwise, there is likely
                    //no path mapping for a path starting with '..'.
                    //This can still fail, but catches the most reasonable
                    //uses of ..
                    break;
                } else if (i > 0) {
                    ary.splice(i - 1, 2);
                    i -= 2;
                }
            }
        }
    }

    function normalize(name, baseName) {
        var baseParts;

        //Adjust any relative paths.
        if (name && name.charAt(0) === '.') {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                baseParts = baseName.split('/');
                baseParts = baseParts.slice(0, baseParts.length - 1);
                baseParts = baseParts.concat(name.split('/'));
                trimDots(baseParts);
                name = baseParts.join('/');
            }
        }

        return name;
    }

    /**
     * Create the normalize() function passed to a loader plugin's
     * normalize method.
     */
    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(id) {
        function load(value) {
            loaderCache[id] = value;
        }

        load.fromText = function (id, text) {
            //This one is difficult because the text can/probably uses
            //define, and any relative paths and requires should be relative
            //to that id was it would be found on disk. But this would require
            //bootstrapping a module/require fairly deeply from node core.
            //Not sure how best to go about that yet.
            throw new Error('amdefine does not implement load.fromText');
        };

        return load;
    }

    makeRequire = function (systemRequire, exports, module, relId) {
        function amdRequire(deps, callback) {
            if (typeof deps === 'string') {
                //Synchronous, single module require('')
                return stringRequire(systemRequire, exports, module, deps, relId);
            } else {
                //Array of dependencies with a callback.

                //Convert the dependencies to modules.
                deps = deps.map(function (depName) {
                    return stringRequire(systemRequire, exports, module, depName, relId);
                });

                //Wait for next tick to call back the require call.
                process.nextTick(function () {
                    callback.apply(null, deps);
                });
            }
        }

        amdRequire.toUrl = function (filePath) {
            if (filePath.indexOf('.') === 0) {
                return normalize(filePath, path.dirname(module.filename));
            } else {
                return filePath;
            }
        };

        return amdRequire;
    };

    //Favor explicit value, passed in if the module wants to support Node 0.4.
    requireFn = requireFn || function req() {
        return module.require.apply(module, arguments);
    };

    function runFactory(id, deps, factory) {
        var r, e, m, result;

        if (id) {
            e = loaderCache[id] = {};
            m = {
                id: id,
                uri: __filename,
                exports: e
            };
            r = makeRequire(requireFn, e, m, id);
        } else {
            //Only support one define call per file
            if (alreadyCalled) {
                throw new Error('amdefine with no module ID cannot be called more than once per file.');
            }
            alreadyCalled = true;

            //Use the real variables from node
            //Use module.exports for exports, since
            //the exports in here is amdefine exports.
            e = module.exports;
            m = module;
            r = makeRequire(requireFn, e, m, module.id);
        }

        //If there are dependencies, they are strings, so need
        //to convert them to dependency values.
        if (deps) {
            deps = deps.map(function (depName) {
                return r(depName);
            });
        }

        //Call the factory with the right dependencies.
        if (typeof factory === 'function') {
            result = factory.apply(m.exports, deps);
        } else {
            result = factory;
        }

        if (result !== undefined) {
            m.exports = result;
            if (id) {
                loaderCache[id] = m.exports;
            }
        }
    }

    stringRequire = function (systemRequire, exports, module, id, relId) {
        //Split the ID by a ! so that
        var index = id.indexOf('!'),
            originalId = id,
            prefix, plugin;

        if (index === -1) {
            id = normalize(id, relId);

            //Straight module lookup. If it is one of the special dependencies,
            //deal with it, otherwise, delegate to node.
            if (id === 'require') {
                return makeRequire(systemRequire, exports, module, relId);
            } else if (id === 'exports') {
                return exports;
            } else if (id === 'module') {
                return module;
            } else if (loaderCache.hasOwnProperty(id)) {
                return loaderCache[id];
            } else if (defineCache[id]) {
                runFactory.apply(null, defineCache[id]);
                return loaderCache[id];
            } else {
                if(systemRequire) {
                    return systemRequire(originalId);
                } else {
                    throw new Error('No module with ID: ' + id);
                }
            }
        } else {
            //There is a plugin in play.
            prefix = id.substring(0, index);
            id = id.substring(index + 1, id.length);

            plugin = stringRequire(systemRequire, exports, module, prefix, relId);

            if (plugin.normalize) {
                id = plugin.normalize(id, makeNormalize(relId));
            } else {
                //Normalize the ID normally.
                id = normalize(id, relId);
            }

            if (loaderCache[id]) {
                return loaderCache[id];
            } else {
                plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});

                return loaderCache[id];
            }
        }
    };

    //Create a define function specific to the module asking for amdefine.
    function define(id, deps, factory) {
        if (Array.isArray(id)) {
            factory = deps;
            deps = id;
            id = undefined;
        } else if (typeof id !== 'string') {
            factory = id;
            id = deps = undefined;
        }

        if (deps && !Array.isArray(deps)) {
            factory = deps;
            deps = undefined;
        }

        if (!deps) {
            deps = ['require', 'exports', 'module'];
        }

        //Set up properties for this module. If an ID, then use
        //internal cache. If no ID, then use the external variables
        //for this node module.
        if (id) {
            //Put the module in deep freeze until there is a
            //require call for it.
            defineCache[id] = [id, deps, factory];
        } else {
            runFactory(id, deps, factory);
        }
    }

    //define.require, which has access to all the values in the
    //cache. Useful for AMD modules that all have IDs in the file,
    //but need to finally export a value to node based on one of those
    //IDs.
    define.require = function (id) {
        if (loaderCache[id]) {
            return loaderCache[id];
        }

        if (defineCache[id]) {
            runFactory.apply(null, defineCache[id]);
            return loaderCache[id];
        }
    };

    define.amd = {};

    return define;
}

module.exports = amdefine;

}).call(this,require('_process'),"/node_modules/autoprefixer-core/node_modules/postcss/node_modules/source-map/node_modules/amdefine/amdefine.js")
},{"_process":106,"path":105}],99:[function(require,module,exports){
(function (process,global){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
 * @version   2.0.0
 */

(function() {
    "use strict";

    function $$utils$$objectOrFunction(x) {
      return typeof x === 'function' || (typeof x === 'object' && x !== null);
    }

    function $$utils$$isFunction(x) {
      return typeof x === 'function';
    }

    function $$utils$$isMaybeThenable(x) {
      return typeof x === 'object' && x !== null;
    }

    var $$utils$$_isArray;

    if (!Array.isArray) {
      $$utils$$_isArray = function (x) {
        return Object.prototype.toString.call(x) === '[object Array]';
      };
    } else {
      $$utils$$_isArray = Array.isArray;
    }

    var $$utils$$isArray = $$utils$$_isArray;
    var $$utils$$now = Date.now || function() { return new Date().getTime(); };
    function $$utils$$F() { }

    var $$utils$$o_create = (Object.create || function (o) {
      if (arguments.length > 1) {
        throw new Error('Second argument not supported');
      }
      if (typeof o !== 'object') {
        throw new TypeError('Argument must be an object');
      }
      $$utils$$F.prototype = o;
      return new $$utils$$F();
    });

    var $$asap$$len = 0;

    var $$asap$$default = function asap(callback, arg) {
      $$asap$$queue[$$asap$$len] = callback;
      $$asap$$queue[$$asap$$len + 1] = arg;
      $$asap$$len += 2;
      if ($$asap$$len === 2) {
        // If len is 1, that means that we need to schedule an async flush.
        // If additional callbacks are queued before the queue is flushed, they
        // will be processed by this flush that we are scheduling.
        $$asap$$scheduleFlush();
      }
    };

    var $$asap$$browserGlobal = (typeof window !== 'undefined') ? window : {};
    var $$asap$$BrowserMutationObserver = $$asap$$browserGlobal.MutationObserver || $$asap$$browserGlobal.WebKitMutationObserver;

    // test for web worker but not in IE10
    var $$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
      typeof importScripts !== 'undefined' &&
      typeof MessageChannel !== 'undefined';

    // node
    function $$asap$$useNextTick() {
      return function() {
        process.nextTick($$asap$$flush);
      };
    }

    function $$asap$$useMutationObserver() {
      var iterations = 0;
      var observer = new $$asap$$BrowserMutationObserver($$asap$$flush);
      var node = document.createTextNode('');
      observer.observe(node, { characterData: true });

      return function() {
        node.data = (iterations = ++iterations % 2);
      };
    }

    // web worker
    function $$asap$$useMessageChannel() {
      var channel = new MessageChannel();
      channel.port1.onmessage = $$asap$$flush;
      return function () {
        channel.port2.postMessage(0);
      };
    }

    function $$asap$$useSetTimeout() {
      return function() {
        setTimeout($$asap$$flush, 1);
      };
    }

    var $$asap$$queue = new Array(1000);

    function $$asap$$flush() {
      for (var i = 0; i < $$asap$$len; i+=2) {
        var callback = $$asap$$queue[i];
        var arg = $$asap$$queue[i+1];

        callback(arg);

        $$asap$$queue[i] = undefined;
        $$asap$$queue[i+1] = undefined;
      }

      $$asap$$len = 0;
    }

    var $$asap$$scheduleFlush;

    // Decide what async method to use to triggering processing of queued callbacks:
    if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
      $$asap$$scheduleFlush = $$asap$$useNextTick();
    } else if ($$asap$$BrowserMutationObserver) {
      $$asap$$scheduleFlush = $$asap$$useMutationObserver();
    } else if ($$asap$$isWorker) {
      $$asap$$scheduleFlush = $$asap$$useMessageChannel();
    } else {
      $$asap$$scheduleFlush = $$asap$$useSetTimeout();
    }

    function $$$internal$$noop() {}
    var $$$internal$$PENDING   = void 0;
    var $$$internal$$FULFILLED = 1;
    var $$$internal$$REJECTED  = 2;
    var $$$internal$$GET_THEN_ERROR = new $$$internal$$ErrorObject();

    function $$$internal$$selfFullfillment() {
      return new TypeError("You cannot resolve a promise with itself");
    }

    function $$$internal$$cannotReturnOwn() {
      return new TypeError('A promises callback cannot return that same promise.')
    }

    function $$$internal$$getThen(promise) {
      try {
        return promise.then;
      } catch(error) {
        $$$internal$$GET_THEN_ERROR.error = error;
        return $$$internal$$GET_THEN_ERROR;
      }
    }

    function $$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
      try {
        then.call(value, fulfillmentHandler, rejectionHandler);
      } catch(e) {
        return e;
      }
    }

    function $$$internal$$handleForeignThenable(promise, thenable, then) {
       $$asap$$default(function(promise) {
        var sealed = false;
        var error = $$$internal$$tryThen(then, thenable, function(value) {
          if (sealed) { return; }
          sealed = true;
          if (thenable !== value) {
            $$$internal$$resolve(promise, value);
          } else {
            $$$internal$$fulfill(promise, value);
          }
        }, function(reason) {
          if (sealed) { return; }
          sealed = true;

          $$$internal$$reject(promise, reason);
        }, 'Settle: ' + (promise._label || ' unknown promise'));

        if (!sealed && error) {
          sealed = true;
          $$$internal$$reject(promise, error);
        }
      }, promise);
    }

    function $$$internal$$handleOwnThenable(promise, thenable) {
      if (thenable._state === $$$internal$$FULFILLED) {
        $$$internal$$fulfill(promise, thenable._result);
      } else if (promise._state === $$$internal$$REJECTED) {
        $$$internal$$reject(promise, thenable._result);
      } else {
        $$$internal$$subscribe(thenable, undefined, function(value) {
          $$$internal$$resolve(promise, value);
        }, function(reason) {
          $$$internal$$reject(promise, reason);
        });
      }
    }

    function $$$internal$$handleMaybeThenable(promise, maybeThenable) {
      if (maybeThenable.constructor === promise.constructor) {
        $$$internal$$handleOwnThenable(promise, maybeThenable);
      } else {
        var then = $$$internal$$getThen(maybeThenable);

        if (then === $$$internal$$GET_THEN_ERROR) {
          $$$internal$$reject(promise, $$$internal$$GET_THEN_ERROR.error);
        } else if (then === undefined) {
          $$$internal$$fulfill(promise, maybeThenable);
        } else if ($$utils$$isFunction(then)) {
          $$$internal$$handleForeignThenable(promise, maybeThenable, then);
        } else {
          $$$internal$$fulfill(promise, maybeThenable);
        }
      }
    }

    function $$$internal$$resolve(promise, value) {
      if (promise === value) {
        $$$internal$$reject(promise, $$$internal$$selfFullfillment());
      } else if ($$utils$$objectOrFunction(value)) {
        $$$internal$$handleMaybeThenable(promise, value);
      } else {
        $$$internal$$fulfill(promise, value);
      }
    }

    function $$$internal$$publishRejection(promise) {
      if (promise._onerror) {
        promise._onerror(promise._result);
      }

      $$$internal$$publish(promise);
    }

    function $$$internal$$fulfill(promise, value) {
      if (promise._state !== $$$internal$$PENDING) { return; }

      promise._result = value;
      promise._state = $$$internal$$FULFILLED;

      if (promise._subscribers.length === 0) {
      } else {
        $$asap$$default($$$internal$$publish, promise);
      }
    }

    function $$$internal$$reject(promise, reason) {
      if (promise._state !== $$$internal$$PENDING) { return; }
      promise._state = $$$internal$$REJECTED;
      promise._result = reason;

      $$asap$$default($$$internal$$publishRejection, promise);
    }

    function $$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
      var subscribers = parent._subscribers;
      var length = subscribers.length;

      parent._onerror = null;

      subscribers[length] = child;
      subscribers[length + $$$internal$$FULFILLED] = onFulfillment;
      subscribers[length + $$$internal$$REJECTED]  = onRejection;

      if (length === 0 && parent._state) {
        $$asap$$default($$$internal$$publish, parent);
      }
    }

    function $$$internal$$publish(promise) {
      var subscribers = promise._subscribers;
      var settled = promise._state;

      if (subscribers.length === 0) { return; }

      var child, callback, detail = promise._result;

      for (var i = 0; i < subscribers.length; i += 3) {
        child = subscribers[i];
        callback = subscribers[i + settled];

        if (child) {
          $$$internal$$invokeCallback(settled, child, callback, detail);
        } else {
          callback(detail);
        }
      }

      promise._subscribers.length = 0;
    }

    function $$$internal$$ErrorObject() {
      this.error = null;
    }

    var $$$internal$$TRY_CATCH_ERROR = new $$$internal$$ErrorObject();

    function $$$internal$$tryCatch(callback, detail) {
      try {
        return callback(detail);
      } catch(e) {
        $$$internal$$TRY_CATCH_ERROR.error = e;
        return $$$internal$$TRY_CATCH_ERROR;
      }
    }

    function $$$internal$$invokeCallback(settled, promise, callback, detail) {
      var hasCallback = $$utils$$isFunction(callback),
          value, error, succeeded, failed;

      if (hasCallback) {
        value = $$$internal$$tryCatch(callback, detail);

        if (value === $$$internal$$TRY_CATCH_ERROR) {
          failed = true;
          error = value.error;
          value = null;
        } else {
          succeeded = true;
        }

        if (promise === value) {
          $$$internal$$reject(promise, $$$internal$$cannotReturnOwn());
          return;
        }

      } else {
        value = detail;
        succeeded = true;
      }

      if (promise._state !== $$$internal$$PENDING) {
        // noop
      } else if (hasCallback && succeeded) {
        $$$internal$$resolve(promise, value);
      } else if (failed) {
        $$$internal$$reject(promise, error);
      } else if (settled === $$$internal$$FULFILLED) {
        $$$internal$$fulfill(promise, value);
      } else if (settled === $$$internal$$REJECTED) {
        $$$internal$$reject(promise, value);
      }
    }

    function $$$internal$$initializePromise(promise, resolver) {
      try {
        resolver(function resolvePromise(value){
          $$$internal$$resolve(promise, value);
        }, function rejectPromise(reason) {
          $$$internal$$reject(promise, reason);
        });
      } catch(e) {
        $$$internal$$reject(promise, e);
      }
    }

    function $$$enumerator$$makeSettledResult(state, position, value) {
      if (state === $$$internal$$FULFILLED) {
        return {
          state: 'fulfilled',
          value: value
        };
      } else {
        return {
          state: 'rejected',
          reason: value
        };
      }
    }

    function $$$enumerator$$Enumerator(Constructor, input, abortOnReject, label) {
      this._instanceConstructor = Constructor;
      this.promise = new Constructor($$$internal$$noop, label);
      this._abortOnReject = abortOnReject;

      if (this._validateInput(input)) {
        this._input     = input;
        this.length     = input.length;
        this._remaining = input.length;

        this._init();

        if (this.length === 0) {
          $$$internal$$fulfill(this.promise, this._result);
        } else {
          this.length = this.length || 0;
          this._enumerate();
          if (this._remaining === 0) {
            $$$internal$$fulfill(this.promise, this._result);
          }
        }
      } else {
        $$$internal$$reject(this.promise, this._validationError());
      }
    }

    $$$enumerator$$Enumerator.prototype._validateInput = function(input) {
      return $$utils$$isArray(input);
    };

    $$$enumerator$$Enumerator.prototype._validationError = function() {
      return new Error('Array Methods must be provided an Array');
    };

    $$$enumerator$$Enumerator.prototype._init = function() {
      this._result = new Array(this.length);
    };

    var $$$enumerator$$default = $$$enumerator$$Enumerator;

    $$$enumerator$$Enumerator.prototype._enumerate = function() {
      var length  = this.length;
      var promise = this.promise;
      var input   = this._input;

      for (var i = 0; promise._state === $$$internal$$PENDING && i < length; i++) {
        this._eachEntry(input[i], i);
      }
    };

    $$$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
      var c = this._instanceConstructor;
      if ($$utils$$isMaybeThenable(entry)) {
        if (entry.constructor === c && entry._state !== $$$internal$$PENDING) {
          entry._onerror = null;
          this._settledAt(entry._state, i, entry._result);
        } else {
          this._willSettleAt(c.resolve(entry), i);
        }
      } else {
        this._remaining--;
        this._result[i] = this._makeResult($$$internal$$FULFILLED, i, entry);
      }
    };

    $$$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
      var promise = this.promise;

      if (promise._state === $$$internal$$PENDING) {
        this._remaining--;

        if (this._abortOnReject && state === $$$internal$$REJECTED) {
          $$$internal$$reject(promise, value);
        } else {
          this._result[i] = this._makeResult(state, i, value);
        }
      }

      if (this._remaining === 0) {
        $$$internal$$fulfill(promise, this._result);
      }
    };

    $$$enumerator$$Enumerator.prototype._makeResult = function(state, i, value) {
      return value;
    };

    $$$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
      var enumerator = this;

      $$$internal$$subscribe(promise, undefined, function(value) {
        enumerator._settledAt($$$internal$$FULFILLED, i, value);
      }, function(reason) {
        enumerator._settledAt($$$internal$$REJECTED, i, reason);
      });
    };

    var $$promise$all$$default = function all(entries, label) {
      return new $$$enumerator$$default(this, entries, true /* abort on reject */, label).promise;
    };

    var $$promise$race$$default = function race(entries, label) {
      /*jshint validthis:true */
      var Constructor = this;

      var promise = new Constructor($$$internal$$noop, label);

      if (!$$utils$$isArray(entries)) {
        $$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
        return promise;
      }

      var length = entries.length;

      function onFulfillment(value) {
        $$$internal$$resolve(promise, value);
      }

      function onRejection(reason) {
        $$$internal$$reject(promise, reason);
      }

      for (var i = 0; promise._state === $$$internal$$PENDING && i < length; i++) {
        $$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
      }

      return promise;
    };

    var $$promise$resolve$$default = function resolve(object, label) {
      /*jshint validthis:true */
      var Constructor = this;

      if (object && typeof object === 'object' && object.constructor === Constructor) {
        return object;
      }

      var promise = new Constructor($$$internal$$noop, label);
      $$$internal$$resolve(promise, object);
      return promise;
    };

    var $$promise$reject$$default = function reject(reason, label) {
      /*jshint validthis:true */
      var Constructor = this;
      var promise = new Constructor($$$internal$$noop, label);
      $$$internal$$reject(promise, reason);
      return promise;
    };

    var $$es6$promise$promise$$counter = 0;

    function $$es6$promise$promise$$needsResolver() {
      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
    }

    function $$es6$promise$promise$$needsNew() {
      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
    }

    var $$es6$promise$promise$$default = $$es6$promise$promise$$Promise;

    /**
      Promise objects represent the eventual result of an asynchronous operation. The
      primary way of interacting with a promise is through its `then` method, which
      registers callbacks to receive either a promise’s eventual value or the reason
      why the promise cannot be fulfilled.

      Terminology
      -----------

      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
      - `thenable` is an object or function that defines a `then` method.
      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
      - `exception` is a value that is thrown using the throw statement.
      - `reason` is a value that indicates why a promise was rejected.
      - `settled` the final resting state of a promise, fulfilled or rejected.

      A promise can be in one of three states: pending, fulfilled, or rejected.

      Promises that are fulfilled have a fulfillment value and are in the fulfilled
      state.  Promises that are rejected have a rejection reason and are in the
      rejected state.  A fulfillment value is never a thenable.

      Promises can also be said to *resolve* a value.  If this value is also a
      promise, then the original promise's settled state will match the value's
      settled state.  So a promise that *resolves* a promise that rejects will
      itself reject, and a promise that *resolves* a promise that fulfills will
      itself fulfill.


      Basic Usage:
      ------------

      ```js
      var promise = new Promise(function(resolve, reject) {
        // on success
        resolve(value);

        // on failure
        reject(reason);
      });

      promise.then(function(value) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Advanced Usage:
      ---------------

      Promises shine when abstracting away asynchronous interactions such as
      `XMLHttpRequest`s.

      ```js
      function getJSON(url) {
        return new Promise(function(resolve, reject){
          var xhr = new XMLHttpRequest();

          xhr.open('GET', url);
          xhr.onreadystatechange = handler;
          xhr.responseType = 'json';
          xhr.setRequestHeader('Accept', 'application/json');
          xhr.send();

          function handler() {
            if (this.readyState === this.DONE) {
              if (this.status === 200) {
                resolve(this.response);
              } else {
                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
              }
            }
          };
        });
      }

      getJSON('/posts.json').then(function(json) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Unlike callbacks, promises are great composable primitives.

      ```js
      Promise.all([
        getJSON('/posts'),
        getJSON('/comments')
      ]).then(function(values){
        values[0] // => postsJSON
        values[1] // => commentsJSON

        return values;
      });
      ```

      @class Promise
      @param {function} resolver
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @constructor
    */
    function $$es6$promise$promise$$Promise(resolver, label) {
      this._id = $$es6$promise$promise$$counter++;
      this._label = label;
      this._state = undefined;
      this._result = undefined;
      this._subscribers = [];

      if ($$$internal$$noop !== resolver) {
        if (!$$utils$$isFunction(resolver)) {
          $$es6$promise$promise$$needsResolver();
        }

        if (!(this instanceof $$es6$promise$promise$$Promise)) {
          $$es6$promise$promise$$needsNew();
        }

        $$$internal$$initializePromise(this, resolver);
      }
    }

    $$es6$promise$promise$$Promise.all = $$promise$all$$default;
    $$es6$promise$promise$$Promise.race = $$promise$race$$default;
    $$es6$promise$promise$$Promise.resolve = $$promise$resolve$$default;
    $$es6$promise$promise$$Promise.reject = $$promise$reject$$default;

    $$es6$promise$promise$$Promise.prototype = {
      constructor: $$es6$promise$promise$$Promise,

    /**
      The primary way of interacting with a promise is through its `then` method,
      which registers callbacks to receive either a promise's eventual value or the
      reason why the promise cannot be fulfilled.

      ```js
      findUser().then(function(user){
        // user is available
      }, function(reason){
        // user is unavailable, and you are given the reason why
      });
      ```

      Chaining
      --------

      The return value of `then` is itself a promise.  This second, 'downstream'
      promise is resolved with the return value of the first promise's fulfillment
      or rejection handler, or rejected if the handler throws an exception.

      ```js
      findUser().then(function (user) {
        return user.name;
      }, function (reason) {
        return 'default name';
      }).then(function (userName) {
        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
        // will be `'default name'`
      });

      findUser().then(function (user) {
        throw new Error('Found user, but still unhappy');
      }, function (reason) {
        throw new Error('`findUser` rejected and we're unhappy');
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
      });
      ```
      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

      ```js
      findUser().then(function (user) {
        throw new PedagogicalException('Upstream error');
      }).then(function (value) {
        // never reached
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // The `PedgagocialException` is propagated all the way down to here
      });
      ```

      Assimilation
      ------------

      Sometimes the value you want to propagate to a downstream promise can only be
      retrieved asynchronously. This can be achieved by returning a promise in the
      fulfillment or rejection handler. The downstream promise will then be pending
      until the returned promise is settled. This is called *assimilation*.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // The user's comments are now available
      });
      ```

      If the assimliated promise rejects, then the downstream promise will also reject.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // If `findCommentsByAuthor` fulfills, we'll have the value here
      }, function (reason) {
        // If `findCommentsByAuthor` rejects, we'll have the reason here
      });
      ```

      Simple Example
      --------------

      Synchronous Example

      ```javascript
      var result;

      try {
        result = findResult();
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js
      findResult(function(result, err){
        if (err) {
          // failure
        } else {
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findResult().then(function(result){
        // success
      }, function(reason){
        // failure
      });
      ```

      Advanced Example
      --------------

      Synchronous Example

      ```javascript
      var author, books;

      try {
        author = findAuthor();
        books  = findBooksByAuthor(author);
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js

      function foundBooks(books) {

      }

      function failure(reason) {

      }

      findAuthor(function(author, err){
        if (err) {
          failure(err);
          // failure
        } else {
          try {
            findBoooksByAuthor(author, function(books, err) {
              if (err) {
                failure(err);
              } else {
                try {
                  foundBooks(books);
                } catch(reason) {
                  failure(reason);
                }
              }
            });
          } catch(error) {
            failure(err);
          }
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findAuthor().
        then(findBooksByAuthor).
        then(function(books){
          // found books
      }).catch(function(reason){
        // something went wrong
      });
      ```

      @method then
      @param {Function} onFulfilled
      @param {Function} onRejected
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
    */
      then: function(onFulfillment, onRejection, label) {
        var parent = this;
        var state = parent._state;

        if (state === $$$internal$$FULFILLED && !onFulfillment || state === $$$internal$$REJECTED && !onRejection) {
          return this;
        }

        parent._onerror = null;

        var child = new this.constructor($$$internal$$noop, label);
        var result = parent._result;

        if (state) {
          var callback = arguments[state - 1];
          $$asap$$default(function(){
            $$$internal$$invokeCallback(state, child, callback, result);
          });
        } else {
          $$$internal$$subscribe(parent, child, onFulfillment, onRejection);
        }

        return child;
      },

    /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.

      ```js
      function findAuthor(){
        throw new Error('couldn't find that author');
      }

      // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }

      // async with promises
      findAuthor().catch(function(reason){
        // something went wrong
      });
      ```

      @method catch
      @param {Function} onRejection
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
    */
      'catch': function(onRejection, label) {
        return this.then(null, onRejection, label);
      }
    };

    var $$es6$promise$polyfill$$default = function polyfill() {
      var local;

      if (typeof global !== 'undefined') {
        local = global;
      } else if (typeof window !== 'undefined' && window.document) {
        local = window;
      } else {
        local = self;
      }

      var es6PromiseSupport =
        "Promise" in local &&
        // Some of these methods are missing from
        // Firefox/Chrome experimental implementations
        "resolve" in local.Promise &&
        "reject" in local.Promise &&
        "all" in local.Promise &&
        "race" in local.Promise &&
        // Older version of the spec had a resolver object
        // as the arg rather than a function
        (function() {
          var resolve;
          new local.Promise(function(r) { resolve = r; });
          return $$utils$$isFunction(resolve);
        }());

      if (!es6PromiseSupport) {
        local.Promise = $$es6$promise$promise$$default;
      }
    };

    var es6$promise$umd$$ES6Promise = {
      Promise: $$es6$promise$promise$$default,
      polyfill: $$es6$promise$polyfill$$default
    };

    /* global define:true module:true window: true */
    if (typeof define === 'function' && define['amd']) {
      define(function() { return es6$promise$umd$$ES6Promise; });
    } else if (typeof module !== 'undefined' && module['exports']) {
      module['exports'] = es6$promise$umd$$ES6Promise;
    } else if (typeof this !== 'undefined') {
      this['ES6Promise'] = es6$promise$umd$$ES6Promise;
    }
}).call(this);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":106}],100:[function(require,module,exports){

},{}],101:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Find the length
  var length
  if (type === 'number')
    length = subject > 0 ? subject >>> 0 : 0
  else if (type === 'string') {
    if (encoding === 'base64')
      subject = base64clean(subject)
    length = Buffer.byteLength(subject, encoding)
  } else if (type === 'object' && subject !== null) { // assume object is array-like
    if (subject.type === 'Buffer' && isArray(subject.data))
      subject = subject.data
    length = +subject.length > 0 ? Math.floor(+subject.length) : 0
  } else
    throw new TypeError('must start with number, buffer, array or string')

  if (this.length > kMaxLength)
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
      'size: 0x' + kMaxLength.toString(16) + ' bytes')

  var buf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    if (Buffer.isBuffer(subject)) {
      for (i = 0; i < length; i++)
        buf[i] = subject.readUInt8(i)
    } else {
      for (i = 0; i < length; i++)
        buf[i] = ((subject[i] % 256) + 256) % 256
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

Buffer.isBuffer = function (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b))
    throw new TypeError('Arguments must be Buffers')

  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
  if (i !== len) {
    x = a[i]
    y = b[i]
  }
  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function (list, totalLength) {
  if (!isArray(list)) throw new TypeError('Usage: Buffer.concat(list[, length])')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (totalLength === undefined) {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    case 'hex':
      ret = str.length >>> 1
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    default:
      ret = str.length
  }
  return ret
}

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function (encoding, start, end) {
  var loweredCase = false

  start = start >>> 0
  end = end === undefined || end === Infinity ? this.length : end >>> 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase)
          throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function (b) {
  if(!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max)
      str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b)
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(byte)) throw new Error('Invalid hex string')
    buf[offset + i] = byte
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function asciiWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function utf16leWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leWrite(this, string, offset, length)
      break
    default:
      throw new TypeError('Unknown encoding: ' + encoding)
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function binarySlice (buf, start, end) {
  return asciiSlice(buf, start, end)
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len;
    if (start < 0)
      start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0)
      end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start)
    end = start

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0)
    throw new RangeError('offset is not uint')
  if (offset + ext > length)
    throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80))
    return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new TypeError('value is out of bounds')
  if (offset + ext > buf.length) throw new TypeError('index out of range')
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new TypeError('value is out of bounds')
  if (offset + ext > buf.length) throw new TypeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  if (end < start) throw new TypeError('sourceEnd < sourceStart')
  if (target_start < 0 || target_start >= target.length)
    throw new TypeError('targetStart out of bounds')
  if (start < 0 || start >= source.length) throw new TypeError('sourceStart out of bounds')
  if (end < 0 || end > source.length) throw new TypeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + target_start] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new TypeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new TypeError('start out of bounds')
  if (end < 0 || end > this.length) throw new TypeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F) {
      byteArray.push(b)
    } else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++) {
        byteArray.push(parseInt(h[j], 16))
      }
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

},{"base64-js":102,"ieee754":103,"is-array":104}],102:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS)
			return 62 // '+'
		if (code === SLASH)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],103:[function(require,module,exports){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],104:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],105:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":106}],106:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],107:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v2.1.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-05-01T17:11Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		return !jQuery.isArray( obj ) && obj - parseFloat( obj ) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.constructor &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android < 4.0, iOS < 6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v1.10.19
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-04-18
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== strundefined && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare,
		doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", function() {
				setDocument();
			}, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", function() {
				setDocument();
			});
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select msallowclip=''><option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowclip^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android < 4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Math.random();
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android < 4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



/*
	Implementation Summary

	1. Enforce API surface and semantic compatibility with 1.9.x branch
	2. Improve the module's maintainability by reducing the storage
		paths to a single mechanism.
	3. Use the same single mechanism to support "private" and "user" data.
	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	5. Avoid exposing implementation details on user objects (eg. expando properties)
	6. Provide a clear path for implementation upgrade to WeakMap in 2014
*/
var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// #11217 - WebKit loses check when the name is after the checked attribute
	// Support: Windows Web Apps (WWA)
	// `name` and `type` need .setAttribute for WWA
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE9-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome < 28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Create "bubbling" focus and blur events
// Support: Firefox, Chrome, Safari
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE 9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE 9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Support: IE >= 9
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Support: IE >= 9
		// Fix Cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit
					// jQuery.merge because push.apply(_, arraylike) throws
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit
					// jQuery.merge because push.apply(_, arraylike) throws
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Fixes #12346
					// Support: Webkit, IE
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type, key,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') in IE9, see #12537
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	if ( !div.style ) {
		return;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
		"position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";
		div.innerHTML = "";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Support: node.js jsdom
	// Don't assume that getComputedStyle is a property of the global object
	if ( window.getComputedStyle ) {
		jQuery.extend( support, {
			pixelPosition: function() {
				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {
				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifying setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS 5.1, Android 4.x, Android 2.3
	// Check the default checkbox/radio value ("" on old WebKit; "on" elsewhere)
	support.checkOn = input.value !== "";

	// Must access the parent to make an option select properly
	// Support: IE9, IE10
	support.optSelected = opt.selected;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Check if an input maintains its value after becoming a radio
	// Support: IE9, IE10
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

// Support: IE9+
// Selectedness for an option in an optgroup can be inaccurate
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
						optionSet = true;
					}
				}

				// force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
if ( window.ActiveXObject ) {
	jQuery( window ).on( "unload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				try {
					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {
					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// We assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

},{}],"animate":[function(require,module,exports){
(function (global){
var _slice = Array.prototype.slice;
'use strict';
var $ = require('jquery');
var autoprefixer = require('autoprefixer-core');
var Promise = require('es6-promise').Promise;

if (!global.document) throw new Error('cannot run animate, need a global document');

/**
 * private vars
 */
var _generateSheet = function() {
  return $('<style/>', {
    class: 'animate',
    id: 'animate',
    type: 'text/css'
  }).appendTo('head')[0].sheet;
};
var _prefix = (function() {
	var _style = document.documentElement.style;
	var _prefixes = ['Webkit', 'Moz', 'O', 'ms', 'Khtml'];
	var _prop = 'Animation';
	var _normal = '';
	var _dashed = _normal;
	var _supported = false;
	if (_prop.toLowerCase() in _style) {
		_supported = true;
	} else {
		for (var _i = 0; _i < _prefixes.length; _i++) {
			_normal = _prefixes[_i];
			var normalLow = _normal.toLowerCase();
			var vendorProp = normalLow + _prop;
			if (vendorProp in _style) {
				_dashed = ['-', normalLow, '-'].join('');
				_supported = true;
				break;
			}
		}
	}
	if (!_supported) throw new Error('CSS3 Animations are not supported in this browser. Animate library will not work.');
	return {normal: _normal, dashed: _dashed};
})();
var _kfs = [];
var _sheet = _generateSheet();
var _eventPrefixes = ['webkit', 'moz', 'MS', 'o', ''];

var Animate = function(_eventPrefixes) {
    return function(_sheet) {
        return function(_kfs) {
            return function(_prefix) {
                return function(_generateSheet) {
                    return function() {
                        var Animate = function Animate(selector) {
                            this.animations = [];
                            return this.query(selector);
                        };

                        Object.defineProperties(Animate.prototype, {
                            on: {
                                writable: true,

                                value: function(eventType, listener) {
                                  for (var _p = 0; _p < _eventPrefixes.length; _p++) {
                                    if (!_eventPrefixes[_p]) eventType = eventType.toLowerCase();
                                    var _event = _eventPrefixes[_p] + eventType;
                                    this.$els.on(_event, listener.bind(null, this));
                                  }
                                  return this;
                                }
                            },

                            off: {
                                writable: true,

                                value: function(eventType) {
                                  for (var _p2 = 0; _p2 < _eventPrefixes.length; _p2++) {
                                    if (!_eventPrefixes[_p2]) eventType = eventType.toLowerCase();
                                    var _event2 = _eventPrefixes[_p2] + eventType;
                                    this.$els.off(_event2);
                                  }
                                  return this;
                                }
                            },

                            kf: {
                                writable: true,

                                value: function(keyframe) {
                                    if (!keyframe) throw new Error('.kf expects a keyframe object');
                                    var name = keyframe.name;
                                    delete keyframe.name;
                                    if (!name) {
                                        name = 'keyframe-' + _kfs.length;
                                    }
                                    var _keyframeStr = '@' + _prefix.dashed + 'keyframes ' + name + '  {';
                                    for (var _keyframeProp in keyframe) {
                                        var _keyframeValue = keyframe[_keyframeProp];
                                        if (!Number.isNaN(_keyframeProp) && _keyframeProp >= 0 && _keyframeProp <= 100){
                                            _keyframeProp += '%';
                                        }
                                        if (typeof _keyframeProp !== 'string') throw new Error('object key must be a string or number (0-100)');
                                        _keyframeStr += _keyframeProp;
                                  var _css = ' { ';
                                        for (var _prop2 in _keyframeValue) {
                                            _css += _prop2 + ':' + _keyframeValue[_prop2] + '; ';
                                        }
                                        _css += ' }';
                                  _keyframeStr += autoprefixer.process(_css).css;
                                    }
                                    _keyframeStr += '}';
                                    _sheet.insertRule(_keyframeStr, _sheet.cssRules.length);
                                    _kfs.push(name);
                                    return this;
                                }
                            },

                            keyframe: {
                                writable: true,

                                value: function(kf) {
                                    return this.kf(kf);
                                }
                            },

                            setKeyframe: {
                                writable: true,

                                value: function(keyframe) {
                                    return this.kf(keyframe);
                                }
                            },

                            set: {
                                writable: true,

                                value: function() {
                                    var animationRules = _slice.call(arguments);
                                    for (var _i2 = 0; _i2 < animationRules.length; _i2++) {
                                        var _animationProperties = animationRules[_i2];
                                        if (typeof _animationProperties === 'object') {
                                            _animationProperties = $.extend({
                                                name: '',
                                                duration: '',
                                                timingFunction: '',
                                                delay: '',
                                                iterationCount: '',
                                                direction: '',
                                                fillMode: ''
                                            }, _animationProperties);
                                            _animationProperties = [_animationProperties.name, _animationProperties.duration, _animationProperties.timingFunction, _animationProperties.delay, _animationProperties.iterationCount, _animationProperties.direction, _animationProperties.fillMode].join(' ');
                                        }
                                        if (typeof _animationProperties !== 'string') throw new Error('.set expects a string or an animation object');
                                        this.animations.push(_animationProperties);
                                    }
                                    return this;
                                }
                            },

                            query: {
                                writable: true,

                                value: function(selector) {
                                    this.$els = $(selector);
                                    return this;
                                }
                            },

                            reset: {
                                writable: true,

                                value: function() {
                                    this.animations = [];
                                    this.$els.css('animation', '');
                                    // reflow is needed for animation to restart properly
                                    this.$els.width();
                                return this.off('AnimationIteration').off('AnimationEnd');
                                }
                            },

                            clean: {
                                writable: true,

                                value: function() {
                                  $('style.animate').remove();
                                  _sheet = _generateSheet();
                                  return this.reset();
                                }
                            },

                            pause: {
                                writable: true,

                                value: function() {
                                  this.$els.css('animation-play-state', 'paused');
                                  return this;
                                }
                            },

                            resume: {
                                writable: true,

                                value: function() {
                                    this.$els.css('animation-play-state', 'running');
                                    return this;
                                }
                            },

                            play: {
                                writable: true,

                                value: function() {
                                    var _this = this;
                                    this.$els.css('animation', this.animations.join(','));
                                    this.resume();
                                    return Promise.all(this.animations.map( function() {
                                      return new Promise(function(resolve) {
                                        _this.on('AnimationEnd', resolve);
                                      });
                                    })).then( function() {
                                      return _this.reset();
                                    });
                                }
                            }
                        });

                        return Animate;
                    };
                };
            };
        };
    };
}(_eventPrefixes)(_sheet)(_kfs)(_prefix)(_generateSheet)();

exports.default = function(selector) {
	return new Animate(selector);
};



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"autoprefixer-core":3,"es6-promise":99,"jquery":107}]},{},["animate"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvZGF0YS9icm93c2Vycy5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9kYXRhL3ByZWZpeGVzLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL2xpYi9hdXRvcHJlZml4ZXIuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbGliL2Jyb3dzZXJzLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL2xpYi9kZWNsYXJhdGlvbi5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9saWIvaGFja3MvYWxpZ24tY29udGVudC5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9saWIvaGFja3MvYWxpZ24taXRlbXMuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbGliL2hhY2tzL2FsaWduLXNlbGYuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbGliL2hhY2tzL2JhY2tncm91bmQtc2l6ZS5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9saWIvaGFja3MvYm9yZGVyLWltYWdlLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL2xpYi9oYWNrcy9ib3JkZXItcmFkaXVzLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL2xpYi9oYWNrcy9icmVhay1pbnNpZGUuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbGliL2hhY2tzL2Rpc3BsYXktZmxleC5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9saWIvaGFja3MvZmlsbC1hdmFpbGFibGUuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbGliL2hhY2tzL2ZpbHRlci12YWx1ZS5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9saWIvaGFja3MvZmlsdGVyLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL2xpYi9oYWNrcy9mbGV4LWJhc2lzLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL2xpYi9oYWNrcy9mbGV4LWRpcmVjdGlvbi5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9saWIvaGFja3MvZmxleC1mbG93LmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL2xpYi9oYWNrcy9mbGV4LWdyb3cuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbGliL2hhY2tzL2ZsZXgtc2hyaW5rLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL2xpYi9oYWNrcy9mbGV4LXNwZWMuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbGliL2hhY2tzL2ZsZXgtd3JhcC5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9saWIvaGFja3MvZmxleC5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9saWIvaGFja3MvZnVsbHNjcmVlbi5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9saWIvaGFja3MvZ3JhZGllbnQuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbGliL2hhY2tzL2p1c3RpZnktY29udGVudC5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9saWIvaGFja3Mvb3JkZXIuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbGliL2hhY2tzL3BsYWNlaG9sZGVyLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL2xpYi9oYWNrcy90cmFuc2Zvcm0tZGVjbC5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9saWIvaGFja3MvdHJhbnNmb3JtLXZhbHVlLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL2xpYi9oYWNrcy90cmFuc2l0aW9uLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL2xpYi9pbmZvLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL2xpYi9rZXlmcmFtZXMuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbGliL29sZC1zZWxlY3Rvci5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9saWIvb2xkLXZhbHVlLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL2xpYi9wcmVmaXhlci5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9saWIvcHJlZml4ZXMuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbGliL3Byb2Nlc3Nvci5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9saWIvc2VsZWN0b3IuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbGliL3N1cHBvcnRzLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL2xpYi91dGlscy5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9saWIvdmFsdWUuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL2Nhbml1c2UtZGIvZGF0YS5qc29uIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL25vZGVfbW9kdWxlcy9jYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vYmFja2dyb3VuZC1pbWctb3B0cy5qc29uIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL25vZGVfbW9kdWxlcy9jYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vYm9yZGVyLWltYWdlLmpzb24iLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9ib3JkZXItcmFkaXVzLmpzb24iLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9jYWxjLmpzb24iLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9jc3MtYW5pbWF0aW9uLmpzb24iLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9jc3MtYm94c2hhZG93Lmpzb24iLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9jc3MtZmlsdGVycy5qc29uIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL25vZGVfbW9kdWxlcy9jYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vY3NzLWdyYWRpZW50cy5qc29uIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL25vZGVfbW9kdWxlcy9jYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vY3NzLWh5cGhlbnMuanNvbiIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9ub2RlX21vZHVsZXMvY2FuaXVzZS1kYi9mZWF0dXJlcy1qc29uL2Nzcy1tYXNrcy5qc29uIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL25vZGVfbW9kdWxlcy9jYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vY3NzLXBsYWNlaG9sZGVyLmpzb24iLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9jc3Mtc2VsZWN0aW9uLmpzb24iLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9jc3Mtc3RpY2t5Lmpzb24iLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9jc3MtdHJhbnNpdGlvbnMuanNvbiIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9ub2RlX21vZHVsZXMvY2FuaXVzZS1kYi9mZWF0dXJlcy1qc29uL2NzczMtYm94c2l6aW5nLmpzb24iLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9jc3MzLWN1cnNvcnMtbmV3ZXIuanNvbiIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9ub2RlX21vZHVsZXMvY2FuaXVzZS1kYi9mZWF0dXJlcy1qc29uL2NzczMtdGFic2l6ZS5qc29uIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL25vZGVfbW9kdWxlcy9jYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vZmxleGJveC5qc29uIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL25vZGVfbW9kdWxlcy9jYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vZm9udC1mZWF0dXJlLmpzb24iLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9mdWxsc2NyZWVuLmpzb24iLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9pbnRyaW5zaWMtd2lkdGguanNvbiIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9ub2RlX21vZHVsZXMvY2FuaXVzZS1kYi9mZWF0dXJlcy1qc29uL211bHRpY29sdW1uLmpzb24iLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9wb2ludGVyLmpzb24iLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi90ZXh0LWRlY29yYXRpb24uanNvbiIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9ub2RlX21vZHVsZXMvY2FuaXVzZS1kYi9mZWF0dXJlcy1qc29uL3RleHQtc2l6ZS1hZGp1c3QuanNvbiIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9ub2RlX21vZHVsZXMvY2FuaXVzZS1kYi9mZWF0dXJlcy1qc29uL3RyYW5zZm9ybXMyZC5qc29uIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL25vZGVfbW9kdWxlcy9jYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vdHJhbnNmb3JtczNkLmpzb24iLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi91c2VyLXNlbGVjdC1ub25lLmpzb24iLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2F0LXJ1bGUuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2NvbW1lbnQuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2NvbnRhaW5lci5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY3NzLXN5bnRheC1lcnJvci5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvZGVjbGFyYXRpb24uanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2xpc3QuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL21hcC1nZW5lcmF0b3IuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL25vZGUuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3BhcnNlLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9wb3N0Y3NzLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9wcmV2aW91cy1tYXAuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3Jlc3VsdC5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcm9vdC5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcnVsZS5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvdmVuZG9yLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL25vZGVfbW9kdWxlcy9wb3N0Y3NzL25vZGVfbW9kdWxlcy9qcy1iYXNlNjQvYmFzZTY0LmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL25vZGVfbW9kdWxlcy9wb3N0Y3NzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL25vZGVfbW9kdWxlcy9wb3N0Y3NzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwL2FycmF5LXNldC5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9ub2RlX21vZHVsZXMvcG9zdGNzcy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC9iYXNlNjQtdmxxLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL25vZGVfbW9kdWxlcy9wb3N0Y3NzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwL2Jhc2U2NC5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9ub2RlX21vZHVsZXMvcG9zdGNzcy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC9iaW5hcnktc2VhcmNoLmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2F1dG9wcmVmaXhlci1jb3JlL25vZGVfbW9kdWxlcy9wb3N0Y3NzL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwL3NvdXJjZS1tYXAtY29uc3VtZXIuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL3Bvc3Rjc3Mvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAvc291cmNlLW1hcC1nZW5lcmF0b3IuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL3Bvc3Rjc3Mvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAvc291cmNlLW5vZGUuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvYXV0b3ByZWZpeGVyLWNvcmUvbm9kZV9tb2R1bGVzL3Bvc3Rjc3Mvbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAvdXRpbC5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9ub2RlX21vZHVsZXMvcG9zdGNzcy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9ub2RlX21vZHVsZXMvYW1kZWZpbmUvYW1kZWZpbmUuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvZXM2LXByb21pc2UvZGlzdC9lczYtcHJvbWlzZS5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L2xpYi9fZW1wdHkuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvZ3J1bnQtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2dydW50LWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2J1ZmZlci9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2xpYi9iNjQuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvZ3J1bnQtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnVmZmVyL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2dydW50LWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2J1ZmZlci9ub2RlX21vZHVsZXMvaXMtYXJyYXkvaW5kZXguanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9ub2RlX21vZHVsZXMvZ3J1bnQtYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcGF0aC1icm93c2VyaWZ5L2luZGV4LmpzIiwiL2hvbWUvdGluY2hvL2xvY2FsL2FuaW1hdGUvbm9kZV9tb2R1bGVzL2dydW50LWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIi9ob21lL3RpbmNoby9sb2NhbC9hbmltYXRlL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCIvaG9tZS90aW5jaG8vbG9jYWwvYW5pbWF0ZS9saWIvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcFRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9HQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdE9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkdBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdE5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaE5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9OQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeE5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcE5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9OQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdk9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbk9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDck9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6WkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25qQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25GQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9MQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2paQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4WkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3U0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2OEJBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdCtSQSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNaLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9DLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFNUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFbkYsQ0FBQyxDQUFDO0NBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQ2IsQ0FBQztBQUNGLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7RUFDOUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNuQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNiLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNqQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFDRCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0lBQ3RCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNoQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDL0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckIsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUMxQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN0QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDeEMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNUO1FBQ0o7SUFDSjtJQUNBLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNySCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7O0FBRXJELENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNuQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3BCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNsQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3JCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUM1QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO3dCQUNkLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFOzRCQUNyQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQzs0QkFDcEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUMvQixDQUFDOzt3QkFFRCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTs0QkFDdkMsQ0FBQyxDQUFDLEVBQUU7Z0NBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Z0NBRWQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtrQ0FDbkMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0NBQ2pELENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQ0FDNUQsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29DQUMzQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztrQ0FDakQ7a0NBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQ0FDYjs0QkFDSixDQUFDOzs0QkFFRCxDQUFDLENBQUMsQ0FBQyxFQUFFO2dDQUNELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7O2dDQUVkLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7a0NBQ3pCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO29DQUNwRCxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQ0FDN0QsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQ0FDN0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztrQ0FDeEI7a0NBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQ0FDYjs0QkFDSixDQUFDOzs0QkFFRCxDQUFDLENBQUMsRUFBRTtnQ0FDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDOztnQ0FFZCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQ0FDdEIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQ0FDL0QsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0NBQ3hCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0NBQ3BCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO3dDQUNQLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0NBQ3BDO29DQUNBLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7b0NBQ3JFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7d0NBQ2hDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3Q0FDNUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0Q0FDM0UsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7d0NBQ3hCO3dDQUNBLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0NBQ3ZHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2tDQUNuQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7d0NBQ1YsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7NENBQy9CLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7d0NBQ3hEO3dDQUNBLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2tDQUNsQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0NBQzVDO29DQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQ0FDbkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0NBQ3ZELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29DQUNmLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0NBQ2Y7NEJBQ0osQ0FBQzs7NEJBRUQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0NBQ04sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Z0NBRWQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0NBQ2hCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQ0FDdEI7NEJBQ0osQ0FBQzs7NEJBRUQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0NBQ1QsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Z0NBRWQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0NBQ3RCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQ0FDNUI7NEJBQ0osQ0FBQzs7NEJBRUQsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQ0FDRCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDOztnQ0FFZCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO29DQUNkLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0NBQzNDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO3dDQUNsRCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dDQUM5QyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7NENBQzFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dEQUM1QixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dEQUNSLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztnREFDWixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Z0RBQ2xCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztnREFDVCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7Z0RBQ2xCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dEQUNiLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7NENBQ2YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzRDQUN4QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO3dDQUNwUTt3Q0FDQSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0NBQzdHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29DQUM5QztvQ0FDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dDQUNmOzRCQUNKLENBQUM7OzRCQUVELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dDQUNILENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7O2dDQUVkLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO29DQUN0QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQ0FDdkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQ0FDZjs0QkFDSixDQUFDOzs0QkFFRCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQ0FDSCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDOztnQ0FFZCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO29DQUNkLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO29DQUNwQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0NBQzlCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQ0FDcEQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dDQUNyQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0NBQ3pEOzRCQUNKLENBQUM7OzRCQUVELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dDQUNILENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7O2dDQUVkLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7a0NBQ2hCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2tDQUMzQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7a0NBQ3pCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dDQUNyQjs0QkFDSixDQUFDOzs0QkFFRCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQ0FDSCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDOztnQ0FFZCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2tDQUNoQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2tDQUMvQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dDQUNiOzRCQUNKLENBQUM7OzRCQUVELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0NBQ0osQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Z0NBRWQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQ0FDZCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0NBQ2hELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0NBQ2Y7NEJBQ0osQ0FBQzs7NEJBRUQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dDQUNGLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7O2dDQUVkLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0NBQ2QsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQ0FDaEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQ0FDckQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQ0FDYixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtzQ0FDakQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTt3Q0FDbkMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3NDQUNuQyxDQUFDLENBQUM7b0NBQ0osQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtzQ0FDbkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQ0FDdEIsQ0FBQyxDQUFDO2dDQUNOOzRCQUNKO3dCQUNKLENBQUMsQ0FBQzs7d0JBRUYsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDbEIsQ0FBQztnQkFDTCxDQUFDO1lBQ0wsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFMUQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNqQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsQ0FBQzs7QUFFRCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgY29udmVydCwgZGF0YSwgaW50ZXJ2YWxzLCBtYWpvciwgbmFtZSwgbmFtZXMsIG5vcm1hbGl6ZSwgX3JlZjtcblxuICBuYW1lcyA9IFsnZmlyZWZveCcsICdjaHJvbWUnLCAnc2FmYXJpJywgJ2lvc19zYWYnLCAnb3BlcmEnLCAnaWUnLCAnYmInLCAnYW5kcm9pZCddO1xuXG4gIG1ham9yID0gWydmaXJlZm94JywgJ2Nocm9tZScsICdzYWZhcmknLCAnaW9zX3NhZicsICdvcGVyYScsICdhbmRyb2lkJywgJ2llJywgJ2llX21vYiddO1xuXG4gIG5vcm1hbGl6ZSA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgcmV0dXJuIGFycmF5LnJldmVyc2UoKS5maWx0ZXIoZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfSk7XG4gIH07XG5cbiAgaW50ZXJ2YWxzID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICB2YXIgaSwgaW50ZXJ2YWwsIHJlc3VsdCwgc3BsaXRlZCwgc3ViLCBfaSwgX2xlbjtcbiAgICByZXN1bHQgPSBbXTtcbiAgICBmb3IgKF9pID0gMCwgX2xlbiA9IGFycmF5Lmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICBpbnRlcnZhbCA9IGFycmF5W19pXTtcbiAgICAgIHNwbGl0ZWQgPSBpbnRlcnZhbC5zcGxpdCgnLScpO1xuICAgICAgc3BsaXRlZCA9IHNwbGl0ZWQuc29ydCgpLnJldmVyc2UoKTtcbiAgICAgIHN1YiA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF9qLCBfbGVuMSwgX3Jlc3VsdHM7XG4gICAgICAgIF9yZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IHNwbGl0ZWQubGVuZ3RoOyBfaiA8IF9sZW4xOyBfaisrKSB7XG4gICAgICAgICAgaSA9IHNwbGl0ZWRbX2pdO1xuICAgICAgICAgIF9yZXN1bHRzLnB1c2goW2ksIGludGVydmFsLCBzcGxpdGVkLmxlbmd0aF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICAgIH0pKCk7XG4gICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KHN1Yik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgY29udmVydCA9IGZ1bmN0aW9uKG5hbWUsIGRhdGEpIHtcbiAgICB2YXIgZnV0dXJlLCByZXN1bHQsIHZlcnNpb25zO1xuICAgIGZ1dHVyZSA9IG5vcm1hbGl6ZShkYXRhLnZlcnNpb25zLnNsaWNlKC0zKSk7XG4gICAgdmVyc2lvbnMgPSBpbnRlcnZhbHMobm9ybWFsaXplKGRhdGEudmVyc2lvbnMuc2xpY2UoMCwgLTMpKSk7XG4gICAgcmVzdWx0ID0ge307XG4gICAgcmVzdWx0LnByZWZpeCA9IG5hbWUgPT09ICdvcGVyYScgPyAnLW8tJyA6IFwiLVwiICsgZGF0YS5wcmVmaXggKyBcIi1cIjtcbiAgICBpZiAobWFqb3IuaW5kZXhPZihuYW1lKSA9PT0gLTEpIHtcbiAgICAgIHJlc3VsdC5taW5vciA9IHRydWU7XG4gICAgfVxuICAgIGlmIChmdXR1cmUubGVuZ3RoKSB7XG4gICAgICByZXN1bHQuZnV0dXJlID0gZnV0dXJlO1xuICAgIH1cbiAgICByZXN1bHQudmVyc2lvbnMgPSB2ZXJzaW9ucy5tYXAoZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIGlbMF07XG4gICAgfSk7XG4gICAgcmVzdWx0LnBvcHVsYXJpdHkgPSB2ZXJzaW9ucy5tYXAoZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIGRhdGEudXNhZ2VfZ2xvYmFsW2lbMV1dIC8gaVsyXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzID0ge307XG5cbiAgX3JlZiA9IHJlcXVpcmUoJ2Nhbml1c2UtZGIvZGF0YScpLmFnZW50cztcbiAgZm9yIChuYW1lIGluIF9yZWYpIHtcbiAgICBkYXRhID0gX3JlZltuYW1lXTtcbiAgICBtb2R1bGUuZXhwb3J0c1tuYW1lXSA9IGNvbnZlcnQobmFtZSwgZGF0YSk7XG4gIH1cblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIGJyb3dzZXJzLCBmZWF0dXJlLCBtYXAsIHByZWZpeCwgdGV4dERlY29yYXRpb24sXG4gICAgX19zbGljZSA9IFtdLnNsaWNlO1xuXG4gIGJyb3dzZXJzID0gcmVxdWlyZSgnLi9icm93c2VycycpO1xuXG4gIGZlYXR1cmUgPSBmdW5jdGlvbihkYXRhLCBvcHRzLCBjYWxsYmFjaykge1xuICAgIHZhciBicm93c2VyLCBpbnRlcnZhbCwgbWF0Y2gsIG5lZWQsIHNvcnRlZCwgc3VwcG9ydCwgdmVyc2lvbiwgdmVyc2lvbnMsIF9pLCBfbGVuLCBfcmVmLCBfcmVmMSwgX3JlZjI7XG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgX3JlZiA9IFtvcHRzLCB7fV0sIGNhbGxiYWNrID0gX3JlZlswXSwgb3B0cyA9IF9yZWZbMV07XG4gICAgfVxuICAgIG1hdGNoID0gb3B0cy5mdWxsID8gL3lcXHN4KCR8XFxzKS8gOiAvXFxzeCgkfFxccykvO1xuICAgIG5lZWQgPSBbXTtcbiAgICBfcmVmMSA9IGRhdGEuc3RhdHM7XG4gICAgZm9yIChicm93c2VyIGluIF9yZWYxKSB7XG4gICAgICB2ZXJzaW9ucyA9IF9yZWYxW2Jyb3dzZXJdO1xuICAgICAgZm9yIChpbnRlcnZhbCBpbiB2ZXJzaW9ucykge1xuICAgICAgICBzdXBwb3J0ID0gdmVyc2lvbnNbaW50ZXJ2YWxdO1xuICAgICAgICBfcmVmMiA9IGludGVydmFsLnNwbGl0KCctJyk7XG4gICAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZjIubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgICB2ZXJzaW9uID0gX3JlZjJbX2ldO1xuICAgICAgICAgIGlmIChicm93c2Vyc1ticm93c2VyXSAmJiBzdXBwb3J0Lm1hdGNoKG1hdGNoKSkge1xuICAgICAgICAgICAgdmVyc2lvbiA9IHZlcnNpb24ucmVwbGFjZSgvXFwuMCQvLCAnJyk7XG4gICAgICAgICAgICBuZWVkLnB1c2goYnJvd3NlciArICcgJyArIHZlcnNpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzb3J0ZWQgPSBuZWVkLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgYSA9IGEuc3BsaXQoJyAnKTtcbiAgICAgIGIgPSBiLnNwbGl0KCcgJyk7XG4gICAgICBpZiAoYVswXSA+IGJbMF0pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9IGVsc2UgaWYgKGFbMF0gPCBiWzBdKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGFbMV0pIC0gcGFyc2VGbG9hdChiWzFdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2FsbGJhY2soc29ydGVkKTtcbiAgfTtcblxuICBtYXAgPSBmdW5jdGlvbihicm93c2VycywgY2FsbGJhY2spIHtcbiAgICB2YXIgYnJvd3NlciwgbmFtZSwgdmVyc2lvbiwgX2ksIF9sZW4sIF9yZWYsIF9yZXN1bHRzO1xuICAgIF9yZXN1bHRzID0gW107XG4gICAgZm9yIChfaSA9IDAsIF9sZW4gPSBicm93c2Vycy5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgYnJvd3NlciA9IGJyb3dzZXJzW19pXTtcbiAgICAgIF9yZWYgPSBicm93c2VyLnNwbGl0KCcgJyksIG5hbWUgPSBfcmVmWzBdLCB2ZXJzaW9uID0gX3JlZlsxXTtcbiAgICAgIHZlcnNpb24gPSBwYXJzZUZsb2F0KHZlcnNpb24pO1xuICAgICAgX3Jlc3VsdHMucHVzaChjYWxsYmFjayhicm93c2VyLCBuYW1lLCB2ZXJzaW9uKSk7XG4gICAgfVxuICAgIHJldHVybiBfcmVzdWx0cztcbiAgfTtcblxuICBwcmVmaXggPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGF0YSwgbmFtZSwgbmFtZXMsIF9pLCBfaiwgX2xlbiwgX3Jlc3VsdHM7XG4gICAgbmFtZXMgPSAyIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBfX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAwLCBfaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxKSA6IChfaSA9IDAsIFtdKSwgZGF0YSA9IGFyZ3VtZW50c1tfaSsrXTtcbiAgICBfcmVzdWx0cyA9IFtdO1xuICAgIGZvciAoX2ogPSAwLCBfbGVuID0gbmFtZXMubGVuZ3RoOyBfaiA8IF9sZW47IF9qKyspIHtcbiAgICAgIG5hbWUgPSBuYW1lc1tfal07XG4gICAgICBfcmVzdWx0cy5wdXNoKG1vZHVsZS5leHBvcnRzW25hbWVdID0gZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBfcmVzdWx0cztcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4gIGZlYXR1cmUocmVxdWlyZSgnY2FuaXVzZS1kYi9mZWF0dXJlcy1qc29uL2JvcmRlci1yYWRpdXMnKSwgZnVuY3Rpb24oYnJvd3NlcnMpIHtcbiAgICByZXR1cm4gcHJlZml4KCdib3JkZXItcmFkaXVzJywgJ2JvcmRlci10b3AtbGVmdC1yYWRpdXMnLCAnYm9yZGVyLXRvcC1yaWdodC1yYWRpdXMnLCAnYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXMnLCAnYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1cycsIHtcbiAgICAgIG1pc3Rha2VzOiBbJy1tcy0nXSxcbiAgICAgIGJyb3dzZXJzOiBicm93c2VycyxcbiAgICAgIHRyYW5zaXRpb246IHRydWVcbiAgICB9KTtcbiAgfSk7XG5cbiAgZmVhdHVyZShyZXF1aXJlKCdjYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vY3NzLWJveHNoYWRvdycpLCBmdW5jdGlvbihicm93c2Vycykge1xuICAgIHJldHVybiBwcmVmaXgoJ2JveC1zaGFkb3cnLCB7XG4gICAgICBicm93c2VyczogYnJvd3NlcnMsXG4gICAgICB0cmFuc2l0aW9uOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xuXG4gIGZlYXR1cmUocmVxdWlyZSgnY2FuaXVzZS1kYi9mZWF0dXJlcy1qc29uL2Nzcy1hbmltYXRpb24nKSwgZnVuY3Rpb24oYnJvd3NlcnMpIHtcbiAgICByZXR1cm4gcHJlZml4KCdhbmltYXRpb24nLCAnYW5pbWF0aW9uLW5hbWUnLCAnYW5pbWF0aW9uLWR1cmF0aW9uJywgJ2FuaW1hdGlvbi1kZWxheScsICdhbmltYXRpb24tZGlyZWN0aW9uJywgJ2FuaW1hdGlvbi1maWxsLW1vZGUnLCAnYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCcsICdhbmltYXRpb24tcGxheS1zdGF0ZScsICdhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uJywgJ0BrZXlmcmFtZXMnLCB7XG4gICAgICBicm93c2VyczogYnJvd3NlcnNcbiAgICB9KTtcbiAgfSk7XG5cbiAgZmVhdHVyZShyZXF1aXJlKCdjYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vY3NzLXRyYW5zaXRpb25zJyksIGZ1bmN0aW9uKGJyb3dzZXJzKSB7XG4gICAgcmV0dXJuIHByZWZpeCgndHJhbnNpdGlvbicsICd0cmFuc2l0aW9uLXByb3BlcnR5JywgJ3RyYW5zaXRpb24tZHVyYXRpb24nLCAndHJhbnNpdGlvbi1kZWxheScsICd0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbicsIHtcbiAgICAgIG1pc3Rha2VzOiBbJy1tcy0nXSxcbiAgICAgIGJyb3dzZXJzOiBicm93c2Vyc1xuICAgIH0pO1xuICB9KTtcblxuICBmZWF0dXJlKHJlcXVpcmUoJ2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi90cmFuc2Zvcm1zMmQnKSwgZnVuY3Rpb24oYnJvd3NlcnMpIHtcbiAgICByZXR1cm4gcHJlZml4KCd0cmFuc2Zvcm0nLCAndHJhbnNmb3JtLW9yaWdpbicsIHtcbiAgICAgIGJyb3dzZXJzOiBicm93c2VycyxcbiAgICAgIHRyYW5zaXRpb246IHRydWVcbiAgICB9KTtcbiAgfSk7XG5cbiAgZmVhdHVyZShyZXF1aXJlKCdjYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vdHJhbnNmb3JtczNkJyksIGZ1bmN0aW9uKGJyb3dzZXJzKSB7XG4gICAgcHJlZml4KCdwZXJzcGVjdGl2ZScsICdwZXJzcGVjdGl2ZS1vcmlnaW4nLCB7XG4gICAgICBicm93c2VyczogYnJvd3NlcnMsXG4gICAgICB0cmFuc2l0aW9uOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHByZWZpeCgndHJhbnNmb3JtLXN0eWxlJywgJ2JhY2tmYWNlLXZpc2liaWxpdHknLCB7XG4gICAgICBicm93c2VyczogYnJvd3NlcnNcbiAgICB9KTtcbiAgfSk7XG5cbiAgZmVhdHVyZShyZXF1aXJlKCdjYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vY3NzLWdyYWRpZW50cycpLCBmdW5jdGlvbihicm93c2Vycykge1xuICAgIGJyb3dzZXJzID0gbWFwKGJyb3dzZXJzLCBmdW5jdGlvbihicm93c2VyLCBuYW1lLCB2ZXJzaW9uKSB7XG4gICAgICBpZiAobmFtZSA9PT0gJ2FuZHJvaWQnICYmIHZlcnNpb24gPCA0IHx8IG5hbWUgPT09ICdpb3Nfc2FmJyAmJiB2ZXJzaW9uIDwgNSB8fCBuYW1lID09PSAnc2FmYXJpJyAmJiB2ZXJzaW9uIDwgNS4xKSB7XG4gICAgICAgIHJldHVybiBicm93c2VyICsgJyBvbGQnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGJyb3dzZXI7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHByZWZpeCgnbGluZWFyLWdyYWRpZW50JywgJ3JlcGVhdGluZy1saW5lYXItZ3JhZGllbnQnLCAncmFkaWFsLWdyYWRpZW50JywgJ3JlcGVhdGluZy1yYWRpYWwtZ3JhZGllbnQnLCB7XG4gICAgICBwcm9wczogWydiYWNrZ3JvdW5kJywgJ2JhY2tncm91bmQtaW1hZ2UnLCAnYm9yZGVyLWltYWdlJ10sXG4gICAgICBtaXN0YWtlczogWyctbXMtJ10sXG4gICAgICBicm93c2VyczogYnJvd3NlcnNcbiAgICB9KTtcbiAgfSk7XG5cbiAgZmVhdHVyZShyZXF1aXJlKCdjYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vY3NzMy1ib3hzaXppbmcnKSwgZnVuY3Rpb24oYnJvd3NlcnMpIHtcbiAgICByZXR1cm4gcHJlZml4KCdib3gtc2l6aW5nJywge1xuICAgICAgYnJvd3NlcnM6IGJyb3dzZXJzXG4gICAgfSk7XG4gIH0pO1xuXG4gIGZlYXR1cmUocmVxdWlyZSgnY2FuaXVzZS1kYi9mZWF0dXJlcy1qc29uL2Nzcy1maWx0ZXJzJyksIGZ1bmN0aW9uKGJyb3dzZXJzKSB7XG4gICAgcmV0dXJuIHByZWZpeCgnZmlsdGVyJywge1xuICAgICAgYnJvd3NlcnM6IGJyb3dzZXJzLFxuICAgICAgdHJhbnNpdGlvbjogdHJ1ZVxuICAgIH0pO1xuICB9KTtcblxuICBmZWF0dXJlKHJlcXVpcmUoJ2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9tdWx0aWNvbHVtbicpLCBmdW5jdGlvbihicm93c2Vycykge1xuICAgIHByZWZpeCgnY29sdW1ucycsICdjb2x1bW4td2lkdGgnLCAnY29sdW1uLWdhcCcsICdjb2x1bW4tcnVsZScsICdjb2x1bW4tcnVsZS1jb2xvcicsICdjb2x1bW4tcnVsZS13aWR0aCcsIHtcbiAgICAgIGJyb3dzZXJzOiBicm93c2VycyxcbiAgICAgIHRyYW5zaXRpb246IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gcHJlZml4KCdjb2x1bW4tY291bnQnLCAnY29sdW1uLXJ1bGUtc3R5bGUnLCAnY29sdW1uLXNwYW4nLCAnY29sdW1uLWZpbGwnLCAnYnJlYWstYmVmb3JlJywgJ2JyZWFrLWFmdGVyJywgJ2JyZWFrLWluc2lkZScsIHtcbiAgICAgIGJyb3dzZXJzOiBicm93c2Vyc1xuICAgIH0pO1xuICB9KTtcblxuICBmZWF0dXJlKHJlcXVpcmUoJ2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi91c2VyLXNlbGVjdC1ub25lJyksIGZ1bmN0aW9uKGJyb3dzZXJzKSB7XG4gICAgcmV0dXJuIHByZWZpeCgndXNlci1zZWxlY3QnLCB7XG4gICAgICBicm93c2VyczogYnJvd3NlcnNcbiAgICB9KTtcbiAgfSk7XG5cbiAgZmVhdHVyZShyZXF1aXJlKCdjYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vZmxleGJveCcpLCBmdW5jdGlvbihicm93c2Vycykge1xuICAgIGJyb3dzZXJzID0gbWFwKGJyb3dzZXJzLCBmdW5jdGlvbihicm93c2VyLCBuYW1lLCB2ZXJzaW9uKSB7XG4gICAgICBpZiAobmFtZSA9PT0gJ3NhZmFyaScgJiYgdmVyc2lvbiA8IDYuMSkge1xuICAgICAgICByZXR1cm4gYnJvd3NlciArICcgMjAwOSc7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdpb3Nfc2FmJyAmJiB2ZXJzaW9uIDwgNykge1xuICAgICAgICByZXR1cm4gYnJvd3NlciArICcgMjAwOSc7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdjaHJvbWUnICYmIHZlcnNpb24gPCAyMSkge1xuICAgICAgICByZXR1cm4gYnJvd3NlciArICcgMjAwOSc7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdhbmRyb2lkJyAmJiB2ZXJzaW9uIDwgNC40KSB7XG4gICAgICAgIHJldHVybiBicm93c2VyICsgJyAyMDA5JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBicm93c2VyO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHByZWZpeCgnZGlzcGxheS1mbGV4JywgJ2lubGluZS1mbGV4Jywge1xuICAgICAgcHJvcHM6IFsnZGlzcGxheSddLFxuICAgICAgYnJvd3NlcnM6IGJyb3dzZXJzXG4gICAgfSk7XG4gICAgcHJlZml4KCdmbGV4JywgJ2ZsZXgtZ3JvdycsICdmbGV4LXNocmluaycsICdmbGV4LWJhc2lzJywge1xuICAgICAgdHJhbnNpdGlvbjogdHJ1ZSxcbiAgICAgIGJyb3dzZXJzOiBicm93c2Vyc1xuICAgIH0pO1xuICAgIHJldHVybiBwcmVmaXgoJ2ZsZXgtZGlyZWN0aW9uJywgJ2ZsZXgtd3JhcCcsICdmbGV4LWZsb3cnLCAnanVzdGlmeS1jb250ZW50JywgJ29yZGVyJywgJ2FsaWduLWl0ZW1zJywgJ2FsaWduLXNlbGYnLCAnYWxpZ24tY29udGVudCcsIHtcbiAgICAgIGJyb3dzZXJzOiBicm93c2Vyc1xuICAgIH0pO1xuICB9KTtcblxuICBmZWF0dXJlKHJlcXVpcmUoJ2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9jYWxjJyksIGZ1bmN0aW9uKGJyb3dzZXJzKSB7XG4gICAgcmV0dXJuIHByZWZpeCgnY2FsYycsIHtcbiAgICAgIHByb3BzOiBbJyonXSxcbiAgICAgIGJyb3dzZXJzOiBicm93c2Vyc1xuICAgIH0pO1xuICB9KTtcblxuICBmZWF0dXJlKHJlcXVpcmUoJ2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9iYWNrZ3JvdW5kLWltZy1vcHRzJyksIGZ1bmN0aW9uKGJyb3dzZXJzKSB7XG4gICAgcmV0dXJuIHByZWZpeCgnYmFja2dyb3VuZC1jbGlwJywgJ2JhY2tncm91bmQtb3JpZ2luJywgJ2JhY2tncm91bmQtc2l6ZScsIHtcbiAgICAgIGJyb3dzZXJzOiBicm93c2Vyc1xuICAgIH0pO1xuICB9KTtcblxuICBmZWF0dXJlKHJlcXVpcmUoJ2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9mb250LWZlYXR1cmUnKSwgZnVuY3Rpb24oYnJvd3NlcnMpIHtcbiAgICByZXR1cm4gcHJlZml4KCdmb250LWZlYXR1cmUtc2V0dGluZ3MnLCAnZm9udC12YXJpYW50LWxpZ2F0dXJlcycsICdmb250LWxhbmd1YWdlLW92ZXJyaWRlJywgJ2ZvbnQta2VybmluZycsIHtcbiAgICAgIGJyb3dzZXJzOiBicm93c2Vyc1xuICAgIH0pO1xuICB9KTtcblxuICBmZWF0dXJlKHJlcXVpcmUoJ2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9ib3JkZXItaW1hZ2UnKSwgZnVuY3Rpb24oYnJvd3NlcnMpIHtcbiAgICByZXR1cm4gcHJlZml4KCdib3JkZXItaW1hZ2UnLCB7XG4gICAgICBicm93c2VyczogYnJvd3NlcnNcbiAgICB9KTtcbiAgfSk7XG5cbiAgZmVhdHVyZShyZXF1aXJlKCdjYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vY3NzLXNlbGVjdGlvbicpLCBmdW5jdGlvbihicm93c2Vycykge1xuICAgIHJldHVybiBwcmVmaXgoJzo6c2VsZWN0aW9uJywge1xuICAgICAgc2VsZWN0b3I6IHRydWUsXG4gICAgICBicm93c2VyczogYnJvd3NlcnNcbiAgICB9KTtcbiAgfSk7XG5cbiAgZmVhdHVyZShyZXF1aXJlKCdjYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vY3NzLXBsYWNlaG9sZGVyJyksIGZ1bmN0aW9uKGJyb3dzZXJzKSB7XG4gICAgYnJvd3NlcnMgPSBtYXAoYnJvd3NlcnMsIGZ1bmN0aW9uKGJyb3dzZXIsIG5hbWUsIHZlcnNpb24pIHtcbiAgICAgIGlmIChuYW1lID09PSAnZmlyZWZveCcgJiYgdmVyc2lvbiA8PSAxOCkge1xuICAgICAgICByZXR1cm4gYnJvd3NlciArICcgb2xkJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBicm93c2VyO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBwcmVmaXgoJzo6cGxhY2Vob2xkZXInLCB7XG4gICAgICBzZWxlY3RvcjogdHJ1ZSxcbiAgICAgIGJyb3dzZXJzOiBicm93c2Vyc1xuICAgIH0pO1xuICB9KTtcblxuICBmZWF0dXJlKHJlcXVpcmUoJ2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9jc3MtaHlwaGVucycpLCBmdW5jdGlvbihicm93c2Vycykge1xuICAgIHJldHVybiBwcmVmaXgoJ2h5cGhlbnMnLCB7XG4gICAgICBicm93c2VyczogYnJvd3NlcnNcbiAgICB9KTtcbiAgfSk7XG5cbiAgZmVhdHVyZShyZXF1aXJlKCdjYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vZnVsbHNjcmVlbicpLCBmdW5jdGlvbihicm93c2Vycykge1xuICAgIHJldHVybiBwcmVmaXgoJzpmdWxsc2NyZWVuJywge1xuICAgICAgc2VsZWN0b3I6IHRydWUsXG4gICAgICBicm93c2VyczogYnJvd3NlcnNcbiAgICB9KTtcbiAgfSk7XG5cbiAgZmVhdHVyZShyZXF1aXJlKCdjYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vY3NzMy10YWJzaXplJyksIGZ1bmN0aW9uKGJyb3dzZXJzKSB7XG4gICAgcmV0dXJuIHByZWZpeCgndGFiLXNpemUnLCB7XG4gICAgICBicm93c2VyczogYnJvd3NlcnNcbiAgICB9KTtcbiAgfSk7XG5cbiAgZmVhdHVyZShyZXF1aXJlKCdjYW5pdXNlLWRiL2ZlYXR1cmVzLWpzb24vaW50cmluc2ljLXdpZHRoJyksIGZ1bmN0aW9uKGJyb3dzZXJzKSB7XG4gICAgcmV0dXJuIHByZWZpeCgnbWF4LWNvbnRlbnQnLCAnbWluLWNvbnRlbnQnLCAnZml0LWNvbnRlbnQnLCAnZmlsbC1hdmFpbGFibGUnLCB7XG4gICAgICBwcm9wczogWyd3aWR0aCcsICdtaW4td2lkdGgnLCAnbWF4LXdpZHRoJywgJ2hlaWdodCcsICdtaW4taGVpZ2h0JywgJ21heC1oZWlnaHQnXSxcbiAgICAgIGJyb3dzZXJzOiBicm93c2Vyc1xuICAgIH0pO1xuICB9KTtcblxuICBmZWF0dXJlKHJlcXVpcmUoJ2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9jc3MzLWN1cnNvcnMtbmV3ZXInKSwgZnVuY3Rpb24oYnJvd3NlcnMpIHtcbiAgICBwcmVmaXgoJ3pvb20taW4nLCAnem9vbS1vdXQnLCB7XG4gICAgICBwcm9wczogWydjdXJzb3InXSxcbiAgICAgIGJyb3dzZXJzOiBicm93c2Vycy5jb25jYXQoWydjaHJvbWUgMyddKVxuICAgIH0pO1xuICAgIHJldHVybiBwcmVmaXgoJ2dyYWInLCAnZ3JhYmJpbmcnLCB7XG4gICAgICBwcm9wczogWydjdXJzb3InXSxcbiAgICAgIGJyb3dzZXJzOiBicm93c2Vycy5jb25jYXQoWydmaXJlZm94IDI0JywgJ2ZpcmVmb3ggMjUnLCAnZmlyZWZveCAyNiddKVxuICAgIH0pO1xuICB9KTtcblxuICBmZWF0dXJlKHJlcXVpcmUoJ2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9jc3Mtc3RpY2t5JyksIGZ1bmN0aW9uKGJyb3dzZXJzKSB7XG4gICAgcmV0dXJuIHByZWZpeCgnc3RpY2t5Jywge1xuICAgICAgcHJvcHM6IFsncG9zaXRpb24nXSxcbiAgICAgIGJyb3dzZXJzOiBicm93c2Vyc1xuICAgIH0pO1xuICB9KTtcblxuICBmZWF0dXJlKHJlcXVpcmUoJ2Nhbml1c2UtZGIvZmVhdHVyZXMtanNvbi9wb2ludGVyJyksIGZ1bmN0aW9uKGJyb3dzZXJzKSB7XG4gICAgcmV0dXJuIHByZWZpeCgndG91Y2gtYWN0aW9uJywge1xuICAgICAgYnJvd3NlcnM6IGJyb3dzZXJzXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRleHREZWNvcmF0aW9uID0gcmVxdWlyZSgnY2FuaXVzZS1kYi9mZWF0dXJlcy1qc29uL3RleHQtZGVjb3JhdGlvbicpO1xuXG4gIGZlYXR1cmUodGV4dERlY29yYXRpb24sIGZ1bmN0aW9uKGJyb3dzZXJzKSB7XG4gICAgcmV0dXJuIHByZWZpeCgndGV4dC1kZWNvcmF0aW9uLXN0eWxlJywge1xuICAgICAgYnJvd3NlcnM6IGJyb3dzZXJzXG4gICAgfSk7XG4gIH0pO1xuXG4gIGZlYXR1cmUodGV4dERlY29yYXRpb24sIHtcbiAgICBmdWxsOiB0cnVlXG4gIH0sIGZ1bmN0aW9uKGJyb3dzZXJzKSB7XG4gICAgcmV0dXJuIHByZWZpeCgndGV4dC1kZWNvcmF0aW9uLWxpbmUnLCAndGV4dC1kZWNvcmF0aW9uLWNvbG9yJywge1xuICAgICAgYnJvd3NlcnM6IGJyb3dzZXJzXG4gICAgfSk7XG4gIH0pO1xuXG4gIGZlYXR1cmUocmVxdWlyZSgnY2FuaXVzZS1kYi9mZWF0dXJlcy1qc29uL3RleHQtc2l6ZS1hZGp1c3QnKSwgZnVuY3Rpb24oYnJvd3NlcnMpIHtcbiAgICByZXR1cm4gcHJlZml4KCd0ZXh0LXNpemUtYWRqdXN0Jywge1xuICAgICAgYnJvd3NlcnM6IGJyb3dzZXJzXG4gICAgfSk7XG4gIH0pO1xuXG4gIGZlYXR1cmUocmVxdWlyZSgnY2FuaXVzZS1kYi9mZWF0dXJlcy1qc29uL2Nzcy1tYXNrcycpLCBmdW5jdGlvbihicm93c2Vycykge1xuICAgIHJldHVybiBwcmVmaXgoJ2NsaXAtcGF0aCcsICdtYXNrJywgJ21hc2stY2xpcCcsICdtYXNrLWNvbXBvc2l0ZScsICdtYXNrLWltYWdlJywgJ21hc2stb3JpZ2luJywgJ21hc2stcG9zaXRpb24nLCAnbWFzay1yZXBlYXQnLCAnbWFzay1zaXplJywge1xuICAgICAgYnJvd3NlcnM6IGJyb3dzZXJzXG4gICAgfSk7XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgQXV0b3ByZWZpeGVyLCBCcm93c2VycywgUHJlZml4ZXMsIGF1dG9wcmVmaXhlciwgaW5mb0NhY2hlLCBpc1BsYWluT2JqZWN0LCBwb3N0Y3NzLFxuICAgIF9fc2xpY2UgPSBbXS5zbGljZSxcbiAgICBfX2JpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9O1xuXG4gIHBvc3Rjc3MgPSByZXF1aXJlKCdwb3N0Y3NzJyk7XG5cbiAgQnJvd3NlcnMgPSByZXF1aXJlKCcuL2Jyb3dzZXJzJyk7XG5cbiAgUHJlZml4ZXMgPSByZXF1aXJlKCcuL3ByZWZpeGVzJyk7XG5cbiAgaW5mb0NhY2hlID0gbnVsbDtcblxuICBpc1BsYWluT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG4gIH07XG5cbiAgYXV0b3ByZWZpeGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJyb3dzZXJzLCBvcHRpb25zLCBwcmVmaXhlcywgcmVxcztcbiAgICByZXFzID0gMSA8PSBhcmd1bWVudHMubGVuZ3RoID8gX19zbGljZS5jYWxsKGFyZ3VtZW50cywgMCkgOiBbXTtcbiAgICBpZiAocmVxcy5sZW5ndGggPT09IDEgJiYgaXNQbGFpbk9iamVjdChyZXFzWzBdKSkge1xuICAgICAgb3B0aW9ucyA9IHJlcXNbMF07XG4gICAgICByZXFzID0gdm9pZCAwO1xuICAgIH0gZWxzZSBpZiAocmVxcy5sZW5ndGggPT09IDAgfHwgKHJlcXMubGVuZ3RoID09PSAxICYmIChyZXFzWzBdID09IG51bGwpKSkge1xuICAgICAgcmVxcyA9IHZvaWQgMDtcbiAgICB9IGVsc2UgaWYgKHJlcXMubGVuZ3RoIDw9IDIgJiYgKHJlcXNbMF0gaW5zdGFuY2VvZiBBcnJheSB8fCAocmVxc1swXSA9PSBudWxsKSkpIHtcbiAgICAgIG9wdGlvbnMgPSByZXFzWzFdO1xuICAgICAgcmVxcyA9IHJlcXNbMF07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcmVxc1tyZXFzLmxlbmd0aCAtIDFdID09PSAnb2JqZWN0Jykge1xuICAgICAgb3B0aW9ucyA9IHJlcXMucG9wKCk7XG4gICAgfVxuICAgIGlmICgob3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucy5icm93c2VycyA6IHZvaWQgMCkgIT0gbnVsbCkge1xuICAgICAgcmVxcyA9IG9wdGlvbnMuYnJvd3NlcnM7XG4gICAgfSBlbHNlIGlmIChyZXFzKSB7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29uc29sZSAhPT0gbnVsbCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ2F1dG9wcmVmaXhlcjogYXV0b3ByZWZpeGVyKGJyb3dzZXJzKSBpcyBkZXByZWNhdGVkICcgKyAnYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiAzLjEuICcgKyAnVXNlIGF1dG9wcmVmaXhlcih7IGJyb3dzZXJzOiBicm93c2VycyB9KS4nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlcXMgPT0gbnVsbCkge1xuICAgICAgcmVxcyA9IGF1dG9wcmVmaXhlcltcImRlZmF1bHRcIl07XG4gICAgfVxuICAgIGJyb3dzZXJzID0gbmV3IEJyb3dzZXJzKGF1dG9wcmVmaXhlci5kYXRhLmJyb3dzZXJzLCByZXFzKTtcbiAgICBwcmVmaXhlcyA9IG5ldyBQcmVmaXhlcyhhdXRvcHJlZml4ZXIuZGF0YS5wcmVmaXhlcywgYnJvd3NlcnMsIG9wdGlvbnMpO1xuICAgIHJldHVybiBuZXcgQXV0b3ByZWZpeGVyKHByZWZpeGVzLCBhdXRvcHJlZml4ZXIuZGF0YSk7XG4gIH07XG5cbiAgYXV0b3ByZWZpeGVyLmRhdGEgPSB7XG4gICAgYnJvd3NlcnM6IHJlcXVpcmUoJy4uL2RhdGEvYnJvd3NlcnMnKSxcbiAgICBwcmVmaXhlczogcmVxdWlyZSgnLi4vZGF0YS9wcmVmaXhlcycpXG4gIH07XG5cbiAgQXV0b3ByZWZpeGVyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIEF1dG9wcmVmaXhlcihwcmVmaXhlcywgZGF0YSwgb3B0aW9ucykge1xuICAgICAgdGhpcy5wcmVmaXhlcyA9IHByZWZpeGVzO1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMgOiB7fTtcbiAgICAgIHRoaXMucG9zdGNzcyA9IF9fYmluZCh0aGlzLnBvc3Rjc3MsIHRoaXMpO1xuICAgICAgdGhpcy5icm93c2VycyA9IHRoaXMucHJlZml4ZXMuYnJvd3NlcnMuc2VsZWN0ZWQ7XG4gICAgfVxuXG4gICAgQXV0b3ByZWZpeGVyLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24oc3RyLCBvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NvcigpLnByb2Nlc3Moc3RyLCBvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgQXV0b3ByZWZpeGVyLnByb3RvdHlwZS5wb3N0Y3NzID0gZnVuY3Rpb24oY3NzKSB7XG4gICAgICB0aGlzLnByZWZpeGVzLnByb2Nlc3Nvci5yZW1vdmUoY3NzKTtcbiAgICAgIHJldHVybiB0aGlzLnByZWZpeGVzLnByb2Nlc3Nvci5hZGQoY3NzKTtcbiAgICB9O1xuXG4gICAgQXV0b3ByZWZpeGVyLnByb3RvdHlwZS5pbmZvID0gZnVuY3Rpb24oKSB7XG4gICAgICBpbmZvQ2FjaGUgfHwgKGluZm9DYWNoZSA9IHJlcXVpcmUoJy4vaW5mbycpKTtcbiAgICAgIHJldHVybiBpbmZvQ2FjaGUodGhpcy5wcmVmaXhlcyk7XG4gICAgfTtcblxuICAgIEF1dG9wcmVmaXhlci5wcm90b3R5cGUucHJvY2Vzc29yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9jZXNzb3JDYWNoZSB8fCAodGhpcy5wcm9jZXNzb3JDYWNoZSA9IHBvc3Rjc3ModGhpcy5wb3N0Y3NzKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBBdXRvcHJlZml4ZXI7XG5cbiAgfSkoKTtcblxuICBhdXRvcHJlZml4ZXJbXCJkZWZhdWx0XCJdID0gWyc+IDElJywgJ2xhc3QgMiB2ZXJzaW9ucycsICdGaXJlZm94IEVTUicsICdPcGVyYSAxMi4xJ107XG5cbiAgYXV0b3ByZWZpeGVyLmxvYWREZWZhdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdENhY2hlIHx8ICh0aGlzLmRlZmF1bHRDYWNoZSA9IGF1dG9wcmVmaXhlcih7XG4gICAgICBicm93c2VyczogdGhpc1tcImRlZmF1bHRcIl1cbiAgICB9KSk7XG4gIH07XG5cbiAgYXV0b3ByZWZpeGVyLnByb2Nlc3MgPSBmdW5jdGlvbihzdHIsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmxvYWREZWZhdWx0KCkucHJvY2VzcyhzdHIsIG9wdGlvbnMpO1xuICB9O1xuXG4gIGF1dG9wcmVmaXhlci5wb3N0Y3NzID0gZnVuY3Rpb24oY3NzKSB7XG4gICAgcmV0dXJuIGF1dG9wcmVmaXhlci5sb2FkRGVmYXVsdCgpLnBvc3Rjc3MoY3NzKTtcbiAgfTtcblxuICBhdXRvcHJlZml4ZXIuaW5mbyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmxvYWREZWZhdWx0KCkuaW5mbygpO1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzID0gYXV0b3ByZWZpeGVyO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgQnJvd3NlcnMsIHV0aWxzO1xuXG4gIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4gIEJyb3dzZXJzID0gKGZ1bmN0aW9uKCkge1xuICAgIEJyb3dzZXJzLnByZWZpeGVzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZGF0YSwgaSwgbmFtZTtcbiAgICAgIGlmICh0aGlzLnByZWZpeGVzQ2FjaGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlZml4ZXNDYWNoZTtcbiAgICAgIH1cbiAgICAgIGRhdGEgPSByZXF1aXJlKCcuLi9kYXRhL2Jyb3dzZXJzJyk7XG4gICAgICByZXR1cm4gdGhpcy5wcmVmaXhlc0NhY2hlID0gdXRpbHMudW5pcSgoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfcmVzdWx0cztcbiAgICAgICAgX3Jlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChuYW1lIGluIGRhdGEpIHtcbiAgICAgICAgICBpID0gZGF0YVtuYW1lXTtcbiAgICAgICAgICBfcmVzdWx0cy5wdXNoKGkucHJlZml4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3Jlc3VsdHM7XG4gICAgICB9KSgpKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgQnJvd3NlcnMud2l0aFByZWZpeCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIXRoaXMucHJlZml4ZXNSZWdleHApIHtcbiAgICAgICAgdGhpcy5wcmVmaXhlc1JlZ2V4cCA9IFJlZ0V4cChcIlwiICsgKHRoaXMucHJlZml4ZXMoKS5qb2luKCd8JykpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnByZWZpeGVzUmVnZXhwLnRlc3QodmFsdWUpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBCcm93c2VycyhkYXRhLCByZXF1aXJlbWVudHMpIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICB0aGlzLnNlbGVjdGVkID0gdGhpcy5wYXJzZShyZXF1aXJlbWVudHMpO1xuICAgIH1cblxuICAgIEJyb3dzZXJzLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHJlcXVpcmVtZW50cykge1xuICAgICAgdmFyIHNlbGVjdGVkO1xuICAgICAgaWYgKCEocmVxdWlyZW1lbnRzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgIHJlcXVpcmVtZW50cyA9IFtyZXF1aXJlbWVudHNdO1xuICAgICAgfVxuICAgICAgc2VsZWN0ZWQgPSBbXTtcbiAgICAgIHJlcXVpcmVtZW50cy5tYXAoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihyZXEpIHtcbiAgICAgICAgICB2YXIgaSwgbWF0Y2gsIG5hbWUsIF9yZWY7XG4gICAgICAgICAgX3JlZiA9IF90aGlzLnJlcXVpcmVtZW50cztcbiAgICAgICAgICBmb3IgKG5hbWUgaW4gX3JlZikge1xuICAgICAgICAgICAgaSA9IF9yZWZbbmFtZV07XG4gICAgICAgICAgICBpZiAobWF0Y2ggPSByZXEubWF0Y2goaS5yZWdleHApKSB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkID0gc2VsZWN0ZWQuY29uY2F0KGkuc2VsZWN0LmFwcGx5KF90aGlzLCBtYXRjaC5zbGljZSgxKSkpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB1dGlscy5lcnJvcihcIlVua25vd24gYnJvd3NlciByZXF1aXJlbWVudCBgXCIgKyByZXEgKyBcImBcIik7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgICByZXR1cm4gdXRpbHMudW5pcShzZWxlY3RlZCk7XG4gICAgfTtcblxuICAgIEJyb3dzZXJzLnByb3RvdHlwZS5hbGlhc2VzID0ge1xuICAgICAgZng6ICdmaXJlZm94JyxcbiAgICAgIGZmOiAnZmlyZWZveCcsXG4gICAgICBpb3M6ICdpb3Nfc2FmJyxcbiAgICAgIGV4cGxvcmVyOiAnaWUnLFxuICAgICAgYmxhY2tiZXJyeTogJ2JiJyxcbiAgICAgIGV4cGxvcmVybW9iaWxlOiAnaWVfbW9iJyxcbiAgICAgIG9wZXJhbWluaTogJ29wX21pbmknLFxuICAgICAgb3BlcmFtb2JpbGU6ICdvcF9tb2InLFxuICAgICAgY2hyb21lYW5kcm9pZDogJ2FuZF9jaHInLFxuICAgICAgZmlyZWZveGFuZHJvaWQ6ICdhbmRfZmYnXG4gICAgfTtcblxuICAgIEJyb3dzZXJzLnByb3RvdHlwZS5yZXF1aXJlbWVudHMgPSB7XG4gICAgICBub25lOiB7XG4gICAgICAgIHJlZ2V4cDogL15ub25lJC9pLFxuICAgICAgICBzZWxlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJhdXRvcHJlZml4ZXIoXFwnbm9uZVxcJykgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSBcIiArICdyZW1vdmVkIGluIDMuMS4gJyArICdVc2UgYXV0b3ByZWZpeGVyKHsgYnJvd3NlcnM6IFtdIH0pJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGxhc3RWZXJzaW9uczoge1xuICAgICAgICByZWdleHA6IC9ebGFzdCAoXFxkKykgdmVyc2lvbnM/JC9pLFxuICAgICAgICBzZWxlY3Q6IGZ1bmN0aW9uKHZlcnNpb25zKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYnJvd3NlcnMoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEubWlub3IpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGRhdGEudmVyc2lvbnMuc2xpY2UoMCwgdmVyc2lvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbGFzdEJ5QnJvd3Nlcjoge1xuICAgICAgICByZWdleHA6IC9ebGFzdCAoXFxkKykgKFxcdyspIHZlcnNpb25zPyQvaSxcbiAgICAgICAgc2VsZWN0OiBmdW5jdGlvbih2ZXJzaW9ucywgYnJvd3Nlcikge1xuICAgICAgICAgIHZhciBkYXRhO1xuICAgICAgICAgIGRhdGEgPSB0aGlzLmJ5TmFtZShicm93c2VyKTtcbiAgICAgICAgICByZXR1cm4gZGF0YS52ZXJzaW9ucy5zbGljZSgwLCB2ZXJzaW9ucykubWFwKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgIHJldHVybiBcIlwiICsgZGF0YS5uYW1lICsgXCIgXCIgKyB2O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ2xvYmFsU3RhdGlzdGljczoge1xuICAgICAgICByZWdleHA6IC9ePiAoXFxkKyhcXC5cXGQrKT8pJSQvLFxuICAgICAgICBzZWxlY3Q6IGZ1bmN0aW9uKHBvcHVsYXJpdHkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5icm93c2VycyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5taW5vcikge1xuICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gZGF0YS52ZXJzaW9ucy5maWx0ZXIoZnVuY3Rpb24odmVyc2lvbiwgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLnBvcHVsYXJpdHlbaV0gPiBwb3B1bGFyaXR5O1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG5ld2VyVGhhbjoge1xuICAgICAgICByZWdleHA6IC9eKFxcdyspICg+PT8pXFxzKihbXFxkXFwuXSspLyxcbiAgICAgICAgc2VsZWN0OiBmdW5jdGlvbihicm93c2VyLCBzaWduLCB2ZXJzaW9uKSB7XG4gICAgICAgICAgdmFyIGRhdGEsIGZpbHRlcjtcbiAgICAgICAgICBkYXRhID0gdGhpcy5ieU5hbWUoYnJvd3Nlcik7XG4gICAgICAgICAgdmVyc2lvbiA9IHBhcnNlRmxvYXQodmVyc2lvbik7XG4gICAgICAgICAgaWYgKHNpZ24gPT09ICc+Jykge1xuICAgICAgICAgICAgZmlsdGVyID0gZnVuY3Rpb24odikge1xuICAgICAgICAgICAgICByZXR1cm4gdiA+IHZlcnNpb247XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSBpZiAoc2lnbiA9PT0gJz49Jykge1xuICAgICAgICAgICAgZmlsdGVyID0gZnVuY3Rpb24odikge1xuICAgICAgICAgICAgICByZXR1cm4gdiA+PSB2ZXJzaW9uO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGRhdGEudmVyc2lvbnMuZmlsdGVyKGZpbHRlcikubWFwKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgIHJldHVybiBcIlwiICsgZGF0YS5uYW1lICsgXCIgXCIgKyB2O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb2xkZXJUaGFuOiB7XG4gICAgICAgIHJlZ2V4cDogL14oXFx3KykgKDw9PylcXHMqKFtcXGRcXC5dKykvLFxuICAgICAgICBzZWxlY3Q6IGZ1bmN0aW9uKGJyb3dzZXIsIHNpZ24sIHZlcnNpb24pIHtcbiAgICAgICAgICB2YXIgZGF0YSwgZmlsdGVyO1xuICAgICAgICAgIGRhdGEgPSB0aGlzLmJ5TmFtZShicm93c2VyKTtcbiAgICAgICAgICB2ZXJzaW9uID0gcGFyc2VGbG9hdCh2ZXJzaW9uKTtcbiAgICAgICAgICBpZiAoc2lnbiA9PT0gJzwnKSB7XG4gICAgICAgICAgICBmaWx0ZXIgPSBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICAgIHJldHVybiB2IDwgdmVyc2lvbjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIGlmIChzaWduID09PSAnPD0nKSB7XG4gICAgICAgICAgICBmaWx0ZXIgPSBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICAgIHJldHVybiB2IDw9IHZlcnNpb247XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZGF0YS52ZXJzaW9ucy5maWx0ZXIoZmlsdGVyKS5tYXAoZnVuY3Rpb24odikge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyBkYXRhLm5hbWUgKyBcIiBcIiArIHY7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlc3I6IHtcbiAgICAgICAgcmVnZXhwOiAvXihmaXJlZm94fGZmfGZ4KSBlc3IkL2ksXG4gICAgICAgIHNlbGVjdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIFsnZmlyZWZveCAyNCddO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGlyZWN0OiB7XG4gICAgICAgIHJlZ2V4cDogL14oXFx3KykgKFtcXGRcXC5dKykkLyxcbiAgICAgICAgc2VsZWN0OiBmdW5jdGlvbihicm93c2VyLCB2ZXJzaW9uKSB7XG4gICAgICAgICAgdmFyIGRhdGEsIGZpcnN0LCBsYXN0O1xuICAgICAgICAgIGRhdGEgPSB0aGlzLmJ5TmFtZShicm93c2VyKTtcbiAgICAgICAgICB2ZXJzaW9uID0gcGFyc2VGbG9hdCh2ZXJzaW9uKTtcbiAgICAgICAgICBsYXN0ID0gZGF0YS5mdXR1cmUgPyBkYXRhLmZ1dHVyZVswXSA6IGRhdGEudmVyc2lvbnNbMF07XG4gICAgICAgICAgZmlyc3QgPSBkYXRhLnZlcnNpb25zW2RhdGEudmVyc2lvbnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKHZlcnNpb24gPiBsYXN0KSB7XG4gICAgICAgICAgICB2ZXJzaW9uID0gbGFzdDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHZlcnNpb24gPCBmaXJzdCkge1xuICAgICAgICAgICAgdmVyc2lvbiA9IGZpcnN0O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gW1wiXCIgKyBkYXRhLm5hbWUgKyBcIiBcIiArIHZlcnNpb25dO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIEJyb3dzZXJzLnByb3RvdHlwZS5icm93c2VycyA9IGZ1bmN0aW9uKGNyaXRlcmlhKSB7XG4gICAgICB2YXIgYnJvd3NlciwgZGF0YSwgc2VsZWN0ZWQsIHZlcnNpb25zLCBfcmVmO1xuICAgICAgc2VsZWN0ZWQgPSBbXTtcbiAgICAgIF9yZWYgPSB0aGlzLmRhdGE7XG4gICAgICBmb3IgKGJyb3dzZXIgaW4gX3JlZikge1xuICAgICAgICBkYXRhID0gX3JlZlticm93c2VyXTtcbiAgICAgICAgdmVyc2lvbnMgPSBjcml0ZXJpYShkYXRhKS5tYXAoZnVuY3Rpb24odmVyc2lvbikge1xuICAgICAgICAgIHJldHVybiBcIlwiICsgYnJvd3NlciArIFwiIFwiICsgdmVyc2lvbjtcbiAgICAgICAgfSk7XG4gICAgICAgIHNlbGVjdGVkID0gc2VsZWN0ZWQuY29uY2F0KHZlcnNpb25zKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxlY3RlZDtcbiAgICB9O1xuXG4gICAgQnJvd3NlcnMucHJvdG90eXBlLnByZWZpeCA9IGZ1bmN0aW9uKGJyb3dzZXIpIHtcbiAgICAgIHZhciBuYW1lLCB2ZXJzaW9uLCBfcmVmO1xuICAgICAgX3JlZiA9IGJyb3dzZXIuc3BsaXQoJyAnKSwgbmFtZSA9IF9yZWZbMF0sIHZlcnNpb24gPSBfcmVmWzFdO1xuICAgICAgaWYgKG5hbWUgPT09ICdvcGVyYScgJiYgcGFyc2VGbG9hdCh2ZXJzaW9uKSA+PSAxNSkge1xuICAgICAgICByZXR1cm4gJy13ZWJraXQtJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFbbmFtZV0ucHJlZml4O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBCcm93c2Vycy5wcm90b3R5cGUuaXNTZWxlY3RlZCA9IGZ1bmN0aW9uKGJyb3dzZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkLmluZGV4T2YoYnJvd3NlcikgIT09IC0xO1xuICAgIH07XG5cbiAgICBCcm93c2Vycy5wcm90b3R5cGUuYnlOYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGRhdGE7XG4gICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgbmFtZSA9IHRoaXMuYWxpYXNlc1tuYW1lXSB8fCBuYW1lO1xuICAgICAgZGF0YSA9IHRoaXMuZGF0YVtuYW1lXTtcbiAgICAgIGlmICghZGF0YSkge1xuICAgICAgICB1dGlscy5lcnJvcihcIlVua25vd24gYnJvd3NlciBcIiArIGJyb3dzZXIpO1xuICAgICAgfVxuICAgICAgZGF0YS5uYW1lID0gbmFtZTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH07XG5cbiAgICByZXR1cm4gQnJvd3NlcnM7XG5cbiAgfSkoKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IEJyb3dzZXJzO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgQnJvd3NlcnMsIERlY2xhcmF0aW9uLCBQcmVmaXhlciwgdXRpbHMsIHZlbmRvcixcbiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTtcblxuICBQcmVmaXhlciA9IHJlcXVpcmUoJy4vcHJlZml4ZXInKTtcblxuICBCcm93c2VycyA9IHJlcXVpcmUoJy4vYnJvd3NlcnMnKTtcblxuICB2ZW5kb3IgPSByZXF1aXJlKCdwb3N0Y3NzL2xpYi92ZW5kb3InKTtcblxuICB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuICBEZWNsYXJhdGlvbiA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGVjbGFyYXRpb24sIF9zdXBlcik7XG5cbiAgICBmdW5jdGlvbiBEZWNsYXJhdGlvbigpIHtcbiAgICAgIHJldHVybiBEZWNsYXJhdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBEZWNsYXJhdGlvbi5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbihkZWNsKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgRGVjbGFyYXRpb24ucHJvdG90eXBlLnByZWZpeGVkID0gZnVuY3Rpb24ocHJvcCwgcHJlZml4KSB7XG4gICAgICByZXR1cm4gcHJlZml4ICsgcHJvcDtcbiAgICB9O1xuXG4gICAgRGVjbGFyYXRpb24ucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIHJldHVybiBwcm9wO1xuICAgIH07XG5cbiAgICBEZWNsYXJhdGlvbi5wcm90b3R5cGUub3RoZXJQcmVmaXhlcyA9IGZ1bmN0aW9uKHZhbHVlLCBwcmVmaXgpIHtcbiAgICAgIHZhciBvdGhlciwgX2ksIF9sZW4sIF9yZWY7XG4gICAgICBfcmVmID0gQnJvd3NlcnMucHJlZml4ZXMoKTtcbiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICBvdGhlciA9IF9yZWZbX2ldO1xuICAgICAgICBpZiAob3RoZXIgPT09IHByZWZpeCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKG90aGVyKSAhPT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBEZWNsYXJhdGlvbi5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oZGVjbCwgcHJlZml4KSB7XG4gICAgICBkZWNsLnByb3AgPSB0aGlzLnByZWZpeGVkKGRlY2wucHJvcCwgcHJlZml4KTtcbiAgICAgIHJldHVybiBkZWNsO1xuICAgIH07XG5cbiAgICBEZWNsYXJhdGlvbi5wcm90b3R5cGUubmVlZENhc2NhZGUgPSBmdW5jdGlvbihkZWNsKSB7XG4gICAgICByZXR1cm4gZGVjbC5fYXV0b3ByZWZpeGVyQ2FzY2FkZSB8fCAoZGVjbC5fYXV0b3ByZWZpeGVyQ2FzY2FkZSA9IHRoaXMuYWxsLm9wdGlvbnMuY2FzY2FkZSAhPT0gZmFsc2UgJiYgZGVjbC5iZWZvcmUuaW5kZXhPZihcIlxcblwiKSAhPT0gLTEpO1xuICAgIH07XG5cbiAgICBEZWNsYXJhdGlvbi5wcm90b3R5cGUubWF4UHJlZml4ZWQgPSBmdW5jdGlvbihwcmVmaXhlcywgZGVjbCkge1xuICAgICAgdmFyIG1heCwgcHJlZml4LCBfaSwgX2xlbjtcbiAgICAgIGlmIChkZWNsLl9hdXRvcHJlZml4ZXJNYXgpIHtcbiAgICAgICAgcmV0dXJuIGRlY2wuX2F1dG9wcmVmaXhlck1heDtcbiAgICAgIH1cbiAgICAgIG1heCA9IDA7XG4gICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IHByZWZpeGVzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgIHByZWZpeCA9IHByZWZpeGVzW19pXTtcbiAgICAgICAgcHJlZml4ID0gdXRpbHMucmVtb3ZlTm90ZShwcmVmaXgpO1xuICAgICAgICBpZiAocHJlZml4Lmxlbmd0aCA+IG1heCkge1xuICAgICAgICAgIG1heCA9IHByZWZpeC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWNsLl9hdXRvcHJlZml4ZXJNYXggPSBtYXg7XG4gICAgfTtcblxuICAgIERlY2xhcmF0aW9uLnByb3RvdHlwZS5jYWxjQmVmb3JlID0gZnVuY3Rpb24ocHJlZml4ZXMsIGRlY2wsIHByZWZpeCkge1xuICAgICAgdmFyIGJlZm9yZSwgZGlmZiwgaSwgbWF4LCBfaTtcbiAgICAgIGlmIChwcmVmaXggPT0gbnVsbCkge1xuICAgICAgICBwcmVmaXggPSAnJztcbiAgICAgIH1cbiAgICAgIGJlZm9yZSA9IGRlY2wuYmVmb3JlO1xuICAgICAgbWF4ID0gdGhpcy5tYXhQcmVmaXhlZChwcmVmaXhlcywgZGVjbCk7XG4gICAgICBkaWZmID0gbWF4IC0gdXRpbHMucmVtb3ZlTm90ZShwcmVmaXgpLmxlbmd0aDtcbiAgICAgIGZvciAoaSA9IF9pID0gMDsgMCA8PSBkaWZmID8gX2kgPCBkaWZmIDogX2kgPiBkaWZmOyBpID0gMCA8PSBkaWZmID8gKytfaSA6IC0tX2kpIHtcbiAgICAgICAgYmVmb3JlICs9ICcgJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBiZWZvcmU7XG4gICAgfTtcblxuICAgIERlY2xhcmF0aW9uLnByb3RvdHlwZS5yZXN0b3JlQmVmb3JlID0gZnVuY3Rpb24oZGVjbCkge1xuICAgICAgdmFyIGxpbmVzLCBtaW47XG4gICAgICBsaW5lcyA9IGRlY2wuYmVmb3JlLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgbWluID0gbGluZXNbbGluZXMubGVuZ3RoIC0gMV07XG4gICAgICB0aGlzLmFsbC5ncm91cChkZWNsKS51cChmdW5jdGlvbihwcmVmaXhlZCkge1xuICAgICAgICB2YXIgYXJyYXksIGxhc3Q7XG4gICAgICAgIGFycmF5ID0gcHJlZml4ZWQuYmVmb3JlLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICBsYXN0ID0gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChsYXN0Lmxlbmd0aCA8IG1pbi5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gbWluID0gbGFzdDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXSA9IG1pbjtcbiAgICAgIHJldHVybiBkZWNsLmJlZm9yZSA9IGxpbmVzLmpvaW4oXCJcXG5cIik7XG4gICAgfTtcblxuICAgIERlY2xhcmF0aW9uLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbihkZWNsLCBwcmVmaXgsIHByZWZpeGVzKSB7XG4gICAgICB2YXIgY2xvbmVkO1xuICAgICAgY2xvbmVkID0gdGhpcy5zZXQodGhpcy5jbG9uZShkZWNsKSwgcHJlZml4KTtcbiAgICAgIGlmICghY2xvbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZWRDYXNjYWRlKGRlY2wpKSB7XG4gICAgICAgIGNsb25lZC5iZWZvcmUgPSB0aGlzLmNhbGNCZWZvcmUocHJlZml4ZXMsIGRlY2wsIHByZWZpeCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVjbC5wYXJlbnQuaW5zZXJ0QmVmb3JlKGRlY2wsIGNsb25lZCk7XG4gICAgfTtcblxuICAgIERlY2xhcmF0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihkZWNsLCBwcmVmaXgsIHByZWZpeGVzKSB7XG4gICAgICB2YXIgYWxyZWFkeSwgcHJlZml4ZWQ7XG4gICAgICBwcmVmaXhlZCA9IHRoaXMucHJlZml4ZWQoZGVjbC5wcm9wLCBwcmVmaXgpO1xuICAgICAgYWxyZWFkeSA9IHRoaXMuYWxsLmdyb3VwKGRlY2wpLnVwKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgcmV0dXJuIGkucHJvcCA9PT0gcHJlZml4ZWQ7XG4gICAgICB9KTtcbiAgICAgIGFscmVhZHkgfHwgKGFscmVhZHkgPSB0aGlzLmFsbC5ncm91cChkZWNsKS5kb3duKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgcmV0dXJuIGkucHJvcCA9PT0gcHJlZml4ZWQ7XG4gICAgICB9KSk7XG4gICAgICBpZiAoYWxyZWFkeSB8fCB0aGlzLm90aGVyUHJlZml4ZXMoZGVjbC52YWx1ZSwgcHJlZml4KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5pbnNlcnQoZGVjbCwgcHJlZml4LCBwcmVmaXhlcyk7XG4gICAgfTtcblxuICAgIERlY2xhcmF0aW9uLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24oZGVjbCkge1xuICAgICAgdmFyIHByZWZpeGVzO1xuICAgICAgaWYgKHRoaXMubmVlZENhc2NhZGUoZGVjbCkpIHtcbiAgICAgICAgcHJlZml4ZXMgPSBEZWNsYXJhdGlvbi5fX3N1cGVyX18ucHJvY2Vzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBpZiAocHJlZml4ZXMgIT0gbnVsbCA/IHByZWZpeGVzLmxlbmd0aCA6IHZvaWQgMCkge1xuICAgICAgICAgIHRoaXMucmVzdG9yZUJlZm9yZShkZWNsKTtcbiAgICAgICAgICByZXR1cm4gZGVjbC5iZWZvcmUgPSB0aGlzLmNhbGNCZWZvcmUocHJlZml4ZXMsIGRlY2wpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gRGVjbGFyYXRpb24uX19zdXBlcl9fLnByb2Nlc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgRGVjbGFyYXRpb24ucHJvdG90eXBlLm9sZCA9IGZ1bmN0aW9uKHByb3AsIHByZWZpeCkge1xuICAgICAgcmV0dXJuIFt0aGlzLnByZWZpeGVkKHByb3AsIHByZWZpeCldO1xuICAgIH07XG5cbiAgICByZXR1cm4gRGVjbGFyYXRpb247XG5cbiAgfSkoUHJlZml4ZXIpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gRGVjbGFyYXRpb247XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBBbGlnbkNvbnRlbnQsIERlY2xhcmF0aW9uLCBmbGV4U3BlYyxcbiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTtcblxuICBmbGV4U3BlYyA9IHJlcXVpcmUoJy4vZmxleC1zcGVjJyk7XG5cbiAgRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuLi9kZWNsYXJhdGlvbicpO1xuXG4gIEFsaWduQ29udGVudCA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQWxpZ25Db250ZW50LCBfc3VwZXIpO1xuXG4gICAgZnVuY3Rpb24gQWxpZ25Db250ZW50KCkge1xuICAgICAgcmV0dXJuIEFsaWduQ29udGVudC5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBBbGlnbkNvbnRlbnQubmFtZXMgPSBbJ2FsaWduLWNvbnRlbnQnLCAnZmxleC1saW5lLXBhY2snXTtcblxuICAgIEFsaWduQ29udGVudC5vbGRWYWx1ZXMgPSB7XG4gICAgICAnZmxleC1lbmQnOiAnZW5kJyxcbiAgICAgICdmbGV4LXN0YXJ0JzogJ3N0YXJ0JyxcbiAgICAgICdzcGFjZS1iZXR3ZWVuJzogJ2p1c3RpZnknLFxuICAgICAgJ3NwYWNlLWFyb3VuZCc6ICdkaXN0cmlidXRlJ1xuICAgIH07XG5cbiAgICBBbGlnbkNvbnRlbnQucHJvdG90eXBlLnByZWZpeGVkID0gZnVuY3Rpb24ocHJvcCwgcHJlZml4KSB7XG4gICAgICB2YXIgc3BlYywgX3JlZjtcbiAgICAgIF9yZWYgPSBmbGV4U3BlYyhwcmVmaXgpLCBzcGVjID0gX3JlZlswXSwgcHJlZml4ID0gX3JlZlsxXTtcbiAgICAgIGlmIChzcGVjID09PSAyMDEyKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyAnZmxleC1saW5lLXBhY2snO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEFsaWduQ29udGVudC5fX3N1cGVyX18ucHJlZml4ZWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQWxpZ25Db250ZW50LnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbihwcm9wKSB7XG4gICAgICByZXR1cm4gJ2FsaWduLWNvbnRlbnQnO1xuICAgIH07XG5cbiAgICBBbGlnbkNvbnRlbnQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGRlY2wsIHByZWZpeCkge1xuICAgICAgdmFyIHNwZWM7XG4gICAgICBzcGVjID0gZmxleFNwZWMocHJlZml4KVswXTtcbiAgICAgIGlmIChzcGVjID09PSAyMDEyKSB7XG4gICAgICAgIGRlY2wudmFsdWUgPSBBbGlnbkNvbnRlbnQub2xkVmFsdWVzW2RlY2wudmFsdWVdIHx8IGRlY2wudmFsdWU7XG4gICAgICAgIHJldHVybiBBbGlnbkNvbnRlbnQuX19zdXBlcl9fLnNldC5jYWxsKHRoaXMsIGRlY2wsIHByZWZpeCk7XG4gICAgICB9IGVsc2UgaWYgKHNwZWMgPT09ICdmaW5hbCcpIHtcbiAgICAgICAgcmV0dXJuIEFsaWduQ29udGVudC5fX3N1cGVyX18uc2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBBbGlnbkNvbnRlbnQ7XG5cbiAgfSkoRGVjbGFyYXRpb24pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gQWxpZ25Db250ZW50O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgQWxpZ25JdGVtcywgRGVjbGFyYXRpb24sIGZsZXhTcGVjLFxuICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LFxuICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9O1xuXG4gIGZsZXhTcGVjID0gcmVxdWlyZSgnLi9mbGV4LXNwZWMnKTtcblxuICBEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4uL2RlY2xhcmF0aW9uJyk7XG5cbiAgQWxpZ25JdGVtcyA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQWxpZ25JdGVtcywgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIEFsaWduSXRlbXMoKSB7XG4gICAgICByZXR1cm4gQWxpZ25JdGVtcy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBBbGlnbkl0ZW1zLm5hbWVzID0gWydhbGlnbi1pdGVtcycsICdmbGV4LWFsaWduJywgJ2JveC1hbGlnbiddO1xuXG4gICAgQWxpZ25JdGVtcy5vbGRWYWx1ZXMgPSB7XG4gICAgICAnZmxleC1lbmQnOiAnZW5kJyxcbiAgICAgICdmbGV4LXN0YXJ0JzogJ3N0YXJ0J1xuICAgIH07XG5cbiAgICBBbGlnbkl0ZW1zLnByb3RvdHlwZS5wcmVmaXhlZCA9IGZ1bmN0aW9uKHByb3AsIHByZWZpeCkge1xuICAgICAgdmFyIHNwZWMsIF9yZWY7XG4gICAgICBfcmVmID0gZmxleFNwZWMocHJlZml4KSwgc3BlYyA9IF9yZWZbMF0sIHByZWZpeCA9IF9yZWZbMV07XG4gICAgICBpZiAoc3BlYyA9PT0gMjAwOSkge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ2JveC1hbGlnbic7XG4gICAgICB9IGVsc2UgaWYgKHNwZWMgPT09IDIwMTIpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdmbGV4LWFsaWduJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBBbGlnbkl0ZW1zLl9fc3VwZXJfXy5wcmVmaXhlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBBbGlnbkl0ZW1zLnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbihwcm9wKSB7XG4gICAgICByZXR1cm4gJ2FsaWduLWl0ZW1zJztcbiAgICB9O1xuXG4gICAgQWxpZ25JdGVtcy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oZGVjbCwgcHJlZml4KSB7XG4gICAgICB2YXIgc3BlYztcbiAgICAgIHNwZWMgPSBmbGV4U3BlYyhwcmVmaXgpWzBdO1xuICAgICAgaWYgKHNwZWMgPT09IDIwMDkgfHwgc3BlYyA9PT0gMjAxMikge1xuICAgICAgICBkZWNsLnZhbHVlID0gQWxpZ25JdGVtcy5vbGRWYWx1ZXNbZGVjbC52YWx1ZV0gfHwgZGVjbC52YWx1ZTtcbiAgICAgICAgcmV0dXJuIEFsaWduSXRlbXMuX19zdXBlcl9fLnNldC5jYWxsKHRoaXMsIGRlY2wsIHByZWZpeCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gQWxpZ25JdGVtcy5fX3N1cGVyX18uc2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBBbGlnbkl0ZW1zO1xuXG4gIH0pKERlY2xhcmF0aW9uKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IEFsaWduSXRlbXM7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBBbGlnblNlbGYsIERlY2xhcmF0aW9uLCBmbGV4U3BlYyxcbiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTtcblxuICBmbGV4U3BlYyA9IHJlcXVpcmUoJy4vZmxleC1zcGVjJyk7XG5cbiAgRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuLi9kZWNsYXJhdGlvbicpO1xuXG4gIEFsaWduU2VsZiA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQWxpZ25TZWxmLCBfc3VwZXIpO1xuXG4gICAgZnVuY3Rpb24gQWxpZ25TZWxmKCkge1xuICAgICAgcmV0dXJuIEFsaWduU2VsZi5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBBbGlnblNlbGYubmFtZXMgPSBbJ2FsaWduLXNlbGYnLCAnZmxleC1pdGVtLWFsaWduJ107XG5cbiAgICBBbGlnblNlbGYub2xkVmFsdWVzID0ge1xuICAgICAgJ2ZsZXgtZW5kJzogJ2VuZCcsXG4gICAgICAnZmxleC1zdGFydCc6ICdzdGFydCdcbiAgICB9O1xuXG4gICAgQWxpZ25TZWxmLnByb3RvdHlwZS5wcmVmaXhlZCA9IGZ1bmN0aW9uKHByb3AsIHByZWZpeCkge1xuICAgICAgdmFyIHNwZWMsIF9yZWY7XG4gICAgICBfcmVmID0gZmxleFNwZWMocHJlZml4KSwgc3BlYyA9IF9yZWZbMF0sIHByZWZpeCA9IF9yZWZbMV07XG4gICAgICBpZiAoc3BlYyA9PT0gMjAxMikge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ2ZsZXgtaXRlbS1hbGlnbic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gQWxpZ25TZWxmLl9fc3VwZXJfXy5wcmVmaXhlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBBbGlnblNlbGYucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIHJldHVybiAnYWxpZ24tc2VsZic7XG4gICAgfTtcblxuICAgIEFsaWduU2VsZi5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oZGVjbCwgcHJlZml4KSB7XG4gICAgICB2YXIgc3BlYztcbiAgICAgIHNwZWMgPSBmbGV4U3BlYyhwcmVmaXgpWzBdO1xuICAgICAgaWYgKHNwZWMgPT09IDIwMTIpIHtcbiAgICAgICAgZGVjbC52YWx1ZSA9IEFsaWduU2VsZi5vbGRWYWx1ZXNbZGVjbC52YWx1ZV0gfHwgZGVjbC52YWx1ZTtcbiAgICAgICAgcmV0dXJuIEFsaWduU2VsZi5fX3N1cGVyX18uc2V0LmNhbGwodGhpcywgZGVjbCwgcHJlZml4KTtcbiAgICAgIH0gZWxzZSBpZiAoc3BlYyA9PT0gJ2ZpbmFsJykge1xuICAgICAgICByZXR1cm4gQWxpZ25TZWxmLl9fc3VwZXJfXy5zZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIEFsaWduU2VsZjtcblxuICB9KShEZWNsYXJhdGlvbik7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBBbGlnblNlbGY7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBCYWNrZ3JvdW5kU2l6ZSwgRGVjbGFyYXRpb24sXG4gICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07XG5cbiAgRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuLi9kZWNsYXJhdGlvbicpO1xuXG4gIEJhY2tncm91bmRTaXplID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCYWNrZ3JvdW5kU2l6ZSwgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIEJhY2tncm91bmRTaXplKCkge1xuICAgICAgcmV0dXJuIEJhY2tncm91bmRTaXplLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIEJhY2tncm91bmRTaXplLm5hbWVzID0gWydiYWNrZ3JvdW5kLXNpemUnXTtcblxuICAgIEJhY2tncm91bmRTaXplLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihkZWNsLCBwcmVmaXgpIHtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHZhbHVlID0gZGVjbC52YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKHByZWZpeCA9PT0gJy13ZWJraXQtJyAmJiB2YWx1ZS5pbmRleE9mKCcgJykgPT09IC0xICYmIHZhbHVlICE9PSAnY29udGFpbicgJiYgdmFsdWUgIT09ICdjb3ZlcicpIHtcbiAgICAgICAgZGVjbC52YWx1ZSA9IGRlY2wudmFsdWUgKyAnICcgKyBkZWNsLnZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEJhY2tncm91bmRTaXplLl9fc3VwZXJfXy5zZXQuY2FsbCh0aGlzLCBkZWNsLCBwcmVmaXgpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQmFja2dyb3VuZFNpemU7XG5cbiAgfSkoRGVjbGFyYXRpb24pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gQmFja2dyb3VuZFNpemU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBCb3JkZXJJbWFnZSwgRGVjbGFyYXRpb24sXG4gICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07XG5cbiAgRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuLi9kZWNsYXJhdGlvbicpO1xuXG4gIEJvcmRlckltYWdlID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCb3JkZXJJbWFnZSwgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIEJvcmRlckltYWdlKCkge1xuICAgICAgcmV0dXJuIEJvcmRlckltYWdlLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIEJvcmRlckltYWdlLm5hbWVzID0gWydib3JkZXItaW1hZ2UnXTtcblxuICAgIEJvcmRlckltYWdlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihkZWNsLCBwcmVmaXgpIHtcbiAgICAgIGRlY2wudmFsdWUgPSBkZWNsLnZhbHVlLnJlcGxhY2UoL1xccytmaWxsKFxccykvLCAnJDEnKTtcbiAgICAgIHJldHVybiBCb3JkZXJJbWFnZS5fX3N1cGVyX18uc2V0LmNhbGwodGhpcywgZGVjbCwgcHJlZml4KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJvcmRlckltYWdlO1xuXG4gIH0pKERlY2xhcmF0aW9uKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IEJvcmRlckltYWdlO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgQm9yZGVyUmFkaXVzLCBEZWNsYXJhdGlvbixcbiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTtcblxuICBEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4uL2RlY2xhcmF0aW9uJyk7XG5cbiAgQm9yZGVyUmFkaXVzID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIHZhciBob3IsIG1vemlsbGEsIG5vcm1hbCwgdmVyLCBfaSwgX2osIF9sZW4sIF9sZW4xLCBfcmVmLCBfcmVmMTtcblxuICAgIF9fZXh0ZW5kcyhCb3JkZXJSYWRpdXMsIF9zdXBlcik7XG5cbiAgICBmdW5jdGlvbiBCb3JkZXJSYWRpdXMoKSB7XG4gICAgICByZXR1cm4gQm9yZGVyUmFkaXVzLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIEJvcmRlclJhZGl1cy5uYW1lcyA9IFsnYm9yZGVyLXJhZGl1cyddO1xuXG4gICAgQm9yZGVyUmFkaXVzLnRvTW96aWxsYSA9IHt9O1xuXG4gICAgQm9yZGVyUmFkaXVzLnRvTm9ybWFsID0ge307XG5cbiAgICBfcmVmID0gWyd0b3AnLCAnYm90dG9tJ107XG4gICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICB2ZXIgPSBfcmVmW19pXTtcbiAgICAgIF9yZWYxID0gWydsZWZ0JywgJ3JpZ2h0J107XG4gICAgICBmb3IgKF9qID0gMCwgX2xlbjEgPSBfcmVmMS5sZW5ndGg7IF9qIDwgX2xlbjE7IF9qKyspIHtcbiAgICAgICAgaG9yID0gX3JlZjFbX2pdO1xuICAgICAgICBub3JtYWwgPSBcImJvcmRlci1cIiArIHZlciArIFwiLVwiICsgaG9yICsgXCItcmFkaXVzXCI7XG4gICAgICAgIG1vemlsbGEgPSBcImJvcmRlci1yYWRpdXMtXCIgKyB2ZXIgKyBob3I7XG4gICAgICAgIEJvcmRlclJhZGl1cy5uYW1lcy5wdXNoKG5vcm1hbCk7XG4gICAgICAgIEJvcmRlclJhZGl1cy5uYW1lcy5wdXNoKG1vemlsbGEpO1xuICAgICAgICBCb3JkZXJSYWRpdXMudG9Nb3ppbGxhW25vcm1hbF0gPSBtb3ppbGxhO1xuICAgICAgICBCb3JkZXJSYWRpdXMudG9Ob3JtYWxbbW96aWxsYV0gPSBub3JtYWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQm9yZGVyUmFkaXVzLnByb3RvdHlwZS5wcmVmaXhlZCA9IGZ1bmN0aW9uKHByb3AsIHByZWZpeCkge1xuICAgICAgaWYgKHByZWZpeCA9PT0gJy1tb3otJykge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgKEJvcmRlclJhZGl1cy50b01vemlsbGFbcHJvcF0gfHwgcHJvcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gQm9yZGVyUmFkaXVzLl9fc3VwZXJfXy5wcmVmaXhlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBCb3JkZXJSYWRpdXMucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIHJldHVybiBCb3JkZXJSYWRpdXMudG9Ob3JtYWxbcHJvcF0gfHwgcHJvcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJvcmRlclJhZGl1cztcblxuICB9KShEZWNsYXJhdGlvbik7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBCb3JkZXJSYWRpdXM7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBCcmVha0luc2lkZSwgRGVjbGFyYXRpb24sXG4gICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07XG5cbiAgRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuLi9kZWNsYXJhdGlvbicpO1xuXG4gIEJyZWFrSW5zaWRlID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCcmVha0luc2lkZSwgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIEJyZWFrSW5zaWRlKCkge1xuICAgICAgcmV0dXJuIEJyZWFrSW5zaWRlLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIEJyZWFrSW5zaWRlLm5hbWVzID0gWydicmVhay1pbnNpZGUnLCAncGFnZS1icmVhay1pbnNpZGUnLCAnY29sdW1uLWJyZWFrLWluc2lkZSddO1xuXG4gICAgQnJlYWtJbnNpZGUucHJvdG90eXBlLnByZWZpeGVkID0gZnVuY3Rpb24ocHJvcCwgcHJlZml4KSB7XG4gICAgICBpZiAocHJlZml4ID09PSAnLXdlYmtpdC0nKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyAnY29sdW1uLWJyZWFrLWluc2lkZSc7XG4gICAgICB9IGVsc2UgaWYgKHByZWZpeCA9PT0gJy1tb3otJykge1xuICAgICAgICByZXR1cm4gJ3BhZ2UtYnJlYWstaW5zaWRlJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBCcmVha0luc2lkZS5fX3N1cGVyX18ucHJlZml4ZWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQnJlYWtJbnNpZGUucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICdicmVhay1pbnNpZGUnO1xuICAgIH07XG5cbiAgICBCcmVha0luc2lkZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oZGVjbCwgcHJlZml4KSB7XG4gICAgICBpZiAoZGVjbC52YWx1ZSA9PT0gJ2F2b2lkLWNvbHVtbicgfHwgZGVjbC52YWx1ZSA9PT0gJ2F2b2lkLXBhZ2UnKSB7XG4gICAgICAgIGRlY2wudmFsdWUgPSAnYXZvaWQnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEJyZWFrSW5zaWRlLl9fc3VwZXJfXy5zZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgQnJlYWtJbnNpZGUucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uKGRlY2wsIHByZWZpeCwgcHJlZml4ZXMpIHtcbiAgICAgIGlmIChkZWNsLnZhbHVlID09PSAnYXZvaWQtcmVnaW9uJykge1xuXG4gICAgICB9IGVsc2UgaWYgKGRlY2wudmFsdWUgPT09ICdhdm9pZC1wYWdlJyAmJiBwcmVmaXggPT09ICctd2Via2l0LScpIHtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEJyZWFrSW5zaWRlLl9fc3VwZXJfXy5pbnNlcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIEJyZWFrSW5zaWRlO1xuXG4gIH0pKERlY2xhcmF0aW9uKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IEJyZWFrSW5zaWRlO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgRGlzcGxheUZsZXgsIE9sZERpc3BsYXlGbGV4LCBPbGRWYWx1ZSwgVmFsdWUsIGZsZXhTcGVjLFxuICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LFxuICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9O1xuXG4gIGZsZXhTcGVjID0gcmVxdWlyZSgnLi9mbGV4LXNwZWMnKTtcblxuICBPbGRWYWx1ZSA9IHJlcXVpcmUoJy4uL29sZC12YWx1ZScpO1xuXG4gIFZhbHVlID0gcmVxdWlyZSgnLi4vdmFsdWUnKTtcblxuICBPbGREaXNwbGF5RmxleCA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT2xkRGlzcGxheUZsZXgsIF9zdXBlcik7XG5cbiAgICBmdW5jdGlvbiBPbGREaXNwbGF5RmxleChuYW1lKSB7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cblxuICAgIE9sZERpc3BsYXlGbGV4LnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRoaXMubmFtZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIE9sZERpc3BsYXlGbGV4O1xuXG4gIH0pKE9sZFZhbHVlKTtcblxuICBEaXNwbGF5RmxleCA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGlzcGxheUZsZXgsIF9zdXBlcik7XG5cbiAgICBEaXNwbGF5RmxleC5uYW1lcyA9IFsnZGlzcGxheS1mbGV4JywgJ2lubGluZS1mbGV4J107XG5cbiAgICBmdW5jdGlvbiBEaXNwbGF5RmxleChuYW1lLCBwcmVmaXhlcykge1xuICAgICAgRGlzcGxheUZsZXguX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAobmFtZSA9PT0gJ2Rpc3BsYXktZmxleCcpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gJ2ZsZXgnO1xuICAgICAgfVxuICAgIH1cblxuICAgIERpc3BsYXlGbGV4LnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKGRlY2wpIHtcbiAgICAgIHJldHVybiBkZWNsLnZhbHVlID09PSB0aGlzLm5hbWU7XG4gICAgfTtcblxuICAgIERpc3BsYXlGbGV4LnByb3RvdHlwZS5wcmVmaXhlZCA9IGZ1bmN0aW9uKHByZWZpeCkge1xuICAgICAgdmFyIHNwZWMsIF9yZWY7XG4gICAgICBfcmVmID0gZmxleFNwZWMocHJlZml4KSwgc3BlYyA9IF9yZWZbMF0sIHByZWZpeCA9IF9yZWZbMV07XG4gICAgICByZXR1cm4gcHJlZml4ICsgKHNwZWMgPT09IDIwMDkgPyB0aGlzLm5hbWUgPT09ICdmbGV4JyA/ICdib3gnIDogJ2lubGluZS1ib3gnIDogc3BlYyA9PT0gMjAxMiA/IHRoaXMubmFtZSA9PT0gJ2ZsZXgnID8gJ2ZsZXhib3gnIDogJ2lubGluZS1mbGV4Ym94JyA6IHNwZWMgPT09ICdmaW5hbCcgPyB0aGlzLm5hbWUgOiB2b2lkIDApO1xuICAgIH07XG5cbiAgICBEaXNwbGF5RmxleC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uKHN0cmluZywgcHJlZml4KSB7XG4gICAgICByZXR1cm4gdGhpcy5wcmVmaXhlZChwcmVmaXgpO1xuICAgIH07XG5cbiAgICBEaXNwbGF5RmxleC5wcm90b3R5cGUub2xkID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgICB2YXIgcHJlZml4ZWQ7XG4gICAgICBwcmVmaXhlZCA9IHRoaXMucHJlZml4ZWQocHJlZml4KTtcbiAgICAgIGlmIChwcmVmaXhlZCkge1xuICAgICAgICByZXR1cm4gbmV3IE9sZFZhbHVlKHByZWZpeGVkKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIERpc3BsYXlGbGV4O1xuXG4gIH0pKFZhbHVlKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IERpc3BsYXlGbGV4O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgRmlsbEF2YWlsYWJsZSwgT2xkVmFsdWUsIFZhbHVlLFxuICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LFxuICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9O1xuXG4gIE9sZFZhbHVlID0gcmVxdWlyZSgnLi4vb2xkLXZhbHVlJyk7XG5cbiAgVmFsdWUgPSByZXF1aXJlKCcuLi92YWx1ZScpO1xuXG4gIEZpbGxBdmFpbGFibGUgPSAoZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZpbGxBdmFpbGFibGUsIF9zdXBlcik7XG5cbiAgICBmdW5jdGlvbiBGaWxsQXZhaWxhYmxlKCkge1xuICAgICAgcmV0dXJuIEZpbGxBdmFpbGFibGUuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgRmlsbEF2YWlsYWJsZS5uYW1lcyA9IFsnZmlsbC1hdmFpbGFibGUnXTtcblxuICAgIEZpbGxBdmFpbGFibGUucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbihzdHJpbmcsIHByZWZpeCkge1xuICAgICAgaWYgKHByZWZpeCA9PT0gJy1tb3otJykge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UodGhpcy5yZWdleHAoKSwgJyQxLW1vei1hdmFpbGFibGUkMycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEZpbGxBdmFpbGFibGUuX19zdXBlcl9fLnJlcGxhY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgRmlsbEF2YWlsYWJsZS5wcm90b3R5cGUub2xkID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgICBpZiAocHJlZml4ID09PSAnLW1vei0nKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2xkVmFsdWUoJy1tb3otYXZhaWxhYmxlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gRmlsbEF2YWlsYWJsZS5fX3N1cGVyX18ub2xkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBGaWxsQXZhaWxhYmxlO1xuXG4gIH0pKFZhbHVlKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IEZpbGxBdmFpbGFibGU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBGaWx0ZXJWYWx1ZSwgVmFsdWUsXG4gICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07XG5cbiAgVmFsdWUgPSByZXF1aXJlKCcuLi92YWx1ZScpO1xuXG4gIEZpbHRlclZhbHVlID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGaWx0ZXJWYWx1ZSwgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIEZpbHRlclZhbHVlKCkge1xuICAgICAgcmV0dXJuIEZpbHRlclZhbHVlLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIEZpbHRlclZhbHVlLm5hbWVzID0gWydmaWx0ZXInXTtcblxuICAgIEZpbHRlclZhbHVlLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24odmFsdWUsIHByZWZpeCkge1xuICAgICAgaWYgKHByZWZpeCA9PT0gJy13ZWJraXQtJykge1xuICAgICAgICBpZiAodmFsdWUuaW5kZXhPZignLXdlYmtpdC1maWx0ZXInKSA9PT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gRmlsdGVyVmFsdWUuX19zdXBlcl9fLnJlcGxhY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICcsICcgKyB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBGaWx0ZXJWYWx1ZS5fX3N1cGVyX18ucmVwbGFjZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gRmlsdGVyVmFsdWU7XG5cbiAgfSkoVmFsdWUpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gRmlsdGVyVmFsdWU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBEZWNsYXJhdGlvbiwgRmlsdGVyLFxuICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LFxuICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9O1xuXG4gIERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi4vZGVjbGFyYXRpb24nKTtcblxuICBGaWx0ZXIgPSAoZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZpbHRlciwgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIEZpbHRlcigpIHtcbiAgICAgIHJldHVybiBGaWx0ZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgRmlsdGVyLm5hbWVzID0gWydmaWx0ZXInXTtcblxuICAgIEZpbHRlci5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbihkZWNsKSB7XG4gICAgICB2YXIgdjtcbiAgICAgIHYgPSBkZWNsLnZhbHVlO1xuICAgICAgcmV0dXJuIHYudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdhbHBoYSgnKSA9PT0gLTEgJiYgdi5pbmRleE9mKCdEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdCcpID09PSAtMSAmJiB2LmluZGV4T2YoJ2RhdGE6aW1hZ2Uvc3ZnK3htbCcpID09PSAtMTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEZpbHRlcjtcblxuICB9KShEZWNsYXJhdGlvbik7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBGaWx0ZXI7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBEZWNsYXJhdGlvbiwgRmxleEJhc2lzLCBmbGV4U3BlYyxcbiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTtcblxuICBmbGV4U3BlYyA9IHJlcXVpcmUoJy4vZmxleC1zcGVjJyk7XG5cbiAgRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuLi9kZWNsYXJhdGlvbicpO1xuXG4gIEZsZXhCYXNpcyA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRmxleEJhc2lzLCBfc3VwZXIpO1xuXG4gICAgZnVuY3Rpb24gRmxleEJhc2lzKCkge1xuICAgICAgcmV0dXJuIEZsZXhCYXNpcy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBGbGV4QmFzaXMubmFtZXMgPSBbJ2ZsZXgtYmFzaXMnLCAnZmxleC1wcmVmZXJyZWQtc2l6ZSddO1xuXG4gICAgRmxleEJhc2lzLnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAnZmxleC1iYXNpcyc7XG4gICAgfTtcblxuICAgIEZsZXhCYXNpcy5wcm90b3R5cGUucHJlZml4ZWQgPSBmdW5jdGlvbihwcm9wLCBwcmVmaXgpIHtcbiAgICAgIHZhciBzcGVjLCBfcmVmO1xuICAgICAgX3JlZiA9IGZsZXhTcGVjKHByZWZpeCksIHNwZWMgPSBfcmVmWzBdLCBwcmVmaXggPSBfcmVmWzFdO1xuICAgICAgaWYgKHNwZWMgPT09IDIwMTIpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdmbGV4LXByZWZlcnJlZC1zaXplJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBGbGV4QmFzaXMuX19zdXBlcl9fLnByZWZpeGVkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEZsZXhCYXNpcy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oZGVjbCwgcHJlZml4KSB7XG4gICAgICB2YXIgc3BlYywgX3JlZjtcbiAgICAgIF9yZWYgPSBmbGV4U3BlYyhwcmVmaXgpLCBzcGVjID0gX3JlZlswXSwgcHJlZml4ID0gX3JlZlsxXTtcbiAgICAgIGlmIChzcGVjID09PSAyMDEyIHx8IHNwZWMgPT09ICdmaW5hbCcpIHtcbiAgICAgICAgcmV0dXJuIEZsZXhCYXNpcy5fX3N1cGVyX18uc2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBGbGV4QmFzaXM7XG5cbiAgfSkoRGVjbGFyYXRpb24pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gRmxleEJhc2lzO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgRGVjbGFyYXRpb24sIEZsZXhEaXJlY3Rpb24sIGZsZXhTcGVjLFxuICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LFxuICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9O1xuXG4gIGZsZXhTcGVjID0gcmVxdWlyZSgnLi9mbGV4LXNwZWMnKTtcblxuICBEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4uL2RlY2xhcmF0aW9uJyk7XG5cbiAgRmxleERpcmVjdGlvbiA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRmxleERpcmVjdGlvbiwgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIEZsZXhEaXJlY3Rpb24oKSB7XG4gICAgICByZXR1cm4gRmxleERpcmVjdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBGbGV4RGlyZWN0aW9uLm5hbWVzID0gWydmbGV4LWRpcmVjdGlvbicsICdib3gtZGlyZWN0aW9uJywgJ2JveC1vcmllbnQnXTtcblxuICAgIEZsZXhEaXJlY3Rpb24ucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIHJldHVybiAnZmxleC1kaXJlY3Rpb24nO1xuICAgIH07XG5cbiAgICBGbGV4RGlyZWN0aW9uLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbihkZWNsLCBwcmVmaXgsIHByZWZpeGVzKSB7XG4gICAgICB2YXIgYWxyZWFkeSwgY2xvbmVkLCBkaXIsIG9yaWVudCwgc3BlYywgdmFsdWUsIF9yZWY7XG4gICAgICBfcmVmID0gZmxleFNwZWMocHJlZml4KSwgc3BlYyA9IF9yZWZbMF0sIHByZWZpeCA9IF9yZWZbMV07XG4gICAgICBpZiAoc3BlYyA9PT0gMjAwOSkge1xuICAgICAgICBhbHJlYWR5ID0gZGVjbC5wYXJlbnQuc29tZShmdW5jdGlvbihpKSB7XG4gICAgICAgICAgcmV0dXJuIGkucHJvcCA9PT0gcHJlZml4ICsgJ2JveC1vcmllbnQnIHx8IGkucHJvcCA9PT0gcHJlZml4ICsgJ2JveC1kaXJlY3Rpb24nO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFscmVhZHkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSBkZWNsLnZhbHVlO1xuICAgICAgICBvcmllbnQgPSB2YWx1ZS5pbmRleE9mKCdyb3cnKSAhPT0gLTEgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnO1xuICAgICAgICBkaXIgPSB2YWx1ZS5pbmRleE9mKCdyZXZlcnNlJykgIT09IC0xID8gJ3JldmVyc2UnIDogJ25vcm1hbCc7XG4gICAgICAgIGNsb25lZCA9IHRoaXMuY2xvbmUoZGVjbCk7XG4gICAgICAgIGNsb25lZC5wcm9wID0gcHJlZml4ICsgJ2JveC1vcmllbnQnO1xuICAgICAgICBjbG9uZWQudmFsdWUgPSBvcmllbnQ7XG4gICAgICAgIGlmICh0aGlzLm5lZWRDYXNjYWRlKGRlY2wpKSB7XG4gICAgICAgICAgY2xvbmVkLmJlZm9yZSA9IHRoaXMuY2FsY0JlZm9yZShwcmVmaXhlcywgZGVjbCwgcHJlZml4KTtcbiAgICAgICAgfVxuICAgICAgICBkZWNsLnBhcmVudC5pbnNlcnRCZWZvcmUoZGVjbCwgY2xvbmVkKTtcbiAgICAgICAgY2xvbmVkID0gdGhpcy5jbG9uZShkZWNsKTtcbiAgICAgICAgY2xvbmVkLnByb3AgPSBwcmVmaXggKyAnYm94LWRpcmVjdGlvbic7XG4gICAgICAgIGNsb25lZC52YWx1ZSA9IGRpcjtcbiAgICAgICAgaWYgKHRoaXMubmVlZENhc2NhZGUoZGVjbCkpIHtcbiAgICAgICAgICBjbG9uZWQuYmVmb3JlID0gdGhpcy5jYWxjQmVmb3JlKHByZWZpeGVzLCBkZWNsLCBwcmVmaXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWNsLnBhcmVudC5pbnNlcnRCZWZvcmUoZGVjbCwgY2xvbmVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBGbGV4RGlyZWN0aW9uLl9fc3VwZXJfXy5pbnNlcnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgRmxleERpcmVjdGlvbi5wcm90b3R5cGUub2xkID0gZnVuY3Rpb24ocHJvcCwgcHJlZml4KSB7XG4gICAgICB2YXIgc3BlYywgX3JlZjtcbiAgICAgIF9yZWYgPSBmbGV4U3BlYyhwcmVmaXgpLCBzcGVjID0gX3JlZlswXSwgcHJlZml4ID0gX3JlZlsxXTtcbiAgICAgIGlmIChzcGVjID09PSAyMDA5KSB7XG4gICAgICAgIHJldHVybiBbcHJlZml4ICsgJ2JveC1vcmllbnQnLCBwcmVmaXggKyAnYm94LWRpcmVjdGlvbiddO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEZsZXhEaXJlY3Rpb24uX19zdXBlcl9fLm9sZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gRmxleERpcmVjdGlvbjtcblxuICB9KShEZWNsYXJhdGlvbik7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBGbGV4RGlyZWN0aW9uO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgRGVjbGFyYXRpb24sIEZsZXhGbG93LCBmbGV4U3BlYyxcbiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTtcblxuICBmbGV4U3BlYyA9IHJlcXVpcmUoJy4vZmxleC1zcGVjJyk7XG5cbiAgRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuLi9kZWNsYXJhdGlvbicpO1xuXG4gIEZsZXhGbG93ID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGbGV4RmxvdywgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIEZsZXhGbG93KCkge1xuICAgICAgcmV0dXJuIEZsZXhGbG93Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIEZsZXhGbG93Lm5hbWVzID0gWydmbGV4LWZsb3cnXTtcblxuICAgIEZsZXhGbG93LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihkZWNsLCBwcmVmaXgpIHtcbiAgICAgIHZhciBzcGVjLCBfcmVmO1xuICAgICAgX3JlZiA9IGZsZXhTcGVjKHByZWZpeCksIHNwZWMgPSBfcmVmWzBdLCBwcmVmaXggPSBfcmVmWzFdO1xuICAgICAgaWYgKHNwZWMgPT09IDIwMTIpIHtcbiAgICAgICAgcmV0dXJuIEZsZXhGbG93Ll9fc3VwZXJfXy5zZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0gZWxzZSBpZiAoc3BlYyA9PT0gJ2ZpbmFsJykge1xuICAgICAgICByZXR1cm4gRmxleEZsb3cuX19zdXBlcl9fLnNldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gRmxleEZsb3c7XG5cbiAgfSkoRGVjbGFyYXRpb24pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gRmxleEZsb3c7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBEZWNsYXJhdGlvbiwgRmxleCwgZmxleFNwZWMsXG4gICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07XG5cbiAgZmxleFNwZWMgPSByZXF1aXJlKCcuL2ZsZXgtc3BlYycpO1xuXG4gIERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi4vZGVjbGFyYXRpb24nKTtcblxuICBGbGV4ID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGbGV4LCBfc3VwZXIpO1xuXG4gICAgZnVuY3Rpb24gRmxleCgpIHtcbiAgICAgIHJldHVybiBGbGV4Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIEZsZXgubmFtZXMgPSBbJ2ZsZXgtZ3JvdycsICdmbGV4LXBvc2l0aXZlJ107XG5cbiAgICBGbGV4LnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAnZmxleCc7XG4gICAgfTtcblxuICAgIEZsZXgucHJvdG90eXBlLnByZWZpeGVkID0gZnVuY3Rpb24ocHJvcCwgcHJlZml4KSB7XG4gICAgICB2YXIgc3BlYywgX3JlZjtcbiAgICAgIF9yZWYgPSBmbGV4U3BlYyhwcmVmaXgpLCBzcGVjID0gX3JlZlswXSwgcHJlZml4ID0gX3JlZlsxXTtcbiAgICAgIGlmIChzcGVjID09PSAyMDA5KSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyAnYm94LWZsZXgnO1xuICAgICAgfSBlbHNlIGlmIChzcGVjID09PSAyMDEyKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyAnZmxleC1wb3NpdGl2ZSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gRmxleC5fX3N1cGVyX18ucHJlZml4ZWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIEZsZXg7XG5cbiAgfSkoRGVjbGFyYXRpb24pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gRmxleDtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIERlY2xhcmF0aW9uLCBGbGV4U2hyaW5rLCBmbGV4U3BlYyxcbiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTtcblxuICBmbGV4U3BlYyA9IHJlcXVpcmUoJy4vZmxleC1zcGVjJyk7XG5cbiAgRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuLi9kZWNsYXJhdGlvbicpO1xuXG4gIEZsZXhTaHJpbmsgPSAoZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZsZXhTaHJpbmssIF9zdXBlcik7XG5cbiAgICBmdW5jdGlvbiBGbGV4U2hyaW5rKCkge1xuICAgICAgcmV0dXJuIEZsZXhTaHJpbmsuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgRmxleFNocmluay5uYW1lcyA9IFsnZmxleC1zaHJpbmsnLCAnZmxleC1uZWdhdGl2ZSddO1xuXG4gICAgRmxleFNocmluay5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJ2ZsZXgtc2hyaW5rJztcbiAgICB9O1xuXG4gICAgRmxleFNocmluay5wcm90b3R5cGUucHJlZml4ZWQgPSBmdW5jdGlvbihwcm9wLCBwcmVmaXgpIHtcbiAgICAgIHZhciBzcGVjLCBfcmVmO1xuICAgICAgX3JlZiA9IGZsZXhTcGVjKHByZWZpeCksIHNwZWMgPSBfcmVmWzBdLCBwcmVmaXggPSBfcmVmWzFdO1xuICAgICAgaWYgKHNwZWMgPT09IDIwMTIpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdmbGV4LW5lZ2F0aXZlJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBGbGV4U2hyaW5rLl9fc3VwZXJfXy5wcmVmaXhlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBGbGV4U2hyaW5rLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihkZWNsLCBwcmVmaXgpIHtcbiAgICAgIHZhciBzcGVjLCBfcmVmO1xuICAgICAgX3JlZiA9IGZsZXhTcGVjKHByZWZpeCksIHNwZWMgPSBfcmVmWzBdLCBwcmVmaXggPSBfcmVmWzFdO1xuICAgICAgaWYgKHNwZWMgPT09IDIwMTIgfHwgc3BlYyA9PT0gJ2ZpbmFsJykge1xuICAgICAgICByZXR1cm4gRmxleFNocmluay5fX3N1cGVyX18uc2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBGbGV4U2hyaW5rO1xuXG4gIH0pKERlY2xhcmF0aW9uKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IEZsZXhTaHJpbms7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIHNwZWM7XG4gICAgc3BlYyA9IHByZWZpeCA9PT0gJy13ZWJraXQtIDIwMDknIHx8IHByZWZpeCA9PT0gJy1tb3otJyA/IDIwMDkgOiBwcmVmaXggPT09ICctbXMtJyA/IDIwMTIgOiBwcmVmaXggPT09ICctd2Via2l0LScgPyAnZmluYWwnIDogdm9pZCAwO1xuICAgIGlmIChwcmVmaXggPT09ICctd2Via2l0LSAyMDA5Jykge1xuICAgICAgcHJlZml4ID0gJy13ZWJraXQtJztcbiAgICB9XG4gICAgcmV0dXJuIFtzcGVjLCBwcmVmaXhdO1xuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgRGVjbGFyYXRpb24sIEZsZXhXcmFwLCBmbGV4U3BlYyxcbiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTtcblxuICBmbGV4U3BlYyA9IHJlcXVpcmUoJy4vZmxleC1zcGVjJyk7XG5cbiAgRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuLi9kZWNsYXJhdGlvbicpO1xuXG4gIEZsZXhXcmFwID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGbGV4V3JhcCwgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIEZsZXhXcmFwKCkge1xuICAgICAgcmV0dXJuIEZsZXhXcmFwLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIEZsZXhXcmFwLm5hbWVzID0gWydmbGV4LXdyYXAnXTtcblxuICAgIEZsZXhXcmFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihkZWNsLCBwcmVmaXgpIHtcbiAgICAgIHZhciBzcGVjO1xuICAgICAgc3BlYyA9IGZsZXhTcGVjKHByZWZpeClbMF07XG4gICAgICBpZiAoc3BlYyAhPT0gMjAwOSkge1xuICAgICAgICByZXR1cm4gRmxleFdyYXAuX19zdXBlcl9fLnNldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gRmxleFdyYXA7XG5cbiAgfSkoRGVjbGFyYXRpb24pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gRmxleFdyYXA7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBEZWNsYXJhdGlvbiwgRmxleCwgZmxleFNwZWMsXG4gICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07XG5cbiAgZmxleFNwZWMgPSByZXF1aXJlKCcuL2ZsZXgtc3BlYycpO1xuXG4gIERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi4vZGVjbGFyYXRpb24nKTtcblxuICBGbGV4ID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGbGV4LCBfc3VwZXIpO1xuXG4gICAgZnVuY3Rpb24gRmxleCgpIHtcbiAgICAgIHJldHVybiBGbGV4Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIEZsZXgubmFtZXMgPSBbJ2ZsZXgnLCAnYm94LWZsZXgnXTtcblxuICAgIEZsZXgub2xkVmFsdWVzID0ge1xuICAgICAgJ2F1dG8nOiAnMScsXG4gICAgICAnbm9uZSc6ICcwJ1xuICAgIH07XG5cbiAgICBGbGV4LnByb3RvdHlwZS5wcmVmaXhlZCA9IGZ1bmN0aW9uKHByb3AsIHByZWZpeCkge1xuICAgICAgdmFyIHNwZWMsIF9yZWY7XG4gICAgICBfcmVmID0gZmxleFNwZWMocHJlZml4KSwgc3BlYyA9IF9yZWZbMF0sIHByZWZpeCA9IF9yZWZbMV07XG4gICAgICBpZiAoc3BlYyA9PT0gMjAwOSkge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ2JveC1mbGV4JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBGbGV4Ll9fc3VwZXJfXy5wcmVmaXhlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBGbGV4LnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAnZmxleCc7XG4gICAgfTtcblxuICAgIEZsZXgucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGRlY2wsIHByZWZpeCkge1xuICAgICAgdmFyIHNwZWM7XG4gICAgICBzcGVjID0gZmxleFNwZWMocHJlZml4KVswXTtcbiAgICAgIGlmIChzcGVjID09PSAyMDA5KSB7XG4gICAgICAgIGRlY2wudmFsdWUgPSBkZWNsLnZhbHVlLnNwbGl0KCcgJylbMF07XG4gICAgICAgIGRlY2wudmFsdWUgPSBGbGV4Lm9sZFZhbHVlc1tkZWNsLnZhbHVlXSB8fCBkZWNsLnZhbHVlO1xuICAgICAgICByZXR1cm4gRmxleC5fX3N1cGVyX18uc2V0LmNhbGwodGhpcywgZGVjbCwgcHJlZml4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBGbGV4Ll9fc3VwZXJfXy5zZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIEZsZXg7XG5cbiAgfSkoRGVjbGFyYXRpb24pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gRmxleDtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIEZ1bGxzY3JlZW4sIFNlbGVjdG9yLFxuICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LFxuICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9O1xuXG4gIFNlbGVjdG9yID0gcmVxdWlyZSgnLi4vc2VsZWN0b3InKTtcblxuICBGdWxsc2NyZWVuID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGdWxsc2NyZWVuLCBfc3VwZXIpO1xuXG4gICAgZnVuY3Rpb24gRnVsbHNjcmVlbigpIHtcbiAgICAgIHJldHVybiBGdWxsc2NyZWVuLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIEZ1bGxzY3JlZW4ubmFtZXMgPSBbJzpmdWxsc2NyZWVuJ107XG5cbiAgICBGdWxsc2NyZWVuLnByb3RvdHlwZS5wcmVmaXhlZCA9IGZ1bmN0aW9uKHByZWZpeCkge1xuICAgICAgaWYgKCctd2Via2l0LScgPT09IHByZWZpeCkge1xuICAgICAgICByZXR1cm4gJzotd2Via2l0LWZ1bGwtc2NyZWVuJztcbiAgICAgIH0gZWxzZSBpZiAoJy1tb3otJyA9PT0gcHJlZml4KSB7XG4gICAgICAgIHJldHVybiAnOi1tb3otZnVsbC1zY3JlZW4nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiOlwiICsgcHJlZml4ICsgXCJmdWxsc2NyZWVuXCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBGdWxsc2NyZWVuO1xuXG4gIH0pKFNlbGVjdG9yKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IEZ1bGxzY3JlZW47XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBHcmFkaWVudCwgT2xkVmFsdWUsIFZhbHVlLCBpc0RpcmVjdGlvbiwgbGlzdCwgdXRpbHMsXG4gICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07XG5cbiAgT2xkVmFsdWUgPSByZXF1aXJlKCcuLi9vbGQtdmFsdWUnKTtcblxuICBWYWx1ZSA9IHJlcXVpcmUoJy4uL3ZhbHVlJyk7XG5cbiAgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4gIGxpc3QgPSByZXF1aXJlKCdwb3N0Y3NzL2xpYi9saXN0Jyk7XG5cbiAgaXNEaXJlY3Rpb24gPSAvdG9wfGxlZnR8cmlnaHR8Ym90dG9tL2dpO1xuXG4gIEdyYWRpZW50ID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhHcmFkaWVudCwgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIEdyYWRpZW50KCkge1xuICAgICAgcmV0dXJuIEdyYWRpZW50Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIEdyYWRpZW50Lm5hbWVzID0gWydsaW5lYXItZ3JhZGllbnQnLCAncmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCcsICdyYWRpYWwtZ3JhZGllbnQnLCAncmVwZWF0aW5nLXJhZGlhbC1ncmFkaWVudCddO1xuXG4gICAgR3JhZGllbnQucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbihzdHJpbmcsIHByZWZpeCkge1xuICAgICAgcmV0dXJuIGxpc3Quc3BhY2Uoc3RyaW5nKS5tYXAoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHZhciBhZnRlciwgYXJncywgY2xvc2UsIHBhcmFtcztcbiAgICAgICAgICBpZiAodmFsdWUuc2xpY2UoMCwgK190aGlzLm5hbWUubGVuZ3RoICsgMSB8fCA5ZTkpICE9PSBfdGhpcy5uYW1lICsgJygnKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNsb3NlID0gdmFsdWUubGFzdEluZGV4T2YoJyknKTtcbiAgICAgICAgICBhZnRlciA9IHZhbHVlLnNsaWNlKGNsb3NlICsgMSk7XG4gICAgICAgICAgYXJncyA9IHZhbHVlLnNsaWNlKF90aGlzLm5hbWUubGVuZ3RoICsgMSwgKyhjbG9zZSAtIDEpICsgMSB8fCA5ZTkpO1xuICAgICAgICAgIHBhcmFtcyA9IGxpc3QuY29tbWEoYXJncyk7XG4gICAgICAgICAgcGFyYW1zID0gX3RoaXMubmV3RGlyZWN0aW9uKHBhcmFtcyk7XG4gICAgICAgICAgaWYgKHByZWZpeCA9PT0gJy13ZWJraXQtIG9sZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5vbGRXZWJraXQodmFsdWUsIGFyZ3MsIHBhcmFtcywgYWZ0ZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5jb252ZXJ0RGlyZWN0aW9uKHBhcmFtcyk7XG4gICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgX3RoaXMubmFtZSArICcoJyArIHBhcmFtcy5qb2luKCcsICcpICsgJyknICsgYWZ0ZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpLmpvaW4oJyAnKTtcbiAgICB9O1xuXG4gICAgR3JhZGllbnQucHJvdG90eXBlLmRpcmVjdGlvbnMgPSB7XG4gICAgICB0b3A6ICdib3R0b20nLFxuICAgICAgbGVmdDogJ3JpZ2h0JyxcbiAgICAgIGJvdHRvbTogJ3RvcCcsXG4gICAgICByaWdodDogJ2xlZnQnXG4gICAgfTtcblxuICAgIEdyYWRpZW50LnByb3RvdHlwZS5vbGREaXJlY3Rpb25zID0ge1xuICAgICAgJ3RvcCc6ICdsZWZ0IGJvdHRvbSwgbGVmdCB0b3AnLFxuICAgICAgJ2xlZnQnOiAncmlnaHQgdG9wLCBsZWZ0IHRvcCcsXG4gICAgICAnYm90dG9tJzogJ2xlZnQgdG9wLCBsZWZ0IGJvdHRvbScsXG4gICAgICAncmlnaHQnOiAnbGVmdCB0b3AsIHJpZ2h0IHRvcCcsXG4gICAgICAndG9wIHJpZ2h0JzogJ2xlZnQgYm90dG9tLCByaWdodCB0b3AnLFxuICAgICAgJ3RvcCBsZWZ0JzogJ3JpZ2h0IGJvdHRvbSwgbGVmdCB0b3AnLFxuICAgICAgJ3JpZ2h0IHRvcCc6ICdsZWZ0IGJvdHRvbSwgcmlnaHQgdG9wJyxcbiAgICAgICdyaWdodCBib3R0b20nOiAnbGVmdCB0b3AsIHJpZ2h0IGJvdHRvbScsXG4gICAgICAnYm90dG9tIHJpZ2h0JzogJ2xlZnQgdG9wLCByaWdodCBib3R0b20nLFxuICAgICAgJ2JvdHRvbSBsZWZ0JzogJ3JpZ2h0IHRvcCwgbGVmdCBib3R0b20nLFxuICAgICAgJ2xlZnQgdG9wJzogJ3JpZ2h0IGJvdHRvbSwgbGVmdCB0b3AnLFxuICAgICAgJ2xlZnQgYm90dG9tJzogJ3JpZ2h0IHRvcCwgbGVmdCBib3R0b20nXG4gICAgfTtcblxuICAgIEdyYWRpZW50LnByb3RvdHlwZS5uZXdEaXJlY3Rpb24gPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAgIHZhciBmaXJzdCwgdmFsdWU7XG4gICAgICBmaXJzdCA9IHBhcmFtc1swXTtcbiAgICAgIGlmIChmaXJzdC5pbmRleE9mKCd0byAnKSA9PT0gLTEgJiYgaXNEaXJlY3Rpb24udGVzdChmaXJzdCkpIHtcbiAgICAgICAgZmlyc3QgPSBmaXJzdC5zcGxpdCgnICcpO1xuICAgICAgICBmaXJzdCA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgX2ksIF9sZW4sIF9yZXN1bHRzO1xuICAgICAgICAgIF9yZXN1bHRzID0gW107XG4gICAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBmaXJzdC5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICAgICAgdmFsdWUgPSBmaXJzdFtfaV07XG4gICAgICAgICAgICBfcmVzdWx0cy5wdXNoKHRoaXMuZGlyZWN0aW9uc1t2YWx1ZS50b0xvd2VyQ2FzZSgpXSB8fCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICAgICAgfSkuY2FsbCh0aGlzKTtcbiAgICAgICAgcGFyYW1zWzBdID0gJ3RvICcgKyBmaXJzdC5qb2luKCcgJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH07XG5cbiAgICBHcmFkaWVudC5wcm90b3R5cGUub2xkV2Via2l0ID0gZnVuY3Rpb24odmFsdWUsIGFyZ3MsIHBhcmFtcywgYWZ0ZXIpIHtcbiAgICAgIGlmICh0aGlzLm5hbWUgIT09ICdsaW5lYXItZ3JhZGllbnQnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXNbMF0gJiYgcGFyYW1zWzBdLmluZGV4T2YoJ2RlZycpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoYXJncy5pbmRleE9mKCctY29ybmVyJykgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChhcmdzLmluZGV4T2YoJy1zaWRlJykgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHBhcmFtcyA9IHRoaXMub2xkRGlyZWN0aW9uKHBhcmFtcyk7XG4gICAgICBwYXJhbXMgPSB0aGlzLmNvbG9yU3RvcHMocGFyYW1zKTtcbiAgICAgIHJldHVybiAnLXdlYmtpdC1ncmFkaWVudChsaW5lYXIsICcgKyBwYXJhbXMuam9pbignLCAnKSArICcpJyArIGFmdGVyO1xuICAgIH07XG5cbiAgICBHcmFkaWVudC5wcm90b3R5cGUuY29udmVydERpcmVjdGlvbiA9IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgICAgaWYgKHBhcmFtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChwYXJhbXNbMF0uc2xpY2UoMCwgMykgPT09ICd0byAnKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmFtc1swXSA9IHRoaXMuZml4RGlyZWN0aW9uKHBhcmFtc1swXSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyYW1zWzBdLmluZGV4T2YoJ2RlZycpICE9PSAtMSkge1xuICAgICAgICAgIHJldHVybiBwYXJhbXNbMF0gPSB0aGlzLmZpeEFuZ2xlKHBhcmFtc1swXSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyYW1zWzBdLmluZGV4T2YoJyBhdCAnKSAhPT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5maXhSYWRpYWwocGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBHcmFkaWVudC5wcm90b3R5cGUuZml4RGlyZWN0aW9uID0gZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHBhcmFtID0gcGFyYW0uc3BsaXQoJyAnKTtcbiAgICAgIHBhcmFtLnNwbGljZSgwLCAxKTtcbiAgICAgIHBhcmFtID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX2ksIF9sZW4sIF9yZXN1bHRzO1xuICAgICAgICBfcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IHBhcmFtLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgICAgdmFsdWUgPSBwYXJhbVtfaV07XG4gICAgICAgICAgX3Jlc3VsdHMucHVzaCh0aGlzLmRpcmVjdGlvbnNbdmFsdWUudG9Mb3dlckNhc2UoKV0gfHwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICAgIH0pLmNhbGwodGhpcyk7XG4gICAgICByZXR1cm4gcGFyYW0uam9pbignICcpO1xuICAgIH07XG5cbiAgICBHcmFkaWVudC5wcm90b3R5cGUucm91bmRGbG9hdCA9IGZ1bmN0aW9uKGZsb2F0LCBkaWdpdHMpIHtcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KGZsb2F0LnRvRml4ZWQoZGlnaXRzKSk7XG4gICAgfTtcblxuICAgIEdyYWRpZW50LnByb3RvdHlwZS5maXhBbmdsZSA9IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgICBwYXJhbSA9IHBhcnNlRmxvYXQocGFyYW0pO1xuICAgICAgcGFyYW0gPSBNYXRoLmFicyg0NTAgLSBwYXJhbSkgJSAzNjA7XG4gICAgICBwYXJhbSA9IHRoaXMucm91bmRGbG9hdChwYXJhbSwgMyk7XG4gICAgICByZXR1cm4gXCJcIiArIHBhcmFtICsgXCJkZWdcIjtcbiAgICB9O1xuXG4gICAgR3JhZGllbnQucHJvdG90eXBlLm9sZERpcmVjdGlvbiA9IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgICAgdmFyIGRpcmVjdGlvbjtcbiAgICAgIGlmIChwYXJhbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHBhcmFtcztcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXNbMF0uaW5kZXhPZigndG8gJykgIT09IC0xKSB7XG4gICAgICAgIGRpcmVjdGlvbiA9IHBhcmFtc1swXS5yZXBsYWNlKC9edG9cXHMrLywgJycpO1xuICAgICAgICBkaXJlY3Rpb24gPSB0aGlzLm9sZERpcmVjdGlvbnNbZGlyZWN0aW9uXTtcbiAgICAgICAgcGFyYW1zWzBdID0gZGlyZWN0aW9uO1xuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlyZWN0aW9uID0gdGhpcy5vbGREaXJlY3Rpb25zLmJvdHRvbTtcbiAgICAgICAgcmV0dXJuIFtkaXJlY3Rpb25dLmNvbmNhdChwYXJhbXMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBHcmFkaWVudC5wcm90b3R5cGUuY29sb3JTdG9wcyA9IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgICAgcmV0dXJuIHBhcmFtcy5tYXAoZnVuY3Rpb24ocGFyYW0sIGkpIHtcbiAgICAgICAgdmFyIGNvbG9yLCBtYXRjaCwgcG9zaXRpb24sIF9yZWY7XG4gICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmFtO1xuICAgICAgICB9XG4gICAgICAgIF9yZWYgPSBsaXN0LnNwYWNlKHBhcmFtKSwgY29sb3IgPSBfcmVmWzBdLCBwb3NpdGlvbiA9IF9yZWZbMV07XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgbWF0Y2ggPSBwYXJhbS5tYXRjaCgvXiguKlxcKSkoXFxkLiopJC8pO1xuICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgY29sb3IgPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gbWF0Y2hbMl07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiAmJiBwb3NpdGlvbi5pbmRleE9mKCcpJykgIT09IC0xKSB7XG4gICAgICAgICAgY29sb3IgKz0gJyAnICsgcG9zaXRpb247XG4gICAgICAgICAgcG9zaXRpb24gPSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IDEgJiYgKHBvc2l0aW9uID09PSB2b2lkIDAgfHwgcG9zaXRpb24gPT09ICcwJScpKSB7XG4gICAgICAgICAgcmV0dXJuIFwiZnJvbShcIiArIGNvbG9yICsgXCIpXCI7XG4gICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gcGFyYW1zLmxlbmd0aCAtIDEgJiYgKHBvc2l0aW9uID09PSB2b2lkIDAgfHwgcG9zaXRpb24gPT09ICcxMDAlJykpIHtcbiAgICAgICAgICByZXR1cm4gXCJ0byhcIiArIGNvbG9yICsgXCIpXCI7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gXCJjb2xvci1zdG9wKFwiICsgcG9zaXRpb24gKyBcIiwgXCIgKyBjb2xvciArIFwiKVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcImNvbG9yLXN0b3AoXCIgKyBjb2xvciArIFwiKVwiO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgR3JhZGllbnQucHJvdG90eXBlLmZpeFJhZGlhbCA9IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgICAgdmFyIGZpcnN0O1xuICAgICAgZmlyc3QgPSBwYXJhbXNbMF0uc3BsaXQoL1xccythdFxccysvKTtcbiAgICAgIHJldHVybiBwYXJhbXMuc3BsaWNlKDAsIDEsIGZpcnN0WzFdLCBmaXJzdFswXSk7XG4gICAgfTtcblxuICAgIEdyYWRpZW50LnByb3RvdHlwZS5vbGQgPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICAgIHZhciByZWdleHAsIHN0cmluZywgdHlwZTtcbiAgICAgIGlmIChwcmVmaXggPT09ICctd2Via2l0LScpIHtcbiAgICAgICAgdHlwZSA9IHRoaXMubmFtZSA9PT0gJ2xpbmVhci1ncmFkaWVudCcgPyAnbGluZWFyJyA6ICdyYWRpYWwnO1xuICAgICAgICBzdHJpbmcgPSAnLWdyYWRpZW50JztcbiAgICAgICAgcmVnZXhwID0gdXRpbHMucmVnZXhwKFwiLXdlYmtpdC0oXCIgKyB0eXBlICsgXCItZ3JhZGllbnR8Z3JhZGllbnRcXFxcKFxcXFxzKlwiICsgdHlwZSArIFwiKVwiLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBuZXcgT2xkVmFsdWUocHJlZml4ICsgdGhpcy5uYW1lLCBzdHJpbmcsIHJlZ2V4cCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gR3JhZGllbnQuX19zdXBlcl9fLm9sZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gR3JhZGllbnQ7XG5cbiAgfSkoVmFsdWUpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gR3JhZGllbnQ7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBEZWNsYXJhdGlvbiwgSnVzdGlmeUNvbnRlbnQsIGZsZXhTcGVjLFxuICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LFxuICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9O1xuXG4gIGZsZXhTcGVjID0gcmVxdWlyZSgnLi9mbGV4LXNwZWMnKTtcblxuICBEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4uL2RlY2xhcmF0aW9uJyk7XG5cbiAgSnVzdGlmeUNvbnRlbnQgPSAoZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEp1c3RpZnlDb250ZW50LCBfc3VwZXIpO1xuXG4gICAgZnVuY3Rpb24gSnVzdGlmeUNvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gSnVzdGlmeUNvbnRlbnQuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgSnVzdGlmeUNvbnRlbnQubmFtZXMgPSBbJ2p1c3RpZnktY29udGVudCcsICdmbGV4LXBhY2snLCAnYm94LXBhY2snXTtcblxuICAgIEp1c3RpZnlDb250ZW50Lm9sZFZhbHVlcyA9IHtcbiAgICAgICdmbGV4LWVuZCc6ICdlbmQnLFxuICAgICAgJ2ZsZXgtc3RhcnQnOiAnc3RhcnQnLFxuICAgICAgJ3NwYWNlLWJldHdlZW4nOiAnanVzdGlmeScsXG4gICAgICAnc3BhY2UtYXJvdW5kJzogJ2Rpc3RyaWJ1dGUnXG4gICAgfTtcblxuICAgIEp1c3RpZnlDb250ZW50LnByb3RvdHlwZS5wcmVmaXhlZCA9IGZ1bmN0aW9uKHByb3AsIHByZWZpeCkge1xuICAgICAgdmFyIHNwZWMsIF9yZWY7XG4gICAgICBfcmVmID0gZmxleFNwZWMocHJlZml4KSwgc3BlYyA9IF9yZWZbMF0sIHByZWZpeCA9IF9yZWZbMV07XG4gICAgICBpZiAoc3BlYyA9PT0gMjAwOSkge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ2JveC1wYWNrJztcbiAgICAgIH0gZWxzZSBpZiAoc3BlYyA9PT0gMjAxMikge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ2ZsZXgtcGFjayc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gSnVzdGlmeUNvbnRlbnQuX19zdXBlcl9fLnByZWZpeGVkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEp1c3RpZnlDb250ZW50LnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbihwcm9wKSB7XG4gICAgICByZXR1cm4gJ2p1c3RpZnktY29udGVudCc7XG4gICAgfTtcblxuICAgIEp1c3RpZnlDb250ZW50LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihkZWNsLCBwcmVmaXgpIHtcbiAgICAgIHZhciBzcGVjLCB2YWx1ZTtcbiAgICAgIHNwZWMgPSBmbGV4U3BlYyhwcmVmaXgpWzBdO1xuICAgICAgaWYgKHNwZWMgPT09IDIwMDkgfHwgc3BlYyA9PT0gMjAxMikge1xuICAgICAgICB2YWx1ZSA9IEp1c3RpZnlDb250ZW50Lm9sZFZhbHVlc1tkZWNsLnZhbHVlXSB8fCBkZWNsLnZhbHVlO1xuICAgICAgICBkZWNsLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIGlmIChzcGVjICE9PSAyMDA5IHx8IHZhbHVlICE9PSAnZGlzdHJpYnV0ZScpIHtcbiAgICAgICAgICByZXR1cm4gSnVzdGlmeUNvbnRlbnQuX19zdXBlcl9fLnNldC5jYWxsKHRoaXMsIGRlY2wsIHByZWZpeCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3BlYyA9PT0gJ2ZpbmFsJykge1xuICAgICAgICByZXR1cm4gSnVzdGlmeUNvbnRlbnQuX19zdXBlcl9fLnNldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gSnVzdGlmeUNvbnRlbnQ7XG5cbiAgfSkoRGVjbGFyYXRpb24pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gSnVzdGlmeUNvbnRlbnQ7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBEZWNsYXJhdGlvbiwgT3JkZXIsIGZsZXhTcGVjLFxuICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LFxuICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9O1xuXG4gIGZsZXhTcGVjID0gcmVxdWlyZSgnLi9mbGV4LXNwZWMnKTtcblxuICBEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4uL2RlY2xhcmF0aW9uJyk7XG5cbiAgT3JkZXIgPSAoZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9yZGVyLCBfc3VwZXIpO1xuXG4gICAgZnVuY3Rpb24gT3JkZXIoKSB7XG4gICAgICByZXR1cm4gT3JkZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgT3JkZXIubmFtZXMgPSBbJ29yZGVyJywgJ2ZsZXgtb3JkZXInLCAnYm94LW9yZGluYWwtZ3JvdXAnXTtcblxuICAgIE9yZGVyLnByb3RvdHlwZS5wcmVmaXhlZCA9IGZ1bmN0aW9uKHByb3AsIHByZWZpeCkge1xuICAgICAgdmFyIHNwZWMsIF9yZWY7XG4gICAgICBfcmVmID0gZmxleFNwZWMocHJlZml4KSwgc3BlYyA9IF9yZWZbMF0sIHByZWZpeCA9IF9yZWZbMV07XG4gICAgICBpZiAoc3BlYyA9PT0gMjAwOSkge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ2JveC1vcmRpbmFsLWdyb3VwJztcbiAgICAgIH0gZWxzZSBpZiAoc3BlYyA9PT0gMjAxMikge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ2ZsZXgtb3JkZXInO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE9yZGVyLl9fc3VwZXJfXy5wcmVmaXhlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBPcmRlci5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24ocHJvcCkge1xuICAgICAgcmV0dXJuICdvcmRlcic7XG4gICAgfTtcblxuICAgIE9yZGVyLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihkZWNsLCBwcmVmaXgpIHtcbiAgICAgIHZhciBzcGVjO1xuICAgICAgc3BlYyA9IGZsZXhTcGVjKHByZWZpeClbMF07XG4gICAgICBpZiAoc3BlYyA9PT0gMjAwOSkge1xuICAgICAgICBkZWNsLnZhbHVlID0gKHBhcnNlSW50KGRlY2wudmFsdWUpICsgMSkudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIE9yZGVyLl9fc3VwZXJfXy5zZXQuY2FsbCh0aGlzLCBkZWNsLCBwcmVmaXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE9yZGVyLl9fc3VwZXJfXy5zZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIE9yZGVyO1xuXG4gIH0pKERlY2xhcmF0aW9uKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IE9yZGVyO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgUGxhY2Vob2xkZXIsIFNlbGVjdG9yLFxuICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LFxuICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9O1xuXG4gIFNlbGVjdG9yID0gcmVxdWlyZSgnLi4vc2VsZWN0b3InKTtcblxuICBQbGFjZWhvbGRlciA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUGxhY2Vob2xkZXIsIF9zdXBlcik7XG5cbiAgICBmdW5jdGlvbiBQbGFjZWhvbGRlcigpIHtcbiAgICAgIHJldHVybiBQbGFjZWhvbGRlci5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBQbGFjZWhvbGRlci5uYW1lcyA9IFsnOjpwbGFjZWhvbGRlciddO1xuXG4gICAgUGxhY2Vob2xkZXIucHJvdG90eXBlLnBvc3NpYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gUGxhY2Vob2xkZXIuX19zdXBlcl9fLnBvc3NpYmxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykuY29uY2F0KCctbW96LSBvbGQnKTtcbiAgICB9O1xuXG4gICAgUGxhY2Vob2xkZXIucHJvdG90eXBlLnByZWZpeGVkID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgICBpZiAoJy13ZWJraXQtJyA9PT0gcHJlZml4KSB7XG4gICAgICAgIHJldHVybiAnOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJztcbiAgICAgIH0gZWxzZSBpZiAoJy1tcy0nID09PSBwcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuICc6LW1zLWlucHV0LXBsYWNlaG9sZGVyJztcbiAgICAgIH0gZWxzZSBpZiAoJy1tb3otIG9sZCcgPT09IHByZWZpeCkge1xuICAgICAgICByZXR1cm4gJzotbW96LXBsYWNlaG9sZGVyJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIjo6XCIgKyBwcmVmaXggKyBcInBsYWNlaG9sZGVyXCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBQbGFjZWhvbGRlcjtcblxuICB9KShTZWxlY3Rvcik7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBQbGFjZWhvbGRlcjtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIERlY2xhcmF0aW9uLCBUcmFuc2Zvcm1EZWNsLFxuICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LFxuICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9O1xuXG4gIERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi4vZGVjbGFyYXRpb24nKTtcblxuICBUcmFuc2Zvcm1EZWNsID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUcmFuc2Zvcm1EZWNsLCBfc3VwZXIpO1xuXG4gICAgZnVuY3Rpb24gVHJhbnNmb3JtRGVjbCgpIHtcbiAgICAgIHJldHVybiBUcmFuc2Zvcm1EZWNsLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIFRyYW5zZm9ybURlY2wubmFtZXMgPSBbJ3RyYW5zZm9ybScsICd0cmFuc2Zvcm0tb3JpZ2luJ107XG5cbiAgICBUcmFuc2Zvcm1EZWNsLmZ1bmN0aW9uczNkID0gWydtYXRyaXgzZCcsICd0cmFuc2xhdGUzZCcsICd0cmFuc2xhdGVaJywgJ3NjYWxlM2QnLCAnc2NhbGVaJywgJ3JvdGF0ZTNkJywgJ3JvdGF0ZVgnLCAncm90YXRlWScsICdyb3RhdGVaJywgJ3BlcnNwZWN0aXZlJ107XG5cbiAgICBUcmFuc2Zvcm1EZWNsLnByb3RvdHlwZS5rZXlrcmFtZVBhcmVudHMgPSBmdW5jdGlvbihkZWNsKSB7XG4gICAgICB2YXIgcGFyZW50O1xuICAgICAgcGFyZW50ID0gZGVjbC5wYXJlbnQ7XG4gICAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQudHlwZSA9PT0gJ2F0cnVsZScgJiYgcGFyZW50Lm5hbWUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgVHJhbnNmb3JtRGVjbC5wcm90b3R5cGUuY29udGFpbjNkID0gZnVuY3Rpb24oZGVjbCkge1xuICAgICAgdmFyIGZ1bmMsIF9pLCBfbGVuLCBfcmVmO1xuICAgICAgaWYgKGRlY2wucHJvcCA9PT0gJ3RyYW5zZm9ybS1vcmlnaW4nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIF9yZWYgPSBUcmFuc2Zvcm1EZWNsLmZ1bmN0aW9uczNkO1xuICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgIGZ1bmMgPSBfcmVmW19pXTtcbiAgICAgICAgaWYgKGRlY2wudmFsdWUuaW5kZXhPZihcIlwiICsgZnVuYyArIFwiKFwiKSAhPT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBUcmFuc2Zvcm1EZWNsLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbihkZWNsLCBwcmVmaXgsIHByZWZpeGVzKSB7XG4gICAgICBpZiAocHJlZml4ID09PSAnLW1zLScpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW4zZChkZWNsKSAmJiAhdGhpcy5rZXlrcmFtZVBhcmVudHMoZGVjbCkpIHtcbiAgICAgICAgICByZXR1cm4gVHJhbnNmb3JtRGVjbC5fX3N1cGVyX18uaW5zZXJ0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocHJlZml4ID09PSAnLW8tJykge1xuICAgICAgICBpZiAoIXRoaXMuY29udGFpbjNkKGRlY2wpKSB7XG4gICAgICAgICAgcmV0dXJuIFRyYW5zZm9ybURlY2wuX19zdXBlcl9fLmluc2VydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVHJhbnNmb3JtRGVjbC5fX3N1cGVyX18uaW5zZXJ0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBUcmFuc2Zvcm1EZWNsO1xuXG4gIH0pKERlY2xhcmF0aW9uKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybURlY2w7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBUcmFuc2Zvcm1WYWx1ZSwgVmFsdWUsXG4gICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07XG5cbiAgVmFsdWUgPSByZXF1aXJlKCcuLi92YWx1ZScpO1xuXG4gIFRyYW5zZm9ybVZhbHVlID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUcmFuc2Zvcm1WYWx1ZSwgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIFRyYW5zZm9ybVZhbHVlKCkge1xuICAgICAgcmV0dXJuIFRyYW5zZm9ybVZhbHVlLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIFRyYW5zZm9ybVZhbHVlLm5hbWVzID0gWyd0cmFuc2Zvcm0nXTtcblxuICAgIFRyYW5zZm9ybVZhbHVlLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24odmFsdWUsIHByZWZpeCkge1xuICAgICAgaWYgKHByZWZpeCA9PT0gJy1tcy0nKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBUcmFuc2Zvcm1WYWx1ZS5fX3N1cGVyX18ucmVwbGFjZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gVHJhbnNmb3JtVmFsdWU7XG5cbiAgfSkoVmFsdWUpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtVmFsdWU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBPbGRWYWx1ZSwgVHJhbnNpdGlvbiwgVmFsdWUsXG4gICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07XG5cbiAgT2xkVmFsdWUgPSByZXF1aXJlKCcuLi9vbGQtdmFsdWUnKTtcblxuICBWYWx1ZSA9IHJlcXVpcmUoJy4uL3ZhbHVlJyk7XG5cbiAgVHJhbnNpdGlvbiA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVHJhbnNpdGlvbiwgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIFRyYW5zaXRpb24oKSB7XG4gICAgICByZXR1cm4gVHJhbnNpdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBUcmFuc2l0aW9uLm5hbWVzID0gWydmbGV4JywgJ2ZsZXgtZ3JvdycsICdmbGV4LXNocmluaycsICdmbGV4LWJhc2lzJ107XG5cbiAgICBUcmFuc2l0aW9uLnByb3RvdHlwZS5wcmVmaXhlZCA9IGZ1bmN0aW9uKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWxsLnByZWZpeGVkKHRoaXMubmFtZSwgcHJlZml4KTtcbiAgICB9O1xuXG4gICAgVHJhbnNpdGlvbi5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uKHN0cmluZywgcHJlZml4KSB7XG4gICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UodGhpcy5yZWdleHAoKSwgJyQxJyArIHRoaXMucHJlZml4ZWQocHJlZml4KSArICckMycpO1xuICAgIH07XG5cbiAgICBUcmFuc2l0aW9uLnByb3RvdHlwZS5vbGQgPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICAgIHJldHVybiBuZXcgT2xkVmFsdWUodGhpcy5wcmVmaXhlZChwcmVmaXgpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFRyYW5zaXRpb247XG5cbiAgfSkoVmFsdWUpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gVHJhbnNpdGlvbjtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIGNhcGl0YWxpemUsIG5hbWVzLCBwcmVmaXg7XG5cbiAgY2FwaXRhbGl6ZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIuc2xpY2UoMCwgMSkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbiAgfTtcblxuICBuYW1lcyA9IHtcbiAgICBpZTogJ0lFJyxcbiAgICBpZV9tb2I6ICdJRSBNb2JpbGUnLFxuICAgIGlvc19zYWY6ICdpT1MnLFxuICAgIG9wX21pbmk6ICdPcGVyYSBNaW5pJyxcbiAgICBvcF9tb2I6ICdPcGVyYSBNb2JpbGUnLFxuICAgIGFuZF9jaHI6ICdDaHJvbWUgZm9yIEFuZHJvaWQnLFxuICAgIGFuZF9mZjogJ0ZpcmVmb3ggZm9yIEFuZHJvaWQnXG4gIH07XG5cbiAgcHJlZml4ID0gZnVuY3Rpb24obmFtZSwgdHJhbnNpdGlvbiwgcHJlZml4ZXMpIHtcbiAgICB2YXIgb3V0O1xuICAgIG91dCA9ICcgICcgKyBuYW1lICsgKHRyYW5zaXRpb24gPyAnKicgOiAnJykgKyAnOiAnO1xuICAgIG91dCArPSBwcmVmaXhlcy5tYXAoZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIGkucmVwbGFjZSgvXi0oLiopLSQvZywgJyQxJyk7XG4gICAgfSkuam9pbignLCAnKTtcbiAgICBvdXQgKz0gXCJcXG5cIjtcbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocHJlZml4ZXMpIHtcbiAgICB2YXIgYXRydWxlcywgYnJvd3NlciwgZGF0YSwgbGlzdCwgbmFtZSwgbmVlZFRyYW5zaXRpb24sIG91dCwgcHJvcHMsIHNlbGVjdG9yLCBzZWxlY3RvcnMsIHN0cmluZywgdHJhbnNpdGlvblByb3AsIHVzZVRyYW5zaXRpb24sIHZhbHVlLCB2YWx1ZXMsIHZlcnNpb24sIHZlcnNpb25zLCBfaSwgX2osIF9rLCBfbGVuLCBfbGVuMSwgX2xlbjIsIF9yZWYsIF9yZWYxLCBfcmVmMiwgX3JlZjMsIF9yZWY0LCBfcmVmNSwgX3JlZjY7XG4gICAgaWYgKHByZWZpeGVzLmJyb3dzZXJzLnNlbGVjdGVkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFwiTm8gYnJvd3NlcnMgc2VsZWN0ZWRcIjtcbiAgICB9XG4gICAgdmVyc2lvbnMgPSBbXTtcbiAgICBfcmVmID0gcHJlZml4ZXMuYnJvd3NlcnMuc2VsZWN0ZWQ7XG4gICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICBicm93c2VyID0gX3JlZltfaV07XG4gICAgICBfcmVmMSA9IGJyb3dzZXIuc3BsaXQoJyAnKSwgbmFtZSA9IF9yZWYxWzBdLCB2ZXJzaW9uID0gX3JlZjFbMV07XG4gICAgICBuYW1lID0gbmFtZXNbbmFtZV0gfHwgY2FwaXRhbGl6ZShuYW1lKTtcbiAgICAgIGlmICh2ZXJzaW9uc1tuYW1lXSkge1xuICAgICAgICB2ZXJzaW9uc1tuYW1lXS5wdXNoKHZlcnNpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmVyc2lvbnNbbmFtZV0gPSBbdmVyc2lvbl07XG4gICAgICB9XG4gICAgfVxuICAgIG91dCA9IFwiQnJvd3NlcnM6XFxuXCI7XG4gICAgZm9yIChicm93c2VyIGluIHZlcnNpb25zKSB7XG4gICAgICBsaXN0ID0gdmVyc2lvbnNbYnJvd3Nlcl07XG4gICAgICBsaXN0ID0gbGlzdC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoYikgLSBwYXJzZUZsb2F0KGEpO1xuICAgICAgfSk7XG4gICAgICBvdXQgKz0gJyAgJyArIGJyb3dzZXIgKyAnOiAnICsgbGlzdC5qb2luKCcsICcpICsgXCJcXG5cIjtcbiAgICB9XG4gICAgYXRydWxlcyA9ICcnO1xuICAgIF9yZWYyID0gcHJlZml4ZXMuYWRkO1xuICAgIGZvciAobmFtZSBpbiBfcmVmMikge1xuICAgICAgZGF0YSA9IF9yZWYyW25hbWVdO1xuICAgICAgaWYgKG5hbWVbMF0gPT09ICdAJyAmJiBkYXRhLnByZWZpeGVzKSB7XG4gICAgICAgIGF0cnVsZXMgKz0gcHJlZml4KG5hbWUsIGZhbHNlLCBkYXRhLnByZWZpeGVzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGF0cnVsZXMgIT09ICcnKSB7XG4gICAgICBvdXQgKz0gXCJcXG5BdC1SdWxlczpcXG5cIiArIGF0cnVsZXM7XG4gICAgfVxuICAgIHNlbGVjdG9ycyA9ICcnO1xuICAgIF9yZWYzID0gcHJlZml4ZXMuYWRkLnNlbGVjdG9ycztcbiAgICBmb3IgKF9qID0gMCwgX2xlbjEgPSBfcmVmMy5sZW5ndGg7IF9qIDwgX2xlbjE7IF9qKyspIHtcbiAgICAgIHNlbGVjdG9yID0gX3JlZjNbX2pdO1xuICAgICAgaWYgKHNlbGVjdG9yLnByZWZpeGVzKSB7XG4gICAgICAgIHNlbGVjdG9ycyArPSBwcmVmaXgoc2VsZWN0b3IubmFtZSwgZmFsc2UsIHNlbGVjdG9yLnByZWZpeGVzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNlbGVjdG9ycyAhPT0gJycpIHtcbiAgICAgIG91dCArPSBcIlxcblNlbGVjdG9yczpcXG5cIiArIHNlbGVjdG9ycztcbiAgICB9XG4gICAgdmFsdWVzID0gJyc7XG4gICAgcHJvcHMgPSAnJztcbiAgICB1c2VUcmFuc2l0aW9uID0gZmFsc2U7XG4gICAgbmVlZFRyYW5zaXRpb24gPSAoX3JlZjQgPSBwcmVmaXhlcy5hZGQudHJhbnNpdGlvbikgIT0gbnVsbCA/IF9yZWY0LnByZWZpeGVzIDogdm9pZCAwO1xuICAgIF9yZWY1ID0gcHJlZml4ZXMuYWRkO1xuICAgIGZvciAobmFtZSBpbiBfcmVmNSkge1xuICAgICAgZGF0YSA9IF9yZWY1W25hbWVdO1xuICAgICAgaWYgKG5hbWVbMF0gIT09ICdAJyAmJiBkYXRhLnByZWZpeGVzKSB7XG4gICAgICAgIHRyYW5zaXRpb25Qcm9wID0gbmVlZFRyYW5zaXRpb24gJiYgcHJlZml4ZXMuZGF0YVtuYW1lXS50cmFuc2l0aW9uO1xuICAgICAgICBpZiAodHJhbnNpdGlvblByb3ApIHtcbiAgICAgICAgICB1c2VUcmFuc2l0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBwcm9wcyArPSBwcmVmaXgobmFtZSwgdHJhbnNpdGlvblByb3AsIGRhdGEucHJlZml4ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKCFkYXRhLnZhbHVlcykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcmVmaXhlcy50cmFuc2l0aW9uUHJvcHMuc29tZShmdW5jdGlvbihpKSB7XG4gICAgICAgIHJldHVybiBpID09PSBuYW1lO1xuICAgICAgfSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBfcmVmNiA9IGRhdGEudmFsdWVzO1xuICAgICAgZm9yIChfayA9IDAsIF9sZW4yID0gX3JlZjYubGVuZ3RoOyBfayA8IF9sZW4yOyBfaysrKSB7XG4gICAgICAgIHZhbHVlID0gX3JlZjZbX2tdO1xuICAgICAgICBzdHJpbmcgPSBwcmVmaXgodmFsdWUubmFtZSwgZmFsc2UsIHZhbHVlLnByZWZpeGVzKTtcbiAgICAgICAgaWYgKHZhbHVlcy5pbmRleE9mKHN0cmluZykgPT09IC0xKSB7XG4gICAgICAgICAgdmFsdWVzICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodXNlVHJhbnNpdGlvbikge1xuICAgICAgcHJvcHMgKz0gXCIgICogLSBjYW4gYmUgdXNlZCBpbiB0cmFuc2l0aW9uXFxuXCI7XG4gICAgfVxuICAgIGlmIChwcm9wcyAhPT0gJycpIHtcbiAgICAgIG91dCArPSBcIlxcblByb3BlcnRpZXM6XFxuXCIgKyBwcm9wcztcbiAgICB9XG4gICAgaWYgKHZhbHVlcyAhPT0gJycpIHtcbiAgICAgIG91dCArPSBcIlxcblZhbHVlczpcXG5cIiArIHZhbHVlcztcbiAgICB9XG4gICAgaWYgKGF0cnVsZXMgPT09ICcnICYmIHNlbGVjdG9ycyA9PT0gJycgJiYgcHJvcHMgPT09ICcnICYmIHZhbHVlcyA9PT0gJycpIHtcbiAgICAgIG91dCArPSAnXFxuQXdlc29tZSEgWW91ciBicm93c2VycyBkb25cXCd0IHJlcXVpcmUgYW55IHZlbmRvciBwcmVmaXhlcy4nICsgJ1xcbk5vdyB5b3UgY2FuIHJlbW92ZSBBdXRvcHJlZml4ZXIgZnJvbSBidWlsZCBzdGVwcy4nO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgS2V5ZnJhbWVzLCBQcmVmaXhlcixcbiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTtcblxuICBQcmVmaXhlciA9IHJlcXVpcmUoJy4vcHJlZml4ZXInKTtcblxuICBLZXlmcmFtZXMgPSAoZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEtleWZyYW1lcywgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIEtleWZyYW1lcygpIHtcbiAgICAgIHJldHVybiBLZXlmcmFtZXMuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgS2V5ZnJhbWVzLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihhdFJ1bGUsIHByZWZpeCkge1xuICAgICAgdmFyIGFscmVhZHksIGNsb25lZCwgcHJlZml4ZWQ7XG4gICAgICBwcmVmaXhlZCA9IHByZWZpeCArIGF0UnVsZS5uYW1lO1xuICAgICAgYWxyZWFkeSA9IGF0UnVsZS5wYXJlbnQuc29tZShmdW5jdGlvbihpKSB7XG4gICAgICAgIHJldHVybiBpLm5hbWUgPT09IHByZWZpeGVkICYmIGkucGFyYW1zID09PSBhdFJ1bGUucGFyYW1zO1xuICAgICAgfSk7XG4gICAgICBpZiAoYWxyZWFkeSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjbG9uZWQgPSB0aGlzLmNsb25lKGF0UnVsZSwge1xuICAgICAgICBuYW1lOiBwcmVmaXhlZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYXRSdWxlLnBhcmVudC5pbnNlcnRCZWZvcmUoYXRSdWxlLCBjbG9uZWQpO1xuICAgIH07XG5cbiAgICBLZXlmcmFtZXMucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgcGFyZW50LCBwcmVmaXgsIF9pLCBfbGVuLCBfcmVmLCBfcmVzdWx0cztcbiAgICAgIHBhcmVudCA9IHRoaXMucGFyZW50UHJlZml4KG5vZGUpO1xuICAgICAgX3JlZiA9IHRoaXMucHJlZml4ZXM7XG4gICAgICBfcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgIHByZWZpeCA9IF9yZWZbX2ldO1xuICAgICAgICBpZiAocGFyZW50ICYmIHBhcmVudCAhPT0gcHJlZml4KSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgX3Jlc3VsdHMucHVzaCh0aGlzLmFkZChub2RlLCBwcmVmaXgpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICB9O1xuXG4gICAgcmV0dXJuIEtleWZyYW1lcztcblxuICB9KShQcmVmaXhlcik7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBLZXlmcmFtZXM7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBPbGRTZWxlY3RvcjtcblxuICBPbGRTZWxlY3RvciA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBPbGRTZWxlY3RvcihzZWxlY3RvciwgcHJlZml4KSB7XG4gICAgICB2YXIgX2ksIF9sZW4sIF9yZWY7XG4gICAgICB0aGlzLnByZWZpeCA9IHByZWZpeDtcbiAgICAgIHRoaXMucHJlZml4ZWQgPSBzZWxlY3Rvci5wcmVmaXhlZCh0aGlzLnByZWZpeCk7XG4gICAgICB0aGlzLnJlZ2V4cCA9IHNlbGVjdG9yLnJlZ2V4cCh0aGlzLnByZWZpeCk7XG4gICAgICB0aGlzLnByZWZpeGVkcyA9IFtdO1xuICAgICAgX3JlZiA9IHNlbGVjdG9yLnBvc3NpYmxlKCk7XG4gICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgcHJlZml4ID0gX3JlZltfaV07XG4gICAgICAgIHRoaXMucHJlZml4ZWRzLnB1c2goW3NlbGVjdG9yLnByZWZpeGVkKHByZWZpeCksIHNlbGVjdG9yLnJlZ2V4cChwcmVmaXgpXSk7XG4gICAgICB9XG4gICAgICB0aGlzLnVucHJlZml4ZWQgPSBzZWxlY3Rvci5uYW1lO1xuICAgICAgdGhpcy5uYW1lUmVnZXhwID0gc2VsZWN0b3IucmVnZXhwKCk7XG4gICAgfVxuXG4gICAgT2xkU2VsZWN0b3IucHJvdG90eXBlLmlzSGFjayA9IGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgIHZhciBiZWZvcmUsIGluZGV4LCByZWdleHAsIHJ1bGVzLCBzb21lLCBzdHJpbmcsIF9pLCBfbGVuLCBfcmVmLCBfcmVmMTtcbiAgICAgIGluZGV4ID0gcnVsZS5wYXJlbnQuaW5kZXgocnVsZSkgKyAxO1xuICAgICAgcnVsZXMgPSBydWxlLnBhcmVudC5ydWxlcztcbiAgICAgIHdoaWxlIChpbmRleCA8IHJ1bGVzLmxlbmd0aCkge1xuICAgICAgICBiZWZvcmUgPSBydWxlc1tpbmRleF0uc2VsZWN0b3I7XG4gICAgICAgIGlmICghYmVmb3JlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJlZm9yZS5pbmRleE9mKHRoaXMudW5wcmVmaXhlZCkgIT09IC0xICYmIGJlZm9yZS5tYXRjaCh0aGlzLm5hbWVSZWdleHApKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHNvbWUgPSBmYWxzZTtcbiAgICAgICAgX3JlZiA9IHRoaXMucHJlZml4ZWRzO1xuICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgICBfcmVmMSA9IF9yZWZbX2ldLCBzdHJpbmcgPSBfcmVmMVswXSwgcmVnZXhwID0gX3JlZjFbMV07XG4gICAgICAgICAgaWYgKGJlZm9yZS5pbmRleE9mKHN0cmluZykgIT09IC0xICYmIGJlZm9yZS5tYXRjaChyZWdleHApKSB7XG4gICAgICAgICAgICBzb21lID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNvbWUpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCArPSAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIE9sZFNlbGVjdG9yLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgIGlmIChydWxlLnNlbGVjdG9yLmluZGV4T2YodGhpcy5wcmVmaXhlZCkgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghcnVsZS5zZWxlY3Rvci5tYXRjaCh0aGlzLnJlZ2V4cCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNIYWNrKHJ1bGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICByZXR1cm4gT2xkU2VsZWN0b3I7XG5cbiAgfSkoKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IE9sZFNlbGVjdG9yO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgT2xkVmFsdWUsIHV0aWxzO1xuXG4gIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4gIE9sZFZhbHVlID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIE9sZFZhbHVlKG5hbWUsIHN0cmluZywgcmVnZXhwKSB7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG4gICAgICB0aGlzLnJlZ2V4cCA9IHJlZ2V4cDtcbiAgICAgIHRoaXMucmVnZXhwIHx8ICh0aGlzLnJlZ2V4cCA9IHV0aWxzLnJlZ2V4cCh0aGlzLm5hbWUpKTtcbiAgICAgIHRoaXMuc3RyaW5nIHx8ICh0aGlzLnN0cmluZyA9IHRoaXMubmFtZSk7XG4gICAgfVxuXG4gICAgT2xkVmFsdWUucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZS5pbmRleE9mKHRoaXMuc3RyaW5nKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuICEhdmFsdWUubWF0Y2godGhpcy5yZWdleHApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gT2xkVmFsdWU7XG5cbiAgfSkoKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IE9sZFZhbHVlO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgQnJvd3NlcnMsIFByZWZpeGVyLCB1dGlscywgdmVuZG9yO1xuXG4gIEJyb3dzZXJzID0gcmVxdWlyZSgnLi9icm93c2VycycpO1xuXG4gIHZlbmRvciA9IHJlcXVpcmUoJ3Bvc3Rjc3MvbGliL3ZlbmRvcicpO1xuXG4gIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4gIFByZWZpeGVyID0gKGZ1bmN0aW9uKCkge1xuICAgIFByZWZpeGVyLmhhY2sgPSBmdW5jdGlvbihrbGFzcykge1xuICAgICAgdmFyIG5hbWUsIF9pLCBfbGVuLCBfcmVmLCBfcmVzdWx0cztcbiAgICAgIHRoaXMuaGFja3MgfHwgKHRoaXMuaGFja3MgPSB7fSk7XG4gICAgICBfcmVmID0ga2xhc3MubmFtZXM7XG4gICAgICBfcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgIG5hbWUgPSBfcmVmW19pXTtcbiAgICAgICAgX3Jlc3VsdHMucHVzaCh0aGlzLmhhY2tzW25hbWVdID0ga2xhc3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9yZXN1bHRzO1xuICAgIH07XG5cbiAgICBQcmVmaXhlci5sb2FkID0gZnVuY3Rpb24obmFtZSwgcHJlZml4ZXMsIGFsbCkge1xuICAgICAgdmFyIGtsYXNzLCBfcmVmO1xuICAgICAga2xhc3MgPSAoX3JlZiA9IHRoaXMuaGFja3MpICE9IG51bGwgPyBfcmVmW25hbWVdIDogdm9pZCAwO1xuICAgICAgaWYgKGtsYXNzKSB7XG4gICAgICAgIHJldHVybiBuZXcga2xhc3MobmFtZSwgcHJlZml4ZXMsIGFsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IHRoaXMobmFtZSwgcHJlZml4ZXMsIGFsbCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFByZWZpeGVyLmNsb25lID0gZnVuY3Rpb24obm9kZSwgb3ZlcnJpZGVzKSB7XG4gICAgICB2YXIgY2xvbmVkO1xuICAgICAgY2xvbmVkID0gbm9kZS5jbG9uZShvdmVycmlkZXMpO1xuICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ2RlY2wnKSB7XG4gICAgICAgIGNsb25lZC5iZXR3ZWVuID0gbm9kZS5iZXR3ZWVuO1xuICAgICAgfVxuICAgICAgZGVsZXRlIGNsb25lZC5fYXV0b3ByZWZpeGVyUHJlZml4O1xuICAgICAgZGVsZXRlIGNsb25lZC5fYXV0b3ByZWZpeGVyVmFsdWVzO1xuICAgICAgcmV0dXJuIGNsb25lZDtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gUHJlZml4ZXIobmFtZSwgcHJlZml4ZXMsIGFsbCkge1xuICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgIHRoaXMucHJlZml4ZXMgPSBwcmVmaXhlcztcbiAgICAgIHRoaXMuYWxsID0gYWxsO1xuICAgIH1cblxuICAgIFByZWZpeGVyLnByb3RvdHlwZS5wYXJlbnRQcmVmaXggPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgcHJlZml4O1xuICAgICAgcHJlZml4ID0gbm9kZS5fYXV0b3ByZWZpeGVyUHJlZml4ICE9IG51bGwgPyBub2RlLl9hdXRvcHJlZml4ZXJQcmVmaXggOiBub2RlLnR5cGUgPT09ICdkZWNsJyAmJiBub2RlLnByb3BbMF0gPT09ICctJyA/IHZlbmRvci5wcmVmaXgobm9kZS5wcm9wKSA6IG5vZGUudHlwZSA9PT0gJ3Jvb3QnID8gZmFsc2UgOiBub2RlLnR5cGUgPT09ICdydWxlJyAmJiBub2RlLnNlbGVjdG9yLmluZGV4T2YoJzotJykgIT09IC0xID8gbm9kZS5zZWxlY3Rvci5tYXRjaCgvOigtXFx3Ky0pLylbMV0gOiBub2RlLnR5cGUgPT09ICdhdHJ1bGUnICYmIG5vZGUubmFtZVswXSA9PT0gJy0nID8gdmVuZG9yLnByZWZpeChub2RlLm5hbWUpIDogdGhpcy5wYXJlbnRQcmVmaXgobm9kZS5wYXJlbnQpO1xuICAgICAgaWYgKEJyb3dzZXJzLnByZWZpeGVzKCkuaW5kZXhPZihwcmVmaXgpID09PSAtMSkge1xuICAgICAgICBwcmVmaXggPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlLl9hdXRvcHJlZml4ZXJQcmVmaXggPSBwcmVmaXg7XG4gICAgfTtcblxuICAgIFByZWZpeGVyLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgdmFyIGFkZGVkLCBwYXJlbnQsIHByZWZpeCwgcHJlZml4ZXMsIF9pLCBfaiwgX2xlbiwgX2xlbjEsIF9yZWY7XG4gICAgICBpZiAoIXRoaXMuY2hlY2sobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gdGhpcy5wYXJlbnRQcmVmaXgobm9kZSk7XG4gICAgICBwcmVmaXhlcyA9IFtdO1xuICAgICAgX3JlZiA9IHRoaXMucHJlZml4ZXM7XG4gICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgcHJlZml4ID0gX3JlZltfaV07XG4gICAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50ICE9PSB1dGlscy5yZW1vdmVOb3RlKHByZWZpeCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBwcmVmaXhlcy5wdXNoKHByZWZpeCk7XG4gICAgICB9XG4gICAgICBhZGRlZCA9IFtdO1xuICAgICAgZm9yIChfaiA9IDAsIF9sZW4xID0gcHJlZml4ZXMubGVuZ3RoOyBfaiA8IF9sZW4xOyBfaisrKSB7XG4gICAgICAgIHByZWZpeCA9IHByZWZpeGVzW19qXTtcbiAgICAgICAgaWYgKHRoaXMuYWRkKG5vZGUsIHByZWZpeCwgYWRkZWQuY29uY2F0KFtwcmVmaXhdKSkpIHtcbiAgICAgICAgICBhZGRlZC5wdXNoKHByZWZpeCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhZGRlZDtcbiAgICB9O1xuXG4gICAgUHJlZml4ZXIucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24obm9kZSwgb3ZlcnJpZGVzKSB7XG4gICAgICByZXR1cm4gUHJlZml4ZXIuY2xvbmUobm9kZSwgb3ZlcnJpZGVzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByZWZpeGVyO1xuXG4gIH0pKCk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBQcmVmaXhlcjtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIEJyb3dzZXJzLCBEZWNsYXJhdGlvbiwgS2V5ZnJhbWVzLCBQcmVmaXhlcywgUHJvY2Vzc29yLCBTZWxlY3RvciwgU3VwcG9ydHMsIFZhbHVlLCBkZWNsc0NhY2hlLCB1dGlscywgdmVuZG9yO1xuXG4gIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4gIHZlbmRvciA9IHJlcXVpcmUoJ3Bvc3Rjc3MvbGliL3ZlbmRvcicpO1xuXG4gIERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9kZWNsYXJhdGlvbicpO1xuXG4gIFByb2Nlc3NvciA9IHJlcXVpcmUoJy4vcHJvY2Vzc29yJyk7XG5cbiAgS2V5ZnJhbWVzID0gcmVxdWlyZSgnLi9rZXlmcmFtZXMnKTtcblxuICBTdXBwb3J0cyA9IHJlcXVpcmUoJy4vc3VwcG9ydHMnKTtcblxuICBCcm93c2VycyA9IHJlcXVpcmUoJy4vYnJvd3NlcnMnKTtcblxuICBTZWxlY3RvciA9IHJlcXVpcmUoJy4vc2VsZWN0b3InKTtcblxuICBWYWx1ZSA9IHJlcXVpcmUoJy4vdmFsdWUnKTtcblxuICBTZWxlY3Rvci5oYWNrKHJlcXVpcmUoJy4vaGFja3MvZnVsbHNjcmVlbicpKTtcblxuICBTZWxlY3Rvci5oYWNrKHJlcXVpcmUoJy4vaGFja3MvcGxhY2Vob2xkZXInKSk7XG5cbiAgRGVjbGFyYXRpb24uaGFjayhyZXF1aXJlKCcuL2hhY2tzL2ZsZXgnKSk7XG5cbiAgRGVjbGFyYXRpb24uaGFjayhyZXF1aXJlKCcuL2hhY2tzL29yZGVyJykpO1xuXG4gIERlY2xhcmF0aW9uLmhhY2socmVxdWlyZSgnLi9oYWNrcy9maWx0ZXInKSk7XG5cbiAgRGVjbGFyYXRpb24uaGFjayhyZXF1aXJlKCcuL2hhY2tzL2ZsZXgtZmxvdycpKTtcblxuICBEZWNsYXJhdGlvbi5oYWNrKHJlcXVpcmUoJy4vaGFja3MvZmxleC1ncm93JykpO1xuXG4gIERlY2xhcmF0aW9uLmhhY2socmVxdWlyZSgnLi9oYWNrcy9mbGV4LXdyYXAnKSk7XG5cbiAgRGVjbGFyYXRpb24uaGFjayhyZXF1aXJlKCcuL2hhY2tzL2FsaWduLXNlbGYnKSk7XG5cbiAgRGVjbGFyYXRpb24uaGFjayhyZXF1aXJlKCcuL2hhY2tzL2ZsZXgtYmFzaXMnKSk7XG5cbiAgRGVjbGFyYXRpb24uaGFjayhyZXF1aXJlKCcuL2hhY2tzL2FsaWduLWl0ZW1zJykpO1xuXG4gIERlY2xhcmF0aW9uLmhhY2socmVxdWlyZSgnLi9oYWNrcy9mbGV4LXNocmluaycpKTtcblxuICBEZWNsYXJhdGlvbi5oYWNrKHJlcXVpcmUoJy4vaGFja3MvYnJlYWstaW5zaWRlJykpO1xuXG4gIERlY2xhcmF0aW9uLmhhY2socmVxdWlyZSgnLi9oYWNrcy9ib3JkZXItaW1hZ2UnKSk7XG5cbiAgRGVjbGFyYXRpb24uaGFjayhyZXF1aXJlKCcuL2hhY2tzL2FsaWduLWNvbnRlbnQnKSk7XG5cbiAgRGVjbGFyYXRpb24uaGFjayhyZXF1aXJlKCcuL2hhY2tzL2JvcmRlci1yYWRpdXMnKSk7XG5cbiAgRGVjbGFyYXRpb24uaGFjayhyZXF1aXJlKCcuL2hhY2tzL3RyYW5zZm9ybS1kZWNsJykpO1xuXG4gIERlY2xhcmF0aW9uLmhhY2socmVxdWlyZSgnLi9oYWNrcy9mbGV4LWRpcmVjdGlvbicpKTtcblxuICBEZWNsYXJhdGlvbi5oYWNrKHJlcXVpcmUoJy4vaGFja3MvanVzdGlmeS1jb250ZW50JykpO1xuXG4gIERlY2xhcmF0aW9uLmhhY2socmVxdWlyZSgnLi9oYWNrcy9iYWNrZ3JvdW5kLXNpemUnKSk7XG5cbiAgVmFsdWUuaGFjayhyZXF1aXJlKCcuL2hhY2tzL2dyYWRpZW50JykpO1xuXG4gIFZhbHVlLmhhY2socmVxdWlyZSgnLi9oYWNrcy90cmFuc2l0aW9uJykpO1xuXG4gIFZhbHVlLmhhY2socmVxdWlyZSgnLi9oYWNrcy9kaXNwbGF5LWZsZXgnKSk7XG5cbiAgVmFsdWUuaGFjayhyZXF1aXJlKCcuL2hhY2tzL2ZpbHRlci12YWx1ZScpKTtcblxuICBWYWx1ZS5oYWNrKHJlcXVpcmUoJy4vaGFja3MvZmlsbC1hdmFpbGFibGUnKSk7XG5cbiAgVmFsdWUuaGFjayhyZXF1aXJlKCcuL2hhY2tzL3RyYW5zZm9ybS12YWx1ZScpKTtcblxuICBkZWNsc0NhY2hlID0ge307XG5cbiAgUHJlZml4ZXMgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gUHJlZml4ZXMoZGF0YSwgYnJvd3NlcnMsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBfcmVmO1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgIHRoaXMuYnJvd3NlcnMgPSBicm93c2VycztcbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMgOiB7fTtcbiAgICAgIF9yZWYgPSB0aGlzLnByZXByb2Nlc3ModGhpcy5zZWxlY3QodGhpcy5kYXRhKSksIHRoaXMuYWRkID0gX3JlZlswXSwgdGhpcy5yZW1vdmUgPSBfcmVmWzFdO1xuICAgICAgdGhpcy5wcm9jZXNzb3IgPSBuZXcgUHJvY2Vzc29yKHRoaXMpO1xuICAgIH1cblxuICAgIFByZWZpeGVzLnByb3RvdHlwZS50cmFuc2l0aW9uUHJvcHMgPSBbJ3RyYW5zaXRpb24nLCAndHJhbnNpdGlvbi1wcm9wZXJ0eSddO1xuXG4gICAgUHJlZml4ZXMucHJvdG90eXBlLmNsZWFuZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbXB0eTtcbiAgICAgIGlmICghdGhpcy5jbGVhbmVyQ2FjaGUpIHtcbiAgICAgICAgaWYgKHRoaXMuYnJvd3NlcnMuc2VsZWN0ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgZW1wdHkgPSBuZXcgQnJvd3NlcnModGhpcy5icm93c2Vycy5kYXRhLCBbXSk7XG4gICAgICAgICAgdGhpcy5jbGVhbmVyQ2FjaGUgPSBuZXcgUHJlZml4ZXModGhpcy5kYXRhLCBlbXB0eSwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuY2xlYW5lckNhY2hlO1xuICAgIH07XG5cbiAgICBQcmVmaXhlcy5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24obGlzdCkge1xuICAgICAgdmFyIGFkZCwgYWxsLCBkYXRhLCBuYW1lLCBub3Rlcywgc2VsZWN0ZWQ7XG4gICAgICBzZWxlY3RlZCA9IHtcbiAgICAgICAgYWRkOiB7fSxcbiAgICAgICAgcmVtb3ZlOiB7fVxuICAgICAgfTtcbiAgICAgIGZvciAobmFtZSBpbiBsaXN0KSB7XG4gICAgICAgIGRhdGEgPSBsaXN0W25hbWVdO1xuICAgICAgICBhZGQgPSBkYXRhLmJyb3dzZXJzLm1hcChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgdmFyIHBhcmFtcztcbiAgICAgICAgICBwYXJhbXMgPSBpLnNwbGl0KCcgJyk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJyb3dzZXI6IHBhcmFtc1swXSArICcgJyArIHBhcmFtc1sxXSxcbiAgICAgICAgICAgIG5vdGU6IHBhcmFtc1syXVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBub3RlcyA9IGFkZC5maWx0ZXIoZnVuY3Rpb24oaSkge1xuICAgICAgICAgIHJldHVybiBpLm5vdGU7XG4gICAgICAgIH0pLm1hcCgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmJyb3dzZXJzLnByZWZpeChpLmJyb3dzZXIpICsgJyAnICsgaS5ub3RlO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpKTtcbiAgICAgICAgbm90ZXMgPSB1dGlscy51bmlxKG5vdGVzKTtcbiAgICAgICAgYWRkID0gYWRkLmZpbHRlcigoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmJyb3dzZXJzLmlzU2VsZWN0ZWQoaS5icm93c2VyKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSkubWFwKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICB2YXIgcHJlZml4O1xuICAgICAgICAgICAgcHJlZml4ID0gX3RoaXMuYnJvd3NlcnMucHJlZml4KGkuYnJvd3Nlcik7XG4gICAgICAgICAgICBpZiAoaS5ub3RlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyAnICcgKyBpLm5vdGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpKTtcbiAgICAgICAgYWRkID0gdGhpcy5zb3J0KHV0aWxzLnVuaXEoYWRkKSk7XG4gICAgICAgIGFsbCA9IGRhdGEuYnJvd3NlcnMubWFwKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuYnJvd3NlcnMucHJlZml4KGkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpKTtcbiAgICAgICAgaWYgKGRhdGEubWlzdGFrZXMpIHtcbiAgICAgICAgICBhbGwgPSBhbGwuY29uY2F0KGRhdGEubWlzdGFrZXMpO1xuICAgICAgICB9XG4gICAgICAgIGFsbCA9IGFsbC5jb25jYXQobm90ZXMpO1xuICAgICAgICBhbGwgPSB1dGlscy51bmlxKGFsbCk7XG4gICAgICAgIGlmIChhZGQubGVuZ3RoKSB7XG4gICAgICAgICAgc2VsZWN0ZWQuYWRkW25hbWVdID0gYWRkO1xuICAgICAgICAgIGlmIChhZGQubGVuZ3RoIDwgYWxsLmxlbmd0aCkge1xuICAgICAgICAgICAgc2VsZWN0ZWQucmVtb3ZlW25hbWVdID0gYWxsLmZpbHRlcihmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhZGQuaW5kZXhPZihpKSA9PT0gLTE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZWN0ZWQucmVtb3ZlW25hbWVdID0gYWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgfTtcblxuICAgIFByZWZpeGVzLnByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24ocHJlZml4ZXMpIHtcbiAgICAgIHJldHVybiBwcmVmaXhlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgdmFyIGFMZW5ndGgsIGJMZW5ndGg7XG4gICAgICAgIGFMZW5ndGggPSB1dGlscy5yZW1vdmVOb3RlKGEpLmxlbmd0aDtcbiAgICAgICAgYkxlbmd0aCA9IHV0aWxzLnJlbW92ZU5vdGUoYikubGVuZ3RoO1xuICAgICAgICBpZiAoYUxlbmd0aCA9PT0gYkxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBiTGVuZ3RoIC0gYUxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIFByZWZpeGVzLnByb3RvdHlwZS5wcmVwcm9jZXNzID0gZnVuY3Rpb24oc2VsZWN0ZWQpIHtcbiAgICAgIHZhciBhZGQsIG5hbWUsIG9sZCwgb2xkcywgcHJlZml4LCBwcmVmaXhlZCwgcHJlZml4ZXMsIHByb3AsIHByb3BzLCByZW1vdmUsIHNlbGVjdG9yLCB2YWx1ZSwgdmFsdWVzLCBfaSwgX2osIF9rLCBfbCwgX2xlbiwgX2xlbjEsIF9sZW4yLCBfbGVuMywgX2xlbjQsIF9sZW41LCBfbGVuNiwgX20sIF9uLCBfbywgX3JlZiwgX3JlZjEsIF9yZWYyO1xuICAgICAgYWRkID0ge1xuICAgICAgICBzZWxlY3RvcnM6IFtdLFxuICAgICAgICAnQHN1cHBvcnRzJzogbmV3IFN1cHBvcnRzKHRoaXMpXG4gICAgICB9O1xuICAgICAgX3JlZiA9IHNlbGVjdGVkLmFkZDtcbiAgICAgIGZvciAobmFtZSBpbiBfcmVmKSB7XG4gICAgICAgIHByZWZpeGVzID0gX3JlZltuYW1lXTtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdAa2V5ZnJhbWVzJykge1xuICAgICAgICAgIGFkZFtuYW1lXSA9IG5ldyBLZXlmcmFtZXMobmFtZSwgcHJlZml4ZXMsIHRoaXMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YVtuYW1lXS5zZWxlY3Rvcikge1xuICAgICAgICAgIGFkZC5zZWxlY3RvcnMucHVzaChTZWxlY3Rvci5sb2FkKG5hbWUsIHByZWZpeGVzLCB0aGlzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvcHMgPSB0aGlzLmRhdGFbbmFtZV0udHJhbnNpdGlvbiA/IHRoaXMudHJhbnNpdGlvblByb3BzIDogdGhpcy5kYXRhW25hbWVdLnByb3BzO1xuICAgICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgICAgdmFsdWUgPSBWYWx1ZS5sb2FkKG5hbWUsIHByZWZpeGVzLCB0aGlzKTtcbiAgICAgICAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gcHJvcHMubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgICAgICAgcHJvcCA9IHByb3BzW19pXTtcbiAgICAgICAgICAgICAgaWYgKCFhZGRbcHJvcF0pIHtcbiAgICAgICAgICAgICAgICBhZGRbcHJvcF0gPSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZXM6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhZGRbcHJvcF0udmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXRoaXMuZGF0YVtuYW1lXS5wcm9wcykge1xuICAgICAgICAgICAgdmFsdWVzID0gKChfcmVmMSA9IGFkZFtuYW1lXSkgIT0gbnVsbCA/IF9yZWYxLnZhbHVlcyA6IHZvaWQgMCkgfHwgW107XG4gICAgICAgICAgICBhZGRbbmFtZV0gPSBEZWNsYXJhdGlvbi5sb2FkKG5hbWUsIHByZWZpeGVzLCB0aGlzKTtcbiAgICAgICAgICAgIGFkZFtuYW1lXS52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZW1vdmUgPSB7XG4gICAgICAgIHNlbGVjdG9yczogW11cbiAgICAgIH07XG4gICAgICBfcmVmMiA9IHNlbGVjdGVkLnJlbW92ZTtcbiAgICAgIGZvciAobmFtZSBpbiBfcmVmMikge1xuICAgICAgICBwcmVmaXhlcyA9IF9yZWYyW25hbWVdO1xuICAgICAgICBpZiAodGhpcy5kYXRhW25hbWVdLnNlbGVjdG9yKSB7XG4gICAgICAgICAgc2VsZWN0b3IgPSBTZWxlY3Rvci5sb2FkKG5hbWUsIHByZWZpeGVzKTtcbiAgICAgICAgICBmb3IgKF9qID0gMCwgX2xlbjEgPSBwcmVmaXhlcy5sZW5ndGg7IF9qIDwgX2xlbjE7IF9qKyspIHtcbiAgICAgICAgICAgIHByZWZpeCA9IHByZWZpeGVzW19qXTtcbiAgICAgICAgICAgIHJlbW92ZS5zZWxlY3RvcnMucHVzaChzZWxlY3Rvci5vbGQocHJlZml4KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG5hbWVbMF0gPT09ICdAJykge1xuICAgICAgICAgIGZvciAoX2sgPSAwLCBfbGVuMiA9IHByZWZpeGVzLmxlbmd0aDsgX2sgPCBfbGVuMjsgX2srKykge1xuICAgICAgICAgICAgcHJlZml4ID0gcHJlZml4ZXNbX2tdO1xuICAgICAgICAgICAgcHJlZml4ZWQgPSAnQCcgKyBwcmVmaXggKyBuYW1lLnNsaWNlKDEpO1xuICAgICAgICAgICAgcmVtb3ZlW3ByZWZpeGVkXSA9IHtcbiAgICAgICAgICAgICAgcmVtb3ZlOiB0cnVlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9wcyA9IHRoaXMuZGF0YVtuYW1lXS50cmFuc2l0aW9uID8gdGhpcy50cmFuc2l0aW9uUHJvcHMgOiB0aGlzLmRhdGFbbmFtZV0ucHJvcHM7XG4gICAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IFZhbHVlLmxvYWQobmFtZSwgW10sIHRoaXMpO1xuICAgICAgICAgICAgZm9yIChfbCA9IDAsIF9sZW4zID0gcHJlZml4ZXMubGVuZ3RoOyBfbCA8IF9sZW4zOyBfbCsrKSB7XG4gICAgICAgICAgICAgIHByZWZpeCA9IHByZWZpeGVzW19sXTtcbiAgICAgICAgICAgICAgb2xkID0gdmFsdWUub2xkKHByZWZpeCk7XG4gICAgICAgICAgICAgIGlmIChvbGQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKF9tID0gMCwgX2xlbjQgPSBwcm9wcy5sZW5ndGg7IF9tIDwgX2xlbjQ7IF9tKyspIHtcbiAgICAgICAgICAgICAgICAgIHByb3AgPSBwcm9wc1tfbV07XG4gICAgICAgICAgICAgICAgICBpZiAoIXJlbW92ZVtwcm9wXSkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVbcHJvcF0gPSB7fTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmICghcmVtb3ZlW3Byb3BdLnZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVbcHJvcF0udmFsdWVzID0gW107XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZW1vdmVbcHJvcF0udmFsdWVzLnB1c2gob2xkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCF0aGlzLmRhdGFbbmFtZV0ucHJvcHMpIHtcbiAgICAgICAgICAgIGZvciAoX24gPSAwLCBfbGVuNSA9IHByZWZpeGVzLmxlbmd0aDsgX24gPCBfbGVuNTsgX24rKykge1xuICAgICAgICAgICAgICBwcmVmaXggPSBwcmVmaXhlc1tfbl07XG4gICAgICAgICAgICAgIHByb3AgPSB2ZW5kb3IudW5wcmVmaXhlZChuYW1lKTtcbiAgICAgICAgICAgICAgb2xkcyA9IHRoaXMuZGVjbChuYW1lKS5vbGQobmFtZSwgcHJlZml4KTtcbiAgICAgICAgICAgICAgZm9yIChfbyA9IDAsIF9sZW42ID0gb2xkcy5sZW5ndGg7IF9vIDwgX2xlbjY7IF9vKyspIHtcbiAgICAgICAgICAgICAgICBwcmVmaXhlZCA9IG9sZHNbX29dO1xuICAgICAgICAgICAgICAgIGlmICghcmVtb3ZlW3ByZWZpeGVkXSkge1xuICAgICAgICAgICAgICAgICAgcmVtb3ZlW3ByZWZpeGVkXSA9IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZW1vdmVbcHJlZml4ZWRdLnJlbW92ZSA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBbYWRkLCByZW1vdmVdO1xuICAgIH07XG5cbiAgICBQcmVmaXhlcy5wcm90b3R5cGUuZGVjbCA9IGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIHZhciBkZWNsO1xuICAgICAgZGVjbCA9IGRlY2xzQ2FjaGVbcHJvcF07XG4gICAgICBpZiAoZGVjbCkge1xuICAgICAgICByZXR1cm4gZGVjbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWNsc0NhY2hlW3Byb3BdID0gRGVjbGFyYXRpb24ubG9hZChwcm9wKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgUHJlZml4ZXMucHJvdG90eXBlLnVucHJlZml4ZWQgPSBmdW5jdGlvbihwcm9wKSB7XG4gICAgICBwcm9wID0gdmVuZG9yLnVucHJlZml4ZWQocHJvcCk7XG4gICAgICByZXR1cm4gdGhpcy5kZWNsKHByb3ApLm5vcm1hbGl6ZShwcm9wKTtcbiAgICB9O1xuXG4gICAgUHJlZml4ZXMucHJvdG90eXBlLnByZWZpeGVkID0gZnVuY3Rpb24ocHJvcCwgcHJlZml4KSB7XG4gICAgICBwcm9wID0gdmVuZG9yLnVucHJlZml4ZWQocHJvcCk7XG4gICAgICByZXR1cm4gdGhpcy5kZWNsKHByb3ApLnByZWZpeGVkKHByb3AsIHByZWZpeCk7XG4gICAgfTtcblxuICAgIFByZWZpeGVzLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbih0eXBlLCBwcm9wKSB7XG4gICAgICB2YXIgZGF0YSwgZ2xvYmFsLCB2YWx1ZXMsIF9yZWYsIF9yZWYxO1xuICAgICAgZGF0YSA9IHRoaXNbdHlwZV07XG4gICAgICBnbG9iYWwgPSAoX3JlZiA9IGRhdGFbJyonXSkgIT0gbnVsbCA/IF9yZWYudmFsdWVzIDogdm9pZCAwO1xuICAgICAgdmFsdWVzID0gKF9yZWYxID0gZGF0YVtwcm9wXSkgIT0gbnVsbCA/IF9yZWYxLnZhbHVlcyA6IHZvaWQgMDtcbiAgICAgIGlmIChnbG9iYWwgJiYgdmFsdWVzKSB7XG4gICAgICAgIHJldHVybiB1dGlscy51bmlxKGdsb2JhbC5jb25jYXQodmFsdWVzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZ2xvYmFsIHx8IHZhbHVlcyB8fCBbXTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgUHJlZml4ZXMucHJvdG90eXBlLmdyb3VwID0gZnVuY3Rpb24oZGVjbCkge1xuICAgICAgdmFyIGNoZWNrZXIsIGluZGV4LCBsZW5ndGgsIHJ1bGUsIHVucHJlZml4ZWQ7XG4gICAgICBydWxlID0gZGVjbC5wYXJlbnQ7XG4gICAgICBpbmRleCA9IHJ1bGUuaW5kZXgoZGVjbCk7XG4gICAgICBsZW5ndGggPSBydWxlLmRlY2xzLmxlbmd0aDtcbiAgICAgIHVucHJlZml4ZWQgPSB0aGlzLnVucHJlZml4ZWQoZGVjbC5wcm9wKTtcbiAgICAgIGNoZWNrZXIgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0ZXAsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIG90aGVyO1xuICAgICAgICAgIGluZGV4ICs9IHN0ZXA7XG4gICAgICAgICAgd2hpbGUgKGluZGV4ID49IDAgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIG90aGVyID0gcnVsZS5kZWNsc1tpbmRleF07XG4gICAgICAgICAgICBpZiAob3RoZXIudHlwZSA9PT0gJ2RlY2wnKSB7XG4gICAgICAgICAgICAgIGlmIChzdGVwID09PSAtMSAmJiBvdGhlci5wcm9wID09PSB1bnByZWZpeGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFCcm93c2Vycy53aXRoUHJlZml4KG90aGVyLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChfdGhpcy51bnByZWZpeGVkKG90aGVyLnByb3ApICE9PSB1bnByZWZpeGVkKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2FsbGJhY2sob3RoZXIpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHN0ZXAgPT09ICsxICYmIG90aGVyLnByb3AgPT09IHVucHJlZml4ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUJyb3dzZXJzLndpdGhQcmVmaXgob3RoZXIudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluZGV4ICs9IHN0ZXA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdXA6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrZXIoLTEsIGNhbGxiYWNrKTtcbiAgICAgICAgfSxcbiAgICAgICAgZG93bjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2tlcigrMSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJlZml4ZXM7XG5cbiAgfSkoKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFByZWZpeGVzO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgUHJvY2Vzc29yLCBWYWx1ZSwgdXRpbHMsIHZlbmRvcjtcblxuICB2ZW5kb3IgPSByZXF1aXJlKCdwb3N0Y3NzL2xpYi92ZW5kb3InKTtcblxuICBWYWx1ZSA9IHJlcXVpcmUoJy4vdmFsdWUnKTtcblxuICB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuICBQcm9jZXNzb3IgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gUHJvY2Vzc29yKHByZWZpeGVzKSB7XG4gICAgICB0aGlzLnByZWZpeGVzID0gcHJlZml4ZXM7XG4gICAgfVxuXG4gICAgUHJvY2Vzc29yLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihjc3MpIHtcbiAgICAgIHZhciBrZXlmcmFtZXMsIHN1cHBvcnRzO1xuICAgICAga2V5ZnJhbWVzID0gdGhpcy5wcmVmaXhlcy5hZGRbJ0BrZXlmcmFtZXMnXTtcbiAgICAgIHN1cHBvcnRzID0gdGhpcy5wcmVmaXhlcy5hZGRbJ0BzdXBwb3J0cyddO1xuICAgICAgY3NzLmVhY2hBdFJ1bGUoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihydWxlKSB7XG4gICAgICAgICAgaWYgKHJ1bGUubmFtZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuZGlzYWJsZWQocnVsZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGtleWZyYW1lcyAhPSBudWxsID8ga2V5ZnJhbWVzLnByb2Nlc3MocnVsZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChydWxlLm5hbWUgPT09ICdzdXBwb3J0cycpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuZGlzYWJsZWQocnVsZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHN1cHBvcnRzLnByb2Nlc3MocnVsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgICAgY3NzLmVhY2hSdWxlKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICAgIHZhciBzZWxlY3RvciwgX2ksIF9sZW4sIF9yZWYsIF9yZXN1bHRzO1xuICAgICAgICAgIGlmIChfdGhpcy5kaXNhYmxlZChydWxlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfcmVmID0gX3RoaXMucHJlZml4ZXMuYWRkLnNlbGVjdG9ycztcbiAgICAgICAgICBfcmVzdWx0cyA9IFtdO1xuICAgICAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICAgICAgc2VsZWN0b3IgPSBfcmVmW19pXTtcbiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2goc2VsZWN0b3IucHJvY2VzcyhydWxlKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICAgIGNzcy5lYWNoRGVjbCgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRlY2wpIHtcbiAgICAgICAgICB2YXIgcHJlZml4O1xuICAgICAgICAgIHByZWZpeCA9IF90aGlzLnByZWZpeGVzLmFkZFtkZWNsLnByb3BdO1xuICAgICAgICAgIGlmIChwcmVmaXggJiYgcHJlZml4LnByZWZpeGVzKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmRpc2FibGVkKGRlY2wpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwcmVmaXgucHJvY2VzcyhkZWNsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgICByZXR1cm4gY3NzLmVhY2hEZWNsKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZGVjbCkge1xuICAgICAgICAgIHZhciB1bnByZWZpeGVkLCB2YWx1ZSwgX2ksIF9sZW4sIF9yZWY7XG4gICAgICAgICAgaWYgKF90aGlzLmRpc2FibGVkKGRlY2wpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHVucHJlZml4ZWQgPSBfdGhpcy5wcmVmaXhlcy51bnByZWZpeGVkKGRlY2wucHJvcCk7XG4gICAgICAgICAgX3JlZiA9IF90aGlzLnByZWZpeGVzLnZhbHVlcygnYWRkJywgdW5wcmVmaXhlZCk7XG4gICAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IF9yZWZbX2ldO1xuICAgICAgICAgICAgdmFsdWUucHJvY2VzcyhkZWNsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFZhbHVlLnNhdmUoX3RoaXMucHJlZml4ZXMsIGRlY2wpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgIH07XG5cbiAgICBQcm9jZXNzb3IucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGNzcykge1xuICAgICAgdmFyIGNoZWNrZXIsIF9pLCBfbGVuLCBfcmVmO1xuICAgICAgY3NzLmVhY2hBdFJ1bGUoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihydWxlLCBpKSB7XG4gICAgICAgICAgaWYgKF90aGlzLnByZWZpeGVzLnJlbW92ZVsnQCcgKyBydWxlLm5hbWVdKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmRpc2FibGVkKHJ1bGUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBydWxlLnBhcmVudC5yZW1vdmUoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgICAgX3JlZiA9IHRoaXMucHJlZml4ZXMucmVtb3ZlLnNlbGVjdG9ycztcbiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICBjaGVja2VyID0gX3JlZltfaV07XG4gICAgICAgIGNzcy5lYWNoUnVsZSgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocnVsZSwgaSkge1xuICAgICAgICAgICAgaWYgKGNoZWNrZXIuY2hlY2socnVsZSkpIHtcbiAgICAgICAgICAgICAgaWYgKCFfdGhpcy5kaXNhYmxlZChydWxlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBydWxlLnBhcmVudC5yZW1vdmUoaSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3NzLmVhY2hEZWNsKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZGVjbCwgaSkge1xuICAgICAgICAgIHZhciBub3RIYWNrLCBydWxlLCB1bnByZWZpeGVkLCBfaiwgX2xlbjEsIF9yZWYxLCBfcmVmMjtcbiAgICAgICAgICBpZiAoX3RoaXMuZGlzYWJsZWQoZGVjbCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcnVsZSA9IGRlY2wucGFyZW50O1xuICAgICAgICAgIHVucHJlZml4ZWQgPSBfdGhpcy5wcmVmaXhlcy51bnByZWZpeGVkKGRlY2wucHJvcCk7XG4gICAgICAgICAgaWYgKChfcmVmMSA9IF90aGlzLnByZWZpeGVzLnJlbW92ZVtkZWNsLnByb3BdKSAhPSBudWxsID8gX3JlZjEucmVtb3ZlIDogdm9pZCAwKSB7XG4gICAgICAgICAgICBub3RIYWNrID0gX3RoaXMucHJlZml4ZXMuZ3JvdXAoZGVjbCkuZG93bihmdW5jdGlvbihvdGhlcikge1xuICAgICAgICAgICAgICByZXR1cm4gb3RoZXIucHJvcCA9PT0gdW5wcmVmaXhlZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG5vdEhhY2spIHtcbiAgICAgICAgICAgICAgaWYgKGRlY2wuYmVmb3JlLmluZGV4T2YoXCJcXG5cIikgPiAtMSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnJlZHVjZVNwYWNlcyhkZWNsKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBydWxlLnJlbW92ZShpKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBfcmVmMiA9IF90aGlzLnByZWZpeGVzLnZhbHVlcygncmVtb3ZlJywgdW5wcmVmaXhlZCk7XG4gICAgICAgICAgZm9yIChfaiA9IDAsIF9sZW4xID0gX3JlZjIubGVuZ3RoOyBfaiA8IF9sZW4xOyBfaisrKSB7XG4gICAgICAgICAgICBjaGVja2VyID0gX3JlZjJbX2pdO1xuICAgICAgICAgICAgaWYgKGNoZWNrZXIuY2hlY2soZGVjbC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgcnVsZS5yZW1vdmUoaSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgfTtcblxuICAgIFByb2Nlc3Nvci5wcm90b3R5cGUuZGlzYWJsZWQgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgc3RhdHVzO1xuICAgICAgaWYgKG5vZGUuX2F1dG9wcmVmaXhlckRpc2FibGVkICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuX2F1dG9wcmVmaXhlckRpc2FibGVkO1xuICAgICAgfSBlbHNlIGlmIChub2RlLmRlY2xzIHx8IG5vZGUucnVsZXMpIHtcbiAgICAgICAgc3RhdHVzID0gdm9pZCAwO1xuICAgICAgICBub2RlLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgIGlmIChpLnR5cGUgIT09ICdjb21tZW50Jykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaS50ZXh0ID09PSAnYXV0b3ByZWZpeGVyOiBvZmYnKSB7XG4gICAgICAgICAgICBzdGF0dXMgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGkudGV4dCA9PT0gJ2F1dG9wcmVmaXhlcjogb24nKSB7XG4gICAgICAgICAgICBzdGF0dXMgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBub2RlLl9hdXRvcHJlZml4ZXJEaXNhYmxlZCA9IHN0YXR1cyAhPSBudWxsID8gIXN0YXR1cyA6IG5vZGUucGFyZW50ID8gdGhpcy5kaXNhYmxlZChub2RlLnBhcmVudCkgOiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBub2RlLl9hdXRvcHJlZml4ZXJEaXNhYmxlZCA9IHRoaXMuZGlzYWJsZWQobm9kZS5wYXJlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBQcm9jZXNzb3IucHJvdG90eXBlLnJlZHVjZVNwYWNlcyA9IGZ1bmN0aW9uKGRlY2wpIHtcbiAgICAgIHZhciBkaWZmLCBwYXJ0cywgcHJldk1pbiwgc3RvcDtcbiAgICAgIHN0b3AgPSBmYWxzZTtcbiAgICAgIHRoaXMucHJlZml4ZXMuZ3JvdXAoZGVjbCkudXAoZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHN0b3AgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgICBpZiAoc3RvcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwYXJ0cyA9IGRlY2wuYmVmb3JlLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgcHJldk1pbiA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdLmxlbmd0aDtcbiAgICAgIGRpZmYgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzLnByZWZpeGVzLmdyb3VwKGRlY2wpLmRvd24oZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgICAgdmFyIGxhc3Q7XG4gICAgICAgIHBhcnRzID0gb3RoZXIuYmVmb3JlLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICBsYXN0ID0gcGFydHMubGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKHBhcnRzW2xhc3RdLmxlbmd0aCA+IHByZXZNaW4pIHtcbiAgICAgICAgICBpZiAoZGlmZiA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRpZmYgPSBwYXJ0c1tsYXN0XS5sZW5ndGggLSBwcmV2TWluO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXJ0c1tsYXN0XSA9IHBhcnRzW2xhc3RdLnNsaWNlKDAsIC1kaWZmKTtcbiAgICAgICAgICByZXR1cm4gb3RoZXIuYmVmb3JlID0gcGFydHMuam9pbihcIlxcblwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiBQcm9jZXNzb3I7XG5cbiAgfSkoKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFByb2Nlc3NvcjtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIEJyb3dzZXJzLCBPbGRTZWxlY3RvciwgUHJlZml4ZXIsIFNlbGVjdG9yLCB1dGlscyxcbiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTtcblxuICBPbGRTZWxlY3RvciA9IHJlcXVpcmUoJy4vb2xkLXNlbGVjdG9yJyk7XG5cbiAgUHJlZml4ZXIgPSByZXF1aXJlKCcuL3ByZWZpeGVyJyk7XG5cbiAgQnJvd3NlcnMgPSByZXF1aXJlKCcuL2Jyb3dzZXJzJyk7XG5cbiAgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbiAgU2VsZWN0b3IgPSAoZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNlbGVjdG9yLCBfc3VwZXIpO1xuXG4gICAgZnVuY3Rpb24gU2VsZWN0b3IobmFtZSwgcHJlZml4ZXMsIGFsbCkge1xuICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgIHRoaXMucHJlZml4ZXMgPSBwcmVmaXhlcztcbiAgICAgIHRoaXMuYWxsID0gYWxsO1xuICAgICAgdGhpcy5yZWdleHBDYWNoZSA9IHt9O1xuICAgIH1cblxuICAgIFNlbGVjdG9yLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgIGlmIChydWxlLnNlbGVjdG9yLmluZGV4T2YodGhpcy5uYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuICEhcnVsZS5zZWxlY3Rvci5tYXRjaCh0aGlzLnJlZ2V4cCgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgU2VsZWN0b3IucHJvdG90eXBlLnByZWZpeGVkID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgICByZXR1cm4gdGhpcy5uYW1lLnJlcGxhY2UoL14oW15cXHddKikvLCAnJDEnICsgcHJlZml4KTtcbiAgICB9O1xuXG4gICAgU2VsZWN0b3IucHJvdG90eXBlLnJlZ2V4cCA9IGZ1bmN0aW9uKHByZWZpeCkge1xuICAgICAgdmFyIG5hbWU7XG4gICAgICBpZiAodGhpcy5yZWdleHBDYWNoZVtwcmVmaXhdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZ2V4cENhY2hlW3ByZWZpeF07XG4gICAgICB9XG4gICAgICBuYW1lID0gcHJlZml4ID8gdGhpcy5wcmVmaXhlZChwcmVmaXgpIDogdGhpcy5uYW1lO1xuICAgICAgcmV0dXJuIHRoaXMucmVnZXhwQ2FjaGVbcHJlZml4XSA9IFJlZ0V4cChcIihefFteOlxcXCInPV0pXCIgKyAodXRpbHMuZXNjYXBlUmVnZXhwKG5hbWUpKSwgXCJnaVwiKTtcbiAgICB9O1xuXG4gICAgU2VsZWN0b3IucHJvdG90eXBlLnBvc3NpYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gQnJvd3NlcnMucHJlZml4ZXMoKTtcbiAgICB9O1xuXG4gICAgU2VsZWN0b3IucHJvdG90eXBlLnByZWZpeGVkcyA9IGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgIHZhciBwcmVmaXgsIHByZWZpeGVkcywgX2ksIF9sZW4sIF9yZWY7XG4gICAgICBpZiAocnVsZS5fYXV0b3ByZWZpeGVyUHJlZml4ZWRzKSB7XG4gICAgICAgIHJldHVybiBydWxlLl9hdXRvcHJlZml4ZXJQcmVmaXhlZHM7XG4gICAgICB9XG4gICAgICBwcmVmaXhlZHMgPSB7fTtcbiAgICAgIF9yZWYgPSB0aGlzLnBvc3NpYmxlKCk7XG4gICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgcHJlZml4ID0gX3JlZltfaV07XG4gICAgICAgIHByZWZpeGVkc1twcmVmaXhdID0gdGhpcy5yZXBsYWNlKHJ1bGUuc2VsZWN0b3IsIHByZWZpeCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcnVsZS5fYXV0b3ByZWZpeGVyUHJlZml4ZWRzID0gcHJlZml4ZWRzO1xuICAgIH07XG5cbiAgICBTZWxlY3Rvci5wcm90b3R5cGUuYWxyZWFkeSA9IGZ1bmN0aW9uKHJ1bGUsIHByZWZpeGVkcywgcHJlZml4KSB7XG4gICAgICB2YXIgYmVmb3JlLCBpbmRleCwga2V5LCBwcmVmaXhlZCwgc29tZTtcbiAgICAgIGluZGV4ID0gcnVsZS5wYXJlbnQuaW5kZXgocnVsZSkgLSAxO1xuICAgICAgd2hpbGUgKGluZGV4ID49IDApIHtcbiAgICAgICAgYmVmb3JlID0gcnVsZS5wYXJlbnQucnVsZXNbaW5kZXhdO1xuICAgICAgICBpZiAoYmVmb3JlLnR5cGUgIT09ICdydWxlJykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBzb21lID0gZmFsc2U7XG4gICAgICAgIGZvciAoa2V5IGluIHByZWZpeGVkcykge1xuICAgICAgICAgIHByZWZpeGVkID0gcHJlZml4ZWRzW2tleV07XG4gICAgICAgICAgaWYgKGJlZm9yZS5zZWxlY3RvciA9PT0gcHJlZml4ZWQpIHtcbiAgICAgICAgICAgIGlmIChwcmVmaXggPT09IGtleSkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNvbWUgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzb21lKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4IC09IDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIFNlbGVjdG9yLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24oc2VsZWN0b3IsIHByZWZpeCkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yLnJlcGxhY2UodGhpcy5yZWdleHAoKSwgJyQxJyArIHRoaXMucHJlZml4ZWQocHJlZml4KSk7XG4gICAgfTtcblxuICAgIFNlbGVjdG9yLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihydWxlLCBwcmVmaXgpIHtcbiAgICAgIHZhciBjbG9uZWQsIHByZWZpeGVkcztcbiAgICAgIHByZWZpeGVkcyA9IHRoaXMucHJlZml4ZWRzKHJ1bGUpO1xuICAgICAgaWYgKHRoaXMuYWxyZWFkeShydWxlLCBwcmVmaXhlZHMsIHByZWZpeCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY2xvbmVkID0gdGhpcy5jbG9uZShydWxlLCB7XG4gICAgICAgIHNlbGVjdG9yOiBwcmVmaXhlZHNbcHJlZml4XVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcnVsZS5wYXJlbnQuaW5zZXJ0QmVmb3JlKHJ1bGUsIGNsb25lZCk7XG4gICAgfTtcblxuICAgIFNlbGVjdG9yLnByb3RvdHlwZS5vbGQgPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICAgIHJldHVybiBuZXcgT2xkU2VsZWN0b3IodGhpcywgcHJlZml4KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNlbGVjdG9yO1xuXG4gIH0pKFByZWZpeGVyKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFNlbGVjdG9yO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICB2YXIgUHJlZml4ZXMsIFN1cHBvcnRzLCBWYWx1ZSwgZmluZENvbmRpdGlvbiwgZmluZERlY2wsIGxpc3QsIHBvc3Rjc3MsIHNwbGl0LCB1dGlscztcblxuICBQcmVmaXhlcyA9IHJlcXVpcmUoJy4vcHJlZml4ZXMnKTtcblxuICBWYWx1ZSA9IHJlcXVpcmUoJy4vdmFsdWUnKTtcblxuICB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuICBwb3N0Y3NzID0gcmVxdWlyZSgncG9zdGNzcycpO1xuXG4gIGxpc3QgPSByZXF1aXJlKCdwb3N0Y3NzL2xpYi9saXN0Jyk7XG5cbiAgc3BsaXQgPSAvXFwoXFxzKihbXlxcKFxcKTpdKylcXHMqOihbXlxcKV0rKS87XG5cbiAgZmluZERlY2wgPSAvXFwoXFxzKihbXlxcKFxcKTpdKylcXHMqOlxccyooW15cXCldKylcXHMqXFwpL2c7XG5cbiAgZmluZENvbmRpdGlvbiA9IC8obm90XFxzKik/XFwoXFxzKihbXlxcKFxcKTpdKylcXHMqOlxccyooW15cXCldKylcXHMqXFwpXFxzKm9yXFxzKi9naTtcblxuICBTdXBwb3J0cyA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBTdXBwb3J0cyhhbGwpIHtcbiAgICAgIHRoaXMuYWxsID0gYWxsO1xuICAgIH1cblxuICAgIFN1cHBvcnRzLnByb3RvdHlwZS52aXJ0dWFsID0gZnVuY3Rpb24ocHJvcCwgdmFsdWUpIHtcbiAgICAgIHZhciBydWxlO1xuICAgICAgcnVsZSA9IHBvc3Rjc3MucGFyc2UoJ2F7fScpLmZpcnN0O1xuICAgICAgcnVsZS5hcHBlbmQoe1xuICAgICAgICBwcm9wOiBwcm9wLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGJlZm9yZTogJydcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfTtcblxuICAgIFN1cHBvcnRzLnByb3RvdHlwZS5wcmVmaXhlZCA9IGZ1bmN0aW9uKHByb3AsIHZhbHVlKSB7XG4gICAgICB2YXIgZGVjbCwgcHJlZml4ZXIsIHJ1bGUsIF9pLCBfaiwgX2xlbiwgX2xlbjEsIF9yZWYsIF9yZWYxO1xuICAgICAgcnVsZSA9IHRoaXMudmlydHVhbChwcm9wLCB2YWx1ZSk7XG4gICAgICBwcmVmaXhlciA9IHRoaXMuYWxsLmFkZFtwcm9wXTtcbiAgICAgIGlmIChwcmVmaXhlciAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJlZml4ZXIucHJvY2VzcyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgcHJlZml4ZXIucHJvY2VzcyhydWxlLmZpcnN0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX3JlZiA9IHJ1bGUuZGVjbHM7XG4gICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgZGVjbCA9IF9yZWZbX2ldO1xuICAgICAgICBfcmVmMSA9IHRoaXMuYWxsLnZhbHVlcygnYWRkJywgcHJvcCk7XG4gICAgICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IF9yZWYxLmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykge1xuICAgICAgICAgIHZhbHVlID0gX3JlZjFbX2pdO1xuICAgICAgICAgIHZhbHVlLnByb2Nlc3MoZGVjbCk7XG4gICAgICAgIH1cbiAgICAgICAgVmFsdWUuc2F2ZSh0aGlzLmFsbCwgZGVjbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcnVsZS5kZWNscztcbiAgICB9O1xuXG4gICAgU3VwcG9ydHMucHJvdG90eXBlLmNsZWFuID0gZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgICByZXR1cm4gcGFyYW1zLnJlcGxhY2UoZmluZENvbmRpdGlvbiwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihhbGwpIHtcbiAgICAgICAgICB2YXIgY2hlY2ssIGNoZWNrZXIsIHByb3AsIHVucHJlZml4ZWQsIHZhbHVlLCBfLCBfaSwgX2xlbiwgX3JlZiwgX3JlZjEsIF9yZWYyO1xuICAgICAgICAgIGlmIChhbGwuc2xpY2UoMCwgMykudG9Mb3dlckNhc2UoKSA9PT0gJ25vdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBhbGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIF9yZWYgPSBhbGwubWF0Y2goc3BsaXQpLCBfID0gX3JlZlswXSwgcHJvcCA9IF9yZWZbMV0sIHZhbHVlID0gX3JlZlsyXTtcbiAgICAgICAgICB1bnByZWZpeGVkID0gX3RoaXMuYWxsLnVucHJlZml4ZWQocHJvcCk7XG4gICAgICAgICAgaWYgKChfcmVmMSA9IF90aGlzLmFsbC5jbGVhbmVyKCkucmVtb3ZlW3Byb3BdKSAhPSBudWxsID8gX3JlZjEucmVtb3ZlIDogdm9pZCAwKSB7XG4gICAgICAgICAgICBjaGVjayA9IG5ldyBSZWdFeHAoJyhcXFxcKHxcXFxccyknICsgdXRpbHMuZXNjYXBlUmVnZXhwKHVucHJlZml4ZWQpICsgJzonKTtcbiAgICAgICAgICAgIGlmIChjaGVjay50ZXN0KHBhcmFtcykpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBfcmVmMiA9IF90aGlzLmFsbC5jbGVhbmVyKCkudmFsdWVzKCdyZW1vdmUnLCB1bnByZWZpeGVkKTtcbiAgICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYyLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgICAgICBjaGVja2VyID0gX3JlZjJbX2ldO1xuICAgICAgICAgICAgaWYgKGNoZWNrZXIuY2hlY2sodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFsbDtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKS5yZXBsYWNlKC9cXChcXHMqXFwoKC4qKVxcKVxccypcXCkvZywgJygkMSknKTtcbiAgICB9O1xuXG4gICAgU3VwcG9ydHMucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbihydWxlKSB7XG4gICAgICBydWxlLnBhcmFtcyA9IHRoaXMuY2xlYW4ocnVsZS5wYXJhbXMpO1xuICAgICAgcmV0dXJuIHJ1bGUucGFyYW1zID0gcnVsZS5wYXJhbXMucmVwbGFjZShmaW5kRGVjbCwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihhbGwsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgdmFyIGksIHN0cmluZ2VkO1xuICAgICAgICAgIHN0cmluZ2VkID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIF9pLCBfbGVuLCBfcmVmLCBfcmVzdWx0cztcbiAgICAgICAgICAgIF9yZWYgPSB0aGlzLnByZWZpeGVkKHByb3AsIHZhbHVlKTtcbiAgICAgICAgICAgIF9yZXN1bHRzID0gW107XG4gICAgICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgICAgICAgaSA9IF9yZWZbX2ldO1xuICAgICAgICAgICAgICBfcmVzdWx0cy5wdXNoKFwiKFwiICsgaS5wcm9wICsgXCI6IFwiICsgaS52YWx1ZSArIFwiKVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICAgICAgICB9KS5jYWxsKF90aGlzKTtcbiAgICAgICAgICBpZiAoc3RyaW5nZWQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nZWRbMF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnKCcgKyBzdHJpbmdlZC5qb2luKCcgb3IgJykgKyAnKSc7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU3VwcG9ydHM7XG5cbiAgfSkoKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFN1cHBvcnRzO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBlcnJvcjogZnVuY3Rpb24odGV4dCkge1xuICAgICAgdmFyIGVycjtcbiAgICAgIGVyciA9IG5ldyBFcnJvcih0ZXh0KTtcbiAgICAgIGVyci5hdXRvcHJlZml4ZXIgPSB0cnVlO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH0sXG4gICAgdW5pcTogZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgIHZhciBmaWx0ZXJlZCwgaSwgX2ksIF9sZW47XG4gICAgICBmaWx0ZXJlZCA9IFtdO1xuICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBhcnJheS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICBpID0gYXJyYXlbX2ldO1xuICAgICAgICBpZiAoZmlsdGVyZWQuaW5kZXhPZihpKSA9PT0gLTEpIHtcbiAgICAgICAgICBmaWx0ZXJlZC5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmlsdGVyZWQ7XG4gICAgfSxcbiAgICByZW1vdmVOb3RlOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIGlmIChzdHJpbmcuaW5kZXhPZignICcpID09PSAtMSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnICcpWzBdO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXNjYXBlUmVnZXhwOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvWy4/KitcXF5cXCRcXFtcXF1cXFxcKCl7fXxcXC1dL2csICdcXFxcJCYnKTtcbiAgICB9LFxuICAgIHJlZ2V4cDogZnVuY3Rpb24od29yZCwgZXNjYXBlKSB7XG4gICAgICBpZiAoZXNjYXBlID09IG51bGwpIHtcbiAgICAgICAgZXNjYXBlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChlc2NhcGUpIHtcbiAgICAgICAgd29yZCA9IHRoaXMuZXNjYXBlUmVnZXhwKHdvcmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFJlZ0V4cChcIihefFtcXFxccywoXSkoXCIgKyB3b3JkICsgXCIoJHxbXFxcXHMoLF0pKVwiLCBcImdpXCIpO1xuICAgIH1cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgdmFyIE9sZFZhbHVlLCBQcmVmaXhlciwgVmFsdWUsIHV0aWxzLCB2ZW5kb3IsXG4gICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07XG5cbiAgUHJlZml4ZXIgPSByZXF1aXJlKCcuL3ByZWZpeGVyJyk7XG5cbiAgT2xkVmFsdWUgPSByZXF1aXJlKCcuL29sZC12YWx1ZScpO1xuXG4gIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4gIHZlbmRvciA9IHJlcXVpcmUoJ3Bvc3Rjc3MvbGliL3ZlbmRvcicpO1xuXG4gIFZhbHVlID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhWYWx1ZSwgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIFZhbHVlKCkge1xuICAgICAgcmV0dXJuIFZhbHVlLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIFZhbHVlLnNhdmUgPSBmdW5jdGlvbihwcmVmaXhlcywgZGVjbCkge1xuICAgICAgdmFyIGFscmVhZHksIGNsb25lZCwgcHJlZml4LCBwcmVmaXhlZCwgcHJvcFByZWZpeCwgcnVsZSwgdHJpbW1lZCwgdmFsdWUsIF9yZWYsIF9yZXN1bHRzO1xuICAgICAgX3JlZiA9IGRlY2wuX2F1dG9wcmVmaXhlclZhbHVlcztcbiAgICAgIF9yZXN1bHRzID0gW107XG4gICAgICBmb3IgKHByZWZpeCBpbiBfcmVmKSB7XG4gICAgICAgIHZhbHVlID0gX3JlZltwcmVmaXhdO1xuICAgICAgICBpZiAodmFsdWUgPT09IGRlY2wudmFsdWUpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBwcm9wUHJlZml4ID0gdmVuZG9yLnByZWZpeChkZWNsLnByb3ApO1xuICAgICAgICBpZiAocHJvcFByZWZpeCA9PT0gcHJlZml4KSB7XG4gICAgICAgICAgX3Jlc3VsdHMucHVzaChkZWNsLnZhbHVlID0gdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BQcmVmaXggPT09ICctcGllLScpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmVmaXhlZCA9IHByZWZpeGVzLnByZWZpeGVkKGRlY2wucHJvcCwgcHJlZml4KTtcbiAgICAgICAgICBydWxlID0gZGVjbC5wYXJlbnQ7XG4gICAgICAgICAgaWYgKHJ1bGUuZXZlcnkoZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgcmV0dXJuIGkucHJvcCAhPT0gcHJlZml4ZWQ7XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHRyaW1tZWQgPSB2YWx1ZS5yZXBsYWNlKC9cXHMrLywgJyAnKTtcbiAgICAgICAgICAgIGFscmVhZHkgPSBydWxlLnNvbWUoZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICByZXR1cm4gaS5wcm9wID09PSBkZWNsLnByb3AgJiYgaS52YWx1ZS5yZXBsYWNlKC9cXHMrLywgJyAnKSA9PT0gdHJpbW1lZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFhbHJlYWR5KSB7XG4gICAgICAgICAgICAgIGNsb25lZCA9IHRoaXMuY2xvbmUoZGVjbCwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgX3Jlc3VsdHMucHVzaChkZWNsLnBhcmVudC5pbnNlcnRCZWZvcmUoZGVjbCwgY2xvbmVkKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfcmVzdWx0cy5wdXNoKHZvaWQgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2godm9pZCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICB9O1xuXG4gICAgVmFsdWUucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oZGVjbCkge1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgdmFsdWUgPSBkZWNsLnZhbHVlO1xuICAgICAgaWYgKHZhbHVlLmluZGV4T2YodGhpcy5uYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuICEhdmFsdWUubWF0Y2godGhpcy5yZWdleHAoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFZhbHVlLnByb3RvdHlwZS5yZWdleHAgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlZ2V4cENhY2hlIHx8ICh0aGlzLnJlZ2V4cENhY2hlID0gdXRpbHMucmVnZXhwKHRoaXMubmFtZSkpO1xuICAgIH07XG5cbiAgICBWYWx1ZS5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uKHN0cmluZywgcHJlZml4KSB7XG4gICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UodGhpcy5yZWdleHAoKSwgJyQxJyArIHByZWZpeCArICckMicpO1xuICAgIH07XG5cbiAgICBWYWx1ZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oZGVjbCwgcHJlZml4KSB7XG4gICAgICB2YXIgdmFsdWUsIF9yZWY7XG4gICAgICBkZWNsLl9hdXRvcHJlZml4ZXJWYWx1ZXMgfHwgKGRlY2wuX2F1dG9wcmVmaXhlclZhbHVlcyA9IHt9KTtcbiAgICAgIHZhbHVlID0gZGVjbC5fYXV0b3ByZWZpeGVyVmFsdWVzW3ByZWZpeF0gfHwgKChfcmVmID0gZGVjbC5fdmFsdWUpICE9IG51bGwgPyBfcmVmLnJhdyA6IHZvaWQgMCkgfHwgZGVjbC52YWx1ZTtcbiAgICAgIHZhbHVlID0gdGhpcy5yZXBsYWNlKHZhbHVlLCBwcmVmaXgpO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWNsLl9hdXRvcHJlZml4ZXJWYWx1ZXNbcHJlZml4XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBWYWx1ZS5wcm90b3R5cGUub2xkID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgICByZXR1cm4gbmV3IE9sZFZhbHVlKHByZWZpeCArIHRoaXMubmFtZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBWYWx1ZTtcblxuICB9KShQcmVmaXhlcik7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBWYWx1ZTtcblxufSkuY2FsbCh0aGlzKTtcbiIsIm1vZHVsZS5leHBvcnRzPXtcImVyYXNcIjp7XCJlLTM0XCI6XCIzNCB2ZXJzaW9ucyBiYWNrXCIsXCJlLTMzXCI6XCIzMyB2ZXJzaW9ucyBiYWNrXCIsXCJlLTMyXCI6XCIzMiB2ZXJzaW9ucyBiYWNrXCIsXCJlLTMxXCI6XCIzMSB2ZXJzaW9ucyBiYWNrXCIsXCJlLTMwXCI6XCIzMCB2ZXJzaW9ucyBiYWNrXCIsXCJlLTI5XCI6XCIyOSB2ZXJzaW9ucyBiYWNrXCIsXCJlLTI4XCI6XCIyOCB2ZXJzaW9ucyBiYWNrXCIsXCJlLTI3XCI6XCIyNyB2ZXJzaW9ucyBiYWNrXCIsXCJlLTI2XCI6XCIyNiB2ZXJzaW9ucyBiYWNrXCIsXCJlLTI1XCI6XCIyNSB2ZXJzaW9ucyBiYWNrXCIsXCJlLTI0XCI6XCIyNCB2ZXJzaW9ucyBiYWNrXCIsXCJlLTIzXCI6XCIyMyB2ZXJzaW9ucyBiYWNrXCIsXCJlLTIyXCI6XCIyMiB2ZXJzaW9ucyBiYWNrXCIsXCJlLTIxXCI6XCIyMSB2ZXJzaW9ucyBiYWNrXCIsXCJlLTIwXCI6XCIyMCB2ZXJzaW9ucyBiYWNrXCIsXCJlLTE5XCI6XCIxOSB2ZXJzaW9ucyBiYWNrXCIsXCJlLTE4XCI6XCIxOCB2ZXJzaW9ucyBiYWNrXCIsXCJlLTE3XCI6XCIxNyB2ZXJzaW9ucyBiYWNrXCIsXCJlLTE2XCI6XCIxNiB2ZXJzaW9ucyBiYWNrXCIsXCJlLTE1XCI6XCIxNSB2ZXJzaW9ucyBiYWNrXCIsXCJlLTE0XCI6XCIxNCB2ZXJzaW9ucyBiYWNrXCIsXCJlLTEzXCI6XCIxMyB2ZXJzaW9ucyBiYWNrXCIsXCJlLTEyXCI6XCIxMiB2ZXJzaW9ucyBiYWNrXCIsXCJlLTExXCI6XCIxMSB2ZXJzaW9ucyBiYWNrXCIsXCJlLTEwXCI6XCIxMCB2ZXJzaW9ucyBiYWNrXCIsXCJlLTlcIjpcIjkgdmVyc2lvbnMgYmFja1wiLFwiZS04XCI6XCI4IHZlcnNpb25zIGJhY2tcIixcImUtN1wiOlwiNyB2ZXJzaW9ucyBiYWNrXCIsXCJlLTZcIjpcIjYgdmVyc2lvbnMgYmFja1wiLFwiZS01XCI6XCI1IHZlcnNpb25zIGJhY2tcIixcImUtNFwiOlwiNCB2ZXJzaW9ucyBiYWNrXCIsXCJlLTNcIjpcIjMgdmVyc2lvbnMgYmFja1wiLFwiZS0yXCI6XCIyIHZlcnNpb25zIGJhY2tcIixcImUtMVwiOlwiUHJldmlvdXMgdmVyc2lvblwiLFwiZTBcIjpcIkN1cnJlbnRcIixcImUxXCI6XCJOZWFyIGZ1dHVyZVwiLFwiZTJcIjpcIkZhcnRoZXIgZnV0dXJlXCIsXCJlM1wiOlwiMyB2ZXJzaW9ucyBhaGVhZFwifSxcImFnZW50c1wiOntcImllXCI6e1wiYnJvd3NlclwiOlwiSUVcIixcImFiYnJcIjpcIklFXCIsXCJwcmVmaXhcIjpcIm1zXCIsXCJ0eXBlXCI6XCJkZXNrdG9wXCIsXCJ1c2FnZV9nbG9iYWxcIjp7XCI1LjVcIjowLjAwOTI5OCxcIjZcIjowLjE4MDI2NyxcIjdcIjowLjEwMDk1LFwiOFwiOjMuOTU4NjcsXCI5XCI6Mi4zOTM5NSxcIjEwXCI6Mi4yOTMsXCIxMVwiOjcuMzY5MzJ9LFwidmVyc2lvbnNcIjpbbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxcIjUuNVwiLFwiNlwiLFwiN1wiLFwiOFwiLFwiOVwiLFwiMTBcIixcIjExXCIsbnVsbCxudWxsLG51bGxdfSxcImZpcmVmb3hcIjp7XCJicm93c2VyXCI6XCJGaXJlZm94XCIsXCJhYmJyXCI6XCJGRlwiLFwicHJlZml4XCI6XCJtb3pcIixcInR5cGVcIjpcImRlc2t0b3BcIixcInVzYWdlX2dsb2JhbFwiOntcIjJcIjowLjAxMzcsXCIzXCI6MC4wNjE2NSxcIjMuNVwiOjAuMDIwNTUsXCIzLjZcIjowLjEwOTYsXCI0XCI6MC4wMjc0LFwiNVwiOjAuMDIwNTUsXCI2XCI6MC4wMjA1NSxcIjdcIjowLjAxMzcsXCI4XCI6MC4wNDExLFwiOVwiOjAuMDIwNTUsXCIxMFwiOjAuMDQxMSxcIjExXCI6MC4wNDExLFwiMTJcIjowLjA4MjIsXCIxM1wiOjAuMDM0MjUsXCIxNFwiOjAuMDQxMSxcIjE1XCI6MC4wNTQ4LFwiMTZcIjowLjA3NTM1LFwiMTdcIjowLjA2MTY1LFwiMThcIjowLjA0Nzk1LFwiMTlcIjowLjA0MTEsXCIyMFwiOjAuMDU0OCxcIjIxXCI6MC4xMzAxNSxcIjIyXCI6MC4wNjE2NSxcIjIzXCI6MC4wNjg1LFwiMjRcIjowLjE3ODEsXCIyNVwiOjAuMDgyMixcIjI2XCI6MC4wOTU5LFwiMjdcIjowLjE0Mzg1LFwiMjhcIjowLjEwMjc1LFwiMjlcIjowLjE3ODEsXCIzMFwiOjAuNDUyMSxcIjMxXCI6NC4wMDcyNSxcIjMyXCI6Ni40OTM4LFwiMzNcIjowLjI1MzQ1LFwiMzRcIjowLjAwNjg1LFwiMzVcIjowLjAxMzcsXCIzNlwiOjB9LFwidmVyc2lvbnNcIjpbbnVsbCxcIjJcIixcIjNcIixcIjMuNVwiLFwiMy42XCIsXCI0XCIsXCI1XCIsXCI2XCIsXCI3XCIsXCI4XCIsXCI5XCIsXCIxMFwiLFwiMTFcIixcIjEyXCIsXCIxM1wiLFwiMTRcIixcIjE1XCIsXCIxNlwiLFwiMTdcIixcIjE4XCIsXCIxOVwiLFwiMjBcIixcIjIxXCIsXCIyMlwiLFwiMjNcIixcIjI0XCIsXCIyNVwiLFwiMjZcIixcIjI3XCIsXCIyOFwiLFwiMjlcIixcIjMwXCIsXCIzMVwiLFwiMzJcIixcIjMzXCIsXCIzNFwiLFwiMzVcIixcIjM2XCJdfSxcImNocm9tZVwiOntcImJyb3dzZXJcIjpcIkNocm9tZVwiLFwiYWJiclwiOlwiQ2hyLlwiLFwicHJlZml4XCI6XCJ3ZWJraXRcIixcInR5cGVcIjpcImRlc2t0b3BcIixcInVzYWdlX2dsb2JhbFwiOntcIjRcIjowLjAxMzcsXCI1XCI6MC4wMTM3LFwiNlwiOjAuMDIwNTUsXCI3XCI6MC4wMTM3LFwiOFwiOjAuMDEzNyxcIjlcIjowLjAwNjg1LFwiMTBcIjowLjAyNzQsXCIxMVwiOjAuMTAyNzUsXCIxMlwiOjAuMDM0MjUsXCIxM1wiOjAuMDI3NCxcIjE0XCI6MC4wMjA1NSxcIjE1XCI6MC4wMjc0LFwiMTZcIjowLjAyNzQsXCIxN1wiOjAuMDIwNTUsXCIxOFwiOjAuMDQxMSxcIjE5XCI6MC4wMjA1NSxcIjIwXCI6MC4wMjA1NSxcIjIxXCI6MC4zMTUxLFwiMjJcIjowLjEwOTYsXCIyM1wiOjAuMDQxMSxcIjI0XCI6MC4wNjE2NSxcIjI1XCI6MC4wNDExLFwiMjZcIjowLjA4MjIsXCIyN1wiOjAuMjEyMzUsXCIyOFwiOjAuMTAyNzUsXCIyOVwiOjAuNDQ1MjUsXCIzMFwiOjAuMTg0OTUsXCIzMVwiOjAuNjA5NjUsXCIzMlwiOjAuMjYwMyxcIjMzXCI6MC43Mzk4LFwiMzRcIjowLjU0MTE1LFwiMzVcIjoxLjE5ODc1LFwiMzZcIjo0LjQwNDU1LFwiMzdcIjoyMy4yNDIxLFwiMzhcIjowLjEzNyxcIjM5XCI6MC4xNTc1NSxcIjQwXCI6MCxcIjQxXCI6MH0sXCJ2ZXJzaW9uc1wiOltcIjRcIixcIjVcIixcIjZcIixcIjdcIixcIjhcIixcIjlcIixcIjEwXCIsXCIxMVwiLFwiMTJcIixcIjEzXCIsXCIxNFwiLFwiMTVcIixcIjE2XCIsXCIxN1wiLFwiMThcIixcIjE5XCIsXCIyMFwiLFwiMjFcIixcIjIyXCIsXCIyM1wiLFwiMjRcIixcIjI1XCIsXCIyNlwiLFwiMjdcIixcIjI4XCIsXCIyOVwiLFwiMzBcIixcIjMxXCIsXCIzMlwiLFwiMzNcIixcIjM0XCIsXCIzNVwiLFwiMzZcIixcIjM3XCIsXCIzOFwiLFwiMzlcIixcIjQwXCIsXCI0MVwiXX0sXCJzYWZhcmlcIjp7XCJicm93c2VyXCI6XCJTYWZhcmlcIixcImFiYnJcIjpcIlNhZi5cIixcInByZWZpeFwiOlwid2Via2l0XCIsXCJ0eXBlXCI6XCJkZXNrdG9wXCIsXCJ1c2FnZV9nbG9iYWxcIjp7XCIzLjFcIjowLFwiMy4yXCI6MC4wMDg2OTIsXCI0XCI6MC4wOTU5LFwiNVwiOjAuMTcxMjUsXCI1LjFcIjowLjU2ODU1LFwiNlwiOjAuMTkxOCxcIjYuMVwiOjAuNTI3NDUsXCI3XCI6MS43NTM2LFwiNy4xXCI6MC4xNTA3LFwiOFwiOjAuMDQxMX0sXCJ2ZXJzaW9uc1wiOltudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsXCIzLjFcIixcIjMuMlwiLFwiNFwiLFwiNVwiLFwiNS4xXCIsXCI2XCIsXCI2LjFcIixcIjdcIixcIjcuMVwiLFwiOFwiLG51bGwsbnVsbF19LFwib3BlcmFcIjp7XCJicm93c2VyXCI6XCJPcGVyYVwiLFwiYWJiclwiOlwiT3AuXCIsXCJwcmVmaXhcIjpcIndlYmtpdFwiLFwidHlwZVwiOlwiZGVza3RvcFwiLFwidXNhZ2VfZ2xvYmFsXCI6e1wiOS41LTkuNlwiOjAuMDA2ODUsXCIxMC4wLTEwLjFcIjowLjAyMDU1LFwiMTAuNVwiOjAuMDA4MzkyLFwiMTAuNlwiOjAuMDA3Mjk2LFwiMTFcIjowLjAxNDk5NixcIjExLjFcIjowLjAwODIxOSxcIjExLjVcIjowLjAwNjg1LFwiMTEuNlwiOjAuMDEzNyxcIjEyXCI6MC4wMjA1NSxcIjEyLjFcIjowLjIyNjA1LFwiMTVcIjowLjAwNjg1LFwiMTZcIjowLjAwNjg1LFwiMTdcIjowLjAwNjg1LFwiMThcIjowLjAxMzcsXCIxOVwiOjAuMDEzNyxcIjIwXCI6MC4wMjc0LFwiMjFcIjowLjAxMzcsXCIyMlwiOjAuMDIwNTUsXCIyM1wiOjAuMDYxNjUsXCIyNFwiOjAuNTA2OSxcIjI1XCI6MC4wMDY4NSxcIjI2XCI6MH0sXCJ2ZXJzaW9uc1wiOltudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxcIjkuNS05LjZcIixcIjEwLjAtMTAuMVwiLFwiMTAuNVwiLFwiMTAuNlwiLFwiMTFcIixcIjExLjFcIixcIjExLjVcIixcIjExLjZcIixcIjEyXCIsXCIxMi4xXCIsXCIxNVwiLFwiMTZcIixcIjE3XCIsXCIxOFwiLFwiMTlcIixcIjIwXCIsXCIyMVwiLFwiMjJcIixcIjIzXCIsXCIyNFwiLFwiMjVcIixcIjI2XCIsbnVsbF0sXCJwcmVmaXhfZXhjZXB0aW9uc1wiOntcIjkuNS05LjZcIjpcIm9cIixcIjEwLjAtMTAuMVwiOlwib1wiLFwiMTAuNVwiOlwib1wiLFwiMTAuNlwiOlwib1wiLFwiMTFcIjpcIm9cIixcIjExLjFcIjpcIm9cIixcIjExLjVcIjpcIm9cIixcIjExLjZcIjpcIm9cIixcIjEyXCI6XCJvXCIsXCIxMi4xXCI6XCJvXCJ9fSxcImlvc19zYWZcIjp7XCJicm93c2VyXCI6XCJpT1MgU2FmYXJpXCIsXCJhYmJyXCI6XCJpT1NcIixcInByZWZpeFwiOlwid2Via2l0XCIsXCJ0eXBlXCI6XCJtb2JpbGVcIixcInVzYWdlX2dsb2JhbFwiOntcIjMuMlwiOjAsXCI0LjAtNC4xXCI6MCxcIjQuMi00LjNcIjowLFwiNS4wLTUuMVwiOjAuMDU1MjkxMixcIjYuMC02LjFcIjowLjI0NTQwMixcIjcuMC03LjFcIjo1LjU3MDc4LFwiOFwiOjEuNjIyMzh9LFwidmVyc2lvbnNcIjpbbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxcIjMuMlwiLFwiNC4wLTQuMVwiLFwiNC4yLTQuM1wiLFwiNS4wLTUuMVwiLFwiNi4wLTYuMVwiLFwiNy4wLTcuMVwiLFwiOFwiLG51bGwsbnVsbCxudWxsXX0sXCJvcF9taW5pXCI6e1wiYnJvd3NlclwiOlwiT3BlcmEgTWluaVwiLFwiYWJiclwiOlwiTy5NaW5pXCIsXCJwcmVmaXhcIjpcIm9cIixcInR5cGVcIjpcIm1vYmlsZVwiLFwidXNhZ2VfZ2xvYmFsXCI6e1wiNS4wLTguMFwiOjMuMTI2MjR9LFwidmVyc2lvbnNcIjpbbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxcIjUuMC04LjBcIixudWxsLG51bGwsbnVsbF19LFwiYW5kcm9pZFwiOntcImJyb3dzZXJcIjpcIkFuZHJvaWQgQnJvd3NlclwiLFwiYWJiclwiOlwiQW5kLlwiLFwicHJlZml4XCI6XCJ3ZWJraXRcIixcInR5cGVcIjpcIm1vYmlsZVwiLFwidXNhZ2VfZ2xvYmFsXCI6e1wiMi4xXCI6MC4wMDY3NzUxNyxcIjIuMlwiOjAuMDQ3NDI2MixcIjIuM1wiOjAuNzcyMzcsXCIzXCI6MCxcIjRcIjowLjY1MDQxNyxcIjQuMVwiOjEuNzAwNTcsXCI0LjItNC4zXCI6MS45NDQ0OCxcIjQuNFwiOjEuNjU5OTIsXCI0LjQuM1wiOjB9LFwidmVyc2lvbnNcIjpbbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsXCIyLjFcIixcIjIuMlwiLFwiMi4zXCIsXCIzXCIsXCI0XCIsXCI0LjFcIixcIjQuMi00LjNcIixcIjQuNFwiLFwiNC40LjNcIixudWxsLG51bGxdfSxcIm9wX21vYlwiOntcImJyb3dzZXJcIjpcIk9wZXJhIE1vYmlsZVwiLFwiYWJiclwiOlwiTy5Nb2JcIixcInByZWZpeFwiOlwib1wiLFwidHlwZVwiOlwibW9iaWxlXCIsXCJ1c2FnZV9nbG9iYWxcIjp7XCIxMFwiOjAsXCIxMS41XCI6MCxcIjEyXCI6MC4wMDk0NzAzOSxcIjEyLjFcIjowLjA1MjA4NzEsXCIyNFwiOjB9LFwidmVyc2lvbnNcIjpbbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxcIjEwXCIsbnVsbCxudWxsLFwiMTEuNVwiLFwiMTJcIixcIjEyLjFcIixcIjI0XCIsbnVsbCxudWxsLG51bGxdLFwicHJlZml4X2V4Y2VwdGlvbnNcIjp7XCIyNFwiOlwid2Via2l0XCJ9fSxcImJiXCI6e1wiYnJvd3NlclwiOlwiQmxhY2tiZXJyeSBCcm93c2VyXCIsXCJhYmJyXCI6XCJCQlwiLFwicHJlZml4XCI6XCJ3ZWJraXRcIixcInR5cGVcIjpcIm1vYmlsZVwiLFwidXNhZ2VfZ2xvYmFsXCI6e1wiN1wiOjAuMTAxNTg3LFwiMTBcIjowfSxcInZlcnNpb25zXCI6W251bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLFwiN1wiLFwiMTBcIixudWxsLG51bGwsbnVsbF19LFwiYW5kX2NoclwiOntcImJyb3dzZXJcIjpcIkNocm9tZSBmb3IgQW5kcm9pZFwiLFwiYWJiclwiOlwiQ2hyL0FuZC5cIixcInByZWZpeFwiOlwid2Via2l0XCIsXCJ0eXBlXCI6XCJtb2JpbGVcIixcInVzYWdlX2dsb2JhbFwiOntcIjM4XCI6Ny43MTQzNX0sXCJ2ZXJzaW9uc1wiOltudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLFwiMzhcIixudWxsLG51bGwsbnVsbF19LFwiYW5kX2ZmXCI6e1wiYnJvd3NlclwiOlwiRmlyZWZveCBmb3IgQW5kcm9pZFwiLFwiYWJiclwiOlwiRkYvQW5kLlwiLFwicHJlZml4XCI6XCJtb3pcIixcInR5cGVcIjpcIm1vYmlsZVwiLFwidXNhZ2VfZ2xvYmFsXCI6e1wiMzJcIjowLjEzODZ9LFwidmVyc2lvbnNcIjpbbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxcIjMyXCIsbnVsbCxudWxsLG51bGxdfSxcImllX21vYlwiOntcImJyb3dzZXJcIjpcIklFIE1vYmlsZVwiLFwiYWJiclwiOlwiSUUuTW9iXCIsXCJwcmVmaXhcIjpcIm1zXCIsXCJ0eXBlXCI6XCJtb2JpbGVcIixcInVzYWdlX2dsb2JhbFwiOntcIjEwXCI6MC40MzYxODF9LFwidmVyc2lvbnNcIjpbbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxcIjEwXCIsbnVsbCxudWxsLG51bGxdfSxcImFuZF91Y1wiOntcImJyb3dzZXJcIjpcIlVDIEJyb3dzZXIgZm9yIEFuZHJvaWRcIixcImFiYnJcIjpcIlVDXCIsXCJwcmVmaXhcIjpcIndlYmtpdFwiLFwidHlwZVwiOlwibW9iaWxlXCIsXCJ1c2FnZV9nbG9iYWxcIjp7XCI5LjlcIjozLjEwNTl9LFwidmVyc2lvbnNcIjpbbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxcIjkuOVwiLG51bGwsbnVsbCxudWxsXSxcInByZWZpeF9leGNlcHRpb25zXCI6e1wiOS45XCI6XCJ3ZWJraXRcIn19fSxcInN0YXR1c2VzXCI6e1wicmVjXCI6XCJSZWNvbW1lbmRhdGlvblwiLFwicHJcIjpcIlByb3Bvc2VkIFJlY29tbWVuZGF0aW9uXCIsXCJjclwiOlwiQ2FuZGlkYXRlIFJlY29tbWVuZGF0aW9uXCIsXCJ3ZFwiOlwiV29ya2luZyBEcmFmdFwiLFwib3RoZXJcIjpcIk90aGVyXCIsXCJ1bm9mZlwiOlwiVW5vZmZpY2lhbCAvIE5vdGVcIn0sXCJjYXRzXCI6e1wiQ1NTXCI6W1wiQ1NTXCIsXCJDU1MyXCIsXCJDU1MzXCJdLFwiSFRNTDVcIjpbXCJDYW52YXNcIixcIkhUTUw1XCJdLFwiSlMgQVBJXCI6W1wiSlMgQVBJXCJdLFwiT3RoZXJcIjpbXCJQTkdcIixcIk90aGVyXCIsXCJET01cIl0sXCJTVkdcIjpbXCJTVkdcIl19LFwidXBkYXRlZFwiOjE0MTMzNDI5NTcsXCJkYXRhXCI6e1wicG5nLWFscGhhXCI6e1widGl0bGVcIjpcIlBORyBhbHBoYSB0cmFuc3BhcmVuY3lcIixcImRlc2NyaXB0aW9uXCI6XCJTZW1pLXRyYW5zcGFyZW50IGFyZWFzIGluIFBORyBmaWxlc1wiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvUE5HL1wiLFwic3RhdHVzXCI6XCJyZWNcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Qb3J0YWJsZV9OZXR3b3JrX0dyYXBoaWNzXCIsXCJ0aXRsZVwiOlwiV2lraXBlZGlhXCJ9LHtcInVybFwiOlwiaHR0cDovL2RpbGxlcmRlc2lnbi5jb20vZXhwZXJpbWVudC9ERF9iZWxhdGVkUE5HL1wiLFwidGl0bGVcIjpcIldvcmthcm91bmQgZm9yIElFNlwifV0sXCJjYXRlZ29yaWVzXCI6W1wiUE5HXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwicFwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcInlcIixcIjNcIjpcInlcIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJ5XCIsXCIzLjJcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcInlcIixcIjkuNS05LjZcIjpcInlcIixcIjEwLjAtMTAuMVwiOlwieVwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieVwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJ5XCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieVwiLFwiMi4yXCI6XCJ5XCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIklFNiBkb2VzIHN1cHBvcnQgZnVsbCB0cmFuc3BhcmVuY3kgaW4gOC1iaXQgUE5Hcywgd2hpY2ggY2FuIHNvbWV0aW1lcyBiZSBhbiBhbHRlcm5hdGl2ZSB0byAyNC1iaXQgUE5Hcy5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6OTYuMTQsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImFwbmdcIjp7XCJ0aXRsZVwiOlwiQW5pbWF0ZWQgUE5HIChBUE5HKVwiLFwiZGVzY3JpcHRpb25cIjpcIkxpa2UgYW5pbWF0ZWQgR0lGcywgYnV0IGFsbG93aW5nIDI0LWJpdCBjb2xvcnMgYW5kIGFscGhhIHRyYW5zcGFyZW5jeVwiLFwic3BlY1wiOlwiaHR0cHM6Ly93aWtpLm1vemlsbGEub3JnL0FQTkdfU3BlY2lmaWNhdGlvblwiLFwic3RhdHVzXCI6XCJ1bm9mZlwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FQTkdcIixcInRpdGxlXCI6XCJXaWtpcGVkaWFcIn0se1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vZGF2aWRtei9hcG5nLWNhbnZhc1wiLFwidGl0bGVcIjpcIlBvbHlmaWxsIHVzaW5nIGNhbnZhc1wifSx7XCJ1cmxcIjpcImh0dHBzOi8vY2hyb21lLmdvb2dsZS5jb20vd2Vic3RvcmUvZGV0YWlsL2Voa2Vwamljb25lZ2tocG9kZ29hZWFtbnBja2RiYmxwXCIsXCJ0aXRsZVwiOlwiQ2hyb21lIGV4dGVuc2lvbiBwcm92aWRpbmcgc3VwcG9ydFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiUE5HXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcInlcIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcIm5cIixcIjM1XCI6XCJuXCIsXCIzNlwiOlwiblwiLFwiMzdcIjpcIm5cIixcIjM4XCI6XCJuXCIsXCIzOVwiOlwiblwiLFwiNDBcIjpcIm5cIixcIjQxXCI6XCJuXCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI3LjFcIjpcIm5cIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcInlcIixcIjEwLjAtMTAuMVwiOlwieVwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwiblwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwiblwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwiblwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwiblwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcIm5cIn19LFwibm90ZXNcIjpcIldoZXJlIHN1cHBvcnQgZm9yIEFQTkcgaXMgbWlzc2luZywgb25seSB0aGUgZmlyc3QgZnJhbWUgaXMgZGlzcGxheWVkXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjE1LjM4LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJ2aWRlb1wiOntcInRpdGxlXCI6XCJWaWRlbyBlbGVtZW50XCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHBsYXlpbmcgdmlkZW9zIG9uIHdlYnBhZ2VzICh3aXRob3V0IHJlcXVpcmluZyBhIHBsdWctaW4pXCIsXCJzcGVjXCI6XCJodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjdGhlLXZpZGVvLWVsZW1lbnRcIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXYub3BlcmEuY29tL2FydGljbGVzL3ZpZXcvZXZlcnl0aGluZy15b3UtbmVlZC10by1rbm93LWFib3V0LWh0bWw1LXZpZGVvLWFuZC1hdWRpby9cIixcInRpdGxlXCI6XCJEZXRhaWxlZCBhcnRpY2xlIG9uIHZpZGVvL2F1ZGlvIGVsZW1lbnRzXCJ9LHtcInVybFwiOlwiaHR0cDovL3dlYm1wcm9qZWN0Lm9yZ1wiLFwidGl0bGVcIjpcIldlYk0gZm9ybWF0IGluZm9ybWF0aW9uXCJ9LHtcInVybFwiOlwiaHR0cDovL2NhbWVuZGVzaWduLmNvLnVrL2NvZGUvdmlkZW9fZm9yX2V2ZXJ5Ym9keVwiLFwidGl0bGVcIjpcIlZpZGVvIGZvciBFdmVyeWJvZHlcIn0se1widXJsXCI6XCJodHRwOi8vZGl2ZWludG9odG1sNS5pbmZvL3ZpZGVvLmh0bWxcIixcInRpdGxlXCI6XCJWaWRlbyBvbiB0aGUgV2ViIC0gaW5jbHVkZXMgaW5mbyBvbiBBbmRyb2lkIHN1cHBvcnRcIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3QvdmlkZW8uanMjdmlkZW9cIixcInRpdGxlXCI6XCJoYXMuanMgdGVzdFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2h0bWwvZWxlbWVudHMvdmlkZW9cIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJIVE1MNVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcInlcIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcInlcIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInlcIixcIjQuMC00LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcImFcIixcIjIuMlwiOlwiYVwiLFwiMi4zXCI6XCJ5XCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJEaWZmZXJlbnQgYnJvd3NlcnMgaGF2ZSBzdXBwb3J0IGZvciBkaWZmZXJlbnQgdmlkZW8gZm9ybWF0cywgc2VlIHN1Yi1mZWF0dXJlcyBmb3IgZGV0YWlscy4gXFxyXFxuXFxyXFxuVGhlIEFuZHJvaWQgYnJvd3NlciAoYmVmb3JlIDIuMykgcmVxdWlyZXMgW3NwZWNpZmljIGhhbmRsaW5nXShodHRwOi8vd3d3LmJyb2tlbi1saW5rcy5jb20vMjAxMC8wNy8wOC9tYWtpbmctaHRtbDUtdmlkZW8td29yay1vbi1hbmRyb2lkLXBob25lcy8pIHRvIHJ1biB0aGUgdmlkZW8gZWxlbWVudC5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6ODguNzgsXCJ1c2FnZV9wZXJjX2FcIjowLjA1LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiPHZpZGVvPlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJhdWRpb1wiOntcInRpdGxlXCI6XCJBdWRpbyBlbGVtZW50XCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHBsYXlpbmcgc291bmQgb24gd2VicGFnZXMgKHdpdGhvdXQgcmVxdWlyaW5nIGEgcGx1Zy1pbilcIixcInNwZWNcIjpcImh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCN0aGUtYXVkaW8tZWxlbWVudFwiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vaHRtbDVkb2N0b3IuY29tL25hdGl2ZS1hdWRpby1pbi10aGUtYnJvd3Nlci9cIixcInRpdGxlXCI6XCJIVE1MNSBEb2N0b3IgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHBzOi8vZGV2Lm9wZXJhLmNvbS9hcnRpY2xlcy92aWV3L2V2ZXJ5dGhpbmcteW91LW5lZWQtdG8ta25vdy1hYm91dC1odG1sNS12aWRlby1hbmQtYXVkaW8vXCIsXCJ0aXRsZVwiOlwiRGV0YWlsZWQgYXJ0aWNsZSBvbiB2aWRlby9hdWRpbyBlbGVtZW50c1wifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuanBsYXllci5vcmcvbGF0ZXN0L2RlbW9zL1wiLFwidGl0bGVcIjpcIkRlbW9zIG9mIGF1ZGlvIHBsYXllciB0aGF0IHVzZXMgdGhlIGF1ZGlvIGVsZW1lbnRcIn0se1widXJsXCI6XCJodHRwOi8vMjR3YXlzLm9yZy8yMDEwL3RoZS1zdGF0ZS1vZi1odG1sNS1hdWRpb1wiLFwidGl0bGVcIjpcIkRldGFpbGVkIGFydGljbGUgb24gc3VwcG9ydFwifSx7XCJ1cmxcIjpcImh0dHA6Ly90ZXh0b3BpYS5vcmcvYW5kcm9pZHNvdW5kZm9ybWF0cy5odG1sXCIsXCJ0aXRsZVwiOlwiRmlsZSBmb3JtYXQgdGVzdCBwYWdlXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy5waG9ib3NsYWIub3JnL2xvZy8yMDExLzAzL3RoZS1zdGF0ZS1vZi1odG1sNS1hdWRpb1wiLFwidGl0bGVcIjpcIlRoZSBTdGF0ZSBvZiBIVE1MNSBBdWRpb1wifSx7XCJ1cmxcIjpcImh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vcGhpZ2dpbnM0Mi9oYXMuanMvbWFzdGVyL2RldGVjdC9hdWRpby5qcyNhdWRpb1wiLFwidGl0bGVcIjpcImhhcy5qcyB0ZXN0XCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvaHRtbC9lbGVtZW50cy9hdWRpb1wiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkhUTUw1XCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcImFcIixcIjEwLjAtMTAuMVwiOlwiYVwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo4OC43OCxcInVzYWdlX3BlcmNfYVwiOjAuMDMsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiY29udGVudGVkaXRhYmxlXCI6e1widGl0bGVcIjpcImNvbnRlbnRlZGl0YWJsZSBhdHRyaWJ1dGUgKGJhc2ljIHN1cHBvcnQpXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIG1ha2luZyBhbnkgSFRNTCBlbGVtZW50IGVkaXRhYmxlXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sL2VkaXRpbmcuaHRtbCNjb250ZW50ZWRpdGFibGVcIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2h0bWw1ZGVtb3MuY29tL2NvbnRlbnRlZGl0YWJsZVwiLFwidGl0bGVcIjpcIkRlbW8gcGFnZVwifSx7XCJ1cmxcIjpcImh0dHBzOi8vYmxvZy53aGF0d2cub3JnL3RoZS1yb2FkLXRvLWh0bWwtNS1jb250ZW50ZWRpdGFibGVcIixcInRpdGxlXCI6XCJXSEFUV0cgYmxvZyBwb3N0XCJ9LHtcInVybFwiOlwiaHR0cDovL2FjY2Vzc2dhcmFnZS53b3JkcHJlc3MuY29tLzIwMDkvMDUvMDgvaG93LXRvLWhhY2steW91ci1hcHAtdG8tbWFrZS1jb250ZW50ZWRpdGFibGUtd29yay9cIixcInRpdGxlXCI6XCJCbG9nIHBvc3Qgb24gdXNhZ2UgcHJvYmxlbXNcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9odG1sL2F0dHJpYnV0ZXMvY29udGVudEVkaXRhYmxlXCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiSFRNTDVcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiYVwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInlcIixcIjMuMlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwieVwiLFwiOS41LTkuNlwiOlwieVwiLFwiMTAuMC0xMC4xXCI6XCJ5XCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiVGhpcyBzdXBwb3J0IG9ubHkgcmVmZXJzIHRvIHZlcnkgYmFzaWMgZWRpdGluZyBjYXBhYmlsaXR5LCBpbXBsZW1lbnRhdGlvbnMgdmFyeSBzaWduaWZpY2FudGx5IG9uIGhvdyBjZXJ0YWluIGVsZW1lbnRzIGNhbiBiZSBlZGl0ZWQuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjkyLjMsXCJ1c2FnZV9wZXJjX2FcIjowLjA2LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImRyYWduZHJvcFwiOntcInRpdGxlXCI6XCJEcmFnIGFuZCBEcm9wXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGVhc2lseSBkcmFnZ2luZyBhbmQgZHJvcHBpbmcgZWxlbWVudHMgb24gYSBwYWdlLCByZXF1aXJpbmcgbWluaW1hbCBKYXZhU2NyaXB0LlwiLFwic3BlY1wiOlwiaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW50ZXJhY3Rpb24uaHRtbCNkbmRcIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2h0bWw1ZG9jdG9yLmNvbS9uYXRpdmUtZHJhZy1hbmQtZHJvcC9cIixcInRpdGxlXCI6XCJIVE1MNSBEb2N0b3IgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9uZXR0dXRzcGx1cy5zMy5hbWF6b25hd3MuY29tLzY0X2h0bWw1ZHJhZ2Ryb3AvZGVtby9pbmRleC5odG1sXCIsXCJ0aXRsZVwiOlwiU2hvcHBpbmcgY2FydCBkZW1vXCJ9LHtcInVybFwiOlwiaHR0cDovL2h0bWw1ZGVtb3MuY29tL2RyYWdcIixcInRpdGxlXCI6XCJEZW1vIHdpdGggbGluayBibG9ja3NcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9kb20vRHJhZ0V2ZW50XCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifSx7XCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9NaWhhaVZhbGVudGluL3NldERyYWdJbWFnZS1JRVwiLFwidGl0bGVcIjpcIlBvbHlmaWxsIGZvciBzZXREcmFnSW1hZ2UgaW4gSUVcIn0se1widXJsXCI6XCJodHRwOi8vYmxvZy50ZWFtdHJlZWhvdXNlLmNvbS9pbXBsZW1lbnRpbmctbmF0aXZlLWRyYWctYW5kLWRyb3BcIixcInRpdGxlXCI6XCJJbXBsZW1lbnRpbmcgTmF0aXZlIERyYWcgYW5kIERyb3BcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkhUTUw1XCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiYSAjMVwiLFwiNlwiOlwiYSAjMVwiLFwiN1wiOlwiYSAjMVwiLFwiOFwiOlwiYSAjMVwiLFwiOVwiOlwiYSAjMVwiLFwiMTBcIjpcImEgIzJcIixcIjExXCI6XCJhICMyXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcInBcIixcIjNcIjpcInBcIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJ5XCIsXCIzLjJcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcInBcIixcIjkuNS05LjZcIjpcInBcIixcIjEwLjAtMTAuMVwiOlwicFwiLFwiMTAuNVwiOlwicFwiLFwiMTAuNlwiOlwicFwiLFwiMTFcIjpcInBcIixcIjExLjFcIjpcInBcIixcIjExLjVcIjpcInBcIixcIjExLjZcIjpcInBcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwiblwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwicFwiLFwiMTFcIjpcInBcIixcIjExLjFcIjpcInBcIixcIjExLjVcIjpcInBcIixcIjEyXCI6XCJwXCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwiblwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwiblwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJuXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcIm5cIn19LFwibm90ZXNcIjpcImBkYXRhVHJhbnNmZXIuaXRlbXNgIG9ubHkgc3VwcG9ydGVkIGJ5IENocm9tZS5cXHJcXG5cXHJcXG5DdXJyZW50bHkgbm8gYnJvd3NlciBzdXBwb3J0cyB0aGUgYGRyb3B6b25lYCBhdHRyaWJ1dGUuXFxyXFxuXFxyXFxuRmlyZWZveCBzdXBwb3J0cyBhbnkga2luZCBvZiBET00gZWxlbWVudHMgZm9yIGAuc2V0RHJhZ0ltYWdlYC4gQ2hyb21lIG11c3QgaGF2ZSBlaXRoZXIgYW4gYEhUTUxJbWFnZUVsZW1lbnRgIG9yIGFueSBraW5kIG9mIERPTSBlbGVtZW50cyBhdHRhY2hlZCB0byB0aGUgRE9NIGFuZCB3aXRoaW4gdGhlIHZpZXdwb3J0IG9mIHRoZSBicm93c2VyIGZvciBgLnNldERyYWdJbWFnZWAuXCIsXCJub3Rlc19ieV9udW1cIjp7XCIxXCI6XCJQYXJ0aWFsIHN1cHBvcnQgcmVmZXJzIHRvIG5vIHN1cHBvcnQgZm9yIHRoZSBgZGF0YVRyYW5zZmVyLmZpbGVzYCBvciBgLnR5cGVzYCBvYmplY3RzIGFuZCBsaW1pdGVkIHN1cHBvcnRlZCBmb3JtYXRzIGZvciBgZGF0YVRyYW5zZmVyLnNldERhdGFgL2BnZXREYXRhYC5cIixcIjJcIjpcIlBhcnRpYWwgc3VwcG9ydCByZWZlcnMgdG8gbm90IHN1cHBvcnRpbmcgYC5zZXREcmFnSW1hZ2VgXCJ9LFwidXNhZ2VfcGVyY195XCI6NTEuMzksXCJ1c2FnZV9wZXJjX2FcIjoxNi4zMSxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImRyYWdhbmRkcm9wXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcInF1ZXJ5c2VsZWN0b3JcIjp7XCJ0aXRsZVwiOlwicXVlcnlTZWxlY3Rvci9xdWVyeVNlbGVjdG9yQWxsXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGFjY2Vzc2luZyBET00gZWxlbWVudHMgdXNpbmcgQ1NTIHNlbGVjdG9yc1wiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLWFwaS9cIixcInN0YXR1c1wiOlwicmVjXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS9lbGVtZW50LnF1ZXJ5U2VsZWN0b3JcIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZSBvbiBxdWVyeVNlbGVjdG9yXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvRW4vRE9NL0VsZW1lbnQucXVlcnlTZWxlY3RvckFsbFwiLFwidGl0bGVcIjpcIk1ETiBhcnRpY2xlIG9uIHF1ZXJ5U2VsZWN0b3JBbGxcIn0se1widXJsXCI6XCJodHRwOi8vY2ppaHJpZy5jb20vYmxvZy9qYXZhc2NyaXB0cy1zZWxlY3RvcnMtYXBpL1wiLFwidGl0bGVcIjpcIkJsb2cgcG9zdFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9zZWxlY3RvcnNfYXBpL3F1ZXJ5U2VsZWN0b3JcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJET01cIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJwXCIsXCI3XCI6XCJwXCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwicFwiLFwiM1wiOlwicFwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInlcIixcIjMuMlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwicFwiLFwiOS41LTkuNlwiOlwicFwiLFwiMTAuMC0xMC4xXCI6XCJ5XCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ5XCIsXCI0LjAtNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcInlcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ5XCIsXCIyLjJcIjpcInlcIixcIjIuM1wiOlwieVwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiT25seSB3b3JrcyBmb3IgdGhlIENTUyBzZWxlY3RvcnMgYXZhaWxhYmxlLiBUaHVzIHRoZSBJRTggaW1wbGVtZW50YXRpb24gaXMgbGltaXRlZCB0byB0aGUgQ1NTIDIuMSBzZWxlY3RvcnNcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6OTUuOTUsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwicXVlcnksc2VsZWN0b3JzLHNlbGVjdG9ycyBhcGlcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiZ2V0ZWxlbWVudHNieWNsYXNzbmFtZVwiOntcInRpdGxlXCI6XCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGFjY2Vzc2luZyBET00gZWxlbWVudHMgYnkgY2xhc3MgbmFtZVwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvZG9tLyNkb20tZG9jdW1lbnQtZ2V0ZWxlbWVudHNieWNsYXNzbmFtZVwiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2RvbS90ZXN0cy9iYXNpY3MuaHRtbCNnZXRFbGVtZW50c0J5Q2xhc3NOYW1lXCIsXCJ0aXRsZVwiOlwiVGVzdCBwYWdlXCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvZG9tL0hUTUxFbGVtZW50L2dldEVsZW1lbnRzQnlDbGFzc05hbWVcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJET01cIixcIkhUTUw1XCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwicFwiLFwiN1wiOlwicFwiLFwiOFwiOlwicFwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcInBcIixcIjNcIjpcInlcIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJ5XCIsXCIzLjJcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcInlcIixcIjEwLjAtMTAuMVwiOlwieVwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieVwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJ5XCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieVwiLFwiMi4yXCI6XCJ5XCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo5Mi4wNixcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJieWNsYXNzbmFtZVwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJmb3Jtc1wiOntcInRpdGxlXCI6XCJIVE1MNSBmb3JtIGZlYXR1cmVzXCIsXCJkZXNjcmlwdGlvblwiOlwiRXhwYW5kZWQgZm9ybSBvcHRpb25zLCBpbmNsdWRpbmcgdGhpbmdzIGxpa2UgZGF0ZSBwaWNrZXJzLCBzbGlkZXJzLCB2YWxpZGF0aW9uLCBwbGFjZWhvbGRlcnMgYW5kIG11bHRpcGxlIGZpbGUgdXBsb2Fkcy4gUHJldmlvdXNseSBrbm93biBhcyBcXFwiV2ViIGZvcm1zIDIuMFxcXCIuXCIsXCJzcGVjXCI6XCJodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2Zvcm1zXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vbWlrZXRheWxyLmNvbS9jb2RlL2lucHV0LXR5cGUtYXR0ci5odG1sXCIsXCJ0aXRsZVwiOlwiSFRNTDUgaW5wdXRzIGFuZCBhdHRyaWJ1dGUgc3VwcG9ydCBwYWdlXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL3dlc3RvbnJ1dGVyL3dlYmZvcm1zMlwiLFwidGl0bGVcIjpcIkNyb3NzLWJyb3dzZXIgSlMgaW1wbGVtZW50YXRpb24gKGJhc2VkIG9uIG9yaWdpbmFsIHNwZWMpXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJIVE1MNVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcInBcIixcIjdcIjpcInBcIixcIjhcIjpcInBcIixcIjlcIjpcInBcIixcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJwXCIsXCIzXCI6XCJwXCIsXCIzLjVcIjpcInBcIixcIjMuNlwiOlwicFwiLFwiNFwiOlwiYVwiLFwiNVwiOlwiYVwiLFwiNlwiOlwiYVwiLFwiN1wiOlwiYVwiLFwiOFwiOlwiYVwiLFwiOVwiOlwiYVwiLFwiMTBcIjpcImFcIixcIjExXCI6XCJhXCIsXCIxMlwiOlwiYVwiLFwiMTNcIjpcImFcIixcIjE0XCI6XCJhXCIsXCIxNVwiOlwiYVwiLFwiMTZcIjpcImFcIixcIjE3XCI6XCJhXCIsXCIxOFwiOlwiYVwiLFwiMTlcIjpcImFcIixcIjIwXCI6XCJhXCIsXCIyMVwiOlwiYVwiLFwiMjJcIjpcImFcIixcIjIzXCI6XCJhXCIsXCIyNFwiOlwiYVwiLFwiMjVcIjpcImFcIixcIjI2XCI6XCJhXCIsXCIyN1wiOlwiYVwiLFwiMjhcIjpcImFcIixcIjI5XCI6XCJhXCIsXCIzMFwiOlwiYVwiLFwiMzFcIjpcImFcIixcIjMyXCI6XCJhXCIsXCIzM1wiOlwiYVwiLFwiMzRcIjpcImFcIixcIjM1XCI6XCJhXCIsXCIzNlwiOlwiYVwifSxcImNocm9tZVwiOntcIjRcIjpcImFcIixcIjVcIjpcImFcIixcIjZcIjpcImFcIixcIjdcIjpcImFcIixcIjhcIjpcImFcIixcIjlcIjpcImFcIixcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwiLFwiMTJcIjpcImFcIixcIjEzXCI6XCJhXCIsXCIxNFwiOlwiYVwiLFwiMTVcIjpcImFcIixcIjE2XCI6XCJhXCIsXCIxN1wiOlwiYVwiLFwiMThcIjpcImFcIixcIjE5XCI6XCJhXCIsXCIyMFwiOlwiYVwiLFwiMjFcIjpcImFcIixcIjIyXCI6XCJhXCIsXCIyM1wiOlwiYVwiLFwiMjRcIjpcImFcIixcIjI1XCI6XCJhXCIsXCIyNlwiOlwiYVwiLFwiMjdcIjpcImFcIixcIjI4XCI6XCJhXCIsXCIyOVwiOlwiYVwiLFwiMzBcIjpcImFcIixcIjMxXCI6XCJhXCIsXCIzMlwiOlwiYVwiLFwiMzNcIjpcImFcIixcIjM0XCI6XCJhXCIsXCIzNVwiOlwiYVwiLFwiMzZcIjpcImFcIixcIjM3XCI6XCJhXCIsXCIzOFwiOlwiYVwiLFwiMzlcIjpcImFcIixcIjQwXCI6XCJhXCIsXCI0MVwiOlwiYVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwicFwiLFwiMy4yXCI6XCJwXCIsXCI0XCI6XCJhXCIsXCI1XCI6XCJhXCIsXCI1LjFcIjpcImFcIixcIjZcIjpcImFcIixcIjYuMVwiOlwiYVwiLFwiN1wiOlwiYVwiLFwiNy4xXCI6XCJhXCIsXCI4XCI6XCJhXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJ5XCIsXCI5LjUtOS42XCI6XCJ5XCIsXCIxMC4wLTEwLjFcIjpcInlcIixcIjEwLjVcIjpcInlcIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcImFcIixcIjE2XCI6XCJhXCIsXCIxN1wiOlwiYVwiLFwiMThcIjpcImFcIixcIjE5XCI6XCJhXCIsXCIyMFwiOlwiYVwiLFwiMjFcIjpcImFcIixcIjIyXCI6XCJhXCIsXCIyM1wiOlwiYVwiLFwiMjRcIjpcImFcIixcIjI1XCI6XCJhXCIsXCIyNlwiOlwiYVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcImFcIixcIjQuMi00LjNcIjpcImFcIixcIjUuMC01LjFcIjpcImFcIixcIjYuMC02LjFcIjpcImFcIixcIjcuMC03LjFcIjpcImFcIixcIjhcIjpcImFcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiYVwiLFwiNC40LjNcIjpcImFcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJhXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcImFcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcImFcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiYVwifSxcImllX21vYlwiOntcIjEwXCI6XCJhXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6My41MSxcInVzYWdlX3BlcmNfYVwiOjc3LjYyLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiaW5wdXQsZGF0ZXBpY2tlclwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJodG1sNXNlbWFudGljXCI6e1widGl0bGVcIjpcIk5ldyBzZW1hbnRpYyBlbGVtZW50c1wiLFwiZGVzY3JpcHRpb25cIjpcIkhUTUw1IG9mZmVycyBzb21lIG5ldyBlbGVtZW50cywgcHJpbWFyaWx5IGZvciBzZW1hbnRpYyBwdXJwb3Nlcy4gVGhlIGVsZW1lbnRzIGluY2x1ZGU6IHNlY3Rpb24sIGFydGljbGUsIGFzaWRlLCBoZWFkZXIsIGZvb3RlciwgbmF2LCBmaWd1cmUsIGZpZ2NhcHRpb24sIHRpbWUsIG1hcmssIG1haW4uXCIsXCJzcGVjXCI6XCJodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zZW1hbnRpY3MuaHRtbCNzZWN0aW9uc1wiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2Jsb2cud2hhdHdnLm9yZy9zdXBwb3J0aW5nLW5ldy1lbGVtZW50cy1pbi1pZVwiLFwidGl0bGVcIjpcIldvcmthcm91bmQgZm9yIElFXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9ibG9nLndoYXR3Zy5vcmcvc3R5bGluZy1pZS1ub3NjcmlwdFwiLFwidGl0bGVcIjpcIkFsdGVybmF0ZSB3b3JrYXJvdW5kXCJ9LHtcInVybFwiOlwiaHR0cDovL29saS5qcC8yMDA5L2h0bWw1LXN0cnVjdHVyZTMvXCIsXCJ0aXRsZVwiOlwiQXJ0aWNsZSBvbiBzdHJ1Y3R1cmFsIGVsZW1lbnRzXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9waGlnZ2luczQyL2hhcy5qcy9tYXN0ZXIvZGV0ZWN0L2RvbS5qcyNkb20taHRtbDUtZWxlbWVudHNcIixcInRpdGxlXCI6XCJoYXMuanMgdGVzdFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiSFRNTDVcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJwXCIsXCI3XCI6XCJwXCIsXCI4XCI6XCJwXCIsXCI5XCI6XCJ5ICMxXCIsXCIxMFwiOlwieSAjMVwiLFwiMTFcIjpcInkgIzFcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiYSAjMVwiLFwiMy41XCI6XCJhICMxXCIsXCIzLjZcIjpcImEgIzFcIixcIjRcIjpcInkgIzFcIixcIjVcIjpcInkgIzFcIixcIjZcIjpcInkgIzFcIixcIjdcIjpcInkgIzFcIixcIjhcIjpcInkgIzFcIixcIjlcIjpcInkgIzFcIixcIjEwXCI6XCJ5ICMxXCIsXCIxMVwiOlwieSAjMVwiLFwiMTJcIjpcInkgIzFcIixcIjEzXCI6XCJ5ICMxXCIsXCIxNFwiOlwieSAjMVwiLFwiMTVcIjpcInkgIzFcIixcIjE2XCI6XCJ5ICMxXCIsXCIxN1wiOlwieSAjMVwiLFwiMThcIjpcInkgIzFcIixcIjE5XCI6XCJ5ICMxXCIsXCIyMFwiOlwieSAjMVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJhICMxXCIsXCI1XCI6XCJhICMxXCIsXCI2XCI6XCJ5ICMxXCIsXCI3XCI6XCJ5ICMxXCIsXCI4XCI6XCJ5ICMxXCIsXCI5XCI6XCJ5ICMxXCIsXCIxMFwiOlwieSAjMVwiLFwiMTFcIjpcInkgIzFcIixcIjEyXCI6XCJ5ICMxXCIsXCIxM1wiOlwieSAjMVwiLFwiMTRcIjpcInkgIzFcIixcIjE1XCI6XCJ5ICMxXCIsXCIxNlwiOlwieSAjMVwiLFwiMTdcIjpcInkgIzFcIixcIjE4XCI6XCJ5ICMxXCIsXCIxOVwiOlwieSAjMVwiLFwiMjBcIjpcInkgIzFcIixcIjIxXCI6XCJ5ICMxXCIsXCIyMlwiOlwieSAjMVwiLFwiMjNcIjpcInkgIzFcIixcIjI0XCI6XCJ5ICMxXCIsXCIyNVwiOlwieSAjMVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcImEgIzFcIixcIjMuMlwiOlwiYSAjMVwiLFwiNFwiOlwiYSAjMVwiLFwiNVwiOlwieSAjMVwiLFwiNS4xXCI6XCJ5ICMxXCIsXCI2XCI6XCJ5ICMxXCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiYSAjMVwiLFwiOS41LTkuNlwiOlwiYSAjMVwiLFwiMTAuMC0xMC4xXCI6XCJhICMxXCIsXCIxMC41XCI6XCJhICMxXCIsXCIxMC42XCI6XCJhICMxXCIsXCIxMVwiOlwiYSAjMVwiLFwiMTEuMVwiOlwieSAjMVwiLFwiMTEuNVwiOlwieSAjMVwiLFwiMTEuNlwiOlwieSAjMVwiLFwiMTJcIjpcInkgIzFcIixcIjEyLjFcIjpcInkgIzFcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJhICMxXCIsXCI0LjAtNC4xXCI6XCJ5ICMxXCIsXCI0LjItNC4zXCI6XCJ5ICMxXCIsXCI1LjAtNS4xXCI6XCJ5ICMxXCIsXCI2LjAtNi4xXCI6XCJ5ICMxXCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcImEgIzFcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJhICMxXCIsXCIyLjJcIjpcInkgIzFcIixcIjIuM1wiOlwieSAjMVwiLFwiM1wiOlwieSAjMVwiLFwiNFwiOlwieSAjMVwiLFwiNC4xXCI6XCJ5ICMxXCIsXCI0LjItNC4zXCI6XCJ5ICMxXCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5ICMxXCIsXCIxMFwiOlwieSAjMVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJhICMxXCIsXCIxMVwiOlwieSAjMVwiLFwiMTEuMVwiOlwieSAjMVwiLFwiMTEuNVwiOlwieSAjMVwiLFwiMTJcIjpcInkgIzFcIixcIjEyLjFcIjpcInkgIzFcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieSAjMVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieSAjMVwifX0sXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IHJlZmVycyB0byBtaXNzaW5nIHRoZSBkZWZhdWx0IHN0eWxpbmcuIFRoaXMgaXMgZWFzaWx5IHRha2VuIGNhcmUgb2YgYnkgdXNpbmcgZGlzcGxheTpibG9jayBmb3IgYWxsIG5ldyBlbGVtZW50cyAoZXhjZXB0IHRpbWUgYW5kIG1hcmssIHRoZXNlIHNob3VsZCBiZSBkaXNwbGF5OmlubGluZSBhbnl3YXkpLiBJRTExIGFuZCBvbGRlciB2ZXJzaW9ucyBvZiBvdGhlciBicm93c2VycyBkbyBub3Qgc3VwcG9ydCB0aGUgPG1haW4+IGVsZW1lbnQuXCIsXCJub3Rlc19ieV9udW1cIjp7XCIxXCI6XCJEb2VzIG5vdCBpbmNsdWRlIHN1cHBvcnQgZm9yIHRoZSA8bWFpbj4gZWxlbWVudCBcIn0sXCJ1c2FnZV9wZXJjX3lcIjo4OC41NSxcInVzYWdlX3BlcmNfYVwiOjMuNTIsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwib2ZmbGluZS1hcHBzXCI6e1widGl0bGVcIjpcIk9mZmxpbmUgd2ViIGFwcGxpY2F0aW9uc1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBkZWZpbmluZyB3ZWIgcGFnZSBmaWxlcyB0byBiZSBjYWNoZWQgdXNpbmcgYSBjYWNoZSBtYW5pZmVzdCBmaWxlLCBhbGxvd2luZyB0aGVtIHRvIHdvcmsgb2ZmbGluZSBvbiBzdWJzZXF1ZW50IHZpc2l0cyB0byB0aGUgcGFnZVwiLFwic3BlY1wiOlwiaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvYnJvd3NlcnMuaHRtbCNvZmZsaW5lXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly93d3cuc2l0ZXBvaW50LmNvbS9vZmZsaW5lLXdlYi1hcHBsaWNhdGlvbi10dXRvcmlhbC9cIixcInRpdGxlXCI6XCJTaXRlcG9pbnQgdHV0b3JpYWxcIn0se1widXJsXCI6XCJodHRwOi8vZGl2ZWludG9odG1sNS5pbmZvL29mZmxpbmUuaHRtbFwiLFwidGl0bGVcIjpcIkRpdmUgSW50byBIVE1MNSBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL2hhY2tzLm1vemlsbGEub3JnLzIwMTAvMDEvb2ZmbGluZS13ZWItYXBwbGljYXRpb25zL1wiLFwidGl0bGVcIjpcIk1vemlsbGEgSGFja3MgYXJ0aWNsZS9kZW1vXCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvYXBpcy9hcHBjYWNoZS9BcHBsaWNhdGlvbkNhY2hlXCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiSFRNTDVcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJwXCIsXCI3XCI6XCJwXCIsXCI4XCI6XCJwXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwicFwiLFwiM1wiOlwiYVwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInBcIixcIjMuMlwiOlwicFwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJwXCIsXCIxMC41XCI6XCJwXCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ5XCIsXCI0LjAtNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ5XCIsXCIyLjJcIjpcInlcIixcIjIuM1wiOlwieVwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjg2LjQ0LFwidXNhZ2VfcGVyY19hXCI6MC4wNixcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImFwcGNhY2hlLGFwcCBjYWNoZSxhcHBsaWNhdGlvbiBjYWNoZSxvbmxpbmVcIixcImllX2lkXCI6XCJhcHBsaWNhdGlvbmNhY2hlXCIsXCJjaHJvbWVfaWRcIjpcIjYxOTI0NDk0ODc2MzQ0MzJcIn0sXCJ3ZWJ3b3JrZXJzXCI6e1widGl0bGVcIjpcIldlYiBXb3JrZXJzXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHJ1bm5pbmcgc2NyaXB0cyBpbiB0aGUgYmFja2dyb3VuZCwgaXNvbGF0ZWQgZnJvbSB0aGUgd2ViIHBhZ2VcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL3dvcmtlcnMvXCIsXCJzdGF0dXNcIjpcImNyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL0VuL1VzaW5nX3dlYl93b3JrZXJzXCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vbmVyZ2V0LmNvbS9yYXlqcy1tdC9yYXlqcy5odG1sXCIsXCJ0aXRsZVwiOlwiV2ViIFdvcmtlciBkZW1vXCJ9LHtcInVybFwiOlwiaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2llLXdlYi13b3JrZXIvXCIsXCJ0aXRsZVwiOlwiUG9seWZpbGwgZm9yIElFIChzaW5nbGUgdGhyZWFkZWQpXCJ9LHtcInVybFwiOlwiaHR0cDovL25ldC50dXRzcGx1cy5jb20vdHV0b3JpYWxzL2phdmFzY3JpcHQtYWpheC9nZXR0aW5nLXN0YXJ0ZWQtd2l0aC13ZWItd29ya2Vycy9cIixcInRpdGxlXCI6XCJUdXRvcmlhbFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwicFwiLFwiN1wiOlwicFwiLFwiOFwiOlwicFwiLFwiOVwiOlwicFwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcInBcIixcIjNcIjpcInBcIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJwXCIsXCIzLjJcIjpcInBcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwicFwiLFwiMTAuNVwiOlwicFwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieVwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwicFwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo4MS4zMixcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiZm9udGZhY2VcIjp7XCJ0aXRsZVwiOlwiQGZvbnQtZmFjZSBXZWIgZm9udHNcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgZGlzcGxheWluZyBmb250cyBkb3dubG9hZGVkIGZyb20gd2Vic2l0ZXNcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtd2ViZm9udHMvXCIsXCJzdGF0dXNcIjpcImNyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly93ZWJmb250cy5pbmZvXCIsXCJ0aXRsZVwiOlwiTmV3cyBhbmQgaW5mb3JtYXRpb24gc2l0ZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2ViX3R5cG9ncmFwaHlcIixcInRpdGxlXCI6XCJXaWtpcGVkaWFcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LmNzczNmaWxlcy5jb20vZm9udC9cIixcInRpdGxlXCI6XCJJbmZvcm1hdGlvbiBwYWdlXCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvY3NzL2F0cnVsZXMvQGZvbnQtZmFjZVwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJhXCIsXCI2XCI6XCJhXCIsXCI3XCI6XCJhXCIsXCI4XCI6XCJhXCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJ5XCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJhXCIsXCI0LjAtNC4xXCI6XCJhXCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcImFcIixcIjIuM1wiOlwiYVwiLFwiM1wiOlwiYVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJhXCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IGJlZm9yZSBJRTkgcmVmZXJzIHRvIG9ubHkgc3VwcG9ydGluZyBFT1QgZm9udHMuIFNhZmFyaSBmb3IgaU9TIDQuMSBhbmQgYmVsb3cgb25seSBzdXBwb3J0cyBTVkcgZm9udHMuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjg3Ljk0LFwidXNhZ2VfcGVyY19hXCI6NS4xNyxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImZvbnQgZmFjZVwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJlb3RcIjp7XCJ0aXRsZVwiOlwiRU9UIC0gRW1iZWRkZWQgT3BlblR5cGUgZm9udHNcIixcImRlc2NyaXB0aW9uXCI6XCJUeXBlIG9mIGZvbnQgdGhhdCBjYW4gYmUgZGVyaXZlZCBmcm9tIGEgcmVndWxhciBmb250LCBhbGxvd2luZyBzbWFsbCBmaWxlcyBhbmQgbGVnYWwgdXNlIG9mIGhpZ2gtcXVhbGl0eSBmb250cy4gVXNhZ2UgaXMgcmVzdHJpY3RlZCBieSB0aGUgZmlsZSBiZWluZyB0aWVkIHRvIHRoZSB3ZWJzaXRlXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9TdWJtaXNzaW9uL0VPVC9cIixcInN0YXR1c1wiOlwidW5vZmZcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FbWJlZGRlZF9PcGVuVHlwZVwiLFwidGl0bGVcIjpcIldpa2lwZWRpYVwifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS90eXBvZ3JhcGh5L3dlYi9lbWJlZGRpbmcvZGVmYXVsdC5hc3B4XCIsXCJ0aXRsZVwiOlwiRXhhbXBsZSBwYWdlc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiT3RoZXJcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJuXCIsXCIzNVwiOlwiblwiLFwiMzZcIjpcIm5cIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuXCIsXCIzMVwiOlwiblwiLFwiMzJcIjpcIm5cIixcIjMzXCI6XCJuXCIsXCIzNFwiOlwiblwiLFwiMzVcIjpcIm5cIixcIjM2XCI6XCJuXCIsXCIzN1wiOlwiblwiLFwiMzhcIjpcIm5cIixcIjM5XCI6XCJuXCIsXCI0MFwiOlwiblwiLFwiNDFcIjpcIm5cIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcIm5cIixcIjcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJuXCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJuXCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcIm5cIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiUHJvcG9zYWwgYnkgTWljcm9zb2Z0LCBiZWluZyBjb25zaWRlcmVkIGZvciBXM0Mgc3RhbmRhcmRpemF0aW9uLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjoxNi4zLFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcImZvbnRmYWNlXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcIndvZmZcIjp7XCJ0aXRsZVwiOlwiV09GRiAtIFdlYiBPcGVuIEZvbnQgRm9ybWF0XCIsXCJkZXNjcmlwdGlvblwiOlwiQ29tcHJlc3NlZCBUcnVlVHlwZS9PcGVuVHlwZSBmb250IHRoYXQgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGZvbnQncyBzb3VyY2UuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9XT0ZGL1wiLFwic3RhdHVzXCI6XCJyZWNcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2hhY2tzLm1vemlsbGEub3JnLzIwMDkvMTAvd29mZi9cIixcInRpdGxlXCI6XCJNb3ppbGxhIGhhY2tzIGJsb2cgcG9zdFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiT3RoZXJcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiUmVwb3J0ZWQgdG8gYmUgc3VwcG9ydGVkIGluIHNvbWUgbW9kaWZpZWQgdmVyc2lvbnMgb2YgdGhlIEFuZHJvaWQgNC4wIGJyb3dzZXIuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjgzLjM4LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcImZvbnRmYWNlXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcIm11bHRpYmFja2dyb3VuZHNcIjp7XCJ0aXRsZVwiOlwiQ1NTMyBNdWx0aXBsZSBiYWNrZ3JvdW5kc1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiB1c2luZyBtdWx0aXBsZSBpbWFnZXMgYXMgYSBiYWNrZ3JvdW5kXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWJhY2tncm91bmQvXCIsXCJzdGF0dXNcIjpcImNyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly93d3cuY3NzMy5pbmZvL3ByZXZpZXcvbXVsdGlwbGUtYmFja2dyb3VuZHMvXCIsXCJ0aXRsZVwiOlwiRGVtbyAmIGluZm9ybWF0aW9uIHBhZ2VcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LmNzczNmaWxlcy5jb20vYmFja2dyb3VuZC9cIixcInRpdGxlXCI6XCJJbmZvcm1hdGlvbiBwYWdlXCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvY3NzL3Byb3BlcnRpZXMvYmFja2dyb3VuZC1pbWFnZVwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInlcIixcIjMuMlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ5XCIsXCI0LjAtNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcInlcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ5XCIsXCIyLjJcIjpcInlcIixcIjIuM1wiOlwieVwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjkxLjk1LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJib3JkZXItaW1hZ2VcIjp7XCJ0aXRsZVwiOlwiQ1NTMyBCb3JkZXIgaW1hZ2VzXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHVzaW5nIGltYWdlcyBmb3IgYm9yZGVyc1wiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1iYWNrZ3JvdW5kLyN0aGUtYm9yZGVyLWltYWdlXCIsXCJzdGF0dXNcIjpcImNyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly93d3cuY3NzM2ZpbGVzLmNvbS9ib3JkZXIvXCIsXCJ0aXRsZVwiOlwiSW5mb3JtYXRpb24gcGFnZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9wcm9wZXJ0aWVzL2JvcmRlci1pbWFnZVwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJhIHhcIixcIjMuNlwiOlwiYSB4XCIsXCI0XCI6XCJhIHhcIixcIjVcIjpcImEgeFwiLFwiNlwiOlwiYSB4XCIsXCI3XCI6XCJhIHhcIixcIjhcIjpcImEgeFwiLFwiOVwiOlwiYSB4XCIsXCIxMFwiOlwiYSB4XCIsXCIxMVwiOlwiYSB4XCIsXCIxMlwiOlwiYSB4XCIsXCIxM1wiOlwiYSB4XCIsXCIxNFwiOlwiYSB4XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcImEgeFwiLFwiNVwiOlwiYSB4XCIsXCI2XCI6XCJhIHhcIixcIjdcIjpcImEgeFwiLFwiOFwiOlwiYSB4XCIsXCI5XCI6XCJhIHhcIixcIjEwXCI6XCJhIHhcIixcIjExXCI6XCJhIHhcIixcIjEyXCI6XCJhIHhcIixcIjEzXCI6XCJhIHhcIixcIjE0XCI6XCJhIHhcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiYSB4XCIsXCIzLjJcIjpcImEgeFwiLFwiNFwiOlwiYSB4XCIsXCI1XCI6XCJhIHhcIixcIjUuMVwiOlwiYSB4XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJhXCIsXCIxMC42XCI6XCJhXCIsXCIxMVwiOlwiYSB4XCIsXCIxMS4xXCI6XCJhIHhcIixcIjExLjVcIjpcImEgeFwiLFwiMTEuNlwiOlwiYSB4XCIsXCIxMlwiOlwiYSB4XCIsXCIxMi4xXCI6XCJhIHhcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJhIHhcIixcIjQuMC00LjFcIjpcImEgeFwiLFwiNC4yLTQuM1wiOlwiYSB4XCIsXCI1LjAtNS4xXCI6XCJhIHhcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcImEgeFwiLFwiMi4yXCI6XCJhIHhcIixcIjIuM1wiOlwiYSB4XCIsXCIzXCI6XCJhIHhcIixcIjRcIjpcImEgeFwiLFwiNC4xXCI6XCJhIHhcIixcIjQuMi00LjNcIjpcImEgeFwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwiYSB4XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiYSB4XCIsXCIxMS4xXCI6XCJhIHhcIixcIjExLjVcIjpcImEgeFwiLFwiMTJcIjpcImEgeFwiLFwiMTIuMVwiOlwiYSB4XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIk5vdGUgdGhhdCBib3RoIHRoZSBib3JkZXItc3R5bGUgYW5kIGJvcmRlci13aWR0aCBtdXN0IGJlIHNwZWNpZmllZCBmb3IgYm9yZGVyLWltYWdlcyB0byB3b3JrIGFjY29yZGluZyB0byBzcGVjLCB0aG91Z2ggb2xkZXIgaW1wbGVtZW50YXRpb25zIG1heSBub3QgaGF2ZSB0aGlzIHJlcXVpcmVtZW50LiBQYXJ0aWFsIHN1cHBvcnQgcmVmZXJzIHRvIHN1cHBvcnRpbmcgdGhlIHNob3J0aGFuZCBzeW50YXgsIGJ1dCBub3QgdGhlIGluZGl2aWR1YWwgcHJvcGVydGllcyAoYm9yZGVyLWltYWdlLXNvdXJjZSwgYm9yZGVyLWltYWdlLXNsaWNlLCBldGMpLiBcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NzYuNDIsXCJ1c2FnZV9wZXJjX2FcIjo3LjMsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiYmFja2dyb3VuZC1pbWctb3B0c1wiOntcInRpdGxlXCI6XCJDU1MzIEJhY2tncm91bmQtaW1hZ2Ugb3B0aW9uc1wiLFwiZGVzY3JpcHRpb25cIjpcIk5ldyBwcm9wZXJ0aWVzIHRvIGFmZmVjdCBiYWNrZ3JvdW5kIGltYWdlcywgaW5jbHVkaW5nIGJhY2tncm91bmQtY2xpcCwgYmFja2dyb3VuZC1vcmlnaW4gYW5kIGJhY2tncm91bmQtc2l6ZVwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1iYWNrZ3JvdW5kLyNiYWNrZ3JvdW5kc1wiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vd3d3LnN0YW5kYXJkaXN0YS5jb20vY3NzMy9jc3MzLWJhY2tncm91bmQtcHJvcGVydGllc1wiLFwidGl0bGVcIjpcIkRldGFpbGVkIGNvbXBhdGliaWxpdHkgdGFibGVzIGFuZCBkZW1vc1wifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuY3NzM2ZpbGVzLmNvbS9iYWNrZ3JvdW5kL1wiLFwidGl0bGVcIjpcIkluZm9ybWF0aW9uIHBhZ2VcIn0se1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vbG91aXNyZW1pL2JhY2tncm91bmQtc2l6ZS1wb2x5ZmlsbFwiLFwidGl0bGVcIjpcIlBvbHlmaWxsIGZvciBJRTctOFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTM1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiYSB4XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJhXCIsXCIzLjJcIjpcImFcIixcIjRcIjpcImFcIixcIjVcIjpcImFcIixcIjUuMVwiOlwiYVwiLFwiNlwiOlwiYVwiLFwiNi4xXCI6XCJhXCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiYSB4XCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJhXCIsXCI0LjAtNC4xXCI6XCJhXCIsXCI0LjItNC4zXCI6XCJhXCIsXCI1LjAtNS4xXCI6XCJhXCIsXCI2LjAtNi4xXCI6XCJhXCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcImFcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJhIHhcIixcIjIuMlwiOlwieSB4XCIsXCIyLjNcIjpcInkgeFwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IGluIE9wZXJhIE1pbmkgcmVmZXJzIHRvIG5vdCBzdXBwb3J0aW5nIGJhY2tncm91bmQgc2l6aW5nIG9yIGJhY2tncm91bmQgYXR0YWNobWVudHMuIEhvd2V2ZXIgT3BlcmEgTWluaSA3LjUgc3VwcG9ydHMgYmFja2dyb3VuZCBzaXppbmcgKGluY2x1ZGluZyBjb3ZlciBhbmQgY29udGFpbiB2YWx1ZXMpLlxcclxcblxcclxcblBhcnRpYWwgc3VwcG9ydCBpbiBTYWZhcmkgNiByZWZlcnMgdG8gbm90IHN1cHBvcnRpbmcgYmFja2dyb3VuZCBzaXppbmcgb2Zmc2V0IGZyb20gZWRnZXMgc3ludGF4LlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo4Ni44NSxcInVzYWdlX3BlcmNfYVwiOjUuMTMsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiY3NzLXRhYmxlXCI6e1widGl0bGVcIjpcIkNTUyBUYWJsZSBkaXNwbGF5XCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGRpc3BsYXlpbmcgZWxlbWVudHMgYXMgdGFibGVzLCByb3dzLCBhbmQgY2VsbHNcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3RhYmxlcy5odG1sXCIsXCJzdGF0dXNcIjpcInJlY1wiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vd3d3Lm9uZW5hdWdodC5jb20vcG9zdHMvMjAxL3VzZS1jc3MtZGlzcGxheXRhYmxlLWZvci1sYXlvdXRcIixcInRpdGxlXCI6XCJCbG9nIHBvc3Qgb24gdXNhZ2VcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzJcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwieVwiLFwiM1wiOlwieVwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInlcIixcIjMuMlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwieVwiLFwiOS41LTkuNlwiOlwieVwiLFwiMTAuMC0xMC4xXCI6XCJ5XCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ5XCIsXCI0LjAtNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcInlcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ5XCIsXCIyLjJcIjpcInlcIixcIjIuM1wiOlwieVwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjk2LjA0LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImRpc3BsYXk6dGFibGUsIGRpc3BsYXk6IHRhYmxlLHRhYmxlLWNlbGwsdGFibGUtcm93LHRhYmxlLWxheW91dFwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJjc3MtZ2VuY29udGVudFwiOntcInRpdGxlXCI6XCJDU1MgR2VuZXJhdGVkIGNvbnRlbnQgZm9yIHBzZXVkby1lbGVtZW50c1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBkaXNwbGF5aW5nIHRleHQgb3IgaW1hZ2VzIGJlZm9yZSBvciBhZnRlciB0aGUgZ2l2ZW4gZWxlbWVudCdzIGNvbnRlbnRzIHVzaW5nIHRoZSA6OmJlZm9yZSBhbmQgOjphZnRlciBwc2V1ZG8tZWxlbWVudHMuIEFsbCBicm93c2VycyB3aXRoIHN1cHBvcnQgYWxzbyBzdXBwb3J0IHRoZSBgYXR0cigpYCBub3RhdGlvbiBpbiB0aGUgYGNvbnRlbnRgIHByb3BlcnR5LiBcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL2dlbmVyYXRlLmh0bWxcIixcInN0YXR1c1wiOlwicmVjXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly93d3cud2VzdGNpdi5jb20vc3R5bGVfbWFzdGVyL2FjYWRlbXkvY3NzX3R1dG9yaWFsL2FkdmFuY2VkL2dlbmVyYXRlZF9jb250ZW50Lmh0bWxcIixcInRpdGxlXCI6XCJHdWlkZSBvbiB1c2FnZVwifSx7XCJ1cmxcIjpcImh0dHBzOi8vZGV2Lm9wZXJhLmNvbS9hcnRpY2xlcy92aWV3L2Nzcy1nZW5lcmF0ZWQtY29udGVudC10ZWNobmlxdWVzL1wiLFwidGl0bGVcIjpcIkRldi5PcGVyYSBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvY3NzL2dlbmVyYXRlZF9hbmRfcmVwbGFjZWRfY29udGVudFwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzJcIixcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJhXCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwieVwiLFwiM1wiOlwieVwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInlcIixcIjMuMlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwieVwiLFwiOS41LTkuNlwiOlwieVwiLFwiMTAuMC0xMC4xXCI6XCJ5XCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ5XCIsXCI0LjAtNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcInlcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ5XCIsXCIyLjJcIjpcInlcIixcIjIuM1wiOlwieVwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiSUU4IG9ubHkgc3VwcG9ydHMgdGhlIHNpbmdsZS1jb2xvbiBDU1MgMi4xIHN5bnRheCAoaS5lLiA6cHNldWRvLWNsYXNzKS4gSXQgZG9lcyBub3Qgc3VwcG9ydCB0aGUgZG91YmxlLWNvbG9uIENTUzMgc3ludGF4IChpLmUuIDo6cHNldWRvLWVsZW1lbnQpXFxyXFxuXFxyXFxuRm9yIGNvbnRlbnQgdG8gYXBwZWFyIGluIHBzZXVkby1lbGVtZW50cywgdGhlIGBjb250ZW50YCBwcm9wZXJ0eSBtdXN0IGJlIHNldCAoYnV0IG1heSBiZSBhbiBlbXB0eSBzdHJpbmcpLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo5Mi4wOCxcInVzYWdlX3BlcmNfYVwiOjMuOTYsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJiZWZvcmUsYWZ0ZXJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiY3NzLWZpeGVkXCI6e1widGl0bGVcIjpcIkNTUyBwb3NpdGlvbjpmaXhlZFwiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBrZWVwaW5nIGFuIGVsZW1lbnQgaW4gYSBmaXhlZCBsb2NhdGlvbiByZWdhcmRsZXNzIG9mIHNjcm9sbCBwb3NpdGlvblwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvdmlzdXJlbi5odG1sI2ZpeGVkLXBvc2l0aW9uaW5nXCIsXCJzdGF0dXNcIjpcInJlY1wiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vd3d3LmNzcy0xMDEub3JnL2ZpeGVkLXBvc2l0aW9uaW5nLzA1LnBocFwiLFwidGl0bGVcIjpcIldvcmthcm91bmQgZm9yIElFNlwifSx7XCJ1cmxcIjpcImh0dHA6Ly9icmFkZnJvc3R3ZWIuY29tL2Jsb2cvbW9iaWxlL2ZpeGVkLXBvc2l0aW9uL1wiLFwidGl0bGVcIjpcIkFydGljbGUgb24gbW9iaWxlIHN1cHBvcnRcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvcHJvcGVydGllcy9wb3NpdGlvblwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTU1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcInBcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJ5XCIsXCIzXCI6XCJ5XCIsXCIzLjVcIjpcInlcIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwieVwiLFwiMy4yXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJ5XCIsXCI5LjUtOS42XCI6XCJ5XCIsXCIxMC4wLTEwLjFcIjpcInlcIixcIjEwLjVcIjpcInlcIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcImFcIixcIjYuMC02LjFcIjpcImFcIixcIjcuMC03LjFcIjpcImFcIixcIjhcIjpcImFcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcImFcIixcIjIuMlwiOlwiYVwiLFwiMi4zXCI6XCJhXCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJPbmx5IHdvcmtzIGluIEFuZHJvaWQgMi4yKyBieSB1c2luZyB0aGUgZm9sbG93aW5nIG1ldGEgdGFnOiA8bWV0YSBuYW1lPVxcXCJ2aWV3cG9ydFxcXCIgY29udGVudD1cXFwid2lkdGg9ZGV2aWNlLXdpZHRoLCB1c2VyLXNjYWxhYmxlPW5vXFxcIj4uIFBhcnRpYWwgc3VwcG9ydCBpbiBpT1MgU2FmYXJpIHJlZmVycyB0byBbYnVnZ3kgYmVoYXZpb3JdKGh0dHA6Ly9yZW15c2hhcnAuY29tLzIwMTIvMDUvMjQvaXNzdWVzLXdpdGgtcG9zaXRpb24tZml4ZWQtc2Nyb2xsaW5nLW9uLWlvcy8pLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo4NC43LFwidXNhZ2VfcGVyY19hXCI6OC4zMixcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJoYXNoY2hhbmdlXCI6e1widGl0bGVcIjpcIkhhc2hjaGFuZ2UgZXZlbnRcIixcImRlc2NyaXB0aW9uXCI6XCJFdmVudCB0cmlnZ2VyZWQgaW4gSmF2YVNjcmlwdCB3aGVuIHRoZSBVUkwncyBoYXNoIGhhcyBjaGFuZ2VkIChmb3IgZXhhbXBsZTogcGFnZS5odG1sI2ZvbyB0byBwYWdlLmh0bWwjYmFyKSBcIixcInNwZWNcIjpcImh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Jyb3dzZXJzLmh0bWwjdGhlLWhhc2hjaGFuZ2VldmVudC1pbnRlcmZhY2VcIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5vbmhhc2hjaGFuZ2VcIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9jYzI4ODIwOShWUy44NSkuYXNweFwiLFwidGl0bGVcIjpcIk1TRE4gYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvZG9tL2V2ZW50cy90ZXN0cy9oYXNoY2hhbmdlLmh0bWxcIixcInRpdGxlXCI6XCJTaW1wbGUgZGVtb1wifSx7XCJ1cmxcIjpcImh0dHA6Ly9naXRodWIuY29tLzNucjFjL2pVcmkuanNcIixcInRpdGxlXCI6XCJQb2x5ZmlsbFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2RvbS9FbGVtZW50L2hhc2hjaGFuZ2VcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJIVE1MNVwiLFwiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwicFwiLFwiNlwiOlwicFwiLFwiN1wiOlwicFwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcInBcIixcIjNcIjpcInBcIixcIjMuNVwiOlwicFwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwicFwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJwXCIsXCIzLjJcIjpcInBcIixcIjRcIjpcInBcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcInBcIixcIjkuNS05LjZcIjpcInBcIixcIjEwLjAtMTAuMVwiOlwicFwiLFwiMTAuNVwiOlwicFwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJ5XCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwicFwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo5Mi42NSxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJvbmhhc2hjaGFuZ2UsSGFzaENoYW5nZUV2ZW50XCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImNzcy1zZWwyXCI6e1widGl0bGVcIjpcIkNTUyAyLjEgc2VsZWN0b3JzXCIsXCJkZXNjcmlwdGlvblwiOlwiQmFzaWMgQ1NTIHNlbGVjdG9ycyBpbmNsdWRpbmc6IGAqYCAodW5pdmVyc2FsIHNlbGVjdG9yKSwgYD5gIChjaGlsZCBzZWxlY3RvciksIGA6Zmlyc3QtY2hpbGRgLCBgOmxpbmtgLCBgOnZpc2l0ZWRgLCBgOmFjdGl2ZWAsIGA6aG92ZXJgLCBgOmZvY3VzYCwgYDpsYW5nKClgLCBgK2AgKGFkamFjZW50IHNpYmxpbmcgc2VsZWN0b3IpLCBgW2F0dHJdYCwgYFthdHRyPVxcXCJ2YWxcXFwiXWAsIGBbYXR0cn49XFxcInZhbFxcXCJdYCwgYFthdHRyfD1cXFwiYmFyXFxcIl1gLCBgLmZvb2AgKGNsYXNzIHNlbGVjdG9yKSwgYCNmb29gIChpZCBzZWxlY3RvcilcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3NlbGVjdG9yLmh0bWxcIixcInN0YXR1c1wiOlwicmVjXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvY3NzL2NvbnRlbnRzLmh0bWxcIixcInRpdGxlXCI6XCJEZXRhaWxlZCBzdXBwb3J0IGluZm9ybWF0aW9uXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy55b3VyaHRtbHNvdXJjZS5jb20vc3R5bGVzaGVldHMvYWR2YW5jZWRzZWxlY3RvcnMuaHRtbFwiLFwidGl0bGVcIjpcIkV4YW1wbGVzIG9mIGFkdmFuY2VkIHNlbGVjdG9yc1wifSx7XCJ1cmxcIjpcImh0dHA6Ly9zZWxlY3Rpdml6ci5jb21cIixcInRpdGxlXCI6XCJTZWxlY3Rpdml6cjogUG9seWZpbGwgZm9yIElFNi04XCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvY3NzL3NlbGVjdG9yc1wiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzJcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJwXCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwieVwiLFwiM1wiOlwieVwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInlcIixcIjMuMlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwieVwiLFwiOS41LTkuNlwiOlwieVwiLFwiMTAuMC0xMC4xXCI6XCJ5XCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ5XCIsXCI0LjAtNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcInlcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ5XCIsXCIyLjJcIjpcInlcIixcIjIuM1wiOlwieVwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjk2LjE0LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJjc3Mtc2VsM1wiOntcInRpdGxlXCI6XCJDU1MzIHNlbGVjdG9yc1wiLFwiZGVzY3JpcHRpb25cIjpcIkFkdmFuY2VkIGVsZW1lbnQgc2VsZWN0aW9uIHVzaW5nIHNlbGVjdG9ycyBpbmNsdWRpbmc6IGBbZm9vXj1cXFwiYmFyXFxcIl1gLCBgW2ZvbyQ9XFxcImJhclxcXCJdYCwgYFtmb28qPVxcXCJiYXJcXFwiXWAsIGA6cm9vdGAsIGA6bnRoLWNoaWxkKClgLCAgYDpudGgtbGFzdC1jaGlsZCgpYCwgYG50aC1vZi10eXBlYCwgYG50aC1sYXN0LW9mLXR5cGUoKWAsIGA6bGFzdC1jaGlsZGAsIGA6Zmlyc3Qtb2YtdHlwZWAsIGA6bGFzdC1vZi10eXBlYCwgYDpvbmx5LWNoaWxkYCwgYDpvbmx5LW9mLXR5cGVgLCBgOmVtcHR5YCwgYDp0YXJnZXRgLCBgOmVuYWJsZWRgLCBgOmRpc2FibGVkYCwgYDpjaGVja2VkYCwgYDpub3QoKWAsIGB+YCAoZ2VuZXJhbCBzaWJsaW5nKVwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvXCIsXCJzdGF0dXNcIjpcInJlY1wiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2Nzcy9zZWxlY3RvcnMvXCIsXCJ0aXRsZVwiOlwiRGV0YWlsZWQgc3VwcG9ydCBpbmZvcm1hdGlvblwifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuY3NzMy5pbmZvL3NlbGVjdG9ycy10ZXN0L1wiLFwidGl0bGVcIjpcIkF1dG9tYXRlZCBDU1MzIHNlbGVjdG9yIHRlc3RcIn0se1widXJsXCI6XCJodHRwOi8vc2VsZWN0aXZpenIuY29tXCIsXCJ0aXRsZVwiOlwiU2VsZWN0aXZpenI6IFBvbHlmaWxsIGZvciBJRTYtOFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9zZWxlY3RvcnNcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1MzXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwicFwiLFwiN1wiOlwiYVwiLFwiOFwiOlwiYVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcInlcIixcIjEwLjAtMTAuMVwiOlwieVwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieVwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJ5XCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieVwiLFwiMi4yXCI6XCJ5XCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIklFNyBhbmQgSUU4IHN1cHBvcnQgb25seSB0aGVzZSBDU1MzIHNlbGVjdG9yczogR2VuZXJhbCBzaWJsaW5ncyAoYGVsZW1lbnQxfmVsZW1lbnQyYCkgYW5kIEF0dHJpYnV0ZSBzZWxlY3RvcnMgYFthdHRyXj12YWxdYCwgYFthdHRyJD12YWxdYCwgYW5kIGBbYXR0cio9dmFsXWBcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6OTIsXCJ1c2FnZV9wZXJjX2FcIjo0LjA2LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImNzcy10ZXh0c2hhZG93XCI6e1widGl0bGVcIjpcIkNTUzMgVGV4dC1zaGFkb3dcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgYXBwbHlpbmcgb25lIG9yIG1vcmUgc2hhZG93IG9yIGJsdXIgZWZmZWN0cyB0byB0ZXh0XCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MtdGV4dC1kZWNvci0zLyN0ZXh0LXNoYWRvdy1wcm9wZXJ0eVwiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vaGFja3MubW96aWxsYS5vcmcvMjAwOS8wNi90ZXh0LXNoYWRvdy9cIixcInRpdGxlXCI6XCJNb3ppbGxhIGhhY2tzIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vaWUubWljcm9zb2Z0LmNvbS90ZXN0ZHJpdmUvR3JhcGhpY3MvaGFuZHMtb24tY3NzMy9oYW5kcy1vbl90ZXh0LXNoYWRvdy5odG1cIixcInRpdGxlXCI6XCJMaXZlIGVkaXRvclwifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuY3NzM2ZpbGVzLmNvbS9zaGFkb3cvI3RleHRzaGFkb3dcIixcInRpdGxlXCI6XCJJbmZvcm1hdGlvbiBwYWdlXCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvY3NzL3Byb3BlcnRpZXMvdGV4dC1zaGFkb3dcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1MzXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcInkgIzFcIixcIjExXCI6XCJ5ICMxXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJhXCIsXCIzLjJcIjpcImFcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcInlcIixcIjEwLjAtMTAuMVwiOlwieVwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieVwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJhXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieVwiLFwiMi4yXCI6XCJ5XCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwiYVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInkgIzFcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIk9wZXJhIE1pbmkgaWdub3JlcyB0aGUgYmx1ci1yYWRpdXMgc2V0LCBzbyBubyBibHVyIGVmZmVjdCBpcyB2aXNpYmxlLiBUZXh0LXNoYWRvdyBiZWhhdmlvciBjYW4gYmUgc29tZXdoYXQgZW11bGF0ZWQgaW4gb2xkZXIgSUUgdmVyc2lvbnMgdXNpbmcgdGhlIG5vbi1zdGFuZGFyZCBcXFwiZHJvcHNoYWRvd1xcXCIgb3IgXFxcImdsb3dcXFwiIGZpbHRlcnMuIFwiLFwibm90ZXNfYnlfbnVtXCI6e1wiMVwiOlwiSUUgMTArIHN1cHBvcnRzIGEgZm91cnRoIGxlbmd0aCB2YWx1ZSBmb3IgdGhlIHNoYWRvdydzIFxcXCJzcHJlYWRcXFwiLiBUaGlzIGlzIG5vdCAoeWV0KSBwYXJ0IG9mIHRoZSBzcGVjaWZpY2F0aW9uLiBcIn0sXCJ1c2FnZV9wZXJjX3lcIjo4Ni4zNyxcInVzYWdlX3BlcmNfYVwiOjMuMjQsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJ0ZXh0IHNoYWRvd1wiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJjc3MtYm94c2hhZG93XCI6e1widGl0bGVcIjpcIkNTUzMgQm94LXNoYWRvd1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBkaXNwbGF5aW5nIGFuIGlubmVyIG9yIG91dGVyIHNoYWRvdyBlZmZlY3QgdG8gZWxlbWVudHNcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtYmFja2dyb3VuZC8jYm94LXNoYWRvd1wiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9Fbi9DU1MvLW1vei1ib3gtc2hhZG93XCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vd2VzdGNpdi5jb20vdG9vbHMvYm94c2hhZG93cy9pbmRleC5odG1sXCIsXCJ0aXRsZVwiOlwiTGl2ZSBlZGl0b3JcIn0se1widXJsXCI6XCJodHRwOi8vdGVzdHMudGhlbWFzdGEuY29tL2Jsb2dzdHVmZi9ib3hzaGFkb3dkZW1vLmh0bWxcIixcInRpdGxlXCI6XCJEZW1vIG9mIHZhcmlvdXMgZWZmZWN0c1wifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuY3NzM2ZpbGVzLmNvbS9zaGFkb3cvXCIsXCJ0aXRsZVwiOlwiSW5mb3JtYXRpb24gcGFnZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9wcm9wZXJ0aWVzL2JveC1zaGFkb3dcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1MzXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwieSB4XCIsXCIzLjZcIjpcInkgeFwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInkgeFwiLFwiNVwiOlwieSB4XCIsXCI2XCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiOFwiOlwieSB4XCIsXCI5XCI6XCJ5IHhcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiYSB4XCIsXCIzLjJcIjpcImEgeFwiLFwiNFwiOlwiYSB4XCIsXCI1XCI6XCJ5IHhcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiYSB4XCIsXCI0LjAtNC4xXCI6XCJ5IHhcIixcIjQuMi00LjNcIjpcInkgeFwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiYSB4XCIsXCIyLjJcIjpcImEgeFwiLFwiMi4zXCI6XCJhIHhcIixcIjNcIjpcImEgeFwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5IHhcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJDYW4gYmUgcGFydGlhbGx5IGVtdWxhdGVkIGluIG9sZGVyIElFIHZlcnNpb25zIHVzaW5nIHRoZSBub24tc3RhbmRhcmQgXFxcInNoYWRvd1xcXCIgZmlsdGVyLiBQYXJ0aWFsIHN1cHBvcnQgaW4gU2FmYXJpLCBpT1MgU2FmYXJpIGFuZCBBbmRyb2lkIEJyb3dzZXIgcmVmZXJzIHRvIG1pc3NpbmcgXFxcImluc2V0XFxcIiBhbmQgYmx1ciByYWRpdXMgdmFsdWUgc3VwcG9ydC5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6ODcuOTIsXCJ1c2FnZV9wZXJjX2FcIjowLjkzLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiYm94LXNoYWRvd3MsYm94c2hhZG93cyxib3ggc2hhZG93LHNoYW93XCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImNzczMtY29sb3JzXCI6e1widGl0bGVcIjpcIkNTUzMgQ29sb3JzXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGRlc2NyaWJpbmcgY29sb3JzIHVzaW5nIEh1ZSwgU2F0dXJhdGlvbiBhbmQgTGlnaHRuZXNzIChoc2woKSkgcmF0aGVyIHRoYW4ganVzdCBSR0IsIGFzIHdlbGwgYXMgYWxsb3dpbmcgYWxwaGEtdHJhbnNwYXJlbmN5IHdpdGggcmdiYSgpIGFuZCBoc2xhKCkuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWNvbG9yL1wiLFwic3RhdHVzXCI6XCJyZWNcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXYub3BlcmEuY29tL2FydGljbGVzL3ZpZXcvY29sb3ItaW4tb3BlcmEtMTAtaHNsLXJnYi1hbmQtYWxwaGEtdHJhbnNwYXJlbmN5L1wiLFwidGl0bGVcIjpcIkRldi5PcGVyYSBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy5jc3MzZmlsZXMuY29tL2NvbG9yL1wiLFwidGl0bGVcIjpcIkluZm9ybWF0aW9uIHBhZ2VcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvY29sb3IjUkdCQV9Ob3RhdGlvblwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiYVwiLFwiM1wiOlwieVwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInlcIixcIjMuMlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiYVwiLFwiMTAuMC0xMC4xXCI6XCJ5XCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ5XCIsXCI0LjAtNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcInlcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ5XCIsXCIyLjJcIjpcInlcIixcIjIuM1wiOlwieVwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjkyLjA2LFwidXNhZ2VfcGVyY19hXCI6MC4wMixcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcInJnYixoc2wscmdiYSxoc2xhXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImNzczMtYm94c2l6aW5nXCI6e1widGl0bGVcIjpcIkNTUzMgQm94LXNpemluZ1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBzcGVjaWZ5aW5nIHdoZXRoZXIgb3Igbm90IGFuIGVsZW1lbnQncyBib3JkZXJzIGFuZCBwYWRkaW5nIHNob3VsZCBiZSBpbmNsdWRlZCBpbiBzaXplIHVuaXRzXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXVpLyNib3gtc2l6aW5nXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL0VuL0NTUy9Cb3gtc2l6aW5nXCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LjQ1NmJlcmVhc3RyZWV0LmNvbS9hcmNoaXZlLzIwMTEwNC9jb250cm9sbGluZ193aWR0aF93aXRoX2NzczNfYm94LXNpemluZy9cIixcInRpdGxlXCI6XCJCbG9nIHBvc3RcIn0se1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vU2NoZXBwL2JveC1zaXppbmctcG9seWZpbGxcIixcInRpdGxlXCI6XCJQb2x5ZmlsbCBmb3IgSUVcIn0se1widXJsXCI6XCJodHRwOi8vY3NzLXRyaWNrcy5jb20vYm94LXNpemluZy9cIixcInRpdGxlXCI6XCJDU1MgVHJpY2tzXCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvY3NzL3Byb3BlcnRpZXMvYm94LXNpemluZ1wiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJwXCIsXCI2XCI6XCJwXCIsXCI3XCI6XCJwXCIsXCI4XCI6XCJhXCIsXCI5XCI6XCJhXCIsXCIxMFwiOlwiYVwiLFwiMTFcIjpcImFcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwieSB4XCIsXCIzXCI6XCJ5IHhcIixcIjMuNVwiOlwieSB4XCIsXCIzLjZcIjpcInkgeFwiLFwiNFwiOlwieSB4XCIsXCI1XCI6XCJ5IHhcIixcIjZcIjpcInkgeFwiLFwiN1wiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIixcIjlcIjpcInkgeFwiLFwiMTBcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTNcIjpcInkgeFwiLFwiMTRcIjpcInkgeFwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInkgeFwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInkgeFwiLFwiMjdcIjpcInkgeFwiLFwiMjhcIjpcInkgeFwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiYSB4XCIsXCI1XCI6XCJhIHhcIixcIjZcIjpcImEgeFwiLFwiN1wiOlwiYSB4XCIsXCI4XCI6XCJhIHhcIixcIjlcIjpcImEgeFwiLFwiMTBcIjpcImFcIixcIjExXCI6XCJhXCIsXCIxMlwiOlwiYVwiLFwiMTNcIjpcImFcIixcIjE0XCI6XCJhXCIsXCIxNVwiOlwiYVwiLFwiMTZcIjpcImFcIixcIjE3XCI6XCJhXCIsXCIxOFwiOlwiYVwiLFwiMTlcIjpcImFcIixcIjIwXCI6XCJhXCIsXCIyMVwiOlwiYVwiLFwiMjJcIjpcImFcIixcIjIzXCI6XCJhXCIsXCIyNFwiOlwiYVwiLFwiMjVcIjpcImFcIixcIjI2XCI6XCJhXCIsXCIyN1wiOlwiYVwiLFwiMjhcIjpcImFcIixcIjI5XCI6XCJhXCIsXCIzMFwiOlwiYVwiLFwiMzFcIjpcImFcIixcIjMyXCI6XCJhXCIsXCIzM1wiOlwiYVwiLFwiMzRcIjpcImFcIixcIjM1XCI6XCJhXCIsXCIzNlwiOlwiYVwiLFwiMzdcIjpcImFcIixcIjM4XCI6XCJhXCIsXCIzOVwiOlwiYVwiLFwiNDBcIjpcImFcIixcIjQxXCI6XCJhXCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJhIHhcIixcIjMuMlwiOlwiYSB4XCIsXCI0XCI6XCJhIHhcIixcIjVcIjpcImEgeFwiLFwiNS4xXCI6XCJhXCIsXCI2XCI6XCJhXCIsXCI2LjFcIjpcImFcIixcIjdcIjpcImFcIixcIjcuMVwiOlwiYVwiLFwiOFwiOlwiYVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiYVwiLFwiMTAuMC0xMC4xXCI6XCJhXCIsXCIxMC41XCI6XCJhXCIsXCIxMC42XCI6XCJhXCIsXCIxMVwiOlwiYVwiLFwiMTEuMVwiOlwiYVwiLFwiMTEuNVwiOlwiYVwiLFwiMTEuNlwiOlwiYVwiLFwiMTJcIjpcImFcIixcIjEyLjFcIjpcImFcIixcIjE1XCI6XCJhXCIsXCIxNlwiOlwiYVwiLFwiMTdcIjpcImFcIixcIjE4XCI6XCJhXCIsXCIxOVwiOlwiYVwiLFwiMjBcIjpcImFcIixcIjIxXCI6XCJhXCIsXCIyMlwiOlwiYVwiLFwiMjNcIjpcImFcIixcIjI0XCI6XCJhXCIsXCIyNVwiOlwiYVwiLFwiMjZcIjpcImFcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJhIHhcIixcIjQuMC00LjFcIjpcImEgeFwiLFwiNC4yLTQuM1wiOlwiYSB4XCIsXCI1LjAtNS4xXCI6XCJhXCIsXCI2LjAtNi4xXCI6XCJhXCIsXCI3LjAtNy4xXCI6XCJhXCIsXCI4XCI6XCJhXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcImFcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJhIHhcIixcIjIuMlwiOlwiYSB4XCIsXCIyLjNcIjpcImEgeFwiLFwiM1wiOlwiYSB4XCIsXCI0XCI6XCJhXCIsXCI0LjFcIjpcImFcIixcIjQuMi00LjNcIjpcImFcIixcIjQuNFwiOlwiYVwiLFwiNC40LjNcIjpcImFcIn0sXCJiYlwiOntcIjdcIjpcImEgeFwiLFwiMTBcIjpcImFcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiYVwiLFwiMTFcIjpcImFcIixcIjExLjFcIjpcImFcIixcIjExLjVcIjpcImFcIixcIjEyXCI6XCJhXCIsXCIxMi4xXCI6XCJhXCIsXCIyNFwiOlwiYVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwiYVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcImFcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcImFcIn19LFwibm90ZXNcIjpcIlBhcnRpYWwgc3VwcG9ydCByZWZlcnMgdG8gc3VwcG9ydGluZyBvbmx5IHRoZSBgY29udGVudC1ib3hgIGFuZCBgYm9yZGVyLWJveGAgdmFsdWVzLCBub3QgYHBhZGRpbmctYm94YCAod2hpY2ggd2FzIGFkZGVkIHRvIHRoZSBzcGVjIGxhdGVyKS5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6MTMuMzMsXCJ1c2FnZV9wZXJjX2FcIjo4Mi43LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiYm9yZGVyLWJveCxjb250ZW50LWJveCxwYWRkaW5nLWJveFwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJjc3MtbWVkaWFxdWVyaWVzXCI6e1widGl0bGVcIjpcIkNTUzMgTWVkaWEgUXVlcmllc1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBhcHBseWluZyBzdHlsZXMgYmFzZWQgb24gbWVkaWEgaW5mb3JtYXRpb24uIEluY2x1ZGVzIHRoaW5ncyBsaWtlIHBhZ2UgYW5kIGRldmljZSBkaW1lbnNpb25zXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLW1lZGlhcXVlcmllcy9cIixcInN0YXR1c1wiOlwicmVjXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9pZS5taWNyb3NvZnQuY29tL3Rlc3Rkcml2ZS9IVE1MNS84NUNTUzNfTWVkaWFRdWVyaWVzL1wiLFwidGl0bGVcIjpcIklFIGRlbW8gcGFnZSB3aXRoIGluZm9ybWF0aW9uXCJ9LHtcInVybFwiOlwiaHR0cDovL3dlYmRlc2lnbmVyd2FsbC5jb20vdHV0b3JpYWxzL3Jlc3BvbnNpdmUtZGVzaWduLXdpdGgtY3NzMy1tZWRpYS1xdWVyaWVzXCIsXCJ0aXRsZVwiOlwiTWVkaWEgUXVlcmllcyB0dXRvcmlhbFwifSx7XCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9zY290dGplaGwvUmVzcG9uZFwiLFwidGl0bGVcIjpcIlBvbHlmaWxsIGZvciBJRVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9hdHJ1bGVzL0BtZWRpYVwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJwXCIsXCI2XCI6XCJwXCIsXCI3XCI6XCJwXCIsXCI4XCI6XCJwXCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcImFcIixcIjMuMlwiOlwiYVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwieVwiLFwiMTAuMC0xMC4xXCI6XCJ5XCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ5XCIsXCI0LjAtNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcInlcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ5XCIsXCIyLjJcIjpcInlcIixcIjIuM1wiOlwieVwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiSW5jb21wbGV0ZSBzdXBwb3J0IGJ5IG9sZGVyIHdlYmtpdCBicm93c2VycyByZWZlcnMgdG8gb25seSBhY2tub3dsZWRnaW5nIGRpZmZlcmVudCBtZWRpYSBydWxlcyBvbiBwYWdlIHJlbG9hZFwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo5MS45OSxcInVzYWdlX3BlcmNfYVwiOjAuMDEsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJAbWVkaWFcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwibXVsdGljb2x1bW5cIjp7XCJ0aXRsZVwiOlwiQ1NTMyBNdWx0aXBsZSBjb2x1bW4gbGF5b3V0XCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGZsb3dpbmcgaW5mb3JtYXRpb24gaW4gbXVsdGlwbGUgY29sdW1uc1wiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1tdWx0aWNvbC9cIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXYub3BlcmEuY29tL2FydGljbGVzL3ZpZXcvY3NzMy1tdWx0aS1jb2x1bW4tbGF5b3V0L1wiLFwidGl0bGVcIjpcIkRldi5PcGVyYSBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL3dlYmRlc2lnbi50dXRzcGx1cy5jb20vdHV0b3JpYWxzL2h0bWxjc3MtdHV0b3JpYWxzL2FuLWludHJvZHVjdGlvbi10by10aGUtY3NzMy1tdWx0aXBsZS1jb2x1bW4tbGF5b3V0LW1vZHVsZS9cIixcInRpdGxlXCI6XCJJbnRyb2R1Y3Rpb24gcGFnZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9wcm9wZXJ0aWVzL2NvbHVtbi13aWR0aFwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn0se1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vQmV0bGV5V2hpdGVob3JuZS9DU1MzTXVsdGlDb2x1bW5cIixcInRpdGxlXCI6XCJQb2x5ZmlsbFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTM1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJhIHhcIixcIjNcIjpcImEgeFwiLFwiMy41XCI6XCJhIHhcIixcIjMuNlwiOlwiYSB4XCIsXCI0XCI6XCJhIHhcIixcIjVcIjpcImEgeFwiLFwiNlwiOlwiYSB4XCIsXCI3XCI6XCJhIHhcIixcIjhcIjpcImEgeFwiLFwiOVwiOlwiYSB4XCIsXCIxMFwiOlwiYSB4XCIsXCIxMVwiOlwiYSB4XCIsXCIxMlwiOlwiYSB4XCIsXCIxM1wiOlwiYSB4XCIsXCIxNFwiOlwiYSB4XCIsXCIxNVwiOlwiYSB4XCIsXCIxNlwiOlwiYSB4XCIsXCIxN1wiOlwiYSB4XCIsXCIxOFwiOlwiYSB4XCIsXCIxOVwiOlwiYSB4XCIsXCIyMFwiOlwiYSB4XCIsXCIyMVwiOlwiYSB4XCIsXCIyMlwiOlwiYSB4XCIsXCIyM1wiOlwiYSB4XCIsXCIyNFwiOlwiYSB4XCIsXCIyNVwiOlwiYSB4XCIsXCIyNlwiOlwiYSB4XCIsXCIyN1wiOlwiYSB4XCIsXCIyOFwiOlwiYSB4XCIsXCIyOVwiOlwiYSB4XCIsXCIzMFwiOlwiYSB4XCIsXCIzMVwiOlwiYSB4XCIsXCIzMlwiOlwiYSB4XCIsXCIzM1wiOlwiYSB4XCIsXCIzNFwiOlwiYSB4XCIsXCIzNVwiOlwiYSB4XCIsXCIzNlwiOlwiYSB4XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiYSB4XCIsXCI1XCI6XCJhIHhcIixcIjZcIjpcImEgeFwiLFwiN1wiOlwiYSB4XCIsXCI4XCI6XCJhIHhcIixcIjlcIjpcImEgeFwiLFwiMTBcIjpcImEgeFwiLFwiMTFcIjpcImEgeFwiLFwiMTJcIjpcImEgeFwiLFwiMTNcIjpcImEgeFwiLFwiMTRcIjpcImEgeFwiLFwiMTVcIjpcImEgeFwiLFwiMTZcIjpcImEgeFwiLFwiMTdcIjpcImEgeFwiLFwiMThcIjpcImEgeFwiLFwiMTlcIjpcImEgeFwiLFwiMjBcIjpcImEgeFwiLFwiMjFcIjpcImEgeFwiLFwiMjJcIjpcImEgeFwiLFwiMjNcIjpcImEgeFwiLFwiMjRcIjpcImEgeFwiLFwiMjVcIjpcImEgeFwiLFwiMjZcIjpcImEgeFwiLFwiMjdcIjpcImEgeFwiLFwiMjhcIjpcImEgeFwiLFwiMjlcIjpcImEgeFwiLFwiMzBcIjpcImEgeFwiLFwiMzFcIjpcImEgeFwiLFwiMzJcIjpcImEgeFwiLFwiMzNcIjpcImEgeFwiLFwiMzRcIjpcImEgeFwiLFwiMzVcIjpcImEgeFwiLFwiMzZcIjpcImEgeFwiLFwiMzdcIjpcImEgeFwiLFwiMzhcIjpcImEgeFwiLFwiMzlcIjpcImEgeFwiLFwiNDBcIjpcImEgeFwiLFwiNDFcIjpcImEgeFwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiYSB4XCIsXCIzLjJcIjpcImEgeFwiLFwiNFwiOlwiYSB4XCIsXCI1XCI6XCJhIHhcIixcIjUuMVwiOlwiYSB4XCIsXCI2XCI6XCJhIHhcIixcIjYuMVwiOlwiYSB4XCIsXCI3XCI6XCJhIHhcIixcIjcuMVwiOlwiYSB4XCIsXCI4XCI6XCJhIHhcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwiYSB4XCIsXCIxNlwiOlwiYSB4XCIsXCIxN1wiOlwiYSB4XCIsXCIxOFwiOlwiYSB4XCIsXCIxOVwiOlwiYSB4XCIsXCIyMFwiOlwiYSB4XCIsXCIyMVwiOlwiYSB4XCIsXCIyMlwiOlwiYSB4XCIsXCIyM1wiOlwiYSB4XCIsXCIyNFwiOlwiYSB4XCIsXCIyNVwiOlwiYSB4XCIsXCIyNlwiOlwiYSB4XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiYSB4XCIsXCI0LjAtNC4xXCI6XCJhIHhcIixcIjQuMi00LjNcIjpcImEgeFwiLFwiNS4wLTUuMVwiOlwiYSB4XCIsXCI2LjAtNi4xXCI6XCJhIHhcIixcIjcuMC03LjFcIjpcImEgeFwiLFwiOFwiOlwiYSB4XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcInlcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJhIHhcIixcIjIuMlwiOlwiYSB4XCIsXCIyLjNcIjpcImEgeFwiLFwiM1wiOlwiYSB4XCIsXCI0XCI6XCJhIHhcIixcIjQuMVwiOlwiYSB4XCIsXCI0LjItNC4zXCI6XCJhIHhcIixcIjQuNFwiOlwiYSB4XCIsXCI0LjQuM1wiOlwiYSB4XCJ9LFwiYmJcIjp7XCI3XCI6XCJhIHhcIixcIjEwXCI6XCJhIHhcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwiYSB4XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJhIHhcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiYSB4XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcImEgeFwifX0sXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IHJlZmVycyB0byBub3Qgc3VwcG9ydGluZyB0aGUgYGJyZWFrLWJlZm9yZWAsIGBicmVhay1hZnRlcmAsIGBicmVhay1pbnNpZGVgIHByb3BlcnRpZXMuIFdlYmtpdCBicm93c2VycyBkbyBoYXZlIGVxdWl2YWxlbnQgc3VwcG9ydCBmb3IgdGhlIG5vbi1zdGFuZGFyZCBgLXdlYmtpdC1jb2x1bW4tYnJlYWstKmAgcHJvcGVydGllcyB3aGlsZSBGaXJlZm94IHN1cHBvcnRzIGBwYWdlLWJyZWFrLSpgIHRvIGFjY29tcGxpc2ggdGhlIHNhbWUgcmVzdWx0LlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjoxMy41NixcInVzYWdlX3BlcmNfYVwiOjc2LjA2LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiY29sdW1uLWNvdW50XCIsXCJpZV9pZFwiOlwibXVsdGljb2x1bW5mdWxsc3VwcG9ydFwiLFwiY2hyb21lX2lkXCI6XCI2NTI2MTUxMjY2NjY0NDQ4XCJ9LFwiYm9yZGVyLXJhZGl1c1wiOntcInRpdGxlXCI6XCJDU1MzIEJvcmRlci1yYWRpdXMgKHJvdW5kZWQgY29ybmVycylcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgbWFraW5nIHRoZSBib3JkZXIgY29ybmVycyByb3VuZFwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1iYWNrZ3JvdW5kLyN0aGUtYm9yZGVyLXJhZGl1c1wiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vYm9yZGVyLXJhZGl1cy5jb21cIixcInRpdGxlXCI6XCJCb3JkZXItcmFkaXVzIENTUyBHZW5lcmF0b3JcIn0se1widXJsXCI6XCJodHRwOi8vbXVkZGxlZHJhbWJsaW5ncy5jb20vdGFibGUtb2YtY3NzMy1ib3JkZXItcmFkaXVzLWNvbXBsaWFuY2VcIixcInRpdGxlXCI6XCJEZXRhaWxlZCBjb21wbGlhbmNlIHRhYmxlXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy5jc3MzZmlsZXMuY29tL2JvcmRlci8jYm9yZGVycmFkaXVzXCIsXCJ0aXRsZVwiOlwiSW5mb3JtYXRpb24gcGFnZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9jc3MzcGllLmNvbS9cIixcInRpdGxlXCI6XCJQb2x5ZmlsbCB3aGljaCBpbmNsdWRlcyBib3JkZXItcmFkaXVzXCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvY3NzL3Byb3BlcnRpZXMvYm9yZGVyLXJhZGl1c1wiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiYSB4XCIsXCIzXCI6XCJ5IHhcIixcIjMuNVwiOlwieSB4XCIsXCIzLjZcIjpcInkgeFwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInkgeFwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJ5IHhcIixcIjMuMlwiOlwieSB4XCIsXCI0XCI6XCJ5IHhcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieSB4XCIsXCI0LjAtNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ5IHhcIixcIjIuMlwiOlwieVwiLFwiMi4zXCI6XCJ5XCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6ODguOTEsXCJ1c2FnZV9wZXJjX2FcIjowLjAxLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwicm91bmRlZGNvcm5lcnMsIGJvcmRlciByYWRpdXMsLW1vei1ib3JkZXItcmFkaXVzXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcInRyYW5zZm9ybXMyZFwiOntcInRpdGxlXCI6XCJDU1MzIFRyYW5zZm9ybXNcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgdHJhbnNmb3JtaW5nIGFuIGVsZW1lbnQgaW5jbHVkaW5nIHJvdGF0aW5nLCBzY2FsaW5nLCBldGMuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLTJkLXRyYW5zZm9ybXMvXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly93d3cud2VzdGNpdi5jb20vdG9vbHMvdHJhbnNmb3Jtcy9cIixcInRpdGxlXCI6XCJMaXZlIGVkaXRvclwifSx7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0NTUy8tbW96LXRyYW5zZm9ybVwiLFwidGl0bGVcIjpcIk1ETiBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy53ZWJyZXNvdXJjZXNkZXBvdC5jb20vY3Jvc3MtYnJvd3Nlci1jc3MtdHJhbnNmb3Jtcy1jc3NzYW5kcGFwZXIvXCIsXCJ0aXRsZVwiOlwiV29ya2Fyb3VuZCBzY3JpcHQgZm9yIElFXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy5jc3MzZmlsZXMuY29tL3RyYW5zZm9ybS9cIixcInRpdGxlXCI6XCJJbmZvcm1hdGlvbiBwYWdlXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy51c2VyYWdlbnRtYW4uY29tL0lFVHJhbnNmb3Jtc1RyYW5zbGF0b3IvXCIsXCJ0aXRsZVwiOlwiQ29udmVydGVyIGZvciBJRVwifSx7XCJ1cmxcIjpcImh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vcGhpZ2dpbnM0Mi9oYXMuanMvbWFzdGVyL2RldGVjdC9jc3MuanMjY3NzLXRyYW5zZm9ybVwiLFwidGl0bGVcIjpcImhhcy5qcyB0ZXN0XCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvY3NzL3RyYW5zZm9ybXMvdHJhbnNmb3JtXCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTM1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcInBcIixcIjdcIjpcInBcIixcIjhcIjpcInBcIixcIjlcIjpcInkgeFwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwieSB4XCIsXCIzLjZcIjpcInkgeFwiLFwiNFwiOlwieSB4XCIsXCI1XCI6XCJ5IHhcIixcIjZcIjpcInkgeFwiLFwiN1wiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIixcIjlcIjpcInkgeFwiLFwiMTBcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTNcIjpcInkgeFwiLFwiMTRcIjpcInkgeFwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInkgeFwiLFwiNVwiOlwieSB4XCIsXCI2XCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiOFwiOlwieSB4XCIsXCI5XCI6XCJ5IHhcIixcIjEwXCI6XCJ5IHhcIixcIjExXCI6XCJ5IHhcIixcIjEyXCI6XCJ5IHhcIixcIjEzXCI6XCJ5IHhcIixcIjE0XCI6XCJ5IHhcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIixcIjI3XCI6XCJ5IHhcIixcIjI4XCI6XCJ5IHhcIixcIjI5XCI6XCJ5IHhcIixcIjMwXCI6XCJ5IHhcIixcIjMxXCI6XCJ5IHhcIixcIjMyXCI6XCJ5IHhcIixcIjMzXCI6XCJ5IHhcIixcIjM0XCI6XCJ5IHhcIixcIjM1XCI6XCJ5IHhcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInkgeFwiLFwiMy4yXCI6XCJ5IHhcIixcIjRcIjpcInkgeFwiLFwiNVwiOlwieSB4XCIsXCI1LjFcIjpcInkgeFwiLFwiNlwiOlwieSB4XCIsXCI2LjFcIjpcInkgeFwiLFwiN1wiOlwieSB4XCIsXCI3LjFcIjpcInkgeFwiLFwiOFwiOlwieSB4XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcInkgeFwiLFwiMTAuNlwiOlwieSB4XCIsXCIxMVwiOlwieSB4XCIsXCIxMS4xXCI6XCJ5IHhcIixcIjExLjVcIjpcInkgeFwiLFwiMTEuNlwiOlwieSB4XCIsXCIxMlwiOlwieSB4XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieSB4XCIsXCIxNlwiOlwieSB4XCIsXCIxN1wiOlwieSB4XCIsXCIxOFwiOlwieSB4XCIsXCIxOVwiOlwieSB4XCIsXCIyMFwiOlwieSB4XCIsXCIyMVwiOlwieSB4XCIsXCIyMlwiOlwieSB4XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInkgeFwiLFwiNC4wLTQuMVwiOlwieSB4XCIsXCI0LjItNC4zXCI6XCJ5IHhcIixcIjUuMC01LjFcIjpcInkgeFwiLFwiNi4wLTYuMVwiOlwieSB4XCIsXCI3LjAtNy4xXCI6XCJ5IHhcIixcIjhcIjpcInkgeFwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieSB4XCIsXCIyLjJcIjpcInkgeFwiLFwiMi4zXCI6XCJ5IHhcIixcIjNcIjpcInkgeFwiLFwiNFwiOlwieSB4XCIsXCI0LjFcIjpcInkgeFwiLFwiNC4yLTQuM1wiOlwieSB4XCIsXCI0LjRcIjpcInkgeFwiLFwiNC40LjNcIjpcInkgeFwifSxcImJiXCI6e1wiN1wiOlwieSB4XCIsXCIxMFwiOlwieSB4XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5IHhcIn19LFwibm90ZXNcIjpcIlRoZSBzY2FsZSB0cmFuc2Zvcm0gY2FuIGJlIGVtdWxhdGVkIGluIElFIDwgOSB1c2luZyBNaWNyb3NvZnQncyBcXFwiem9vbVxcXCIgZXh0ZW5zaW9uLCBvdGhlcnMgYXJlIChub3QgZWFzaWx5KSBwb3NzaWJsZSB1c2luZyB0aGUgTVMgTWF0cml4IGZpbHRlclwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo4OC44NSxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJ0cmFuc2Zvcm1hdGlvbix0cmFuc2xhdGUscm90YXRpb24scm90YXRlLHNjYWxlLGNzcy10cmFuc2Zvcm1zXCIsXCJpZV9pZFwiOlwidHJhbnNmb3Jtc1wiLFwiY2hyb21lX2lkXCI6XCI2NDM3NjQwNTgwNjI4NDgwXCJ9LFwidXNlLXN0cmljdFwiOntcInRpdGxlXCI6XCJFQ01BU2NyaXB0IDUgU3RyaWN0IE1vZGVcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgcGxhY2luZyBjb2RlIGluIGEgXFxcInN0cmljdFxcXCIgb3BlcmF0aW5nIGNvbnRleHQuXCIsXCJzcGVjXCI6XCJodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy0xNC4xXCIsXCJzdGF0dXNcIjpcIm90aGVyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9lam9obi5vcmcvYmxvZy9lY21hc2NyaXB0LTUtc3RyaWN0LW1vZGUtanNvbi1hbmQtbW9yZS9cIixcInRpdGxlXCI6XCJJbmZvcm1hdGlvbiBwYWdlXCJ9LHtcInVybFwiOlwiaHR0cDovL2phdmFzY3JpcHR3ZWJsb2cud29yZHByZXNzLmNvbS8yMDExLzA1LzAzL2phdmFzY3JpcHQtc3RyaWN0LW1vZGUvXCIsXCJ0aXRsZVwiOlwiQXJ0aWNsZSB3aXRoIHRlc3Qgc3VpdGVcIn1dLFwiY2F0ZWdvcmllc1wiOltcIk90aGVyXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcImFcIixcIjUuMVwiOlwiYVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlBhcnRpYWwgc3VwcG9ydCBpbiBvbGRlciBTYWZhcmkgcmVmZXJzIHRvIHN0cmljdCBtb2RlIHN0aWxsIGFjY2VwdGluZyBhIGxvdCBvZiBKUyB0aGF0IHNob3VsZCBiZSBjb25zaWRlcmVkIGludmFsaWQuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjg0LjM2LFwidXNhZ2VfcGVyY19hXCI6MC43NCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJ0cmFuc2Zvcm1zM2RcIjp7XCJ0aXRsZVwiOlwiQ1NTMyAzRCBUcmFuc2Zvcm1zXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHRyYW5zZm9ybWluZyBhbiBlbGVtZW50IGluIHRoZSB0aGlyZCBkaW1lbnNpb24gdXNpbmcgdGhlIGB0cmFuc2Zvcm1gIHByb3BlcnR5LiBJbmNsdWRlcyBzdXBwb3J0IGZvciB0aGUgYHBlcnNwZWN0aXZlYCBwcm9wZXJ0eSB0byBzZXQgdGhlIHBlcnNwZWN0aXZlIGluIHotc3BhY2UgYW5kIHRoZSBgYmFja2ZhY2UtdmlzaWJpbGl0eWAgcHJvcGVydHkgdG8gdG9nZ2xlIGRpc3BsYXkgb2YgdGhlIHJldmVyc2Ugc2lkZSBvZiBhIDNELXRyYW5zZm9ybWVkIGVsZW1lbnQuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLTNkLXRyYW5zZm9ybXMvXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9jc3MzLmJyYWRzaGF3ZW50ZXJwcmlzZXMuY29tL2ZsaXAvXCIsXCJ0aXRsZVwiOlwiTXVsdGktYnJvd3NlciBkZW1vXCJ9LHtcInVybFwiOlwiaHR0cDovL2hhY2tzLm1vemlsbGEub3JnLzIwMTEvMTAvY3NzLTNkLXRyYW5zZm9ybWF0aW9ucy1pbi1maXJlZm94LW5pZ2h0bHkvXCIsXCJ0aXRsZVwiOlwiTW96aWxsYSBoYWNrcyBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL3RoZXdlYnJvY2tzLmNvbS9kZW1vcy8zRC1jc3MtdGVzdGVyL1wiLFwidGl0bGVcIjpcIjNEIENTUyBUZXN0ZXJcIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3QvY3NzLmpzI2Nzcy10cmFuc2Zvcm1cIixcInRpdGxlXCI6XCJoYXMuanMgdGVzdFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy90cmFuc2Zvcm1zL3RyYW5zZm9ybVwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn0se1widXJsXCI6XCJodHRwOi8vZGVzYW5kcm8uZ2l0aHViLmlvLzNkdHJhbnNmb3Jtcy9cIixcInRpdGxlXCI6XCJJbnRybyB0byBDU1MgM0QgdHJhbnNmb3Jtc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTM1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTNcIjpcInkgeFwiLFwiMTRcIjpcInkgeFwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcInkgeFwiLFwiMTNcIjpcInkgeFwiLFwiMTRcIjpcInkgeFwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInkgeFwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInkgeFwiLFwiMjdcIjpcInkgeFwiLFwiMjhcIjpcInkgeFwiLFwiMjlcIjpcInkgeFwiLFwiMzBcIjpcInkgeFwiLFwiMzFcIjpcInkgeFwiLFwiMzJcIjpcInkgeFwiLFwiMzNcIjpcInkgeFwiLFwiMzRcIjpcInkgeFwiLFwiMzVcIjpcInkgeFwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJ5IHhcIixcIjVcIjpcInkgeFwiLFwiNS4xXCI6XCJ5IHhcIixcIjZcIjpcInkgeFwiLFwiNi4xXCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiNy4xXCI6XCJ5IHhcIixcIjhcIjpcInkgeFwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieSB4XCIsXCI0LjAtNC4xXCI6XCJ5IHhcIixcIjQuMi00LjNcIjpcInkgeFwiLFwiNS4wLTUuMVwiOlwieSB4XCIsXCI2LjAtNi4xXCI6XCJ5IHhcIixcIjcuMC03LjFcIjpcInkgeFwiLFwiOFwiOlwieSB4XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwieSB4XCIsXCI0XCI6XCJ5IHhcIixcIjQuMVwiOlwieSB4XCIsXCI0LjItNC4zXCI6XCJ5IHhcIixcIjQuNFwiOlwieSB4XCIsXCI0LjQuM1wiOlwieSB4XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5IHhcIixcIjEwXCI6XCJ5IHhcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcImFcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInkgeFwifX0sXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IGluIElFIHJlZmVycyB0byBub3Qgc3VwcG9ydGluZyBbdGhlIHRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2QgcHJvcGVydHldKGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDY3MzUyOSUyOHY9dnMuODUlMjkuYXNweCN0aGVfbXNfdHJhbnNmb3JtX3N0eWxlX3Byb3BlcnR5KS4gVGhpcyBwcmV2ZW50cyBuZXN0aW5nIDNEIHRyYW5zZm9ybWVkIGVsZW1lbnRzLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo3NC42NyxcInVzYWdlX3BlcmNfYVwiOjEwLjEsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJjc3MgM2QsM2R0cmFuc2Zvcm1zLHRyYW5zbGF0ZTNkLGJhY2tmYWNlIHZpc2liaWxpdHkscGVyc3BlY3RpdmVcIixcImllX2lkXCI6XCJ0cmFuc2Zvcm1zLGNzc3RyYW5zZm9ybXNwcmVzZXJ2ZTNkXCIsXCJjaHJvbWVfaWRcIjpcIjY0Mzc2NDA1ODA2Mjg0ODBcIn0sXCJzaGFyZWR3b3JrZXJzXCI6e1widGl0bGVcIjpcIlNoYXJlZCBXZWIgV29ya2Vyc1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBhbGxvd2luZyBtdWx0aXBsZSBzY3JpcHRzIHRvIGNvbW11bmljYXRlIHdpdGggYSBzaW5nbGUgd2ViIHdvcmtlci5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL3dvcmtlcnMvI3NoYXJlZC13b3JrZXJzLWludHJvZHVjdGlvblwiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vd3d3LnNpdGVwb2ludC5jb20vamF2YXNjcmlwdC1zaGFyZWQtd2ViLXdvcmtlcnMtaHRtbDUvXCIsXCJ0aXRsZVwiOlwiU2l0ZXBvaW50IGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vZ3JlZW5pZG8ud29yZHByZXNzLmNvbS8yMDExLzExLzAzL3dlYi13b3JrZXJzLXBhcnQtMy1vdXQtb2YtMy1zaGFyZWQtd3Jva2Vycy9cIixcInRpdGxlXCI6XCJCbG9nIHBvc3RcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcIm5cIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInVcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcIm5cIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcIm5cIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NTAuMzcsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwid2Vid29ya2Vyc1wiLFwia2V5d29yZHNcIjpcInNoYXJlZCB3b3JrZXJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiY3NzLWh5cGhlbnNcIjp7XCJ0aXRsZVwiOlwiQ1NTIEh5cGhlbmF0aW9uXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGNvbnRyb2xsaW5nIHdoZW4gd29yZHMgYXQgdGhlIGVuZCBvZiBsaW5lcyBzaG91bGQgYmUgaHlwaGVuYXRlZCB1c2luZyB0aGUgXFxcImh5cGhlbnNcXFwiIHByb3BlcnR5LlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy10ZXh0LyNoeXBoZW5hdGlvblwiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9DU1MvaHlwaGVuc1wiLFwidGl0bGVcIjpcIk1ETiBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL2Jsb2cuZm9udGRlY2suY29tL3Bvc3QvOTAzNzAyODQ5Ny9oeXBoZW5zXCIsXCJ0aXRsZVwiOlwiQmxvZyBwb3N0XCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvY3NzL3Byb3BlcnRpZXMvaHlwaGVuc1wiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwieSB4XCIsXCIxMVwiOlwieSB4XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiOFwiOlwieSB4XCIsXCI5XCI6XCJ5IHhcIixcIjEwXCI6XCJ5IHhcIixcIjExXCI6XCJ5IHhcIixcIjEyXCI6XCJ5IHhcIixcIjEzXCI6XCJ5IHhcIixcIjE0XCI6XCJ5IHhcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIixcIjI3XCI6XCJ5IHhcIixcIjI4XCI6XCJ5IHhcIixcIjI5XCI6XCJ5IHhcIixcIjMwXCI6XCJ5IHhcIixcIjMxXCI6XCJ5IHhcIixcIjMyXCI6XCJ5IHhcIixcIjMzXCI6XCJ5IHhcIixcIjM0XCI6XCJ5IHhcIixcIjM1XCI6XCJ5IHhcIixcIjM2XCI6XCJ5IHhcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuXCIsXCIzMVwiOlwiblwiLFwiMzJcIjpcIm5cIixcIjMzXCI6XCJuXCIsXCIzNFwiOlwiblwiLFwiMzVcIjpcIm5cIixcIjM2XCI6XCJuXCIsXCIzN1wiOlwiblwiLFwiMzhcIjpcIm5cIixcIjM5XCI6XCJuXCIsXCI0MFwiOlwiblwiLFwiNDFcIjpcIm5cIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJ5IHhcIixcIjZcIjpcInkgeFwiLFwiNi4xXCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiNy4xXCI6XCJ5IHhcIixcIjhcIjpcInkgeFwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJ5IHhcIixcIjUuMC01LjFcIjpcInkgeFwiLFwiNi4wLTYuMVwiOlwieSB4XCIsXCI3LjAtNy4xXCI6XCJ5IHhcIixcIjhcIjpcInkgeFwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwiblwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwiblwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwiblwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5IHhcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiYSB4XCJ9fSxcIm5vdGVzXCI6XCJDaHJvbWUgMjktIGFuZCBBbmRyb2lkIDQuMCBCcm93c2VyIHN1cHBvcnQgXFxcIi13ZWJraXQtaHlwaGVuczogbm9uZVxcXCIsIGJ1dCBub3QgdGhlIFxcXCJhdXRvXFxcIiBwcm9wZXJ0eS4gQ2hyb21lIDMwKyBkb2Vzbid0IHN1cHBvcnQgaXQgZWl0aGVyLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjozMy40NyxcInVzYWdlX3BlcmNfYVwiOjMuMTEsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJoeXBoZW4sc2h5XCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImNzcy10cmFuc2l0aW9uc1wiOntcInRpdGxlXCI6XCJDU1MzIFRyYW5zaXRpb25zXCIsXCJkZXNjcmlwdGlvblwiOlwiU2ltcGxlIG1ldGhvZCBvZiBhbmltYXRpbmcgY2VydGFpbiBwcm9wZXJ0aWVzIG9mIGFuIGVsZW1lbnRcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdHJhbnNpdGlvbnMvXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly93d3cud2ViZGVzaWduZXJkZXBvdC5jb20vMjAxMC8wMS9jc3MtdHJhbnNpdGlvbnMtMTAxL1wiLFwidGl0bGVcIjpcIkFydGljbGUgb24gdXNhZ2VcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LmNzczNmaWxlcy5jb20vdHJhbnNpdGlvbi9cIixcInRpdGxlXCI6XCJJbmZvcm1hdGlvbiBwYWdlXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy50aGUtYXJ0LW9mLXdlYi5jb20vY3NzL3RpbWluZy1mdW5jdGlvbi9cIixcInRpdGxlXCI6XCJFeGFtcGxlcyBvbiB0aW1pbmcgZnVuY3Rpb25zXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy5vcGVyYS5jb20vZG9jcy9zcGVjcy9wcmVzdG8yLjEyL2Nzcy90cmFuc2l0aW9ucy9cIixcInRpdGxlXCI6XCJBbmltYXRpb24gb2YgcHJvcGVydHkgdHlwZXMgc3VwcG9ydCBpbiBPcGVyYVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9wcm9wZXJ0aWVzL3RyYW5zaXRpb25cIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1MzXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJ5IHhcIixcIjVcIjpcInkgeFwiLFwiNlwiOlwieSB4XCIsXCI3XCI6XCJ5IHhcIixcIjhcIjpcInkgeFwiLFwiOVwiOlwieSB4XCIsXCIxMFwiOlwieSB4XCIsXCIxMVwiOlwieSB4XCIsXCIxMlwiOlwieSB4XCIsXCIxM1wiOlwieSB4XCIsXCIxNFwiOlwieSB4XCIsXCIxNVwiOlwieSB4XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieSB4XCIsXCI1XCI6XCJ5IHhcIixcIjZcIjpcInkgeFwiLFwiN1wiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIixcIjlcIjpcInkgeFwiLFwiMTBcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTNcIjpcInkgeFwiLFwiMTRcIjpcInkgeFwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInkgeFwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInkgeFwiLFwiMy4yXCI6XCJ5IHhcIixcIjRcIjpcInkgeFwiLFwiNVwiOlwieSB4XCIsXCI1LjFcIjpcInkgeFwiLFwiNlwiOlwieSB4XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJ5IHhcIixcIjEwLjZcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTEuMVwiOlwieSB4XCIsXCIxMS41XCI6XCJ5IHhcIixcIjExLjZcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInkgeFwiLFwiNC4wLTQuMVwiOlwieSB4XCIsXCI0LjItNC4zXCI6XCJ5IHhcIixcIjUuMC01LjFcIjpcInkgeFwiLFwiNi4wLTYuMVwiOlwieSB4XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ5IHhcIixcIjIuMlwiOlwieSB4XCIsXCIyLjNcIjpcInkgeFwiLFwiM1wiOlwieSB4XCIsXCI0XCI6XCJ5IHhcIixcIjQuMVwiOlwieSB4XCIsXCI0LjItNC4zXCI6XCJ5IHhcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInkgeFwiLFwiMTBcIjpcInkgeFwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJ5IHhcIixcIjExXCI6XCJ5IHhcIixcIjExLjFcIjpcInkgeFwiLFwiMTEuNVwiOlwieSB4XCIsXCIxMlwiOlwieSB4XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInkgeFwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjg2LjMyLFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImNzcyB0cmFuc2l0aW9uXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImZvbnQtZmVhdHVyZVwiOntcInRpdGxlXCI6XCJGb250IGZlYXR1cmUgc2V0dGluZ3NcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgYXBwbHlpbmcgYWR2YW5jZWQgdHlwb2dyYXBoaWMgYW5kIGxhbmd1YWdlLXNwZWNpZmljIGZvbnQgZmVhdHVyZXMgdG8gc3VwcG9ydGVkIE9wZW5UeXBlIGZvbnRzLlwiLFwic3BlY1wiOlwiaHR0cDovL3czLm9yZy9UUi9jc3MzLWZvbnRzLyNmb250LXJlbmQtcHJvcHNcIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2llLm1pY3Jvc29mdC5jb20vdGVzdGRyaXZlL0dyYXBoaWNzL29wZW50eXBlL1wiLFwidGl0bGVcIjpcIkRlbW8gcGFnZXMgKElFL0ZpcmVmb3ggb25seSlcIn0se1widXJsXCI6XCJodHRwOi8vaGFja3MubW96aWxsYS5vcmcvMjAxMC8xMS9maXJlZm94LTQtZm9udC1mZWF0dXJlLXN1cHBvcnQvXCIsXCJ0aXRsZVwiOlwiTW96aWxsYSBoYWNrcyBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL2h0bWw1YWNjZXNzaWJpbGl0eS5jb20vXCIsXCJ0aXRsZVwiOlwiRGV0YWlsZWQgdGFibGVzIG9uIGFjY2Vzc2FiaWxpdHkgc3VwcG9ydFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9wcm9wZXJ0aWVzL2ZvbnQtZmVhdHVyZS1zZXR0aW5nc1wiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcImEgeFwiLFwiNVwiOlwiYSB4XCIsXCI2XCI6XCJhIHhcIixcIjdcIjpcImEgeFwiLFwiOFwiOlwiYSB4XCIsXCI5XCI6XCJhIHhcIixcIjEwXCI6XCJhIHhcIixcIjExXCI6XCJhIHhcIixcIjEyXCI6XCJhIHhcIixcIjEzXCI6XCJhIHhcIixcIjE0XCI6XCJhIHhcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIixcIjI3XCI6XCJ5IHhcIixcIjI4XCI6XCJ5IHhcIixcIjI5XCI6XCJ5IHhcIixcIjMwXCI6XCJ5IHhcIixcIjMxXCI6XCJ5IHhcIixcIjMyXCI6XCJ5IHhcIixcIjMzXCI6XCJ5IHhcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiYSB4XCIsXCIxN1wiOlwiYSB4XCIsXCIxOFwiOlwiYSB4XCIsXCIxOVwiOlwiYSB4XCIsXCIyMFwiOlwiYSB4XCIsXCIyMVwiOlwieSB4XCIsXCIyMlwiOlwieSB4XCIsXCIyM1wiOlwieSB4XCIsXCIyNFwiOlwieSB4XCIsXCIyNVwiOlwieSB4XCIsXCIyNlwiOlwieSB4XCIsXCIyN1wiOlwieSB4XCIsXCIyOFwiOlwieSB4XCIsXCIyOVwiOlwieSB4XCIsXCIzMFwiOlwieSB4XCIsXCIzMVwiOlwieSB4XCIsXCIzMlwiOlwieSB4XCIsXCIzM1wiOlwieSB4XCIsXCIzNFwiOlwieSB4XCIsXCIzNVwiOlwieSB4XCIsXCIzNlwiOlwieSB4XCIsXCIzN1wiOlwieSB4XCIsXCIzOFwiOlwieSB4XCIsXCIzOVwiOlwieSB4XCIsXCI0MFwiOlwieSB4XCIsXCI0MVwiOlwieSB4XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcImFcIixcIjVcIjpcImFcIixcIjUuMVwiOlwiYVwiLFwiNlwiOlwiYVwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI3LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwieSB4XCIsXCIxNlwiOlwieSB4XCIsXCIxN1wiOlwieSB4XCIsXCIxOFwiOlwieSB4XCIsXCIxOVwiOlwieSB4XCIsXCIyMFwiOlwieSB4XCIsXCIyMVwiOlwieSB4XCIsXCIyMlwiOlwieSB4XCIsXCIyM1wiOlwieSB4XCIsXCIyNFwiOlwieSB4XCIsXCIyNVwiOlwieSB4XCIsXCIyNlwiOlwieSB4XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiYVwiLFwiNC4wLTQuMVwiOlwiYVwiLFwiNC4yLTQuM1wiOlwiYVwiLFwiNS4wLTUuMVwiOlwiYVwiLFwiNi4wLTYuMVwiOlwiYVwiLFwiNy4wLTcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJ5IHhcIixcIjQuNC4zXCI6XCJ5IHhcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJ5IHhcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwieSB4XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5IHhcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieSB4XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInkgeFwifX0sXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IGluIG9sZGVyIEZpcmVmb3ggdmVyc2lvbnMgcmVmZXJzIHRvIHVzaW5nIGFuIG9sZGVyIHN5bnRheC4gUGFydGlhbCBzdXBwb3J0IGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyByZWZlcnMgdG8gbGFja2luZyBzdXBwb3J0IGluIE1hYyBPUyBYLiBcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NjguNDYsXCJ1c2FnZV9wZXJjX2FcIjoxLjg0LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiZm9udC1mZWF0dXJlLGZvbnQtZmVhdHVyZS1zZXR0aW5ncyxrZXJuLGtlcm5pbmcsZm9udC12YXJpYW50LWFsdGVybmF0ZXMsbGlnYXR1cmVzLGZvbnQtdmFyaWFudC1saWdhdHVyZXNcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiY3NzLWFuaW1hdGlvblwiOntcInRpdGxlXCI6XCJDU1MzIEFuaW1hdGlvblwiLFwiZGVzY3JpcHRpb25cIjpcIkNvbXBsZXggbWV0aG9kIG9mIGFuaW1hdGluZyBjZXJ0YWluIHByb3BlcnRpZXMgb2YgYW4gZWxlbWVudFwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1hbmltYXRpb25zL1wiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vcm9iZXJ0bnltYW4uY29tLzIwMTAvMDUvMDYvY3NzMy1hbmltYXRpb25zL1wiLFwidGl0bGVcIjpcIkJsb2cgcG9zdCBvbiB1c2FnZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuY3NzM2ZpbGVzLmNvbS9hbmltYXRpb24vXCIsXCJ0aXRsZVwiOlwiSW5mb3JtYXRpb24gcGFnZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9wcm9wZXJ0aWVzL2FuaW1hdGlvbnNcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1MzXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJ5IHhcIixcIjZcIjpcInkgeFwiLFwiN1wiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIixcIjlcIjpcInkgeFwiLFwiMTBcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTNcIjpcInkgeFwiLFwiMTRcIjpcInkgeFwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInkgeFwiLFwiNVwiOlwieSB4XCIsXCI2XCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiOFwiOlwieSB4XCIsXCI5XCI6XCJ5IHhcIixcIjEwXCI6XCJ5IHhcIixcIjExXCI6XCJ5IHhcIixcIjEyXCI6XCJ5IHhcIixcIjEzXCI6XCJ5IHhcIixcIjE0XCI6XCJ5IHhcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIixcIjI3XCI6XCJ5IHhcIixcIjI4XCI6XCJ5IHhcIixcIjI5XCI6XCJ5IHhcIixcIjMwXCI6XCJ5IHhcIixcIjMxXCI6XCJ5IHhcIixcIjMyXCI6XCJ5IHhcIixcIjMzXCI6XCJ5IHhcIixcIjM0XCI6XCJ5IHhcIixcIjM1XCI6XCJ5IHhcIixcIjM2XCI6XCJ5IHhcIixcIjM3XCI6XCJ5IHhcIixcIjM4XCI6XCJ5IHhcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwieSB4XCIsXCI1XCI6XCJ5IHhcIixcIjUuMVwiOlwieSB4XCIsXCI2XCI6XCJ5IHhcIixcIjYuMVwiOlwieSB4XCIsXCI3XCI6XCJ5IHhcIixcIjcuMVwiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJ5IHhcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieSB4XCIsXCI0LjAtNC4xXCI6XCJ5IHhcIixcIjQuMi00LjNcIjpcInkgeFwiLFwiNS4wLTUuMVwiOlwieSB4XCIsXCI2LjAtNi4xXCI6XCJ5IHhcIixcIjcuMC03LjFcIjpcInkgeFwiLFwiOFwiOlwieSB4XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJhIHhcIixcIjIuMlwiOlwiYSB4XCIsXCIyLjNcIjpcImEgeFwiLFwiM1wiOlwiYSB4XCIsXCI0XCI6XCJ5IHhcIixcIjQuMVwiOlwieSB4XCIsXCI0LjItNC4zXCI6XCJ5IHhcIixcIjQuNFwiOlwieSB4XCIsXCI0LjQuM1wiOlwieSB4XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5IHhcIixcIjEwXCI6XCJ5IHhcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieSB4XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5IHhcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5IHhcIn19LFwibm90ZXNcIjpcIlBhcnRpYWwgc3VwcG9ydCBpbiBBbmRyb2lkIGJyb3dzZXIgcmVmZXJzIHRvIGJ1Z2d5IGJlaGF2aW9yIGluIGRpZmZlcmVudCBzY2VuYXJpb3MuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjg1LjM5LFwidXNhZ2VfcGVyY19hXCI6MC44MyxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImFuaW1hdGlvbnMsY3NzLWFuaW1hdGlvbnMsa2V5ZnJhbWUsa2V5ZnJhbWVzXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImNzcy1ncmFkaWVudHNcIjp7XCJ0aXRsZVwiOlwiQ1NTIEdyYWRpZW50c1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBkZWZpbmluZyBhIGxpbmVhciBvciByYWRpYWwgY29sb3IgZ3JhZGllbnQgYXMgYSBDU1MgaW1hZ2UuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWltYWdlcy9cIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL3d3dy5jb2xvcnppbGxhLmNvbS9ncmFkaWVudC1lZGl0b3IvXCIsXCJ0aXRsZVwiOlwiQ3Jvc3MtYnJvd3NlciBlZGl0b3JcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LmNzczNmaWxlcy5jb20vZ3JhZGllbnQvXCIsXCJ0aXRsZVwiOlwiSW5mb3JtYXRpb24gcGFnZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9jc3MzcGllLmNvbS9cIixcInRpdGxlXCI6XCJUb29sIHRvIGVtdWxhdGUgc3VwcG9ydCBpbiBJRVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9mdW5jdGlvbnMvbGluZWFyLWdyYWRpZW50XCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTM1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwieSB4XCIsXCI0XCI6XCJ5IHhcIixcIjVcIjpcInkgeFwiLFwiNlwiOlwieSB4XCIsXCI3XCI6XCJ5IHhcIixcIjhcIjpcInkgeFwiLFwiOVwiOlwieSB4XCIsXCIxMFwiOlwieSB4XCIsXCIxMVwiOlwieSB4XCIsXCIxMlwiOlwieSB4XCIsXCIxM1wiOlwieSB4XCIsXCIxNFwiOlwieSB4XCIsXCIxNVwiOlwieSB4XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiYSB4XCIsXCI1XCI6XCJhIHhcIixcIjZcIjpcImEgeFwiLFwiN1wiOlwiYSB4XCIsXCI4XCI6XCJhIHhcIixcIjlcIjpcImEgeFwiLFwiMTBcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTNcIjpcInkgeFwiLFwiMTRcIjpcInkgeFwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInkgeFwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiYSB4XCIsXCI1XCI6XCJhIHhcIixcIjUuMVwiOlwieSB4XCIsXCI2XCI6XCJ5IHhcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJhIHhcIixcIjExLjVcIjpcImEgeFwiLFwiMTEuNlwiOlwieSB4XCIsXCIxMlwiOlwieSB4XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiYSB4XCIsXCI0LjAtNC4xXCI6XCJhIHhcIixcIjQuMi00LjNcIjpcImEgeFwiLFwiNS4wLTUuMVwiOlwieSB4XCIsXCI2LjAtNi4xXCI6XCJ5IHhcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcImEgeFwiLFwiMi4yXCI6XCJhIHhcIixcIjIuM1wiOlwiYSB4XCIsXCIzXCI6XCJhIHhcIixcIjRcIjpcInkgeFwiLFwiNC4xXCI6XCJ5IHhcIixcIjQuMi00LjNcIjpcInkgeFwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwiYSB4XCIsXCIxMFwiOlwieSB4XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJhIHhcIixcIjExLjVcIjpcImEgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5IHhcIn19LFwibm90ZXNcIjpcIlN5bnRheCB1c2VkIGJ5IGJyb3dzZXJzIHdpdGggcHJlZml4ZWQgc3VwcG9ydCBtYXkgYmUgaW5jb21wYXRpYmxlIHdpdGggdGhhdCBmb3IgcHJvcGVyIHN1cHBvcnQuIFxcclxcblxcclxcblBhcnRpYWwgc3VwcG9ydCBpbiBPcGVyYSAxMS4xMCBhbmQgMTEuNTAgYWxzbyByZWZlcnMgdG8gb25seSBoYXZpbmcgc3VwcG9ydCBmb3IgbGluZWFyIGdyYWRpZW50cy5cXHJcXG5cXHJcXG5TdXBwb3J0IGNhbiBiZSBzb21ld2hhdCBlbXVsYXRlZCBpbiBvbGRlciBJRSB2ZXJzaW9ucyB1c2luZyB0aGUgbm9uLXN0YW5kYXJkIFxcXCJncmFkaWVudFxcXCIgZmlsdGVyLiBcXHJcXG5cXHJcXG5GaXJlZm94IDEwKywgT3BlcmEgMTEuNissIENocm9tZSAyNisgYW5kIElFMTArIGFsc28gc3VwcG9ydCB0aGUgbmV3IFxcXCJ0byAoc2lkZSlcXFwiIHN5bnRheC5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6ODUuMSxcInVzYWdlX3BlcmNfYVwiOjEuMjksXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJsaW5lYXIsbGluZWFyLWdyYWRpZW50LGdyYWRpYW50XCIsXCJpZV9pZFwiOlwiZ3JhZGllbnRzXCIsXCJjaHJvbWVfaWRcIjpcIjU3ODU5MDUwNjMyNjQyNTZcIn0sXCJjc3MtY2FudmFzXCI6e1widGl0bGVcIjpcIkNTUyBDYW52YXMgRHJhd2luZ3NcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgdXNpbmcgSFRNTDUgQ2FudmFzIGFzIGEgYmFja2dyb3VuZCBpbWFnZVwiLFwic3BlY1wiOlwiaHR0cDovL3dlYmtpdC5vcmcvYmxvZy8xNzYvY3NzLWNhbnZhcy1kcmF3aW5nL1wiLFwic3RhdHVzXCI6XCJ1bm9mZlwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vd2Via2l0Lm9yZy9ibG9nLzE3Ni9jc3MtY2FudmFzLWRyYXdpbmcvXCIsXCJ0aXRsZVwiOlwiV2Via2l0IGJsb2cgcG9zdFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuXCIsXCIzMVwiOlwiblwiLFwiMzJcIjpcIm5cIixcIjMzXCI6XCJuXCIsXCIzNFwiOlwidVwiLFwiMzVcIjpcInVcIixcIjM2XCI6XCJ1XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieSB4XCIsXCI1XCI6XCJ5IHhcIixcIjZcIjpcInkgeFwiLFwiN1wiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIixcIjlcIjpcInkgeFwiLFwiMTBcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTNcIjpcInkgeFwiLFwiMTRcIjpcInkgeFwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInkgeFwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInkgeFwiLFwiMjdcIjpcInkgeFwiLFwiMjhcIjpcInkgeFwiLFwiMjlcIjpcInkgeFwiLFwiMzBcIjpcInkgeFwiLFwiMzFcIjpcInkgeFwiLFwiMzJcIjpcInkgeFwiLFwiMzNcIjpcInkgeFwiLFwiMzRcIjpcInkgeFwiLFwiMzVcIjpcInkgeFwiLFwiMzZcIjpcInkgeFwiLFwiMzdcIjpcInkgeFwiLFwiMzhcIjpcInkgeFwiLFwiMzlcIjpcInkgeFwiLFwiNDBcIjpcInkgeFwiLFwiNDFcIjpcInkgeFwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJ5IHhcIixcIjVcIjpcInkgeFwiLFwiNS4xXCI6XCJ5IHhcIixcIjZcIjpcInkgeFwiLFwiNi4xXCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiNy4xXCI6XCJ5IHhcIixcIjhcIjpcInkgeFwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ5IHhcIixcIjQuMC00LjFcIjpcInkgeFwiLFwiNC4yLTQuM1wiOlwieSB4XCIsXCI1LjAtNS4xXCI6XCJ5IHhcIixcIjYuMC02LjFcIjpcInkgeFwiLFwiNy4wLTcuMVwiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInkgeFwiLFwiMi4yXCI6XCJ5IHhcIixcIjIuM1wiOlwieSB4XCIsXCIzXCI6XCJ5IHhcIixcIjRcIjpcInkgeFwiLFwiNC4xXCI6XCJ5IHhcIixcIjQuMi00LjNcIjpcInkgeFwiLFwiNC40XCI6XCJ5IHhcIixcIjQuNC4zXCI6XCJ5IHhcIn0sXCJiYlwiOntcIjdcIjpcInkgeFwiLFwiMTBcIjpcInkgeFwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJ5IHhcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInkgeFwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJuXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInkgeFwifX0sXCJub3Rlc1wiOlwiUHJvcG9zYWwgYnkgV2Via2l0LCBiZWluZyBjb25zaWRlcmVkIGZvciBXM0Mgc3RhbmRhcmRpemF0aW9uLiBBIHNpbWlsYXIgZWZmZWN0IGNhbiBiZSBhY2hpZXZlZCBpbiBGaXJlZm94IDQrIHVzaW5nIHRoZSAtbW96LWVsZW1lbnQoKSBiYWNrZ3JvdW5kIHByb3BlcnR5XCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjYyLjcyLFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJjc3MtcmVmbGVjdGlvbnNcIjp7XCJ0aXRsZVwiOlwiQ1NTIFJlZmxlY3Rpb25zXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGRpc3BsYXlpbmcgYSByZWZsZWN0aW9uIG9mIGFuIGVsZW1lbnRcIixcInNwZWNcIjpcImh0dHA6Ly93ZWJraXQub3JnL2Jsb2cvMTgyL2Nzcy1yZWZsZWN0aW9ucy9cIixcInN0YXR1c1wiOlwidW5vZmZcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL3dlYmtpdC5vcmcvYmxvZy8xODIvY3NzLXJlZmxlY3Rpb25zL1wiLFwidGl0bGVcIjpcIldlYmtpdCBibG9nIHBvc3RcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTU1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcIm5cIixcIjM1XCI6XCJuXCIsXCIzNlwiOlwiblwifSxcImNocm9tZVwiOntcIjRcIjpcInkgeFwiLFwiNVwiOlwieSB4XCIsXCI2XCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiOFwiOlwieSB4XCIsXCI5XCI6XCJ5IHhcIixcIjEwXCI6XCJ5IHhcIixcIjExXCI6XCJ5IHhcIixcIjEyXCI6XCJ5IHhcIixcIjEzXCI6XCJ5IHhcIixcIjE0XCI6XCJ5IHhcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIixcIjI3XCI6XCJ5IHhcIixcIjI4XCI6XCJ5IHhcIixcIjI5XCI6XCJ5IHhcIixcIjMwXCI6XCJ5IHhcIixcIjMxXCI6XCJ5IHhcIixcIjMyXCI6XCJ5IHhcIixcIjMzXCI6XCJ5IHhcIixcIjM0XCI6XCJ5IHhcIixcIjM1XCI6XCJ5IHhcIixcIjM2XCI6XCJ5IHhcIixcIjM3XCI6XCJ5IHhcIixcIjM4XCI6XCJ5IHhcIixcIjM5XCI6XCJ5IHhcIixcIjQwXCI6XCJ5IHhcIixcIjQxXCI6XCJ5IHhcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwieSB4XCIsXCI1XCI6XCJ5IHhcIixcIjUuMVwiOlwieSB4XCIsXCI2XCI6XCJ5IHhcIixcIjYuMVwiOlwieSB4XCIsXCI3XCI6XCJ5IHhcIixcIjcuMVwiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwieSB4XCIsXCIxNlwiOlwieSB4XCIsXCIxN1wiOlwieSB4XCIsXCIxOFwiOlwieSB4XCIsXCIxOVwiOlwieSB4XCIsXCIyMFwiOlwieSB4XCIsXCIyMVwiOlwieSB4XCIsXCIyMlwiOlwieSB4XCIsXCIyM1wiOlwieSB4XCIsXCIyNFwiOlwieSB4XCIsXCIyNVwiOlwieSB4XCIsXCIyNlwiOlwieSB4XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieSB4XCIsXCI0LjAtNC4xXCI6XCJ5IHhcIixcIjQuMi00LjNcIjpcInkgeFwiLFwiNS4wLTUuMVwiOlwieSB4XCIsXCI2LjAtNi4xXCI6XCJ5IHhcIixcIjcuMC03LjFcIjpcInkgeFwiLFwiOFwiOlwieSB4XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ5IHhcIixcIjIuMlwiOlwieSB4XCIsXCIyLjNcIjpcInkgeFwiLFwiM1wiOlwieSB4XCIsXCI0XCI6XCJ5IHhcIixcIjQuMVwiOlwieSB4XCIsXCI0LjItNC4zXCI6XCJ5IHhcIixcIjQuNFwiOlwieSB4XCIsXCI0LjQuM1wiOlwieSB4XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5IHhcIixcIjEwXCI6XCJ5IHhcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwieSB4XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5IHhcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiblwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJTaW1pbGFyIGVmZmVjdCBjYW4gYmUgYWNoaWV2ZWQgaW4gRmlyZWZveCA0KyB1c2luZyB0aGUgLW1vei1lbGVtZW50KCkgYmFja2dyb3VuZCBwcm9wZXJ0eVwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo1OS42MixcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJib3gtcmVmbGVjdFwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCI1NjI3MzAwNTEwOTU3NTY4XCJ9LFwiY3NzLW1hc2tzXCI6e1widGl0bGVcIjpcIkNTUyBNYXNrc1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBkaXNwbGF5aW5nIHBhcnQgb2YgYW4gZWxlbWVudCwgdXNpbmcgYSBzZWxlY3RlZCBpbWFnZSBhcyBhIG1hc2tcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2Nzcy1tYXNraW5nL1wiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvcHJvcGVydGllcy9tYXNrXCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL21hc2tpbmcvYWRvYmUvXCIsXCJ0aXRsZVwiOlwiSFRNTDUgUm9ja3MgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly90aGVuaXR0eWdyaXR0eS5jby9jc3MtbWFza2luZ1wiLFwidGl0bGVcIjpcIkRldGFpbGVkIGJsb2cgcG9zdFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiYVwiLFwiMy42XCI6XCJhXCIsXCI0XCI6XCJhXCIsXCI1XCI6XCJhXCIsXCI2XCI6XCJhXCIsXCI3XCI6XCJhXCIsXCI4XCI6XCJhXCIsXCI5XCI6XCJhXCIsXCIxMFwiOlwiYVwiLFwiMTFcIjpcImFcIixcIjEyXCI6XCJhXCIsXCIxM1wiOlwiYVwiLFwiMTRcIjpcImFcIixcIjE1XCI6XCJhXCIsXCIxNlwiOlwiYVwiLFwiMTdcIjpcImFcIixcIjE4XCI6XCJhXCIsXCIxOVwiOlwiYVwiLFwiMjBcIjpcImFcIixcIjIxXCI6XCJhXCIsXCIyMlwiOlwiYVwiLFwiMjNcIjpcImFcIixcIjI0XCI6XCJhXCIsXCIyNVwiOlwiYVwiLFwiMjZcIjpcImFcIixcIjI3XCI6XCJhXCIsXCIyOFwiOlwiYVwiLFwiMjlcIjpcImFcIixcIjMwXCI6XCJhXCIsXCIzMVwiOlwiYVwiLFwiMzJcIjpcImFcIixcIjMzXCI6XCJhXCIsXCIzNFwiOlwiYVwiLFwiMzVcIjpcImFcIixcIjM2XCI6XCJhXCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiYSB4XCIsXCI1XCI6XCJhIHhcIixcIjZcIjpcImEgeFwiLFwiN1wiOlwiYSB4XCIsXCI4XCI6XCJhIHhcIixcIjlcIjpcImEgeFwiLFwiMTBcIjpcImEgeFwiLFwiMTFcIjpcImEgeFwiLFwiMTJcIjpcImEgeFwiLFwiMTNcIjpcImEgeFwiLFwiMTRcIjpcImEgeFwiLFwiMTVcIjpcImEgeFwiLFwiMTZcIjpcImEgeFwiLFwiMTdcIjpcImEgeFwiLFwiMThcIjpcImEgeFwiLFwiMTlcIjpcImEgeFwiLFwiMjBcIjpcImEgeFwiLFwiMjFcIjpcImEgeFwiLFwiMjJcIjpcImEgeFwiLFwiMjNcIjpcImEgeFwiLFwiMjRcIjpcImEgeFwiLFwiMjVcIjpcImEgeFwiLFwiMjZcIjpcImEgeFwiLFwiMjdcIjpcImEgeFwiLFwiMjhcIjpcImEgeFwiLFwiMjlcIjpcImEgeFwiLFwiMzBcIjpcImEgeFwiLFwiMzFcIjpcImEgeFwiLFwiMzJcIjpcImEgeFwiLFwiMzNcIjpcImEgeFwiLFwiMzRcIjpcImEgeFwiLFwiMzVcIjpcImEgeFwiLFwiMzZcIjpcImEgeFwiLFwiMzdcIjpcImEgeFwiLFwiMzhcIjpcImEgeFwiLFwiMzlcIjpcImEgeFwiLFwiNDBcIjpcImEgeFwiLFwiNDFcIjpcImEgeFwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJhIHhcIixcIjVcIjpcImEgeFwiLFwiNS4xXCI6XCJhIHhcIixcIjZcIjpcImEgeFwiLFwiNi4xXCI6XCJhIHhcIixcIjdcIjpcImEgeFwiLFwiNy4xXCI6XCJhIHhcIixcIjhcIjpcImEgeFwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJhIHhcIixcIjE2XCI6XCJhIHhcIixcIjE3XCI6XCJhIHhcIixcIjE4XCI6XCJhIHhcIixcIjE5XCI6XCJhIHhcIixcIjIwXCI6XCJhIHhcIixcIjIxXCI6XCJhIHhcIixcIjIyXCI6XCJhIHhcIixcIjIzXCI6XCJhIHhcIixcIjI0XCI6XCJhIHhcIixcIjI1XCI6XCJhIHhcIixcIjI2XCI6XCJhIHhcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJhIHhcIixcIjQuMC00LjFcIjpcImEgeFwiLFwiNC4yLTQuM1wiOlwiYSB4XCIsXCI1LjAtNS4xXCI6XCJhIHhcIixcIjYuMC02LjFcIjpcImEgeFwiLFwiNy4wLTcuMVwiOlwiYSB4XCIsXCI4XCI6XCJhIHhcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcImEgeFwiLFwiMi4yXCI6XCJhIHhcIixcIjIuM1wiOlwiYSB4XCIsXCIzXCI6XCJhIHhcIixcIjRcIjpcImEgeFwiLFwiNC4xXCI6XCJhIHhcIixcIjQuMi00LjNcIjpcImEgeFwiLFwiNC40XCI6XCJhIHhcIixcIjQuNC4zXCI6XCJhIHhcIn0sXCJiYlwiOntcIjdcIjpcImEgeFwiLFwiMTBcIjpcImEgeFwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJhIHhcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcImEgeFwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJhXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcImEgeFwifX0sXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IGluIFdlYktpdC9CbGluayBicm93c2VycyByZWZlcnMgdG8gc3VwcG9ydGluZyB0aGUgbWFzay1pbWFnZSBhbmQgbWFzay1ib3gtaW1hZ2UgcHJvcGVydGllcywgYnV0IGxhY2tzIHN1cHBvcnQgZm9yIG90aGUgcGFydHMgb2YgdGhlIHNwZWMuIFBhcnRpYWwgc3VwcG9ydCBpbiBGaXJlZm94IHJlZmVycyB0byBvbmx5IHN1cHBvcnQgZm9yIGlubGluZSBTVkcgbWFzayBlbGVtZW50cyBpLmUuIG1hc2s6IHVybCgjZm9vKS5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6MCxcInVzYWdlX3BlcmNfYVwiOjc1Ljk4LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwibWFza3NcIixcImNocm9tZV9pZFwiOlwiNTM4MTU1OTY2MjE0OTYzMlwifSxcInN2Z1wiOntcInRpdGxlXCI6XCJTVkcgKGJhc2ljIHN1cHBvcnQpXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGRpc3BsYXlpbmcgYmFzaWMgVmVjdG9yIEdyYXBoaWNzIGZlYXR1cmVzIHVzaW5nIHRoZSBlbWJlZCBvciBvYmplY3QgZWxlbWVudHMuIFJlZmVycyB0byB0aGUgU1ZHIDEuMSBzcGVjLlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL1wiLFwic3RhdHVzXCI6XCJyZWNcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TY2FsYWJsZV9WZWN0b3JfR3JhcGhpY3NcIixcInRpdGxlXCI6XCJXaWtpcGVkaWFcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LmFsaXN0YXBhcnQuY29tL2FydGljbGVzL3VzaW5nLXN2Zy1mb3ItZmxleGlibGUtc2NhbGFibGUtYW5kLWZ1bi1iYWNrZ3JvdW5kcy1wYXJ0LWlcIixcInRpdGxlXCI6XCJBIExpc3QgQXBhcnQgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9zdmctd293Lm9yZy9cIixcInRpdGxlXCI6XCJTVkcgc2hvd2Nhc2Ugc2l0ZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9zdmd3ZWIvXCIsXCJ0aXRsZVwiOlwiU1ZHIFdlYjogRmxhc2gtYmFzZWQgcG9seWZpbGxcIn0se1widXJsXCI6XCJodHRwOi8vc3ZnLWVkaXQuZ29vZ2xlY29kZS5jb21cIixcInRpdGxlXCI6XCJXZWItYmFzZWQgU1ZHIGVkaXRvclwifSx7XCJ1cmxcIjpcImh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vcGhpZ2dpbnM0Mi9oYXMuanMvbWFzdGVyL2RldGVjdC9ncmFwaGljcy5qcyNzdmdcIixcInRpdGxlXCI6XCJoYXMuanMgdGVzdFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiU1ZHXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwicFwiLFwiN1wiOlwicFwiLFwiOFwiOlwicFwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcImFcIixcIjNcIjpcInlcIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJhXCIsXCIzLjJcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcInlcIixcIjkuNS05LjZcIjpcInlcIixcIjEwLjAtMTAuMVwiOlwieVwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieVwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJ5XCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcImFcIixcIjRcIjpcImFcIixcIjQuMVwiOlwiYVwiLFwiNC4yLTQuM1wiOlwiYVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlBhcnRpYWwgc3VwcG9ydCBpbiBBbmRyb2lkIDQgcmVmZXJzIHRvIG5vdCBzdXBwb3J0aW5nIG1hc2tpbmcuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjg2Ljk1LFwidXNhZ2VfcGVyY19hXCI6NC4zMSxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJzdmctY3NzXCI6e1widGl0bGVcIjpcIlNWRyBpbiBDU1MgYmFja2dyb3VuZHNcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgdXNpbmcgU1ZHIGltYWdlcyBhcyBDU1MgYmFja2dyb3VuZHNcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtYmFja2dyb3VuZC8jYmFja2dyb3VuZC1pbWFnZVwiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vZGVzaWduZmVzdGl2YWwuY29tL2EtZmFyZXdlbGwtdG8tY3NzMy1ncmFkaWVudHMvXCIsXCJ0aXRsZVwiOlwiVHV0b3JpYWwgZm9yIGFkdmFuY2VkIGVmZmVjdHNcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIixcIlNWR1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiYVwiLFwiNVwiOlwiYVwiLFwiNlwiOlwiYVwiLFwiN1wiOlwiYVwiLFwiOFwiOlwiYVwiLFwiOVwiOlwiYVwiLFwiMTBcIjpcImFcIixcIjExXCI6XCJhXCIsXCIxMlwiOlwiYVwiLFwiMTNcIjpcImFcIixcIjE0XCI6XCJhXCIsXCIxNVwiOlwiYVwiLFwiMTZcIjpcImFcIixcIjE3XCI6XCJhXCIsXCIxOFwiOlwiYVwiLFwiMTlcIjpcImFcIixcIjIwXCI6XCJhXCIsXCIyMVwiOlwiYVwiLFwiMjJcIjpcImFcIixcIjIzXCI6XCJhXCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcImFcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJhXCIsXCI0XCI6XCJhXCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJ5XCIsXCIxMC4wLTEwLjFcIjpcInlcIixcIjEwLjVcIjpcInlcIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcImFcIixcIjQuMC00LjFcIjpcImFcIixcIjQuMi00LjNcIjpcInlcIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiYVwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcImFcIixcIjExXCI6XCJhXCIsXCIxMS4xXCI6XCJhXCIsXCIxMS41XCI6XCJhXCIsXCIxMlwiOlwiYVwiLFwiMTIuMVwiOlwiYVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJQYXJ0aWFsIHN1cHBvcnQgaW4gb2xkZXIgRmlyZWZveCBhbmQgT3BlcmEgTWluaS9Nb2JpbGUgcmVmZXJzIHRvIFNWRyBpbWFnZXMgYmVpbmcgYmx1cnJ5IHdoZW4gc2NhbGVkLiBQYXJ0aWFsIHN1cHBvcnQgaW4gaU9TIFNhZmFyaSBhbmQgb2xkZXIgU2FmYXJpIHZlcnNpb25zIHJlZmVycyB0byBmYWlsaW5nIHRvIHN1cHBvcnQgdGlsaW5nIG9yIHRoZSBiYWNrZ3JvdW5kLXBvc2l0aW9uIHByb3BlcnR5LlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo4Ni43NixcInVzYWdlX3BlcmNfYVwiOjQuMjksXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJzdmctaW4tY3NzLHN2Z2luY3NzLGNzcy1zdmdcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwic3ZnLXNtaWxcIjp7XCJ0aXRsZVwiOlwiU1ZHIFNNSUwgYW5pbWF0aW9uXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHVzaW5nIGFuaW1hdGlvbiBlbGVtZW50cyB0byBhbmltYXRlIFNWRyBpbWFnZXNcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9hbmltYXRlLmh0bWxcIixcInN0YXR1c1wiOlwicmVjXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9zdmctd293Lm9yZy9ibG9nL2NhdGVnb3J5L2FuaW1hdGlvbi9cIixcInRpdGxlXCI6XCJFeGFtcGxlcyBvbiBTVkcgV09XXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vU1ZHL1NWR19hbmltYXRpb25fd2l0aF9TTUlMXCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vbGV1bmVuLm1lL2Zha2VzbWlsZS9cIixcInRpdGxlXCI6XCJKUyBsaWJyYXJ5IHRvIHN1cHBvcnQgU01JTCBpbiBTVkdcIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3QvZ3JhcGhpY3MuanMjc3ZnLXNtaWxcIixcInRpdGxlXCI6XCJoYXMuanMgdGVzdFwifSx7XCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9tYWRzZ3JhcGhpY3MvU1ZHRXZlbnRMaXN0ZW5lclwiLFwidGl0bGVcIjpcIlBvbHlmaWxsIGZvciBTTUlMIGFuaW1hdGUgZXZlbnRzIG9uIFNWR1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiU1ZHXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwicFwiLFwiN1wiOlwicFwiLFwiOFwiOlwicFwiLFwiOVwiOlwicFwiLFwiMTBcIjpcInBcIixcIjExXCI6XCJwXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcInBcIixcIjNcIjpcInBcIixcIjMuNVwiOlwicFwiLFwiMy42XCI6XCJwXCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiYVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJwXCIsXCIzLjJcIjpcInBcIixcIjRcIjpcImFcIixcIjVcIjpcImFcIixcIjUuMVwiOlwiYVwiLFwiNlwiOlwiYVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcInlcIixcIjkuNS05LjZcIjpcInlcIixcIjEwLjAtMTAuMVwiOlwieVwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiYVwiLFwiNC4wLTQuMVwiOlwiYVwiLFwiNC4yLTQuM1wiOlwiYVwiLFwiNS4wLTUuMVwiOlwiYVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInBcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlBhcnRpYWwgc3VwcG9ydCBpbiBTYWZhcmkgcmVmZXJzIHRvIG5vdCB3b3JraW5nIGluIEhUTUwgZmlsZXMuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjc0LjMzLFwidXNhZ2VfcGVyY19hXCI6MS4xLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcInN2Zy1mb250c1wiOntcInRpdGxlXCI6XCJTVkcgZm9udHNcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgdXNpbmcgZm9udHMgZGVmaW5lZCBhcyBTVkcgc2hhcGVzLiBDb25zaWRlcmVkIGFtb25nIGEgbnVtYmVyIG9mIGJyb3dzZXIgdmVuZG9ycyBhcyBhIGRlcHJlY2F0ZWQgZmVhdHVyZSB3aXRoIHN1cHBvcnQgYmVpbmcgcmVtb3ZlZCBpbiBmdXR1cmUgdmVyc2lvbnMuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvZm9udHMuaHRtbFwiLFwic3RhdHVzXCI6XCJyZWNcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2plcmVtaWUucGF0b25uaWVyLm5ldC9wb3N0LzIwMTEvMDIvMDcvV2h5LWFyZS1TVkctRm9udHMtc28tZGlmZmVyZW50XCIsXCJ0aXRsZVwiOlwiQmxvZyBwb3N0XCJ9LHtcInVybFwiOlwiaHR0cDovL29wZW50eXBlLmluZm8vYmxvZy8yMDEwLzA0LzEzL3RoZS1pcGFkLWFuZC1zdmctZm9udHMtaW4tbW9iaWxlLXNhZmFyaS9cIixcInRpdGxlXCI6XCJCbG9nIHBvc3Qgb24gdXNhZ2UgZm9yIGlQYWRcIn1dLFwiY2F0ZWdvcmllc1wiOltcIlNWR1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcInBcIixcIjdcIjpcInBcIixcIjhcIjpcInBcIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcIm5cIixcIjM1XCI6XCJuXCIsXCIzNlwiOlwiblwifSxcImNocm9tZVwiOntcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwiYSAjMVwiLFwiMzlcIjpcImEgIzFcIixcIjQwXCI6XCJhICMxXCIsXCI0MVwiOlwiYSAjMVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJ5XCIsXCI5LjUtOS42XCI6XCJ5XCIsXCIxMC4wLTEwLjFcIjpcInlcIixcIjEwLjVcIjpcInlcIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInlcIixcIjQuMC00LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwibiAjMlwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcImEgIzFcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiblwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOntcIjFcIjpcIkNocm9tZSAzOCBhbmQgbmV3ZXIgc3VwcG9ydCBTVkcgZm9udHMgb25seSBvbiBXaW5kb3dzIFZpc3RhIGFuZCBYUC5cIixcIjJcIjpcIlN1cHBvcnRlZCBpbiBPcGVyYSBNaW5pIGluIFNWRyBpbWFnZXMgb25seSwgbm90IGluIEhUTUwuXCJ9LFwidXNhZ2VfcGVyY195XCI6NTQuMyxcInVzYWdlX3BlcmNfYVwiOjguMDEsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJmb250ZmFjZVwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCI1OTMwMDc1OTA4MjEwNjg4XCJ9LFwic3ZnLWZpbHRlcnNcIjp7XCJ0aXRsZVwiOlwiU1ZHIGZpbHRlcnNcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgdXNpbmcgcGhvdG9zaG9wLWxpa2UgZWZmZWN0cyBvbiBTVkcgb2JqZWN0cyBpbmNsdWRpbmcgYmx1cnJpbmcgYW5kIGNvbG9yIG1hbmlwdWxhdGlvbi5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9maWx0ZXJzLmh0bWxcIixcInN0YXR1c1wiOlwicmVjXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9lbGVjdHJpY2JlYWNoLm9yZy8/cD05NTBcIixcInRpdGxlXCI6XCJFeHBlcmltZW50cyB3aXRoIGZpbHRlciBlZmZlY3RzXCJ9LHtcInVybFwiOlwiaHR0cDovL3N2Zy13b3cub3JnL2Jsb2cvY2F0ZWdvcnkvZmlsdGVycy9cIixcInRpdGxlXCI6XCJTVkcgZmlsdGVyIGRlbW9zXCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvc3ZnL2VsZW1lbnRzL2ZpbHRlclwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIlNWR1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJ5XCIsXCIzLjVcIjpcInlcIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcImFcIixcIjZcIjpcImFcIixcIjdcIjpcImFcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJ5XCIsXCI5LjUtOS42XCI6XCJ5XCIsXCIxMC4wLTEwLjFcIjpcInlcIixcIjEwLjVcIjpcInlcIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwieVwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6ODMuNDksXCJ1c2FnZV9wZXJjX2FcIjowLjA1LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcInN2Zy1odG1sXCI6e1widGl0bGVcIjpcIlNWRyBlZmZlY3RzIGZvciBIVE1MXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHVzaW5nIFNWRyB0cmFuc2Zvcm1zLCBmaWx0ZXJzLCBldGMgb24gSFRNTCBlbGVtZW50cyB1c2luZyBlaXRoZXIgQ1NTIG9yIHRoZSBmb3JlaWduT2JqZWN0IGVsZW1lbnRcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL1NWRzExL2V4dGVuZC5odG1sI0ZvcmVpZ25PYmplY3RFbGVtZW50XCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL1NWRy9UdXRvcmlhbC9PdGhlcl9jb250ZW50X2luX1NWR1wiLFwidGl0bGVcIjpcIk1ETiBUdXRvcmlhbFwifSx7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL0VuL0FwcGx5aW5nX1NWR19lZmZlY3RzX3RvX0hUTUxfY29udGVudFwiLFwidGl0bGVcIjpcIk1ETiBSZWZlcmVuY2UgcGFnZVwifSx7XCJ1cmxcIjpcImh0dHBzOi8vZHZjcy53My5vcmcvaGcvRlhURi9yYXctZmlsZS90aXAvZmlsdGVycy9pbmRleC5odG1sXCIsXCJ0aXRsZVwiOlwiRmlsdGVyIEVmZmVjdHMgZHJhZnRcIn1dLFwiY2F0ZWdvcmllc1wiOltcIlNWR1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcImFcIixcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJhXCIsXCIzLjVcIjpcInlcIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcImFcIixcIjVcIjpcImFcIixcIjZcIjpcImFcIixcIjdcIjpcImFcIixcIjhcIjpcImFcIixcIjlcIjpcImFcIixcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwiLFwiMTJcIjpcImFcIixcIjEzXCI6XCJhXCIsXCIxNFwiOlwiYVwiLFwiMTVcIjpcImFcIixcIjE2XCI6XCJhXCIsXCIxN1wiOlwiYVwiLFwiMThcIjpcImFcIixcIjE5XCI6XCJhXCIsXCIyMFwiOlwiYVwiLFwiMjFcIjpcImFcIixcIjIyXCI6XCJhXCIsXCIyM1wiOlwiYVwiLFwiMjRcIjpcImFcIixcIjI1XCI6XCJhXCIsXCIyNlwiOlwiYVwiLFwiMjdcIjpcImFcIixcIjI4XCI6XCJhXCIsXCIyOVwiOlwiYVwiLFwiMzBcIjpcImFcIixcIjMxXCI6XCJhXCIsXCIzMlwiOlwiYVwiLFwiMzNcIjpcImFcIixcIjM0XCI6XCJhXCIsXCIzNVwiOlwiYVwiLFwiMzZcIjpcImFcIixcIjM3XCI6XCJhXCIsXCIzOFwiOlwiYVwiLFwiMzlcIjpcImFcIixcIjQwXCI6XCJhXCIsXCI0MVwiOlwiYVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJhXCIsXCI1XCI6XCJhXCIsXCI1LjFcIjpcImFcIixcIjZcIjpcImFcIixcIjYuMVwiOlwiYVwiLFwiN1wiOlwiYVwiLFwiNy4xXCI6XCJhXCIsXCI4XCI6XCJhXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJhXCIsXCI5LjUtOS42XCI6XCJhXCIsXCIxMC4wLTEwLjFcIjpcImFcIixcIjEwLjVcIjpcImFcIixcIjEwLjZcIjpcImFcIixcIjExXCI6XCJhXCIsXCIxMS4xXCI6XCJhXCIsXCIxMS41XCI6XCJhXCIsXCIxMS42XCI6XCJhXCIsXCIxMlwiOlwiYVwiLFwiMTIuMVwiOlwiYVwiLFwiMTVcIjpcImFcIixcIjE2XCI6XCJhXCIsXCIxN1wiOlwiYVwiLFwiMThcIjpcImFcIixcIjE5XCI6XCJhXCIsXCIyMFwiOlwiYVwiLFwiMjFcIjpcImFcIixcIjIyXCI6XCJhXCIsXCIyM1wiOlwiYVwiLFwiMjRcIjpcImFcIixcIjI1XCI6XCJhXCIsXCIyNlwiOlwiYVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcImFcIixcIjQuMC00LjFcIjpcImFcIixcIjQuMi00LjNcIjpcImFcIixcIjUuMC01LjFcIjpcImFcIixcIjYuMC02LjFcIjpcImFcIixcIjcuMC03LjFcIjpcImFcIixcIjhcIjpcImFcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiYVwiLFwiNC40LjNcIjpcImFcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcImFcIixcIjExXCI6XCJhXCIsXCIxMS4xXCI6XCJhXCIsXCIxMS41XCI6XCJhXCIsXCIxMlwiOlwiYVwiLFwiMTIuMVwiOlwiYVwiLFwiMjRcIjpcImFcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcImFcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJQYXJ0aWFsIHN1cHBvcnQgcmVmZXJzIHRvIGxhY2sgb2YgZmlsdGVyIHN1cHBvcnQgb3IgYnVnZ3kgcmVzdWx0IGZyb20gZWZmZWN0cy4gQSBbQ1NTIEZpbHRlciBFZmZlY3RzXShodHRwczovL2R2Y3MudzMub3JnL2hnL0ZYVEYvcmF3LWZpbGUvdGlwL2ZpbHRlcnMvaW5kZXguaHRtbCkgc3BlY2lmaWNhdGlvbiBpcyBpbiB0aGUgd29ya3MgdGhhdCB3b3VsZCByZXBsYWNlIHRoaXMgbWV0aG9kLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjoxMy4yNixcInVzYWdlX3BlcmNfYVwiOjY2LjkxLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcInN2Zy1odG1sNVwiOntcInRpdGxlXCI6XCJJbmxpbmUgU1ZHIGluIEhUTUw1XCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHVzaW5nIFNWRyB0YWdzIGRpcmVjdGx5IGluIEhUTUwgZG9jdW1lbnRzLiBSZXF1aXJlcyBIVE1MNSBwYXJzZXIuXCIsXCJzcGVjXCI6XCJodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjc3ZnLTBcIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2hhY2tzLm1vemlsbGEub3JnLzIwMTAvMDUvZmlyZWZveC00LXRoZS1odG1sNS1wYXJzZXItaW5saW5lLXN2Zy1zcGVlZC1hbmQtbW9yZS9cIixcInRpdGxlXCI6XCJNb3ppbGxhIEhhY2tzIGJsb2cgcG9zdFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9zYW1wbGVzLm1zZG4ubWljcm9zb2Z0LmNvbS9pZXRlc3RjZW50ZXIvaHRtbDUvc3ZnaHRtbF9oYXJuZXNzLmh0bT91cmw9U1ZHX0hUTUxfRWxlbWVudHNfMDAxXCIsXCJ0aXRsZVwiOlwiVGVzdCBzdWl0ZVwifV0sXCJjYXRlZ29yaWVzXCI6W1wiSFRNTDVcIixcIlNWR1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcInBcIixcIjdcIjpcInBcIixcIjhcIjpcInBcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJwXCIsXCIzXCI6XCJwXCIsXCIzLjVcIjpcInBcIixcIjMuNlwiOlwicFwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInBcIixcIjVcIjpcInBcIixcIjZcIjpcInBcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwicFwiLFwiMy4yXCI6XCJwXCIsXCI0XCI6XCJwXCIsXCI1XCI6XCJwXCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJwXCIsXCI5LjUtOS42XCI6XCJwXCIsXCIxMC4wLTEwLjFcIjpcInBcIixcIjEwLjVcIjpcInBcIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInBcIixcIjQuMC00LjFcIjpcInBcIixcIjQuMi00LjNcIjpcInBcIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInBcIixcIjExXCI6XCJwXCIsXCIxMS4xXCI6XCJwXCIsXCIxMS41XCI6XCJwXCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6ODcuNTIsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImNhbnZhc1wiOntcInRpdGxlXCI6XCJDYW52YXMgKGJhc2ljIHN1cHBvcnQpXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGdlbmVyYXRpbmcgZmFzdCwgZHluYW1pYyBncmFwaGljcyB1c2luZyBKYXZhU2NyaXB0XCIsXCJzcGVjXCI6XCJodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCN0aGUtY2FudmFzLWVsZW1lbnRcIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vQ2FudmFzX3R1dG9yaWFsXCIsXCJ0aXRsZVwiOlwiVHV0b3JpYWwgYnkgTW96aWxsYVwifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuY2FudmFzZGVtb3MuY29tL1wiLFwidGl0bGVcIjpcIlNob3djYXNlIHNpdGVcIn0se1widXJsXCI6XCJodHRwOi8vZ2xpbXIucnVieWZvcmdlLm9yZy9jYWtlL2NhbnZhcy5odG1sXCIsXCJ0aXRsZVwiOlwiQW5pbWF0aW9uIGtpdCBcIn0se1widXJsXCI6XCJodHRwOi8vZGl2ZWludG9odG1sNS5pbmZvL2NhbnZhcy5odG1sXCIsXCJ0aXRsZVwiOlwiQW5vdGhlciB0dXRvcmlhbFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9leHBsb3JlcmNhbnZhcy5nb29nbGVjb2RlLmNvbS9cIixcInRpdGxlXCI6XCJJbXBsZW1lbnRhdGlvbiBmb3IgSW50ZXJuZXQgRXhwbG9yZXJcIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3QvZ3JhcGhpY3MuanMjY2FudmFzXCIsXCJ0aXRsZVwiOlwiaGFzLmpzIHRlc3RcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNhbnZhc1wiLFwiSFRNTDVcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJwXCIsXCI3XCI6XCJwXCIsXCI4XCI6XCJwXCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwieVwiLFwiM1wiOlwieVwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInlcIixcIjMuMlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwieVwiLFwiOS41LTkuNlwiOlwieVwiLFwiMTAuMC0xMC4xXCI6XCJ5XCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ5XCIsXCI0LjAtNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcImFcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJhXCIsXCIyLjJcIjpcImFcIixcIjIuM1wiOlwiYVwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiT3BlcmEgTWluaSBzdXBwb3J0cyB0aGUgY2FudmFzIGVsZW1lbnQsIGJ1dCBpcyB1bmFibGUgdG8gcGxheSBhbmltYXRpb25zIG9yIHJ1biBvdGhlciBtb3JlIGNvbXBsZXggYXBwbGljYXRpb25zLiBBbmRyb2lkIDIueCBzdXBwb3J0cyBjYW52YXMgZXhjZXB0IHRoZSB0b0RhdGFVUkwoKSBmdW5jdGlvbi4gU2VlIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9hbmRyb2lkL2lzc3Vlcy9kZXRhaWw/aWQ9NzkwMSBTb21lIChzbG93KSB3b3JrYXJvdW5kcyBhcmUgZGVzY3JpYmVkIGhlcmU6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xLzEwNDg4MDMzLzg0MTgzMFwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo4OC4xMyxcInVzYWdlX3BlcmNfYVwiOjMuOTUsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJjYW52YXNcIixcImNocm9tZV9pZFwiOlwiNTEwMDA4NDY4NTQzODk3NlwifSxcImNhbnZhcy10ZXh0XCI6e1widGl0bGVcIjpcIlRleHQgQVBJIGZvciBDYW52YXNcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgZGlzcGxheWluZyB0ZXh0IG9uIENhbnZhcyBlbGVtZW50c1wiLFwic3BlY1wiOlwiaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjZHJhd2luZy10ZXh0LXRvLXRoZS1iaXRtYXBcIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRHJhd2luZ190ZXh0X3VzaW5nX2FfY2FudmFzI0FkZGl0aW9uYWxfZXhhbXBsZXNcIixcInRpdGxlXCI6XCJFeGFtcGxlcyBieSBNb3ppbGxhXCJ9LHtcInVybFwiOlwiaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2NhbnZhcy10ZXh0L1wiLFwidGl0bGVcIjpcIlN1cHBvcnQgbGlicmFyeVwifSx7XCJ1cmxcIjpcImh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vcGhpZ2dpbnM0Mi9oYXMuanMvbWFzdGVyL2RldGVjdC9ncmFwaGljcy5qcyNjYW52YXMtdGV4dFwiLFwidGl0bGVcIjpcImhhcy5qcyB0ZXN0XCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvYXBpcy9jYW52YXMvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL2ZpbGxUZXh0XCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ2FudmFzXCIsXCJIVE1MNVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcInBcIixcIjdcIjpcInBcIixcIjhcIjpcInBcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJwXCIsXCIzXCI6XCJwXCIsXCIzLjVcIjpcInlcIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwicFwiLFwiMy4yXCI6XCJwXCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJwXCIsXCI5LjUtOS42XCI6XCJwXCIsXCIxMC4wLTEwLjFcIjpcInBcIixcIjEwLjVcIjpcInlcIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInlcIixcIjQuMC00LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInlcIixcIjIuMlwiOlwieVwiLFwiMi4zXCI6XCJ5XCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInBcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6ODguODQsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiY2FudmFzXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcIm5hbWV2YWx1ZS1zdG9yYWdlXCI6e1widGl0bGVcIjpcIldlYiBTdG9yYWdlIC0gbmFtZS92YWx1ZSBwYWlyc1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBzdG9yaW5nIGRhdGEgbG9jYWxseSBsaWtlIGNvb2tpZXMsIGJ1dCBmb3IgbGFyZ2VyIGFtb3VudHMgb2YgZGF0YSAoc2Vzc2lvblN0b3JhZ2UgYW5kIGxvY2FsU3RvcmFnZSwgdXNlZCB0byBmYWxsIHVuZGVyIEhUTUw1KS5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL3dlYnN0b3JhZ2UvI3N0b3JhZ2VcIixcInN0YXR1c1wiOlwicmVjXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL0VuL0RPTS9TdG9yYWdlXCIsXCJ0aXRsZVwiOlwiR2Vja28gcmVmZXJlbmNlXCJ9LHtcInVybFwiOlwiaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL3Nlc3Npb25zdG9yYWdlL1wiLFwidGl0bGVcIjpcIlN1cHBvcnQgbGlicmFyeVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9odG1sNWRlbW9zLmNvbS9zdG9yYWdlXCIsXCJ0aXRsZVwiOlwiU2ltcGxlIGRlbW9cIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3QvZmVhdHVyZXMuanMjbmF0aXZlLWxvY2Fsc3RvcmFnZTtuYXRpdmUtc2Vzc2lvbnN0b3JhZ2VcIixcInRpdGxlXCI6XCJoYXMuanMgdGVzdFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2FwaXMvd2ViLXN0b3JhZ2UvU3RvcmFnZS9sb2NhbFN0b3JhZ2VcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJKUyBBUElcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJwXCIsXCI3XCI6XCJwXCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiYVwiLFwiM1wiOlwiYVwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ5XCIsXCI0LjAtNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ5XCIsXCIyLjJcIjpcInlcIixcIjIuM1wiOlwieVwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjkyLjgsXCJ1c2FnZV9wZXJjX2FcIjowLjA4LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwid2Vic3RvcmFnZSxsb2NhbCBzdG9yYWdlXCIsXCJpZV9pZFwiOlwid2Vic3RvcmFnZVwiLFwiY2hyb21lX2lkXCI6XCI1MzQ1ODI1NTM0MjQ2OTEyXCJ9LFwic3FsLXN0b3JhZ2VcIjp7XCJ0aXRsZVwiOlwiV2ViIFNRTCBEYXRhYmFzZVwiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBzdG9yaW5nIGRhdGEgY2xpZW50LXNpZGUsIGFsbG93cyBTcWxpdGUgZGF0YWJhc2UgcXVlcmllcyBmb3IgYWNjZXNzIGFuZCBtYW5pcHVsYXRpb25cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL3dlYmRhdGFiYXNlL1wiLFwic3RhdHVzXCI6XCJ1bm9mZlwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vaHRtbDVkb2N0b3IuY29tL2ludHJvZHVjaW5nLXdlYi1zcWwtZGF0YWJhc2VzL1wiLFwidGl0bGVcIjpcIkhUTUw1IERvY3RvciBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9waGlnZ2luczQyL2hhcy5qcy9tYXN0ZXIvZGV0ZWN0L2ZlYXR1cmVzLmpzI25hdGl2ZS1zcWwtZGJcIixcInRpdGxlXCI6XCJoYXMuanMgdGVzdFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuXCIsXCIzMVwiOlwiblwiLFwiMzJcIjpcIm5cIixcIjMzXCI6XCJuXCIsXCIzNFwiOlwiblwiLFwiMzVcIjpcIm5cIixcIjM2XCI6XCJuXCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJ5XCIsXCIzLjJcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieVwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieVwiLFwiMi4yXCI6XCJ5XCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJuXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlRoZSBXZWIgU1FMIERhdGFiYXNlIHNwZWNpZmljYXRpb24gaXMgbm8gbG9uZ2VyIGJlaW5nIG1haW50YWluZWQgYW5kIHN1cHBvcnQgbWF5IGJlIGRyb3BwZWQgaW4gZnV0dXJlIHZlcnNpb25zLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo2My4xLFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImRiLXN0b3JhZ2Usd2Vic3FsXCIsXCJpZV9pZFwiOlwid2Vic3FsZGF0YWJhc2VcIixcImNocm9tZV9pZFwiOlwiNjMzMDk4Nzk1MjczNDIwOFwifSxcImluZGV4ZWRkYlwiOntcInRpdGxlXCI6XCJJbmRleGVkREJcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2Ygc3RvcmluZyBkYXRhIGNsaWVudC1zaWRlLCBhbGxvd3MgaW5kZXhlZCBkYXRhYmFzZSBxdWVyaWVzLlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvSW5kZXhlZERCL1wiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vaGFja3MubW96aWxsYS5vcmcvMjAxMC8wNi9jb21wYXJpbmctaW5kZXhlZGRiLWFuZC13ZWJkYXRhYmFzZS9cIixcInRpdGxlXCI6XCJNb3ppbGxhIEhhY2tzIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vYXhlbWNsaW9uL0luZGV4ZWREQlNoaW1cIixcInRpdGxlXCI6XCJQb2x5ZmlsbCBmb3IgYnJvd3NlcnMgc3VwcG9ydGluZyBXZWJTUUxcIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3QvZmVhdHVyZXMuanMjbmF0aXZlLWluZGV4ZWRkYlwiLFwidGl0bGVcIjpcImhhcy5qcyB0ZXN0XCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvYXBpcy9pbmRleGVkREJcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJKUyBBUElcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiYSAjMVwiLFwiMTFcIjpcImEgIzFcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcImEgeFwiLFwiNVwiOlwiYSB4XCIsXCI2XCI6XCJhIHhcIixcIjdcIjpcImEgeFwiLFwiOFwiOlwiYSB4XCIsXCI5XCI6XCJhIHhcIixcIjEwXCI6XCJ5IHhcIixcIjExXCI6XCJ5IHhcIixcIjEyXCI6XCJ5IHhcIixcIjEzXCI6XCJ5IHhcIixcIjE0XCI6XCJ5IHhcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJwXCIsXCI1XCI6XCJwXCIsXCI2XCI6XCJwXCIsXCI3XCI6XCJwXCIsXCI4XCI6XCJwXCIsXCI5XCI6XCJwXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcImEgeFwiLFwiMTJcIjpcImEgeFwiLFwiMTNcIjpcImEgeFwiLFwiMTRcIjpcImEgeFwiLFwiMTVcIjpcImEgeFwiLFwiMTZcIjpcImEgeFwiLFwiMTdcIjpcImEgeFwiLFwiMThcIjpcImEgeFwiLFwiMTlcIjpcImEgeFwiLFwiMjBcIjpcImEgeFwiLFwiMjFcIjpcImEgeFwiLFwiMjJcIjpcImEgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwicFwiLFwiMy4yXCI6XCJwXCIsXCI0XCI6XCJwXCIsXCI1XCI6XCJwXCIsXCI1LjFcIjpcInBcIixcIjZcIjpcInBcIixcIjYuMVwiOlwicFwiLFwiN1wiOlwicFwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcInBcIixcIjEwLjZcIjpcInBcIixcIjExXCI6XCJwXCIsXCIxMS4xXCI6XCJwXCIsXCIxMS41XCI6XCJwXCIsXCIxMS42XCI6XCJwXCIsXCIxMlwiOlwicFwiLFwiMTIuMVwiOlwicFwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInBcIixcIjQuMC00LjFcIjpcInBcIixcIjQuMi00LjNcIjpcInBcIixcIjUuMC01LjFcIjpcInBcIixcIjYuMC02LjFcIjpcInBcIixcIjcuMC03LjFcIjpcInBcIixcIjhcIjpcImEgIzNcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInBcIixcIjIuMlwiOlwicFwiLFwiMi4zXCI6XCJwXCIsXCIzXCI6XCJwXCIsXCI0XCI6XCJwXCIsXCI0LjFcIjpcInBcIixcIjQuMi00LjNcIjpcInBcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInBcIixcIjEwXCI6XCJhIHggIzJcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcInBcIixcIjExLjFcIjpcInBcIixcIjExLjVcIjpcInBcIixcIjEyXCI6XCJwXCIsXCIxMi4xXCI6XCJwXCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInkgIzFcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInBcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e1wiMVwiOlwiUGFydGlhbCBzdXBwb3J0IGluIElFIDEwICYgMTEgcmVmZXJzIHRvIGEgbnVtYmVyIG9mIHN1YmZlYXR1cmVzIFtub3QgYmVpbmcgc3VwcG9ydGVkXShodHRwOi8vY29kZXBlbi5pby9jZW1lcmljay9wZW4vSXR5bWkpLlwiLFwiMlwiOlwiUGFydGlhbCBzdXBwb3J0IGluIEJCMTAgcmVmZXJzIHRvIGFuIFtvdXRkYXRlZCBzcGVjaWZpY2F0aW9uXShodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1dELUluZGV4ZWREQi0yMDExMDQxOS8pIGJlaW5nIGltcGxlbWVudGVkLlwiLFwiM1wiOlwiUGFydGlhbCBzdXBwb3J0IGluIGlPUyA4IHJlZmVycyB0byBbc2VyaW91c2x5IGJ1Z2d5IGJlaGF2aW9yXShodHRwOi8vd3d3LnJheW1vbmRjYW1kZW4uY29tLzIwMTQvOS8yNS9JbmRleGVkREItb24taU9TLTgtLUJyb2tlbi1CYWQpLlwifSxcInVzYWdlX3BlcmNfeVwiOjU2LjEzLFwidXNhZ2VfcGVyY19hXCI6MTIuMixcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImluZGV4ZGJcIixcImllX2lkXCI6XCJpbmRleGVkZGJcIixcImNocm9tZV9pZFwiOlwiNjUwNzQ1OTU2ODk5MjI1NlwifSxcIm9ubGluZS1zdGF0dXNcIjp7XCJ0aXRsZVwiOlwiT25saW5lL29mZmxpbmUgc3RhdHVzXCIsXCJkZXNjcmlwdGlvblwiOlwiRXZlbnRzIHRvIGluZGljYXRlIHdoZW4gdGhlIHVzZXIncyBjb25uZWN0ZWQgKGBvbmxpbmVgIGFuZCBgb2ZmbGluZWAgZXZlbnRzKSBhbmQgdGhlIGBuYXZpZ2F0b3Iub25MaW5lYCBwcm9wZXJ0eSB0byBzZWUgY3VycmVudCBzdGF0dXMuXCIsXCJzcGVjXCI6XCJodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9icm93c2Vycy5odG1sI2Jyb3dzZXItc3RhdGVcIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05hdmlnYXRvck9uTGluZS5vbkxpbmUjU3BlY2lmaWNhdGlvblwiLFwidGl0bGVcIjpcIk1ETiBhcnRpY2xlXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJKUyBBUElcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJhICMyXCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcImEgIzNcIixcIjVcIjpcImEgIzNcIixcIjZcIjpcImEgIzNcIixcIjdcIjpcImEgIzNcIixcIjhcIjpcImEgIzNcIixcIjlcIjpcImEgIzNcIixcIjEwXCI6XCJhICMzXCIsXCIxMVwiOlwiYSAjM1wiLFwiMTJcIjpcImEgIzNcIixcIjEzXCI6XCJhICMzXCIsXCIxNFwiOlwiYSAjM1wiLFwiMTVcIjpcImEgIzNcIixcIjE2XCI6XCJhICMzXCIsXCIxN1wiOlwiYSAjM1wiLFwiMThcIjpcImEgIzNcIixcIjE5XCI6XCJhICMzXCIsXCIyMFwiOlwiYSAjM1wiLFwiMjFcIjpcImEgIzNcIixcIjIyXCI6XCJhICMzXCIsXCIyM1wiOlwiYSAjM1wiLFwiMjRcIjpcImEgIzNcIixcIjI1XCI6XCJhICMzXCIsXCIyNlwiOlwiYSAjM1wiLFwiMjdcIjpcImEgIzNcIixcIjI4XCI6XCJhICMzXCIsXCIyOVwiOlwiYSAjM1wiLFwiMzBcIjpcImEgIzNcIixcIjMxXCI6XCJhICMzXCIsXCIzMlwiOlwiYSAjM1wiLFwiMzNcIjpcImEgIzNcIixcIjM0XCI6XCJhICMzXCIsXCIzNVwiOlwiYSAjM1wiLFwiMzZcIjpcImEgIzNcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcImFcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ1XCIsXCI0LjAtNC4xXCI6XCJ1XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ1XCIsXCIyLjJcIjpcInVcIixcIjIuM1wiOlwieVwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJhICMxXCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiYSAjMVwifX0sXCJub3Rlc1wiOlwiXFxcIm9ubGluZVxcXCIgZG9lcyBub3QgYWx3YXlzIG1lYW4gY29ubmVjdGlvbiB0byB0aGUgaW50ZXJuZXQsIGl0IGNhbiBhbHNvIGp1c3QgbWVhbiBjb25uZWN0aW9uIHRvIHNvbWUgbmV0d29yay5cXHJcXG5cXHJcXG5FYXJseSB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaSBhbHdheXMgcmVwb3J0ZWQgXFxcInRydWVcXFwiIGZvciBgbmF2aWdhdG9yLm9uTGluZWBcIixcIm5vdGVzX2J5X251bVwiOntcIjFcIjpcIlNlZW1zIHRvIHN1cHBvcnQgYG5hdmlnYXRvci5vbkxpbmVgIGJ1dCBub3QgYG9ubGluZWAvYG9mZmxpbmVgIGV2ZW50cy5cIixcIjJcIjpcIklFOCBvbmx5IHN1cHBvcnRzIHRoZSBgb25saW5lYC9gb2ZmbGluZWAgZXZlbnRzIG9uIGBkb2N1bWVudC5ib2R5YCwgcmF0aGVyIHRoYW4gYHdpbmRvd2AuXCIsXCIzXCI6XCJEZXNrdG9wIEZpcmVmb3ggcmVzcG9uZHMgdG8gdGhlIHN0YXR1cyBvZiBpdHMgXFxcIldvcmsgT2ZmbGluZVxcXCIgbW9kZS4gSWYgbm90IGluIHRoYXQgbW9kZSwgYG5hdmlnYXRvci5vbkxpbmVgIGluIGFsd2F5cyBgdHJ1ZWAsIHJlZ2FyZGxlc3Mgb2YgdGhlIGFjdHVhbCBuZXR3b3JrIGNvbm5lY3Rpdml0eSBzdGF0dXMuXCJ9LFwidXNhZ2VfcGVyY195XCI6NzEuODUsXCJ1c2FnZV9wZXJjX2FcIjoyMC4zOCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJldmVudHNvdXJjZVwiOntcInRpdGxlXCI6XCJTZXJ2ZXItc2VudCBldmVudHNcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgY29udGludW91c2x5IHNlbmRpbmcgZGF0YSBmcm9tIGEgc2VydmVyIHRvIHRoZSBicm93c2VyLCByYXRoZXIgdGhhbiByZXBlYXRlZGx5IHJlcXVlc3RpbmcgaXQgKEV2ZW50U291cmNlIGludGVyZmFjZSwgdXNlZCB0byBmYWxsIHVuZGVyIEhUTUw1KVwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvZXZlbnRzb3VyY2UvXCIsXCJzdGF0dXNcIjpcImNyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vdHV0b3JpYWxzL2V2ZW50c291cmNlL2Jhc2ljcy9cIixcInRpdGxlXCI6XCJIVE1MNSBSb2NrcyB0dXRvcmlhbFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9zYW1zaHVsbC5ibG9nc3BvdC5jb20vMjAxMC8xMC9hamF4LXB1c2gtaW4taW9zLXNhZmFyaS1hbmQtY2hyb21lLXdpdGguaHRtbFwiLFwidGl0bGVcIjpcIkJsb2cgcG9zdCB3aXRoIGRlbW9cIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3QvZmVhdHVyZXMuanMjbmF0aXZlLWV2ZW50c291cmNlXCIsXCJ0aXRsZVwiOlwiaGFzLmpzIHRlc3RcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJhXCIsXCI5LjUtOS42XCI6XCJhXCIsXCIxMC4wLTEwLjFcIjpcImFcIixcIjEwLjVcIjpcImFcIixcIjEwLjZcIjpcImFcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcImFcIixcIjExXCI6XCJhXCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NzAuOTEsXCJ1c2FnZV9wZXJjX2FcIjowLjA1LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwic2VydmVyc2VudCxzLXNlbnQtZXZlbnRzXCIsXCJpZV9pZFwiOlwic2VydmVyc2VudGV2ZW50c2V2ZW50c291cmNlXCIsXCJjaHJvbWVfaWRcIjpcIjUzMTE3NDA2NzM3ODU4NTZcIn0sXCJ4LWRvYy1tZXNzYWdpbmdcIjp7XCJ0aXRsZVwiOlwiQ3Jvc3MtZG9jdW1lbnQgbWVzc2FnaW5nXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHNlbmRpbmcgaW5mb3JtYXRpb24gZnJvbSBhIHBhZ2Ugb24gb25lIGRvbWFpbiB0byBhIHBhZ2Ugb24gYSBkaWZmZXJlbnQgb25lICh1c2luZyBwb3N0TWVzc2FnZSlcIixcInNwZWNcIjpcImh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9odG1sNWRlbW9zLmNvbS9wb3N0bWVzc2FnZTJcIixcInRpdGxlXCI6XCJTaW1wbGUgZGVtb1wifSx7XCJ1cmxcIjpcImh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vcGhpZ2dpbnM0Mi9oYXMuanMvbWFzdGVyL2RldGVjdC9mZWF0dXJlcy5qcyNuYXRpdmUtY3Jvc3N3aW5kb3dtZXNzYWdpbmdcIixcInRpdGxlXCI6XCJoYXMuanMgdGVzdFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2FwaXMvd2ViLW1lc3NhZ2luZy9NZXNzYWdlUG9ydC9wb3N0TWVzc2FnZVwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcImFcIixcIjlcIjpcImFcIixcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJ5XCIsXCIzLjVcIjpcInlcIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJ5XCIsXCIxMC4wLTEwLjFcIjpcInlcIixcIjEwLjVcIjpcInlcIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInlcIixcIjQuMC00LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwieVwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInlcIixcIjIuMlwiOlwieVwiLFwiMi4zXCI6XCJ5XCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJhXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJQYXJ0aWFsIHN1cHBvcnQgaW4gSUU4LTkgcmVmZXJzIHRvIG9ubHkgd29ya2luZyBpbiBmcmFtZXMvaWZyYW1lcyAobm90IG90aGVyIHRhYnMvd2luZG93cykuIEFsc28gaW4gSUUgOSBhbmQgYmVsb3cgYW4gb2JqZWN0IGNhbm5vdCBiZSBzZW50IHVzaW5nIHBvc3RNZXNzYWdlLiBQYXJ0aWFsIHN1cHBvcnQgaW4gSUUxMCByZWZlcnMgdG8gW2xpbWl0YXRpb25zIGluIGNlcnRhaW4gY29uZGl0aW9uc10oaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNjIyNjkyNC9pcy1jcm9zcy1vcmlnaW4tcG9zdG1lc3NhZ2UtYnJva2VuLWluLWllMTApXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjc5LjU2LFwidXNhZ2VfcGVyY19hXCI6MTYuNDUsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJwb3N0bWVzc2FnZVwiLFwiY2hyb21lX2lkXCI6XCI0Nzg2MTc0MTE1NzA4OTI4XCJ9LFwiZGF0YXVyaVwiOntcInRpdGxlXCI6XCJEYXRhIFVSSXNcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgZW1iZWRkaW5nIGltYWdlcyBhbmQgb3RoZXIgZmlsZXMgaW4gd2VicGFnZXMgYXMgYSBzdHJpbmcgb2YgdGV4dFwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy5pZXRmLm9yZy9yZmMvcmZjMjM5Ny50eHRcIixcInN0YXR1c1wiOlwib3RoZXJcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2Nzcy10cmlja3MuY29tLzU5NzAtZGF0YS11cmlzL1wiLFwidGl0bGVcIjpcIkluZm9ybWF0aW9uIHBhZ2VcIn0se1widXJsXCI6XCJodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL2RhdGFfVVJJX3NjaGVtZVwiLFwidGl0bGVcIjpcIldpa2lwZWRpYVwifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cud2Vic2l0ZW9wdGltaXphdGlvbi5jb20vc3BlZWQvdHdlYWsvaW5saW5lLWltYWdlcy9cIixcInRpdGxlXCI6XCJEYXRhIFVSTCBjb252ZXJ0ZXJcIn0se1widXJsXCI6XCJodHRwOi8va2xldmplcnMuY29tL3BhcGVycy9waGlzaGluZy5wZGZcIixcInRpdGxlXCI6XCJJbmZvcm1hdGlvbiBvbiBzZWN1cml0eSBpc3N1ZXNcIn1dLFwiY2F0ZWdvcmllc1wiOltcIk90aGVyXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiYVwiLFwiOVwiOlwiYVwiLFwiMTBcIjpcImFcIixcIjExXCI6XCJhXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcInlcIixcIjNcIjpcInlcIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJ5XCIsXCIzLjJcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcInlcIixcIjkuNS05LjZcIjpcInlcIixcIjEwLjAtMTAuMVwiOlwieVwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieVwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJ5XCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieVwiLFwiMi4yXCI6XCJ5XCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcImFcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlN1cHBvcnQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgOCBpcyBsaW1pdGVkIHRvIGltYWdlcyBhbmQgbGlua2VkIHJlc291cmNlcyBsaWtlIENTUyBmaWxlcywgbm90IEhUTUwgZmlsZXMuIE1heCBVUkkgbGVuZ3RoIGluIElFOCBpcyAzMktCLiBJbiBJRTkrIEphdmFTY3JpcHQgZmlsZXMgYXJlIHN1cHBvcnRlZCB0b28gYW5kIHRoZSBtYXhpbXVtIHNpemUgbGltaXQgc2V0IHRvIDRHQi5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NzkuNTksXCJ1c2FnZV9wZXJjX2FcIjoxNi40NSxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImRhdGEgdXJsLGRhdGF1cmlzLGRhdGEgdXJpLGRhdGF1cmwsZGF0YXVybHMsYmFzZTY0XCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcIm1hdGhtbFwiOntcInRpdGxlXCI6XCJNYXRoTUxcIixcImRlc2NyaXB0aW9uXCI6XCJTcGVjaWFsIHRhZ3MgdGhhdCBhbGxvdyBtYXRoZW1hdGljYWwgZm9ybXVsYXMgYW5kIG5vdGF0aW9ucyB0byBiZSB3cml0dGVuIG9uIHdlYiBwYWdlcy5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL01hdGhNTC9cIixcInN0YXR1c1wiOlwicmVjXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWF0aE1MXCIsXCJ0aXRsZVwiOlwiV2lraXBlZGlhXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy5tb3ppbGxhLm9yZy9wcm9qZWN0cy9tYXRobWwvZGVtby9cIixcInRpdGxlXCI6XCJNYXRoTUwgZGVtb3NcIn0se1widXJsXCI6XCJodHRwOi8vd3d3Lm1hdGhqYXgub3JnXCIsXCJ0aXRsZVwiOlwiQ3Jvc3MtYnJvd3NlciBzdXBwb3J0IHNjcmlwdFwifSx7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL01hdGhNTC9FbGVtZW50XCIsXCJ0aXRsZVwiOlwiTUROIGVsZW1lbnQgcmVmZXJlbmNlXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJPdGhlclwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcInBcIixcIjdcIjpcInBcIixcIjhcIjpcInBcIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJ5XCIsXCIzXCI6XCJ5XCIsXCIzLjVcIjpcInlcIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInBcIixcIjVcIjpcInBcIixcIjZcIjpcInBcIixcIjdcIjpcInBcIixcIjhcIjpcInBcIixcIjlcIjpcInBcIixcIjEwXCI6XCJwXCIsXCIxMVwiOlwicFwiLFwiMTJcIjpcInBcIixcIjEzXCI6XCJwXCIsXCIxNFwiOlwicFwiLFwiMTVcIjpcInBcIixcIjE2XCI6XCJwXCIsXCIxN1wiOlwicFwiLFwiMThcIjpcInBcIixcIjE5XCI6XCJwXCIsXCIyMFwiOlwicFwiLFwiMjFcIjpcInBcIixcIjIyXCI6XCJwXCIsXCIyM1wiOlwicFwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJwXCIsXCIyNlwiOlwicFwiLFwiMjdcIjpcInBcIixcIjI4XCI6XCJwXCIsXCIyOVwiOlwicFwiLFwiMzBcIjpcInBcIixcIjMxXCI6XCJwXCIsXCIzMlwiOlwicFwiLFwiMzNcIjpcInBcIixcIjM0XCI6XCJwXCIsXCIzNVwiOlwicFwiLFwiMzZcIjpcInBcIixcIjM3XCI6XCJwXCIsXCIzOFwiOlwicFwiLFwiMzlcIjpcInBcIixcIjQwXCI6XCJwXCIsXCI0MVwiOlwicFwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwicFwiLFwiMy4yXCI6XCJwXCIsXCI0XCI6XCJwXCIsXCI1XCI6XCJwXCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJhXCIsXCIxMC4wLTEwLjFcIjpcImFcIixcIjEwLjVcIjpcImFcIixcIjEwLjZcIjpcImFcIixcIjExXCI6XCJhXCIsXCIxMS4xXCI6XCJhXCIsXCIxMS41XCI6XCJhXCIsXCIxMS42XCI6XCJhXCIsXCIxMlwiOlwiYVwiLFwiMTIuMVwiOlwiYVwiLFwiMTVcIjpcInBcIixcIjE2XCI6XCJwXCIsXCIxN1wiOlwicFwiLFwiMThcIjpcInBcIixcIjE5XCI6XCJwXCIsXCIyMFwiOlwicFwiLFwiMjFcIjpcInBcIixcIjIyXCI6XCJwXCIsXCIyM1wiOlwicFwiLFwiMjRcIjpcInBcIixcIjI1XCI6XCJwXCIsXCIyNlwiOlwicFwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInBcIixcIjQuMC00LjFcIjpcInBcIixcIjQuMi00LjNcIjpcInBcIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwicFwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInBcIixcIjIuMlwiOlwicFwiLFwiMi4zXCI6XCJwXCIsXCIzXCI6XCJwXCIsXCI0XCI6XCJwXCIsXCI0LjFcIjpcInBcIixcIjQuMi00LjNcIjpcInBcIixcIjQuNFwiOlwicFwiLFwiNC40LjNcIjpcInBcIn0sXCJiYlwiOntcIjdcIjpcInBcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInBcIixcIjExXCI6XCJwXCIsXCIxMS4xXCI6XCJwXCIsXCIxMS41XCI6XCJwXCIsXCIxMlwiOlwicFwiLFwiMTIuMVwiOlwicFwiLFwiMjRcIjpcInBcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInBcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJhXCJ9fSxcIm5vdGVzXCI6XCJPcGVyYSdzIHN1cHBvcnQgaXMgbGltaXRlZCB0byBhIENTUyBwcm9maWxlIG9mIE1hdGhNTC4gU3VwcG9ydCB3YXMgYWRkZWQgaW4gQ2hyb21lIDI0LCBidXQgcmVtb3ZlZCBhZnRlcndhcmRzIGR1ZSB0byBpbnN0YWJpbGl0eS5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6MjQuMTIsXCJ1c2FnZV9wZXJjX2FcIjozLjQ0LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwibWF0aG1sXCIsXCJjaHJvbWVfaWRcIjpcIjUyNDA4MjIxNzM3OTQzMDRcIn0sXCJjc3MtZmVhdHVyZXF1ZXJpZXNcIjp7XCJ0aXRsZVwiOlwiQ1NTIEZlYXR1cmUgUXVlcmllc1wiLFwiZGVzY3JpcHRpb25cIjpcIkNTUyBGZWF0dXJlIFF1ZXJpZXMgYWxsb3cgYXV0aG9ycyB0byBjb25kaXRpb24gcnVsZXMgYmFzZWQgb24gd2hldGhlciBwYXJ0aWN1bGFyIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgc3VwcG9ydGVkIGluIENTUyB1c2luZyB0aGUgQHN1cHBvcnRzIGF0IHJ1bGUuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWNvbmRpdGlvbmFsLyNhdC1zdXBwb3J0c1wiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQHN1cHBvcnRzXCIsXCJ0aXRsZVwiOlwiTUROIEFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vbWNjLmlkLmF1L2Jsb2cvMjAxMi8wOC9zdXBwb3J0c1wiLFwidGl0bGVcIjpcIkBzdXBwb3J0cyBpbiBGaXJlZm94XCJ9LHtcInVybFwiOlwiaHR0cDovL2RhYmJsZXQuY29tL2dpc3QvMzg5NTc2NFwiLFwidGl0bGVcIjpcIlRlc3QgY2FzZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9hdHJ1bGVzL0BzdXBwb3J0c1wiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcIm5cIixcIjcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiU2VlIGFsc28gdGhlIFtDU1Muc3VwcG9ydHMoKSBET00gQVBJXSgjZmVhdD1jc3Mtc3VwcG9ydHMtYXBpKVwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo1NC41OSxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJzdXBwb3J0cyxjb25kaXRpb25hbFwiLFwiaWVfaWRcIjpcImNvbmRpdGlvbmFscnVsZXNcIixcImNocm9tZV9pZFwiOlwiNDk5Mzk4MTgxMzM1ODU5MlwifSxcInhodG1sXCI6e1widGl0bGVcIjpcIlhIVE1MIHNlcnZlZCBhcyBhcHBsaWNhdGlvbi94aHRtbCt4bWxcIixcImRlc2NyaXB0aW9uXCI6XCJBIHN0cmljdCBmb3JtIG9mIEhUTUwsIGFuZCBhbGxvd3MgZW1iZWRkaW5nIG9mIG90aGVyIFhNTCBsYW5ndWFnZXNcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL3hodG1sMS9cIixcInN0YXR1c1wiOlwicmVjXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWEhUTUxcIixcInRpdGxlXCI6XCJXaWtpcGVkaWFcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LnhtbHBsZWFzZS5jb20veGh0bWwveGh0bWw1cG9seWdsb3QvXCIsXCJ0aXRsZVwiOlwiSW5mb3JtYXRpb24gb24gWEhUTUw1XCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvY29uY2VwdHMvaW50ZXJuZXRfYW5kX3dlYi90aGVfd2ViX3N0YW5kYXJkc19tb2RlbCNXaGF0X2lzX1hIVE1MLjNGXCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiT3RoZXJcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwieVwiLFwiM1wiOlwieVwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInlcIixcIjMuMlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwieVwiLFwiOS41LTkuNlwiOlwieVwiLFwiMTAuMC0xMC4xXCI6XCJ5XCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ5XCIsXCI0LjAtNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcInlcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ5XCIsXCIyLjJcIjpcInlcIixcIjIuM1wiOlwieVwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiVGhlIFhIVE1MIHN5bnRheCBpcyB2ZXJ5IGNsb3NlIHRvIEhUTUwsIGFuZCB0aHVzIGlzIGFsbW9zdCBhbHdheXMgKFtpbmNvcnJlY3RseV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9YSFRNTCNNSU1FX3R5cGVfdmVyc3VzX0RPQ1RZUEUpKSBzZXJ2ZWQgYXMgdGV4dC9odG1sIG9uIHRoZSB3ZWIuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjkyLjA4LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcInhodG1sK3htbFwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJ4aHRtbHNtaWxcIjp7XCJ0aXRsZVwiOlwiWEhUTUwrU01JTCBhbmltYXRpb25cIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgdXNpbmcgU01JTCBhbmltYXRpb24gaW4gd2ViIHBhZ2VzXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9YSFRNTHBsdXNTTUlML1wiLFwic3RhdHVzXCI6XCJ1bm9mZlwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1hIVE1MJTJCU01JTFwiLFwidGl0bGVcIjpcIldpa2lwZWRpYVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9sZXVuZW4ubWUvZmFrZXNtaWxlL1wiLFwidGl0bGVcIjpcIkpTIGxpYnJhcnkgdG8gc3VwcG9ydCBYSFRNTCtTTUlMXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJPdGhlclwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcImFcIixcIjdcIjpcImFcIixcIjhcIjpcImFcIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJwXCIsXCIzXCI6XCJwXCIsXCIzLjVcIjpcInBcIixcIjMuNlwiOlwicFwiLFwiNFwiOlwicFwiLFwiNVwiOlwicFwiLFwiNlwiOlwicFwiLFwiN1wiOlwicFwiLFwiOFwiOlwicFwiLFwiOVwiOlwicFwiLFwiMTBcIjpcInBcIixcIjExXCI6XCJwXCIsXCIxMlwiOlwicFwiLFwiMTNcIjpcInBcIixcIjE0XCI6XCJwXCIsXCIxNVwiOlwicFwiLFwiMTZcIjpcInBcIixcIjE3XCI6XCJwXCIsXCIxOFwiOlwicFwiLFwiMTlcIjpcInBcIixcIjIwXCI6XCJwXCIsXCIyMVwiOlwicFwiLFwiMjJcIjpcInBcIixcIjIzXCI6XCJwXCIsXCIyNFwiOlwicFwiLFwiMjVcIjpcInBcIixcIjI2XCI6XCJwXCIsXCIyN1wiOlwicFwiLFwiMjhcIjpcInBcIixcIjI5XCI6XCJwXCIsXCIzMFwiOlwicFwiLFwiMzFcIjpcInBcIixcIjMyXCI6XCJwXCIsXCIzM1wiOlwicFwiLFwiMzRcIjpcInBcIixcIjM1XCI6XCJwXCIsXCIzNlwiOlwicFwifSxcImNocm9tZVwiOntcIjRcIjpcInBcIixcIjVcIjpcInBcIixcIjZcIjpcInBcIixcIjdcIjpcInBcIixcIjhcIjpcInBcIixcIjlcIjpcInBcIixcIjEwXCI6XCJwXCIsXCIxMVwiOlwicFwiLFwiMTJcIjpcInBcIixcIjEzXCI6XCJwXCIsXCIxNFwiOlwicFwiLFwiMTVcIjpcInBcIixcIjE2XCI6XCJwXCIsXCIxN1wiOlwicFwiLFwiMThcIjpcInBcIixcIjE5XCI6XCJwXCIsXCIyMFwiOlwicFwiLFwiMjFcIjpcInBcIixcIjIyXCI6XCJwXCIsXCIyM1wiOlwicFwiLFwiMjRcIjpcInBcIixcIjI1XCI6XCJwXCIsXCIyNlwiOlwicFwiLFwiMjdcIjpcInBcIixcIjI4XCI6XCJwXCIsXCIyOVwiOlwicFwiLFwiMzBcIjpcInBcIixcIjMxXCI6XCJwXCIsXCIzMlwiOlwicFwiLFwiMzNcIjpcInBcIixcIjM0XCI6XCJwXCIsXCIzNVwiOlwicFwiLFwiMzZcIjpcInBcIixcIjM3XCI6XCJwXCIsXCIzOFwiOlwicFwiLFwiMzlcIjpcInBcIixcIjQwXCI6XCJwXCIsXCI0MVwiOlwicFwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwicFwiLFwiMy4yXCI6XCJwXCIsXCI0XCI6XCJwXCIsXCI1XCI6XCJwXCIsXCI1LjFcIjpcInBcIixcIjZcIjpcInBcIixcIjYuMVwiOlwicFwiLFwiN1wiOlwicFwiLFwiNy4xXCI6XCJwXCIsXCI4XCI6XCJwXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJwXCIsXCI5LjUtOS42XCI6XCJwXCIsXCIxMC4wLTEwLjFcIjpcInBcIixcIjEwLjVcIjpcInBcIixcIjEwLjZcIjpcInBcIixcIjExXCI6XCJwXCIsXCIxMS4xXCI6XCJwXCIsXCIxMS41XCI6XCJwXCIsXCIxMS42XCI6XCJwXCIsXCIxMlwiOlwicFwiLFwiMTIuMVwiOlwicFwiLFwiMTVcIjpcInBcIixcIjE2XCI6XCJwXCIsXCIxN1wiOlwicFwiLFwiMThcIjpcInBcIixcIjE5XCI6XCJwXCIsXCIyMFwiOlwicFwiLFwiMjFcIjpcInBcIixcIjIyXCI6XCJwXCIsXCIyM1wiOlwicFwiLFwiMjRcIjpcInBcIixcIjI1XCI6XCJwXCIsXCIyNlwiOlwicFwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInBcIixcIjQuMC00LjFcIjpcInBcIixcIjQuMi00LjNcIjpcInBcIixcIjUuMC01LjFcIjpcInBcIixcIjYuMC02LjFcIjpcInBcIixcIjcuMC03LjFcIjpcInBcIixcIjhcIjpcInBcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwicFwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInBcIixcIjIuMlwiOlwicFwiLFwiMi4zXCI6XCJwXCIsXCIzXCI6XCJwXCIsXCI0XCI6XCJwXCIsXCI0LjFcIjpcInBcIixcIjQuMi00LjNcIjpcInBcIixcIjQuNFwiOlwicFwiLFwiNC40LjNcIjpcInBcIn0sXCJiYlwiOntcIjdcIjpcInBcIixcIjEwXCI6XCJwXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInBcIixcIjExXCI6XCJwXCIsXCIxMS4xXCI6XCJwXCIsXCIxMS41XCI6XCJwXCIsXCIxMlwiOlwicFwiLFwiMTIuMVwiOlwicFwiLFwiMjRcIjpcInBcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInBcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwicFwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJwXCJ9fSxcIm5vdGVzXCI6XCJJbnRlcm5ldCBFeHBsb3JlciBzdXBwb3J0cyB0aGUgVzNDIHByb3Bvc2FsIEhUTUwrVElNRSwgd2hpY2ggaXMgbGFyZ2VseSB0aGUgc2FtZSBhcyBYSFRNTCtTTUlMXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjAsXCJ1c2FnZV9wZXJjX2FcIjo0LjI0LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwieGh0bWxcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwid2FpLWFyaWFcIjp7XCJ0aXRsZVwiOlwiV0FJLUFSSUEgQWNjZXNzaWJpbGl0eSBmZWF0dXJlc1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBwcm92aWRpbmcgd2F5cyBmb3IgcGVvcGxlIHdpdGggZGlzYWJpbGl0aWVzIHRvIHVzZSBkeW5hbWljIHdlYiBjb250ZW50IGFuZCB3ZWIgYXBwbGljYXRpb25zLlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEvXCIsXCJzdGF0dXNcIjpcInJlY1wiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vd3d3LnczLm9yZy9XQUkvaW50cm8vYXJpYVwiLFwidGl0bGVcIjpcIkluZm9ybWF0aW9uIHBhZ2VcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LnBhY2llbGxvZ3JvdXAuY29tL2Jsb2cvMjAxMS8xMC9icm93c2VyLWFzc2lzdGl2ZS10ZWNobm9sb2d5LXRlc3RzLXJlZHV4L1wiLFwidGl0bGVcIjpcIkxpbmtzIHRvIHZhcmlvdXMgdGVzdCByZXN1bHRzXCJ9LHtcInVybFwiOlwiaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9XQUktQVJJQVwiLFwidGl0bGVcIjpcIldpa2lwZWRpYVwifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuYWxpc3RhcGFydC5jb20vYXJ0aWNsZXMvdGhlLWFjY2Vzc2liaWxpdHktb2Ytd2FpLWFyaWEvXCIsXCJ0aXRsZVwiOlwiQUxBIEFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8venVmZWx0LmNhL2Jsb2cvYXJlLXlvdS1jb25mdXNlZC1odG1sNS1hbmQtd2FpLWFyaWEteWV0XCIsXCJ0aXRsZVwiOlwiSFRNTDUvV0FJLUFSSUEgaW5mb3JtYXRpb25cIn1dLFwiY2F0ZWdvcmllc1wiOltcIk90aGVyXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcImFcIixcIjNcIjpcInlcIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiYVwiLFwiNVwiOlwiYVwiLFwiNlwiOlwiYVwiLFwiN1wiOlwiYVwiLFwiOFwiOlwiYVwiLFwiOVwiOlwiYVwiLFwiMTBcIjpcImFcIixcIjExXCI6XCJhXCIsXCIxMlwiOlwiYVwiLFwiMTNcIjpcImFcIixcIjE0XCI6XCJhXCIsXCIxNVwiOlwiYVwiLFwiMTZcIjpcImFcIixcIjE3XCI6XCJhXCIsXCIxOFwiOlwiYVwiLFwiMTlcIjpcImFcIixcIjIwXCI6XCJhXCIsXCIyMVwiOlwiYVwiLFwiMjJcIjpcImFcIixcIjIzXCI6XCJhXCIsXCIyNFwiOlwiYVwiLFwiMjVcIjpcImFcIixcIjI2XCI6XCJhXCIsXCIyN1wiOlwiYVwiLFwiMjhcIjpcImFcIixcIjI5XCI6XCJhXCIsXCIzMFwiOlwiYVwiLFwiMzFcIjpcImFcIixcIjMyXCI6XCJhXCIsXCIzM1wiOlwiYVwiLFwiMzRcIjpcImFcIixcIjM1XCI6XCJhXCIsXCIzNlwiOlwiYVwiLFwiMzdcIjpcImFcIixcIjM4XCI6XCJhXCIsXCIzOVwiOlwiYVwiLFwiNDBcIjpcImFcIixcIjQxXCI6XCJhXCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcImFcIixcIjVcIjpcImFcIixcIjUuMVwiOlwiYVwiLFwiNlwiOlwiYVwiLFwiNi4xXCI6XCJhXCIsXCI3XCI6XCJhXCIsXCI3LjFcIjpcImFcIixcIjhcIjpcImFcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcImFcIixcIjEwLjAtMTAuMVwiOlwiYVwiLFwiMTAuNVwiOlwiYVwiLFwiMTAuNlwiOlwiYVwiLFwiMTFcIjpcImFcIixcIjExLjFcIjpcImFcIixcIjExLjVcIjpcImFcIixcIjExLjZcIjpcImFcIixcIjEyXCI6XCJhXCIsXCIxMi4xXCI6XCJhXCIsXCIxNVwiOlwiYVwiLFwiMTZcIjpcImFcIixcIjE3XCI6XCJhXCIsXCIxOFwiOlwiYVwiLFwiMTlcIjpcImFcIixcIjIwXCI6XCJhXCIsXCIyMVwiOlwiYVwiLFwiMjJcIjpcImFcIixcIjIzXCI6XCJhXCIsXCIyNFwiOlwiYVwiLFwiMjVcIjpcImFcIixcIjI2XCI6XCJhXCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiYVwiLFwiNC4wLTQuMVwiOlwiYVwiLFwiNC4yLTQuM1wiOlwiYVwiLFwiNS4wLTUuMVwiOlwiYVwiLFwiNi4wLTYuMVwiOlwiYVwiLFwiNy4wLTcuMVwiOlwiYVwiLFwiOFwiOlwiYVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJhXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJhXCIsXCI0LjQuM1wiOlwiYVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiYVwiLFwiMTFcIjpcImFcIixcIjExLjFcIjpcImFcIixcIjExLjVcIjpcImFcIixcIjEyXCI6XCJhXCIsXCIxMi4xXCI6XCJhXCIsXCIyNFwiOlwiYVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwiYVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcIm5cIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjoyOS43NyxcInVzYWdlX3BlcmNfYVwiOjU3LjkzLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwid2FpLGFyaWFcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiZ2VvbG9jYXRpb25cIjp7XCJ0aXRsZVwiOlwiR2VvbG9jYXRpb25cIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgaW5mb3JtaW5nIGEgd2Vic2l0ZSBvZiB0aGUgdXNlcidzIGdlb2dyYXBoaWNhbCBsb2NhdGlvblwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvZ2VvbG9jYXRpb24tQVBJL1wiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vaHRtbDVkZW1vcy5jb20vZ2VvXCIsXCJ0aXRsZVwiOlwiU2ltcGxlIGRlbW9cIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3QvZmVhdHVyZXMuanMjbmF0aXZlLWdlb2xvY2F0aW9uXCIsXCJ0aXRsZVwiOlwiaGFzLmpzIHRlc3RcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9hcGlzL2dlb2xvY2F0aW9uXCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwicFwiLFwiN1wiOlwicFwiLFwiOFwiOlwicFwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcInBcIixcIjNcIjpcInBcIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiYVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJwXCIsXCIzLjJcIjpcInBcIixcIjRcIjpcInBcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwicFwiLFwiMTAuNVwiOlwicFwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieVwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieVwiLFwiMi4yXCI6XCJ5XCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwicFwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo4OC43MSxcInVzYWdlX3BlcmNfYVwiOjAuMDEsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJnZW9sb2NhdGlvblwiLFwiY2hyb21lX2lkXCI6XCI2MzQ4ODU1MDE2Njg1NTY4XCJ9LFwiZmxleGJveFwiOntcInRpdGxlXCI6XCJGbGV4aWJsZSBCb3ggTGF5b3V0IE1vZHVsZVwiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBwb3NpdGlvbmluZyBlbGVtZW50cyBpbiBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHN0YWNrcy5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtZmxleGJveC9cIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2Jlbm5ldHRmZWVseS5jb20vZmxleHBsb3Jlci9cIixcInRpdGxlXCI6XCJGbGV4Ym94IENTUyBnZW5lcmF0b3JcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LmFkb2JlLmNvbS9kZXZuZXQvaHRtbDUvYXJ0aWNsZXMvd29ya2luZy13aXRoLWZsZXhib3gtdGhlLW5ldy1zcGVjLmh0bWxcIixcInRpdGxlXCI6XCJBcnRpY2xlIG9uIHVzaW5nIHRoZSBsYXRlc3Qgc3BlY1wifSx7XCJ1cmxcIjpcImh0dHBzOi8vZGV2Lm9wZXJhLmNvbS9hcnRpY2xlcy92aWV3L2FkdmFuY2VkLWNyb3NzLWJyb3dzZXItZmxleGJveC9cIixcInRpdGxlXCI6XCJUdXRvcmlhbCBvbiBjcm9zcy1icm93c2VyIHN1cHBvcnRcIn0se1widXJsXCI6XCJodHRwOi8vcGhpbGlwd2FsdG9uLmdpdGh1Yi5pby9zb2x2ZWQtYnktZmxleGJveC9cIixcInRpdGxlXCI6XCJFeGFtcGxlcyBvbiBob3cgdG8gc29sdmUgY29tbW9uIGxheW91dCBwcm9ibGVtcyB3aXRoIGZsZXhib3hcIn0se1widXJsXCI6XCJodHRwOi8vY3NzLXRyaWNrcy5jb20vc25pcHBldHMvY3NzL2EtZ3VpZGUtdG8tZmxleGJveC9cIixcInRpdGxlXCI6XCJBIENvbXBsZXRlIEd1aWRlIHRvIEZsZXhib3hcIn0se1widXJsXCI6XCJodHRwOi8vdGhlLWVjaG9wbGV4Lm5ldC9mbGV4eWJveGVzL1wiLFwidGl0bGVcIjpcIkZsZXhib3ggcGxheWdyb3VuZCBhbmQgY29kZSBnZW5lcmF0b3JcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiYSB4ICMyXCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJhIHggIzFcIixcIjNcIjpcImEgeCAjMVwiLFwiMy41XCI6XCJhIHggIzFcIixcIjMuNlwiOlwiYSB4ICMxXCIsXCI0XCI6XCJhIHggIzFcIixcIjVcIjpcImEgeCAjMVwiLFwiNlwiOlwiYSB4ICMxXCIsXCI3XCI6XCJhIHggIzFcIixcIjhcIjpcImEgeCAjMVwiLFwiOVwiOlwiYSB4ICMxXCIsXCIxMFwiOlwiYSB4ICMxXCIsXCIxMVwiOlwiYSB4ICMxXCIsXCIxMlwiOlwiYSB4ICMxXCIsXCIxM1wiOlwiYSB4ICMxXCIsXCIxNFwiOlwiYSB4ICMxXCIsXCIxNVwiOlwiYSB4ICMxXCIsXCIxNlwiOlwiYSB4ICMxXCIsXCIxN1wiOlwiYSB4ICMxXCIsXCIxOFwiOlwiYSB4ICMxXCIsXCIxOVwiOlwiYSB4ICMxXCIsXCIyMFwiOlwiYSB4ICMxXCIsXCIyMVwiOlwiYSB4ICMxXCIsXCIyMlwiOlwiYSAjM1wiLFwiMjNcIjpcImEgIzNcIixcIjI0XCI6XCJhICMzXCIsXCIyNVwiOlwiYSAjM1wiLFwiMjZcIjpcImEgIzNcIixcIjI3XCI6XCJhICMzXCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiYSB4ICMxXCIsXCI1XCI6XCJhIHggIzFcIixcIjZcIjpcImEgeCAjMVwiLFwiN1wiOlwiYSB4ICMxXCIsXCI4XCI6XCJhIHggIzFcIixcIjlcIjpcImEgeCAjMVwiLFwiMTBcIjpcImEgeCAjMVwiLFwiMTFcIjpcImEgeCAjMVwiLFwiMTJcIjpcImEgeCAjMVwiLFwiMTNcIjpcImEgeCAjMVwiLFwiMTRcIjpcImEgeCAjMVwiLFwiMTVcIjpcImEgeCAjMVwiLFwiMTZcIjpcImEgeCAjMVwiLFwiMTdcIjpcImEgeCAjMVwiLFwiMThcIjpcImEgeCAjMVwiLFwiMTlcIjpcImEgeCAjMVwiLFwiMjBcIjpcImEgeCAjMVwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInkgeFwiLFwiMjdcIjpcInkgeFwiLFwiMjhcIjpcInkgeFwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcImEgeCAjMVwiLFwiMy4yXCI6XCJhIHggIzFcIixcIjRcIjpcImEgeCAjMVwiLFwiNVwiOlwiYSB4ICMxXCIsXCI1LjFcIjpcImEgeCAjMVwiLFwiNlwiOlwiYSB4ICMxXCIsXCI2LjFcIjpcInkgeFwiLFwiN1wiOlwieSB4XCIsXCI3LjFcIjpcInkgeFwiLFwiOFwiOlwieSB4XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJhIHggIzFcIixcIjQuMC00LjFcIjpcImEgeCAjMVwiLFwiNC4yLTQuM1wiOlwiYSB4ICMxXCIsXCI1LjAtNS4xXCI6XCJhIHggIzFcIixcIjYuMC02LjFcIjpcImEgeCAjMVwiLFwiNy4wLTcuMVwiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcImEgeCAjMVwiLFwiMi4yXCI6XCJhIHggIzFcIixcIjIuM1wiOlwiYSB4ICMxXCIsXCIzXCI6XCJhIHggIzFcIixcIjRcIjpcImEgeCAjMVwiLFwiNC4xXCI6XCJhIHggIzFcIixcIjQuMi00LjNcIjpcImEgeCAjMVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwiYSB4ICMxXCIsXCIxMFwiOlwieSB4XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJhIHggIzJcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcImEgeCAjMVwifX0sXCJub3Rlc1wiOlwiTW9zdCBwYXJ0aWFsIHN1cHBvcnQgcmVmZXJzIHRvIHN1cHBvcnRpbmcgYW4gW29sZGVyIHZlcnNpb25dKGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDkvV0QtY3NzMy1mbGV4Ym94LTIwMDkwNzIzLykgb2YgdGhlIHNwZWNpZmljYXRpb24gb3IgYW4gW29sZGVyIHN5bnRheF0oaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMi9XRC1jc3MzLWZsZXhib3gtMjAxMjAzMjIvKS5cIixcIm5vdGVzX2J5X251bVwiOntcIjFcIjpcIk9ubHkgc3VwcG9ydHMgdGhlIFtvbGQgZmxleGJveF0oaHR0cDovL3d3dy53My5vcmcvVFIvMjAwOS9XRC1jc3MzLWZsZXhib3gtMjAwOTA3MjMpIHNwZWNpZmljYXRpb24gYW5kIGRvZXMgbm90IHN1cHBvcnQgd3JhcHBpbmcuXCIsXCIyXCI6XCJPbmx5IHN1cHBvcnRzIHRoZSBbMjAxMiBzeW50YXhdKGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTIvV0QtY3NzMy1mbGV4Ym94LTIwMTIwMzIyLylcIixcIjNcIjpcIkRvZXMgbm90IHN1cHBvcnQgZmxleC13cmFwIG9yIGZsZXgtZmxvdyBwcm9wZXJ0aWVzXCJ9LFwidXNhZ2VfcGVyY195XCI6NzEuOTEsXCJ1c2FnZV9wZXJjX2FcIjoxNC41MyxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImZsZXgtYm94LGZsZXgtZGlyZWN0aW9uLGZsZXgtd3JhcCxmbGV4LWZsb3csZmxleC1ncm93LGZsZXgtYmFzaXNcIixcImllX2lkXCI6XCJmbGV4Ym94XCIsXCJjaHJvbWVfaWRcIjpcIjQ4MzczMDE0MDY0MDA1MTJcIn0sXCJ3ZWJnbFwiOntcInRpdGxlXCI6XCJXZWJHTCAtIDNEIENhbnZhcyBncmFwaGljc1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBnZW5lcmF0aW5nIGR5bmFtaWMgM0QgZ3JhcGhpY3MgdXNpbmcgSmF2YVNjcmlwdCwgYWNjZWxlcmF0ZWQgdGhyb3VnaCBoYXJkd2FyZVwiLFwic3BlY1wiOlwiaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvd2ViZ2wvc3BlY3MvMS4wL1wiLFwic3RhdHVzXCI6XCJvdGhlclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8va2hyb25vcy5vcmcvd2ViZ2wvd2lraS9HZXR0aW5nX2FfV2ViR0xfSW1wbGVtZW50YXRpb25cIixcInRpdGxlXCI6XCJJbnN0cnVjdGlvbnMgb24gZW5hYmxpbmcgV2ViR0xcIn0se1widXJsXCI6XCJodHRwOi8vd3d3Lmtocm9ub3Mub3JnL3dlYmdsL3dpa2kvVHV0b3JpYWxcIixcInRpdGxlXCI6XCJUdXRvcmlhbFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9oYWNrcy5tb3ppbGxhLm9yZy8yMDA5LzEyL3dlYmdsLWRyYWZ0LXJlbGVhc2VkLXRvZGF5L1wiLFwidGl0bGVcIjpcIkZpcmVmb3ggYmxvZyBwb3N0XCJ9LHtcInVybFwiOlwiaHR0cDovL3dlYmtpdC5vcmcvYmxvZy82MDMvd2ViZ2wtbm93LWF2YWlsYWJsZS1pbi13ZWJraXQtbmlnaHRsaWVzL1wiLFwidGl0bGVcIjpcIldlYmtpdCBibG9nIHBvc3RcIn0se1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vaWV3ZWJnbC9pZXdlYmdsXCIsXCJ0aXRsZVwiOlwiUG9seWZpbGwgZm9yIElFXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDYW52YXNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJwXCIsXCI3XCI6XCJwXCIsXCI4XCI6XCJwXCIsXCI5XCI6XCJwXCIsXCIxMFwiOlwicFwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcImFcIixcIjVcIjpcImFcIixcIjZcIjpcImFcIixcIjdcIjpcImFcIixcIjhcIjpcImFcIixcIjlcIjpcImFcIixcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwiLFwiMTJcIjpcImFcIixcIjEzXCI6XCJhXCIsXCIxNFwiOlwiYVwiLFwiMTVcIjpcImFcIixcIjE2XCI6XCJhXCIsXCIxN1wiOlwiYVwiLFwiMThcIjpcImFcIixcIjE5XCI6XCJhXCIsXCIyMFwiOlwiYVwiLFwiMjFcIjpcImFcIixcIjIyXCI6XCJhXCIsXCIyM1wiOlwiYVwiLFwiMjRcIjpcImFcIixcIjI1XCI6XCJhXCIsXCIyNlwiOlwiYVwiLFwiMjdcIjpcImFcIixcIjI4XCI6XCJhXCIsXCIyOVwiOlwiYVwiLFwiMzBcIjpcImFcIixcIjMxXCI6XCJhXCIsXCIzMlwiOlwiYVwiLFwiMzNcIjpcImFcIixcIjM0XCI6XCJhXCIsXCIzNVwiOlwiYVwiLFwiMzZcIjpcImFcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJhXCIsXCI5XCI6XCJhXCIsXCIxMFwiOlwiYVwiLFwiMTFcIjpcImFcIixcIjEyXCI6XCJhXCIsXCIxM1wiOlwiYVwiLFwiMTRcIjpcImFcIixcIjE1XCI6XCJhXCIsXCIxNlwiOlwiYVwiLFwiMTdcIjpcImFcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJhXCIsXCI2XCI6XCJhXCIsXCI2LjFcIjpcImFcIixcIjdcIjpcImFcIixcIjcuMVwiOlwiYVwiLFwiOFwiOlwiYVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcImFcIixcIjEyLjFcIjpcImFcIixcIjE1XCI6XCJhXCIsXCIxNlwiOlwiYVwiLFwiMTdcIjpcImFcIixcIjE4XCI6XCJhXCIsXCIxOVwiOlwiYVwiLFwiMjBcIjpcImFcIixcIjIxXCI6XCJhXCIsXCIyMlwiOlwiYVwiLFwiMjNcIjpcImFcIixcIjI0XCI6XCJhXCIsXCIyNVwiOlwiYVwiLFwiMjZcIjpcImFcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcImFcIixcIjEyLjFcIjpcImFcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJhXCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcImFcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwicFwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiU3VwcG9ydCBsaXN0ZWQgYXMgXFxcInBhcnRpYWxcXFwiIHJlZmVycyB0byB0aGUgZmFjdCB0aGF0IG5vdCBhbGwgdXNlcnMgd2l0aCB0aGVzZSBicm93c2VycyBoYXZlIFdlYkdMIGFjY2Vzcy4gVGhpcyBpcyBkdWUgdG8gdGhlIGFkZGl0aW9uYWwgcmVxdWlyZW1lbnQgZm9yIHVzZXJzIHRvIGhhdmUgW3VwIHRvIGRhdGUgdmlkZW8gZHJpdmVyc10oaHR0cDovL3d3dy5raHJvbm9zLm9yZy93ZWJnbC93aWtpL0JsYWNrbGlzdHNBbmRXaGl0ZWxpc3RzKS4gVGhpcyBwcm9ibGVtIHdhcyBbc29sdmVkIGluIENocm9tZSBvbiBXaW5kb3dzXShodHRwOi8vYmxvZy5jaHJvbWl1bS5vcmcvMjAxMi8wMi9ncHUtYWNjZWxlcmF0aW5nLTJkLWNhbnZhcy1hbmQtZW5hYmxpbmcuaHRtbCkgYXMgb2YgdmVyc2lvbiAxOC5cXHJcXG5cXHJcXG5Ob3RlIHRoYXQgV2ViR0wgaXMgcGFydCBvZiB0aGUgW0tocm9ub3MgR3JvdXBdKGh0dHA6Ly93d3cua2hyb25vcy5vcmcvd2ViZ2wvKSwgbm90IHRoZSBXM0MuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjQ1LjA3LFwidXNhZ2VfcGVyY19hXCI6MjUuMzgsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJjYW52YXNcIixcImtleXdvcmRzXCI6XCJ3ZWIgZ2xcIixcImllX2lkXCI6XCJ3ZWJnbGNhbnZhczNkLHdlYmdsaW5zdGFuY2luZ2V4dGVuc2lvblwiLFwiY2hyb21lX2lkXCI6XCI2MDQ5NTEyOTc2MDIzNTUyXCJ9LFwiZmlsZWFwaVwiOntcInRpdGxlXCI6XCJGaWxlIEFQSVwiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBtYW5pcHVsYXRpbmcgZmlsZSBvYmplY3RzIGluIHdlYiBhcHBsaWNhdGlvbnMgY2xpZW50LXNpZGUsIGFzIHdlbGwgYXMgcHJvZ3JhbW1hdGljYWxseSBzZWxlY3RpbmcgdGhlbSBhbmQgYWNjZXNzaW5nIHRoZWlyIGRhdGEuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9GaWxlQVBJL1wiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9Vc2luZ19maWxlc19mcm9tX3dlYl9hcHBsaWNhdGlvbnNcIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2FwaXMvZmlsZVwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcImFcIixcIjdcIjpcImFcIixcIjhcIjpcImFcIixcIjlcIjpcImFcIixcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwiLFwiMTJcIjpcImFcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcImFcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJhXCIsXCI0XCI6XCJhXCIsXCI0LjFcIjpcImFcIixcIjQuMi00LjNcIjpcImFcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcImFcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJQYXJ0aWFsIHN1cHBvcnQgaW4gb2xkZXIgU2FmYXJpIGFuZCBvdGhlciBXZWJLaXQgYnJvd3NlcnMgcmVmZXJzIHRvIGxhY2tpbmcgRmlsZVJlYWRlciBzdXBwb3J0LiBcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NzkuNixcInVzYWdlX3BlcmNfYVwiOjUuMTgsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJGaWxlUmVhZGVyXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcInNoYWRvd2RvbVwiOntcInRpdGxlXCI6XCJTaGFkb3cgRE9NXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGVzdGFibGlzaGluZyBhbmQgbWFpbnRhaW5pbmcgZnVuY3Rpb25hbCBib3VuZGFyaWVzIGJldHdlZW4gRE9NIHRyZWVzIGFuZCBob3cgdGhlc2UgdHJlZXMgaW50ZXJhY3Qgd2l0aCBlYWNoIG90aGVyIHdpdGhpbiBhIGRvY3VtZW50LCB0aHVzIGVuYWJsaW5nIGJldHRlciBmdW5jdGlvbmFsIGVuY2Fwc3VsYXRpb24gd2l0aGluIHRoZSBET00uXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9zaGFkb3ctZG9tL1wiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vaHRtbDUtZGVtb3MuYXBwc3BvdC5jb20vc3RhdGljL3NoYWRvd2RvbS12aXN1YWxpemVyL2luZGV4Lmh0bWxcIixcInRpdGxlXCI6XCJTaGFkb3cgRE9NIFZpc3VhbGl6ZXJcIn0se1widXJsXCI6XCJodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL3R1dG9yaWFscy93ZWJjb21wb25lbnRzL3NoYWRvd2RvbS9cIixcInRpdGxlXCI6XCJIVE1MNVJvY2tzIC0gU2hhZG93IERPTSAxMDEgYXJ0aWNsZVwifV0sXCJjYXRlZ29yaWVzXCI6W1wiRE9NXCIsXCJIVE1MNVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuIGQgIzFcIixcIjMwXCI6XCJuIGQgIzFcIixcIjMxXCI6XCJuIGQgIzFcIixcIjMyXCI6XCJuIGQgIzFcIixcIjMzXCI6XCJuIGQgIzFcIixcIjM0XCI6XCJuIGQgIzFcIixcIjM1XCI6XCJuIGQgIzFcIixcIjM2XCI6XCJuIGQgIzFcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwieSB4XCIsXCIyNlwiOlwieSB4XCIsXCIyN1wiOlwieSB4XCIsXCIyOFwiOlwieSB4XCIsXCIyOVwiOlwieSB4XCIsXCIzMFwiOlwieSB4XCIsXCIzMVwiOlwieSB4XCIsXCIzMlwiOlwieSB4XCIsXCIzM1wiOlwieSB4XCIsXCIzNFwiOlwieSB4XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInkgeFwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJ5IHhcIixcIjQuNC4zXCI6XCJ5IHhcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiblwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOntcIjFcIjpcIlN1cHBvcnRlZCBpbiBGaXJlZm94IGJlaGluZCB0aGUgYGRvbS53ZWJjb21wb25lbnRzLmVuYWJsZWRgIGZsYWcuXCJ9LFwidXNhZ2VfcGVyY195XCI6NDIuNDIsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwid2ViIGNvbXBvbmVudHNcIixcImllX2lkXCI6XCJzaGFkb3dkb211bnByZWZpeGVkXCIsXCJjaHJvbWVfaWRcIjpcIjQ1MDcyNDIwMjgwNzI5NjBcIn0sXCJ3ZWJzb2NrZXRzXCI6e1widGl0bGVcIjpcIldlYiBTb2NrZXRzXCIsXCJkZXNjcmlwdGlvblwiOlwiQmlkaXJlY3Rpb25hbCBjb21tdW5pY2F0aW9uIHRlY2hub2xvZ3kgZm9yIHdlYiBhcHBzXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi93ZWJzb2NrZXRzL1wiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vd2Vic29ja2V0Lm9yZy9hYm91dHdlYnNvY2tldC5odG1sXCIsXCJ0aXRsZVwiOlwiV2ViU29ja2V0cyBpbmZvcm1hdGlvblwifSx7XCJ1cmxcIjpcImh0dHA6Ly91cGRhdGVzLmh0bWw1cm9ja3MuY29tLzIwMTEvMDgvV2hhdC1zLWRpZmZlcmVudC1pbi10aGUtbmV3LVdlYlNvY2tldC1wcm90b2NvbFwiLFwidGl0bGVcIjpcIkRldGFpbHMgb24gbmV3ZXIgcHJvdG9jb2xcIn0se1widXJsXCI6XCJodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1dlYlNvY2tldFwiLFwidGl0bGVcIjpcIldpa2lwZWRpYVwifSx7XCJ1cmxcIjpcImh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vcGhpZ2dpbnM0Mi9oYXMuanMvbWFzdGVyL2RldGVjdC9mZWF0dXJlcy5qcyNuYXRpdmUtd2Vic29ja2V0c1wiLFwidGl0bGVcIjpcImhhcy5qcyB0ZXN0XCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvYXBpcy93ZWJzb2NrZXRcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJKUyBBUElcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcImEgIzFcIixcIjVcIjpcImEgIzFcIixcIjZcIjpcImEgeCAjMlwiLFwiN1wiOlwiYSB4ICMyXCIsXCI4XCI6XCJhIHggIzJcIixcIjlcIjpcImEgeCAjMlwiLFwiMTBcIjpcImEgeCAjMlwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiYSAjMVwiLFwiNVwiOlwiYSAjMVwiLFwiNlwiOlwiYSAjMVwiLFwiN1wiOlwiYSAjMVwiLFwiOFwiOlwiYSAjMVwiLFwiOVwiOlwiYSAjMVwiLFwiMTBcIjpcImEgIzFcIixcIjExXCI6XCJhICMxXCIsXCIxMlwiOlwiYSAjMVwiLFwiMTNcIjpcImEgIzFcIixcIjE0XCI6XCJhICMxXCIsXCIxNVwiOlwiYSAjMlwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcImEgIzFcIixcIjUuMVwiOlwiYSAjMVwiLFwiNlwiOlwiYSAjMlwiLFwiNi4xXCI6XCJhICMyXCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcImEgIzFcIixcIjExLjFcIjpcImEgIzFcIixcIjExLjVcIjpcImEgIzFcIixcIjExLjZcIjpcImEgIzFcIixcIjEyXCI6XCJhICMxXCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiYSAjMVwiLFwiNS4wLTUuMVwiOlwiYSAjMVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieSAjMVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcImEgIzFcIixcIjExLjFcIjpcImEgIzFcIixcIjExLjVcIjpcImEgIzFcIixcIjEyXCI6XCJhICMxXCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e1wiMVwiOlwiUGFydGlhbCBzdXBwb3J0IHJlZmVycyB0byB0aGUgd2Vic29ja2V0cyBpbXBsZW1lbnRhdGlvbiB1c2luZyBhbiBvbGRlciB2ZXJzaW9uIG9mIHRoZSBwcm90b2NvbCBhbmQvb3IgdGhlIGltcGxlbWVudGF0aW9uIGJlaW5nIGRpc2FibGVkIGJ5IGRlZmF1bHQgKGR1ZSB0byBzZWN1cml0eSBpc3N1ZXMgd2l0aCB0aGUgb2xkZXIgcHJvdG9jb2wpLlwiLFwiMlwiOlwiUGFydGlhbCBzdXBwb3J0IHJlZmVycyB0byBsYWNraW5nIHN1cHBvcnQgZm9yIGJpbmFyeSBkYXRhLiBcIn0sXCJ1c2FnZV9wZXJjX3lcIjo3OC45OSxcInVzYWdlX3BlcmNfYVwiOjIuMSxcInVjcHJlZml4XCI6dHJ1ZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwid2Vic29ja2V0XCIsXCJjaHJvbWVfaWRcIjpcIjY1NTUxMzgwMDA5NDUxNTJcIn0sXCJoaWRkZW5cIjp7XCJ0aXRsZVwiOlwiaGlkZGVuIGF0dHJpYnV0ZVwiLFwiZGVzY3JpcHRpb25cIjpcIlRoZSBgaGlkZGVuYCBhdHRyaWJ1dGUgbWF5IGJlIGFwcGxpZWQgdG8gYW55IGVsZW1lbnQsIGFuZCBlZmZlY3RpdmVseSBoaWRlcyBlbGVtZW50cyBzaW1pbGFyIHRvIGBkaXNwbGF5OiBub25lYCBpbiBDU1MuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9lZGl0aW5nLmh0bWwjdGhlLWhpZGRlbi1hdHRyaWJ1dGVcIixcInN0YXR1c1wiOlwicHJcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2Rhdmlkd2Fsc2gubmFtZS9odG1sNS1oaWRkZW5cIixcInRpdGxlXCI6XCJBcnRpY2xlIG9uIGhpZGRlbiBhdHRyaWJ1dGVcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkhUTUw1XCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJ5XCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlRoZSBoaWRkZW4gc3RhdGUgY2FuIGJlIGVhc2lseSBvdmVycmlkZGVuIHdpdGggYSBDU1MgYGRpc3BsYXlgIHByb3BlcnR5IHNldCB0byBhbnl0aGluZyBvdGhlciB0aGFuIGBub25lYC5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6ODUuNDYsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcInNjcmlwdC1hc3luY1wiOntcInRpdGxlXCI6XCJhc3luYyBhdHRyaWJ1dGUgZm9yIGV4dGVybmFsIHNjcmlwdHNcIixcImRlc2NyaXB0aW9uXCI6XCJUaGUgYm9vbGVhbiBhc3luYyBhdHRyaWJ1dGUgb24gc2NyaXB0IGVsZW1lbnRzIGFsbG93cyB0aGUgZXh0ZXJuYWwgSmF2YVNjcmlwdCBmaWxlIHRvIHJ1biB3aGVuIGl0J3MgYXZhaWxhYmxlLCB3aXRob3V0IGRlbGF5aW5nIHBhZ2UgbG9hZCBmaXJzdC5cIixcInNwZWNcIjpcImh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI2F0dHItc2NyaXB0LWFzeW5jXCIsXCJzdGF0dXNcIjpcImNyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0hUTUwvRWxlbWVudC9zY3JpcHQjQXR0cmlidXRlc1wiLFwidGl0bGVcIjpcIk1ETiBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL2llLm1pY3Jvc29mdC5jb20vdGVzdGRyaXZlL1BlcmZvcm1hbmNlL0FzeW5jU2NyaXB0cy9EZWZhdWx0Lmh0bWxcIixcInRpdGxlXCI6XCJEZW1vXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9waGlnZ2luczQyL2hhcy5qcy9tYXN0ZXIvZGV0ZWN0L3NjcmlwdC5qcyNzY3JpcHQtYXN5bmNcIixcInRpdGxlXCI6XCJoYXMuanMgdGVzdFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiRE9NXCIsXCJIVE1MNVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJhXCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJVc2luZyBzY3JpcHQuYXN5bmMgPSBmYWxzZTsgdG8gbWFpbnRhaW4gZXhlY3V0aW9uIG9yZGVyIGZvciBkeW5hbWljYWxseS1hZGRlZCBzY3JpcHRzIGlzbid0IHN1cHBvcnRlZCBpbiBTYWZhcmkgNS4wXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjg0LjksXCJ1c2FnZV9wZXJjX2FcIjowLjE3LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImNvcnNcIjp7XCJ0aXRsZVwiOlwiQ3Jvc3MtT3JpZ2luIFJlc291cmNlIFNoYXJpbmdcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgcGVyZm9ybWluZyBYTUxIdHRwUmVxdWVzdHMgYWNyb3NzIGRvbWFpbnNcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NvcnMvXCIsXCJzdGF0dXNcIjpcInJlY1wiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vaGFja3MubW96aWxsYS5vcmcvMjAwOS8wNy9jcm9zcy1zaXRlLXhtbGh0dHByZXF1ZXN0LXdpdGgtY29ycy9cIixcInRpdGxlXCI6XCJNb3ppbGxhIEhhY2tzIGJsb2cgcG9zdFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9jYzI4ODA2MChWUy44NSkuYXNweFwiLFwidGl0bGVcIjpcIkFsdGVybmF0aXZlIGltcGxlbWVudGF0aW9uIGJ5IElFOFwifSx7XCJ1cmxcIjpcImh0dHBzOi8vZGV2Lm9wZXJhLmNvbS9hcnRpY2xlcy92aWV3L2RvbS1hY2Nlc3MtY29udHJvbC11c2luZy1jcm9zcy1vcmlnaW4tcmVzb3VyY2Utc2hhcmluZy9cIixcInRpdGxlXCI6XCJET00gYWNjZXNzIHVzaW5nIENPUlNcIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3QvZmVhdHVyZXMuanMjbmF0aXZlLWNvcnMteGhyXCIsXCJ0aXRsZVwiOlwiaGFzLmpzIHRlc3RcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcImFcIixcIjlcIjpcImFcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcInlcIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInlcIixcIjQuMC00LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInlcIixcIjIuMlwiOlwieVwiLFwiMi4zXCI6XCJ5XCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJTdXBwb3J0ZWQgc29tZXdoYXQgaW4gSUU4IGFuZCBJRTkgdXNpbmcgdGhlIFhEb21haW5SZXF1ZXN0IG9iamVjdCAoYnV0IGhhcyBbbGltaXRhdGlvbnNdKCBodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZWludGVybmFscy9hcmNoaXZlLzIwMTAvMDUvMTMveGRvbWFpbnJlcXVlc3QtcmVzdHJpY3Rpb25zLWxpbWl0YXRpb25zLWFuZC13b3JrYXJvdW5kcy5hc3B4KSlcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6ODYuMzksXCJ1c2FnZV9wZXJjX2FcIjo2LjM1LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImNhbGNcIjp7XCJ0aXRsZVwiOlwiY2FsYygpIGFzIENTUyB1bml0IHZhbHVlXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGFsbG93aW5nIGNhbGN1bGF0ZWQgdmFsdWVzIGZvciBsZW5ndGggdW5pdHMsIGkuZS4gYHdpZHRoOiBjYWxjKDEwMCUgLSAzZW0pYFwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy12YWx1ZXMvI2NhbGNcIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2hhY2tzLm1vemlsbGEub3JnLzIwMTAvMDYvY3NzMy1jYWxjL1wiLFwidGl0bGVcIjpcIk1vemlsbGEgSGFja3MgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0NTUy8tbW96LWNhbGNcIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9mdW5jdGlvbnMvY2FsY1wiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJhXCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcInkgeFwiLFwiNVwiOlwieSB4XCIsXCI2XCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiOFwiOlwieSB4XCIsXCI5XCI6XCJ5IHhcIixcIjEwXCI6XCJ5IHhcIixcIjExXCI6XCJ5IHhcIixcIjEyXCI6XCJ5IHhcIixcIjEzXCI6XCJ5IHhcIixcIjE0XCI6XCJ5IHhcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwieSB4XCIsXCIyMFwiOlwieSB4XCIsXCIyMVwiOlwieSB4XCIsXCIyMlwiOlwieSB4XCIsXCIyM1wiOlwieSB4XCIsXCIyNFwiOlwieSB4XCIsXCIyNVwiOlwieSB4XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcInkgeFwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwieSB4XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwieSB4XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJTdXBwb3J0IGNhbiBiZSBzb21ld2hhdCBlbXVsYXRlZCBpbiBvbGRlciB2ZXJzaW9ucyBvZiBJRSB1c2luZyB0aGUgbm9uLXN0YW5kYXJkIGBleHByZXNzaW9uKClgIHN5bnRheC4gUGFydGlhbCBzdXBwb3J0IGluIElFOSByZWZlcnMgdG8gdGhlIGJyb3dzZXIgY3Jhc2hpbmcgd2hlbiB1c2VkIGFzIGEgYGJhY2tncm91bmQtcG9zaXRpb25gIHZhbHVlLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo3Ni4zMixcInVzYWdlX3BlcmNfYVwiOjIuMzksXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJjc3NjYWxjXCIsXCJjaHJvbWVfaWRcIjpcIjU3NjUyNDE0Mzg3MzIyODhcIn0sXCJydWJ5XCI6e1widGl0bGVcIjpcIlJ1YnkgYW5ub3RhdGlvblwiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBhZGRpbmcgcHJvbnVuY2lhdGlvbiBvciBvdGhlciBhbm5vdGF0aW9ucyB1c2luZyBydWJ5IGVsZW1lbnRzIChwcmltYXJpbHkgdXNlZCBpbiBFYXN0IEFzaWFuIHR5cG9ncmFwaHkpXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sLW1hcmt1cC9ydWJ5Lmh0bWxcIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2h0bWw1ZG9jdG9yLmNvbS9ydWJ5LXJ0LXJwLWVsZW1lbnQvXCIsXCJ0aXRsZVwiOlwiSFRNTDUgRG9jdG9yIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9odG1sL2VsZW1lbnRzL3J1YnlcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9hZGRvbnMubW96aWxsYS5vcmcvZmlyZWZveC9hZGRvbi8xOTM1L1wiLFwidGl0bGVcIjpcIkFkZC1vbiBcXFwiWEhUTUwgUnVieSBTdXBwb3J0XFxcIiBmb3IgRmlyZWZveFwifSx7XCJ1cmxcIjpcImh0dHBzOi8vYWRkb25zLm1vemlsbGEub3JnL2ZpcmVmb3gvYWRkb24vNjgxMi9cIixcInRpdGxlXCI6XCJBZGRvbiBcXFwiSFRNTCBSdWJ5XFxcIiBmb3IgRmlyZWZveCBzdXBwb3J0XCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJIVE1MNVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcImFcIixcIjZcIjpcImFcIixcIjdcIjpcImFcIixcIjhcIjpcImFcIixcIjlcIjpcImFcIixcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJwXCIsXCIzXCI6XCJwXCIsXCIzLjVcIjpcInBcIixcIjMuNlwiOlwicFwiLFwiNFwiOlwicFwiLFwiNVwiOlwicFwiLFwiNlwiOlwicFwiLFwiN1wiOlwicFwiLFwiOFwiOlwicFwiLFwiOVwiOlwicFwiLFwiMTBcIjpcInBcIixcIjExXCI6XCJwXCIsXCIxMlwiOlwicFwiLFwiMTNcIjpcInBcIixcIjE0XCI6XCJwXCIsXCIxNVwiOlwicFwiLFwiMTZcIjpcInBcIixcIjE3XCI6XCJwXCIsXCIxOFwiOlwicFwiLFwiMTlcIjpcInBcIixcIjIwXCI6XCJwXCIsXCIyMVwiOlwicFwiLFwiMjJcIjpcInBcIixcIjIzXCI6XCJwXCIsXCIyNFwiOlwicFwiLFwiMjVcIjpcInBcIixcIjI2XCI6XCJwXCIsXCIyN1wiOlwicFwiLFwiMjhcIjpcInBcIixcIjI5XCI6XCJwXCIsXCIzMFwiOlwicFwiLFwiMzFcIjpcInBcIixcIjMyXCI6XCJwXCIsXCIzM1wiOlwicFwiLFwiMzRcIjpcInBcIixcIjM1XCI6XCJwXCIsXCIzNlwiOlwicFwifSxcImNocm9tZVwiOntcIjRcIjpcInBcIixcIjVcIjpcImFcIixcIjZcIjpcImFcIixcIjdcIjpcImFcIixcIjhcIjpcImFcIixcIjlcIjpcImFcIixcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwiLFwiMTJcIjpcImFcIixcIjEzXCI6XCJhXCIsXCIxNFwiOlwiYVwiLFwiMTVcIjpcImFcIixcIjE2XCI6XCJhXCIsXCIxN1wiOlwiYVwiLFwiMThcIjpcImFcIixcIjE5XCI6XCJhXCIsXCIyMFwiOlwiYVwiLFwiMjFcIjpcImFcIixcIjIyXCI6XCJhXCIsXCIyM1wiOlwiYVwiLFwiMjRcIjpcImFcIixcIjI1XCI6XCJhXCIsXCIyNlwiOlwiYVwiLFwiMjdcIjpcImFcIixcIjI4XCI6XCJhXCIsXCIyOVwiOlwiYVwiLFwiMzBcIjpcImFcIixcIjMxXCI6XCJhXCIsXCIzMlwiOlwiYVwiLFwiMzNcIjpcImFcIixcIjM0XCI6XCJhXCIsXCIzNVwiOlwiYVwiLFwiMzZcIjpcImFcIixcIjM3XCI6XCJhXCIsXCIzOFwiOlwiYVwiLFwiMzlcIjpcImFcIixcIjQwXCI6XCJhXCIsXCI0MVwiOlwiYVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwicFwiLFwiMy4yXCI6XCJwXCIsXCI0XCI6XCJwXCIsXCI1XCI6XCJhXCIsXCI1LjFcIjpcImFcIixcIjZcIjpcImFcIixcIjYuMVwiOlwiYVwiLFwiN1wiOlwiYVwiLFwiNy4xXCI6XCJhXCIsXCI4XCI6XCJhXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJwXCIsXCI5LjUtOS42XCI6XCJwXCIsXCIxMC4wLTEwLjFcIjpcInBcIixcIjEwLjVcIjpcInBcIixcIjEwLjZcIjpcInBcIixcIjExXCI6XCJwXCIsXCIxMS4xXCI6XCJwXCIsXCIxMS41XCI6XCJwXCIsXCIxMS42XCI6XCJwXCIsXCIxMlwiOlwicFwiLFwiMTIuMVwiOlwicFwiLFwiMTVcIjpcImFcIixcIjE2XCI6XCJhXCIsXCIxN1wiOlwiYVwiLFwiMThcIjpcImFcIixcIjE5XCI6XCJhXCIsXCIyMFwiOlwiYVwiLFwiMjFcIjpcImFcIixcIjIyXCI6XCJhXCIsXCIyM1wiOlwiYVwiLFwiMjRcIjpcImFcIixcIjI1XCI6XCJhXCIsXCIyNlwiOlwiYVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInBcIixcIjQuMC00LjFcIjpcInBcIixcIjQuMi00LjNcIjpcInBcIixcIjUuMC01LjFcIjpcImFcIixcIjYuMC02LjFcIjpcImFcIixcIjcuMC03LjFcIjpcImFcIixcIjhcIjpcImFcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwicFwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInBcIixcIjIuMlwiOlwicFwiLFwiMi4zXCI6XCJwXCIsXCIzXCI6XCJhXCIsXCI0XCI6XCJhXCIsXCI0LjFcIjpcImFcIixcIjQuMi00LjNcIjpcImFcIixcIjQuNFwiOlwiYVwiLFwiNC40LjNcIjpcImFcIn0sXCJiYlwiOntcIjdcIjpcInBcIixcIjEwXCI6XCJhXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInBcIixcIjExXCI6XCJwXCIsXCIxMS4xXCI6XCJwXCIsXCIxMS41XCI6XCJwXCIsXCIxMlwiOlwicFwiLFwiMTIuMVwiOlwicFwiLFwiMjRcIjpcImFcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcImFcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwicFwifSxcImllX21vYlwiOntcIjEwXCI6XCJhXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJhXCJ9fSxcIm5vdGVzXCI6XCJCcm93c2VycyB3aXRob3V0IG5hdGl2ZSBzdXBwb3J0IGNhbiBzdGlsbCBzaW11bGF0ZSBzdXBwb3J0IHVzaW5nIENTUy4gUGFydGlhbCBzdXBwb3J0IHJlZmVycyB0byBvbmx5IHN1cHBvcnRpbmcgYmFzaWMgcnVieSwgbWF5IHN0aWxsIGJlIG1pc3Npbmcgd3JpdGluZy1tb2RlLCBDb21wbGV4IHJ1YnkgYW5kIENTUzMgUnVieVwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjowLFwidXNhZ2VfcGVyY19hXCI6NzguNDMsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiY3NzLW9wYWNpdHlcIjp7XCJ0aXRsZVwiOlwiQ1NTMyBPcGFjaXR5XCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHNldHRpbmcgdGhlIHRyYW5zcGFyZW5jeSBsZXZlbCBvZiBhbiBlbGVtZW50XCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWNvbG9yL1wiLFwic3RhdHVzXCI6XCJyZWNcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL3d3dy5jc3MzZmlsZXMuY29tL2NvbG9yLyNvcGFjaXR5XCIsXCJ0aXRsZVwiOlwiSW5mb3JtYXRpb24gcGFnZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9wcm9wZXJ0aWVzL29wYWNpdHlcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1MzXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiYVwiLFwiNlwiOlwiYVwiLFwiN1wiOlwiYVwiLFwiOFwiOlwiYVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcInlcIixcIjNcIjpcInlcIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJ5XCIsXCIzLjJcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcInlcIixcIjkuNS05LjZcIjpcInlcIixcIjEwLjAtMTAuMVwiOlwieVwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieVwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJ5XCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieVwiLFwiMi4yXCI6XCJ5XCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlRyYW5zcGFyZW5jeSBmb3IgZWxlbWVudHMgaW4gSUU4IGFuZCBvbGRlciBjYW4gYmUgYWNoaWV2ZWQgdXNpbmcgdGhlIHByb3ByaWV0YXJ5IFxcXCJmaWx0ZXJcXFwiIHByb3BlcnR5IGFuZCBkb2VzIG5vdCB3b3JrIHdlbGwgd2l0aCBQTkcgaW1hZ2VzIHVzaW5nIGFscGhhIHRyYW5zcGFyZW5jeS5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6OTIuMDgsXCJ1c2FnZV9wZXJjX2FcIjo0LjI1LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwidHJhbnNwYXJlbnQsdHJhbnNwYXJlbmN5LGFscGhhXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImZvcm0tdmFsaWRhdGlvblwiOntcInRpdGxlXCI6XCJGb3JtIHZhbGlkYXRpb25cIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2Ygc2V0dGluZyByZXF1aXJlZCBmaWVsZHMgYW5kIGZpZWxkIHR5cGVzIHdpdGhvdXQgcmVxdWlyaW5nIEphdmFTY3JpcHRcIixcInNwZWNcIjpcImh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2xpZW50LXNpZGUtZm9ybS12YWxpZGF0aW9uXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2h0bWwvYXR0cmlidXRlcy9yZXF1aXJlZFwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkhUTUw1XCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcImFcIixcIjUuMVwiOlwiYVwiLFwiNlwiOlwiYVwiLFwiNi4xXCI6XCJhXCIsXCI3XCI6XCJhXCIsXCI3LjFcIjpcImFcIixcIjhcIjpcImFcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwieVwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcImFcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlBhcnRpYWwgc3VwcG9ydCBpbiBTYWZhcmkgcmVmZXJzIHRvIGxhY2sgb2Ygbm90aWNlIHdoZW4gZm9ybSB3aXRoIHJlcXVpcmVkIGZpZWxkcyBpcyBhdHRlbXB0ZWQgdG8gYmUgc3VibWl0dGVkLiBQYXJ0aWFsIHN1cHBvcnQgaW4gSUUxMCBtb2JpbGUgcmVmZXJzIHRvIGxhY2sgb2Ygd2FybmluZyB3aGVuIGJsb2NraW5nIHN1Ym1pc3Npb24uXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjY3Ljk0LFwidXNhZ2VfcGVyY19hXCI6My44NCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcImZvcm1zXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIjYwOTE4MTM4NDA0ODY0MDBcIn0sXCJoaXN0b3J5XCI6e1widGl0bGVcIjpcIlNlc3Npb24gaGlzdG9yeSBtYW5hZ2VtZW50XCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIG1hbmlwdWxhdGluZyB0aGUgdXNlcidzIGJyb3dzZXIncyBzZXNzaW9uIGhpc3RvcnkgaW4gSmF2YVNjcmlwdCB1c2luZyBoaXN0b3J5LnB1c2hTdGF0ZSwgaGlzdG9yeS5yZXBsYWNlU3RhdGUgYW5kIHRoZSBwb3BzdGF0ZSBldmVudFwiLFwic3BlY1wiOlwiaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvYnJvd3NlcnMuaHRtbCNkb20taGlzdG9yeS1wdXNoc3RhdGVcIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL3d3dy5hZGVxdWF0ZWx5Z29vZC5jb20vMjAxMC83L1NhbmVyLUhUTUw1LUhpc3RvcnktTWFuYWdlbWVudFwiLFwidGl0bGVcIjpcIkludHJvZHVjdGlvbiB0byBoaXN0b3J5IG1hbmFnZW1lbnRcIn0se1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vTWFuaXB1bGF0aW5nX3RoZV9icm93c2VyX2hpc3RvcnlcIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9odG1sNWRlbW9zLmNvbS9oaXN0b3J5XCIsXCJ0aXRsZVwiOlwiRGVtbyBwYWdlXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2Jyb3dzZXJzdGF0ZS9oaXN0b3J5LmpzXCIsXCJ0aXRsZVwiOlwiSGlzdG9yeS5qcyBwb2x5ZmlsbCBcIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3QvZmVhdHVyZXMuanMjbmF0aXZlLWhpc3Rvcnktc3RhdGVcIixcInRpdGxlXCI6XCJoYXMuanMgdGVzdFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2RvbS9IaXN0b3J5XCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiSFRNTDVcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiYVwiLFwiNS4xXCI6XCJhXCIsXCI2XCI6XCJhXCIsXCI2LjFcIjpcImFcIixcIjdcIjpcImFcIixcIjcuMVwiOlwiYVwiLFwiOFwiOlwiYVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJhXCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcInlcIixcIjIuM1wiOlwieVwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiYVwifX0sXCJub3Rlc1wiOlwiT2xkZXIgaU9TIHZlcnNpb25zIGFuZCBBbmRyb2lkIDQuMC40IGNsYWltIHN1cHBvcnQsIGJ1dCBpbXBsZW1lbnRhdGlvbiBpcyB0b28gYnVnZ3kgdG8gYmUgdXNlZnVsLiBQYXJ0aWFsIHN1cHBvcnQgaW4gb3RoZXIgU2FmYXJpIGJyb3dzZXJzIHJlZmVycyB0byBvdGhlciBidWdneSBiZWhhdmlvci5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NzcuMyxcInVzYWdlX3BlcmNfYVwiOjYuNTEsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJvbnB1c2hzdGF0ZSxvbnJlcGxhY2VzdGF0ZVwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJqc29uXCI6e1widGl0bGVcIjpcIkpTT04gcGFyc2luZ1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBjb252ZXJ0aW5nIEphdmFTY3JpcHQgb2JqZWN0cyB0byBKU09OIHN0cmluZ3MgYW5kIEpTT04gYmFjayB0byBvYmplY3RzIHVzaW5nIEpTT04uc3RyaW5naWZ5KCkgYW5kIEpTT04ucGFyc2UoKVwiLFwic3BlY1wiOlwiaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMTJcIixcInN0YXR1c1wiOlwib3RoZXJcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvRW4vVXNpbmdfbmF0aXZlX0pTT05cIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuanNvbi5vcmcvanMuaHRtbFwiLFwidGl0bGVcIjpcIkpTT04gaW4gSlMgKGluY2x1ZGVzIHNjcmlwdCB3L3N1cHBvcnQpXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9waGlnZ2luczQyL2hhcy5qcy9tYXN0ZXIvZGV0ZWN0L2pzb24uanMjanNvblwiLFwidGl0bGVcIjpcImhhcy5qcyB0ZXN0XCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvYXBpcy9qc29uXCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJ5XCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieVwiLFwiMi4yXCI6XCJ5XCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlJlcXVpcmVzIGRvY3VtZW50IHRvIGJlIGluIElFOCsgW3N0YW5kYXJkcyBtb2RlXShodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvY2MyODgzMjUlMjhWUy44NSUyOS5hc3B4KSB0byB3b3JrIGluIElFOC5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6OTUuOTIsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImNsYXNzbGlzdFwiOntcInRpdGxlXCI6XCJjbGFzc0xpc3QgKERPTVRva2VuTGlzdCApXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGVhc2lseSBtYW5pcHVsYXRpbmcgY2xhc3NlcyBvbiBlbGVtZW50cywgdXNpbmcgdGhlIERPTVRva2VuTGlzdCBvYmplY3QuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9kb20vI2RvbS1lbGVtZW50LWNsYXNzbGlzdFwiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vaGFja3MubW96aWxsYS5vcmcvMjAxMC8wMS9jbGFzc2xpc3QtaW4tZmlyZWZveC0zLTYvXCIsXCJ0aXRsZVwiOlwiTW96aWxsYSBIYWNrcyBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2VsaWdyZXkvY2xhc3NMaXN0LmpzXCIsXCJ0aXRsZVwiOlwiUG9seWZpbGwgc2NyaXB0XCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvZG9tL0VsZW1lbnQvY2xhc3NMaXN0XCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuc2l0ZXBvaW50LmNvbS9leHBsb3JpbmctY2xhc3NsaXN0LWFwaS9cIixcInRpdGxlXCI6XCJTaXRlUG9pbnQgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9hdXJlbGlvLmF1ZGVyby5pdC9kZW1vL2NsYXNzbGlzdC1hcGktZGVtby5odG1sXCIsXCJ0aXRsZVwiOlwiRGVtbyB1c2luZyBjbGFzc0xpc3RcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkRPTVwiLFwiSFRNTDVcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJwXCIsXCI2XCI6XCJwXCIsXCI3XCI6XCJwXCIsXCI4XCI6XCJwXCIsXCI5XCI6XCJwXCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwicFwiLFwiM1wiOlwicFwiLFwiMy41XCI6XCJwXCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJwXCIsXCI1XCI6XCJwXCIsXCI2XCI6XCJwXCIsXCI3XCI6XCJwXCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInBcIixcIjMuMlwiOlwicFwiLFwiNFwiOlwicFwiLFwiNVwiOlwicFwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwicFwiLFwiOS41LTkuNlwiOlwicFwiLFwiMTAuMC0xMC4xXCI6XCJwXCIsXCIxMC41XCI6XCJwXCIsXCIxMC42XCI6XCJwXCIsXCIxMVwiOlwicFwiLFwiMTEuMVwiOlwicFwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJwXCIsXCI0LjAtNC4xXCI6XCJwXCIsXCI0LjItNC4zXCI6XCJwXCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcInBcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJwXCIsXCIyLjJcIjpcInBcIixcIjIuM1wiOlwicFwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJwXCIsXCIxMVwiOlwicFwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjg1LjIzLFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJ0ZXh0LW92ZXJmbG93XCI6e1widGl0bGVcIjpcIkNTUzMgVGV4dC1vdmVyZmxvd1wiLFwiZGVzY3JpcHRpb25cIjpcIkFwcGVuZCBlbGxpcHNpcyB3aGVuIHRleHQgb3ZlcmZsb3dzIGl0cyBjb250YWluaW5nIGVsZW1lbnRcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdWkvI3RleHQtb3ZlcmZsb3cwXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9ybW9yc2UvQXV0b0VsbGlwc2lzXCIsXCJ0aXRsZVwiOlwialF1ZXJ5IHBvbHlmaWxsIGZvciBGaXJlZm94XCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvRW4vQ1NTL1RleHQtb3ZlcmZsb3dcIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuY3NzM2ZpbGVzLmNvbS90ZXh0L1wiLFwidGl0bGVcIjpcIkluZm9ybWF0aW9uIHBhZ2VcIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3QvY3NzLmpzI2Nzcy10ZXh0LW92ZXJmbG93XCIsXCJ0aXRsZVwiOlwiaGFzLmpzIHRlc3RcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvcHJvcGVydGllcy90ZXh0LW92ZXJmbG93XCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTM1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJwXCIsXCIzXCI6XCJwXCIsXCIzLjVcIjpcInBcIixcIjMuNlwiOlwicFwiLFwiNFwiOlwicFwiLFwiNVwiOlwicFwiLFwiNlwiOlwicFwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwieVwiLFwiMy4yXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJ5IHhcIixcIjkuNS05LjZcIjpcInkgeFwiLFwiMTAuMC0xMC4xXCI6XCJ5IHhcIixcIjEwLjVcIjpcInkgeFwiLFwiMTAuNlwiOlwieSB4XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ5XCIsXCI0LjAtNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcInlcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ5XCIsXCIyLjJcIjpcInlcIixcIjIuM1wiOlwieVwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJ5IHhcIixcIjExXCI6XCJ5IHhcIixcIjExLjFcIjpcInkgeFwiLFwiMTEuNVwiOlwieSB4XCIsXCIxMlwiOlwieSB4XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo5Ni4wNSxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJ0ZXh0b3ZlcmZsb3csZWxsaXBzaXNcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwid2VibVwiOntcInRpdGxlXCI6XCJXZWJNIHZpZGVvIGZvcm1hdFwiLFwiZGVzY3JpcHRpb25cIjpcIk11bHRpbWVkaWEgZm9ybWF0IGRlc2lnbmVkIHRvIHByb3ZpZGUgYSByb3lhbHR5LWZyZWUsIGhpZ2gtcXVhbGl0eSBvcGVuIHZpZGVvIGNvbXByZXNzaW9uIGZvcm1hdCBmb3IgdXNlIHdpdGggSFRNTDUgdmlkZW8uIFdlYk0gc3VwcG9ydHMgdGhlIHZpZGVvIGNvZGVjIFZQOCBhbmQgVlA5LlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53ZWJtcHJvamVjdC5vcmcvXCIsXCJzdGF0dXNcIjpcIm90aGVyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vdG9vbHMuZ29vZ2xlLmNvbS9kbHBhZ2Uvd2VibW1mXCIsXCJ0aXRsZVwiOlwiQ29kZWMgZm9yIElFOSBzdXBwb3J0XCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy5icm9rZW4tbGlua3MuY29tLzIwMTAvMDkvMDEvcGxheWluZy13ZWJtLWluLXNhZmFyaS13aXRoLXBsdWdpbnMvXCIsXCJ0aXRsZVwiOlwiSW5mbyBvbiBzdXBwb3J0aW5nIFdlYk0gaW4gU2FmYXJpXCJ9LHtcInVybFwiOlwiaHR0cDovL3dlYm1wcm9qZWN0Lm9yZ1wiLFwidGl0bGVcIjpcIk9mZmljaWFsIHdlYnNpdGVcIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3QvdmlkZW8uanMjdmlkZW8td2VibVwiLFwidGl0bGVcIjpcImhhcy5qcyB0ZXN0XCJ9LHtcInVybFwiOlwiaHR0cDovL3Blcmlhbi5vcmcvXCIsXCJ0aXRsZVwiOlwiUGVyaWFuIDpNYWMgT1NYIFdlYm0gQ29kZWMgaW5zdGFsbFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiT3RoZXJcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJwXCIsXCIxMFwiOlwicFwiLFwiMTFcIjpcInBcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcImFcIixcIjVcIjpcImFcIixcIjZcIjpcImFcIixcIjdcIjpcImFcIixcIjhcIjpcImFcIixcIjlcIjpcImFcIixcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwiLFwiMTJcIjpcImFcIixcIjEzXCI6XCJhXCIsXCIxNFwiOlwiYVwiLFwiMTVcIjpcImFcIixcIjE2XCI6XCJhXCIsXCIxN1wiOlwiYVwiLFwiMThcIjpcImFcIixcIjE5XCI6XCJhXCIsXCIyMFwiOlwiYVwiLFwiMjFcIjpcImFcIixcIjIyXCI6XCJhXCIsXCIyM1wiOlwiYVwiLFwiMjRcIjpcImFcIixcIjI1XCI6XCJhXCIsXCIyNlwiOlwiYVwiLFwiMjdcIjpcImFcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJhXCIsXCI3XCI6XCJhXCIsXCI4XCI6XCJhXCIsXCI5XCI6XCJhXCIsXCIxMFwiOlwiYVwiLFwiMTFcIjpcImFcIixcIjEyXCI6XCJhXCIsXCIxM1wiOlwiYVwiLFwiMTRcIjpcImFcIixcIjE1XCI6XCJhXCIsXCIxNlwiOlwiYVwiLFwiMTdcIjpcImFcIixcIjE4XCI6XCJhXCIsXCIxOVwiOlwiYVwiLFwiMjBcIjpcImFcIixcIjIxXCI6XCJhXCIsXCIyMlwiOlwiYVwiLFwiMjNcIjpcImFcIixcIjI0XCI6XCJhXCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwicFwiLFwiNFwiOlwicFwiLFwiNVwiOlwicFwiLFwiNS4xXCI6XCJwXCIsXCI2XCI6XCJwXCIsXCI2LjFcIjpcInBcIixcIjdcIjpcInBcIixcIjcuMVwiOlwicFwiLFwiOFwiOlwicFwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJhXCIsXCIxMVwiOlwiYVwiLFwiMTEuMVwiOlwiYVwiLFwiMTEuNVwiOlwiYVwiLFwiMTEuNlwiOlwiYVwiLFwiMTJcIjpcImFcIixcIjEyLjFcIjpcImFcIixcIjE1XCI6XCJhXCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiYVwiLFwiM1wiOlwiYVwiLFwiNFwiOlwiYVwiLFwiNC4xXCI6XCJhXCIsXCI0LjItNC4zXCI6XCJhXCIsXCI0LjRcIjpcImFcIixcIjQuNC4zXCI6XCJhXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJhXCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwicFwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiV2lsbCB3b3JrIGluIElFOSsgYW5kIFNhZmFyaS9NYWNPU1ggcHJvdmlkZWQgdGhlIHVzZXIgaGFzIHRoZSBXZWJNIGNvZGVjcyBpbnN0YWxsZWQuIFBhcnRpYWwgc3VwcG9ydCBpbmRpY2F0ZXMgdGhhdCBhdCBsZWFzdCBvbmUgY29kZWMgaXMgc3VwcG9ydGVkIGJ1dCBub3QgYWxsLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo1NS41LFwidXNhZ2VfcGVyY19hXCI6OS40NixcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcInZpZGVvXCIsXCJrZXl3b3Jkc1wiOlwibWF0cm9za2FcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiNjM2MjE4NjU5NTE3MjM1MlwifSxcIm1wZWc0XCI6e1widGl0bGVcIjpcIk1QRUctNC9ILjI2NCB2aWRlbyBmb3JtYXRcIixcImRlc2NyaXB0aW9uXCI6XCJDb21tb25seSB1c2VkIHZpZGVvIGNvbXByZXNzaW9uIGZvcm1hdCAobm90IHJveWFsdHktZnJlZSlcIixcInNwZWNcIjpcImh0dHA6Ly9pcC5oaGkuZGUvaW1hZ2Vjb21fRzEvYXNzZXRzL3BkZnMvY3N2dF9vdmVydmlld18wMzA1LnBkZlwiLFwic3RhdHVzXCI6XCJvdGhlclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0guMjY0L01QRUctNF9BVkNcIixcInRpdGxlXCI6XCJXaWtpcGVkaWEgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuaW50ZXJvcGVyYWJpbGl0eWJyaWRnZXMuY29tL2h0bWw1LWV4dGVuc2lvbi1mb3Itd21wLXBsdWdpblwiLFwidGl0bGVcIjpcIkZpcmVmb3ggZXh0ZW5zaW9uIGFsbG93aW5nIHN1cHBvcnQgaW4gV2luN1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiT3RoZXJcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcImFcIixcIjIyXCI6XCJhXCIsXCIyM1wiOlwiYVwiLFwiMjRcIjpcImFcIixcIjI1XCI6XCJhXCIsXCIyNlwiOlwiYVwiLFwiMjdcIjpcImFcIixcIjI4XCI6XCJhXCIsXCIyOVwiOlwiYVwiLFwiMzBcIjpcImFcIixcIjMxXCI6XCJhXCIsXCIzMlwiOlwiYVwiLFwiMzNcIjpcImFcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ5XCIsXCI0LjAtNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJhXCIsXCIyLjJcIjpcImFcIixcIjIuM1wiOlwiYVwiLFwiM1wiOlwiYVwiLFwiNFwiOlwiYVwiLFwiNC4xXCI6XCJhXCIsXCI0LjItNC4zXCI6XCJhXCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcImFcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiYVwifX0sXCJub3Rlc1wiOlwiVGhlIEFuZHJvaWQgMi4zIGJyb3dzZXIgY3VycmVudGx5IHJlcXVpcmVzIFtzcGVjaWZpYyBoYW5kbGluZ10oaHR0cDovL3d3dy5icm9rZW4tbGlua3MuY29tLzIwMTAvMDcvMDgvbWFraW5nLWh0bWw1LXZpZGVvLXdvcmstb24tYW5kcm9pZC1waG9uZXMvKSB0byBwbGF5IHZpZGVvc1xcclxcblxcclxcbkZpcmVmb3ggc3VwcG9ydHMgSC4yNjQgb24gV2luZG93cyA3IGFuZCBsYXRlciBzaW5jZSB2ZXJzaW9uIDIxLiBGaXJlZm94IHN1cHBvcnRzIEguMjY0IG9uIExpbnV4IHNpbmNlIHZlcnNpb24gMjYgaWYgdGhlIGFwcHJvcHJpYXRlIGdzdHJlYW1lciBwbHVnLWlucyBhcmUgaW5zdGFsbGVkLlxcclxcblxcclxcblBhcnRpYWwgc3VwcG9ydCBmb3IgRmlyZWZveCByZWZlcnMgdG8gdGhlIGxhY2sgb2Ygc3VwcG9ydCBpbiBPU1ggJiBzb21lIExpbnV4IHBsYXRmb3JtcywgZm9yIEFuZHJvaWQgRmlyZWZveCBpdCByZWZlcnMgdG8gdGhlIGluYWJpbGl0eSBvZiBoYXJkd2FyZSBhY2NlbGVyYXRpb24uXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjY2LjM5LFwidXNhZ2VfcGVyY19hXCI6MjAuNjEsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJ2aWRlb1wiLFwia2V5d29yZHNcIjpcImF2YyxtcDQsbXB2LG1vdixhYWMsaDI2NFwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJvZ3ZcIjp7XCJ0aXRsZVwiOlwiT2dnL1RoZW9yYSB2aWRlbyBmb3JtYXRcIixcImRlc2NyaXB0aW9uXCI6XCJGcmVlIGxvc3N5IHZpZGVvIGNvbXByZXNzaW9uIGZvcm1hdC5cIixcInNwZWNcIjpcImh0dHA6Ly90aGVvcmEub3JnL2RvYy9cIixcInN0YXR1c1wiOlwib3RoZXJcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9UaGVvcmFcIixcInRpdGxlXCI6XCJXaWtpcGVkaWEgYXJ0aWNsZVwifV0sXCJjYXRlZ29yaWVzXCI6W1wiT3RoZXJcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJwXCIsXCIxMFwiOlwicFwiLFwiMTFcIjpcInBcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcIm5cIixcIjcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJuXCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJuXCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwicFwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjUwLjY5LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcInZpZGVvXCIsXCJrZXl3b3Jkc1wiOlwieGlwaFwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJ3b3Jkd3JhcFwiOntcInRpdGxlXCI6XCJDU1MzIE92ZXJmbG93LXdyYXBcIixcImRlc2NyaXB0aW9uXCI6XCJBbGxvd3MgbGluZXMgdG8gYmUgYnJva2VuIHdpdGhpbiB3b3JkcyBpZiBhbiBvdGhlcndpc2UgdW5icmVha2FibGUgc3RyaW5nIGlzIHRvbyBsb25nIHRvIGZpdC4gQ3VycmVudGx5IG1vc3RseSBzdXBwb3J0ZWQgdXNpbmcgdGhlIGB3b3JkLXdyYXBgIHByb3BlcnR5LlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy10ZXh0LyNvdmVyZmxvdy13cmFwXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL0VuL0NTUy9Xb3JkLXdyYXBcIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuY3NzM2ZpbGVzLmNvbS90ZXh0LyN3b3Jkd3JhcFwiLFwidGl0bGVcIjpcIkluZm9ybWF0aW9uIHBhZ2VcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvcHJvcGVydGllcy93b3JkLXdyYXBcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1MzXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiYVwiLFwiNlwiOlwiYVwiLFwiN1wiOlwiYVwiLFwiOFwiOlwiYVwiLFwiOVwiOlwiYVwiLFwiMTBcIjpcImFcIixcIjExXCI6XCJhXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiYVwiLFwiMy42XCI6XCJhXCIsXCI0XCI6XCJhXCIsXCI1XCI6XCJhXCIsXCI2XCI6XCJhXCIsXCI3XCI6XCJhXCIsXCI4XCI6XCJhXCIsXCI5XCI6XCJhXCIsXCIxMFwiOlwiYVwiLFwiMTFcIjpcImFcIixcIjEyXCI6XCJhXCIsXCIxM1wiOlwiYVwiLFwiMTRcIjpcImFcIixcIjE1XCI6XCJhXCIsXCIxNlwiOlwiYVwiLFwiMTdcIjpcImFcIixcIjE4XCI6XCJhXCIsXCIxOVwiOlwiYVwiLFwiMjBcIjpcImFcIixcIjIxXCI6XCJhXCIsXCIyMlwiOlwiYVwiLFwiMjNcIjpcImFcIixcIjI0XCI6XCJhXCIsXCIyNVwiOlwiYVwiLFwiMjZcIjpcImFcIixcIjI3XCI6XCJhXCIsXCIyOFwiOlwiYVwiLFwiMjlcIjpcImFcIixcIjMwXCI6XCJhXCIsXCIzMVwiOlwiYVwiLFwiMzJcIjpcImFcIixcIjMzXCI6XCJhXCIsXCIzNFwiOlwiYVwiLFwiMzVcIjpcImFcIixcIjM2XCI6XCJhXCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiYVwiLFwiNVwiOlwiYVwiLFwiNlwiOlwiYVwiLFwiN1wiOlwiYVwiLFwiOFwiOlwiYVwiLFwiOVwiOlwiYVwiLFwiMTBcIjpcImFcIixcIjExXCI6XCJhXCIsXCIxMlwiOlwiYVwiLFwiMTNcIjpcImFcIixcIjE0XCI6XCJhXCIsXCIxNVwiOlwiYVwiLFwiMTZcIjpcImFcIixcIjE3XCI6XCJhXCIsXCIxOFwiOlwiYVwiLFwiMTlcIjpcImFcIixcIjIwXCI6XCJhXCIsXCIyMVwiOlwiYVwiLFwiMjJcIjpcImFcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJhXCIsXCIzLjJcIjpcImFcIixcIjRcIjpcImFcIixcIjVcIjpcImFcIixcIjUuMVwiOlwiYVwiLFwiNlwiOlwiYVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiYVwiLFwiMTAuNlwiOlwiYVwiLFwiMTFcIjpcImFcIixcIjExLjFcIjpcImFcIixcIjExLjVcIjpcImFcIixcIjExLjZcIjpcImFcIixcIjEyXCI6XCJhXCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiYVwiLFwiNC4wLTQuMVwiOlwiYVwiLFwiNC4yLTQuM1wiOlwiYVwiLFwiNS4wLTUuMVwiOlwiYVwiLFwiNi4wLTYuMVwiOlwiYVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJhXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiYVwiLFwiMi4yXCI6XCJhXCIsXCIyLjNcIjpcImFcIixcIjNcIjpcImFcIixcIjRcIjpcImFcIixcIjQuMVwiOlwiYVwiLFwiNC4yLTQuM1wiOlwiYVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwiYVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiYVwiLFwiMTFcIjpcImFcIixcIjExLjFcIjpcImFcIixcIjExLjVcIjpcImFcIixcIjEyXCI6XCJhXCIsXCIxMi4xXCI6XCJhXCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJhXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcImFcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcImFcIn19LFwibm90ZXNcIjpcIlBhcnRpYWwgc3VwcG9ydCByZWZlcnMgdG8gcmVxdWlyaW5nIHRoZSBsZWdhY3kgbmFtZSBcXFwid29yZC13cmFwXFxcIiAocmF0aGVyIHRoYW4gb3ZlcmZsb3ctd3JhcCkgdG8gd29yay5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NTIuNDEsXCJ1c2FnZV9wZXJjX2FcIjo0My44MSxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIndvcmR3cmFwLHdvcmQtd3JhcFwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJwcm9ncmVzc21ldGVyXCI6e1widGl0bGVcIjpcIlByb2dyZXNzICYgTWV0ZXJcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgaW5kaWNhdGluZyBhIHByb2dyZXNzIHN0YXRlIChwcm9ncmVzcyBlbGVtZW50KSBvciB0aGUgY3VycmVudCBsZXZlbCBvZiBhIGdhdWdlIChtZXRlciBlbGVtZW50KS5cXHJcXG5cIixcInNwZWNcIjpcImh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjdGhlLXByb2dyZXNzLWVsZW1lbnRcIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXYub3BlcmEuY29tL2FydGljbGVzL25ldy1mb3JtLWZlYXR1cmVzLWluLWh0bWw1LyNuZXdvdXRwdXRcIixcInRpdGxlXCI6XCJEZXYuT3BlcmEgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9odG1sNWRvY3Rvci5jb20vbWVhc3VyZS11cC13aXRoLXRoZS1tZXRlci10YWcvXCIsXCJ0aXRsZVwiOlwiSFRNTDUgRG9jdG9yIG9uIG1ldGVyIGVsZW1lbnQgXCJ9LHtcInVybFwiOlwiaHR0cDovL3BldGVyLnNoL2V4YW1wbGVzLz8vaHRtbC9tZXRlci1wcm9ncmVzcy5odG1sXCIsXCJ0aXRsZVwiOlwiRXhhbXBsZXMgb2YgcHJvZ3Jlc3MgYW5kIG1ldGVyIGVsZW1lbnRzXCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvaHRtbC9lbGVtZW50cy9wcm9ncmVzc1wiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkhUTUw1XCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcImFcIixcIjExXCI6XCJhXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJhXCIsXCI3XCI6XCJhXCIsXCI4XCI6XCJhXCIsXCI5XCI6XCJhXCIsXCIxMFwiOlwiYVwiLFwiMTFcIjpcImFcIixcIjEyXCI6XCJhXCIsXCIxM1wiOlwiYVwiLFwiMTRcIjpcImFcIixcIjE1XCI6XCJhXCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwiYVwiLFwiOFwiOlwiYVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcImFcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlBhcnRpYWwgc3VwcG9ydCBpbiBGaXJlZm94IDYtMTUsIElFMTAgJiBpT1M3IFNhZmFyaSByZWZlcnMgdG8gc3VwcG9ydGluZyB0aGUgcHJvZ3Jlc3MgZWxlbWVudCwgYnV0IG5vdCB0aGUgbWV0ZXIgZWxlbWVudC4gaU9TNyBTYWZhcmkgYWxzbyBkb2VzIG5vdCBzdXBwb3J0IFxcXCJpbmRldGVybWluYXRlXFxcIiBwcm9ncmVzcyBlbGVtZW50cy5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NjIuMjUsXCJ1c2FnZV9wZXJjX2FcIjoxNy42OCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcImZvcm1zXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcIm9iamVjdC1maXRcIjp7XCJ0aXRsZVwiOlwiQ1NTMyBvYmplY3QtZml0L29iamVjdC1wb3NpdGlvblwiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBzcGVjaWZ5aW5nIGhvdyBhbiBvYmplY3QgKGltYWdlIG9yIHZpZGVvKSBzaG91bGQgZml0IGluc2lkZSBpdHMgYm94LiBvYmplY3QtZml0IG9wdGlvbnMgaW5jbHVkZSBcXFwiY29udGFpblxcXCIgKGZpdCBhY2NvcmRpbmcgdG8gYXNwZWN0IHJhdGlvKSwgXFxcImZpbGxcXFwiIChzdHJldGNoZXMgb2JqZWN0IHRvIGZpbGwpIGFuZCBcXFwiY292ZXJcXFwiIChvdmVyZmxvd3MgYm94IGJ1dCBtYWludGFpbnMgcmF0aW8pLCB3aGVyZSBvYmplY3QtcG9zaXRpb24gYWxsb3dzIHRoZSBvYmplY3QgdG8gYmUgcmVwb3NpdGlvbmVkIGxpa2UgYmFja2dyb3VuZC1pbWFnZSBkb2VzLlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1pbWFnZXMvXCIsXCJzdGF0dXNcIjpcImNyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2Lm9wZXJhLmNvbS9hcnRpY2xlcy92aWV3L2NzczMtb2JqZWN0LWZpdC1vYmplY3QtcG9zaXRpb24vXCIsXCJ0aXRsZVwiOlwiRGV2Lk9wZXJhIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvcHJvcGVydGllcy9vYmplY3QtZml0XCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifSx7XCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9hbnNlbG1oL29iamVjdC1maXRcIixcInRpdGxlXCI6XCJvYmplY3QtZml0IEphdmFTY3JpcHQtUG9seWZpbGxcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJ1XCIsXCIzNVwiOlwidVwiLFwiMzZcIjpcInVcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuXCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcIm5cIixcIjcuMVwiOlwiYSAjMVwiLFwiOFwiOlwiYSAjMVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJ5IHhcIixcIjExXCI6XCJ5IHhcIixcIjExLjFcIjpcInkgeFwiLFwiMTEuNVwiOlwieSB4XCIsXCIxMS42XCI6XCJ5IHhcIixcIjEyXCI6XCJ5IHhcIixcIjEyLjFcIjpcInkgeFwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcImEgIzFcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwieSB4XCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwiblwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcInkgeFwiLFwiMTEuMVwiOlwieSB4XCIsXCIxMS41XCI6XCJ5IHhcIixcIjEyXCI6XCJ5IHhcIixcIjEyLjFcIjpcInkgeFwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiblwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOntcIjFcIjpcIlBhcnRpYWwgc3VwcG9ydCBpbiBTYWZhcmkgcmVmZXJzIHRvIHN1cHBvcnQgZm9yIGBvYmplY3QtZml0YCBidXQgbm90IGBvYmplY3QtcG9zaXRpb25gLlwifSxcInVzYWdlX3BlcmNfeVwiOjQzLjE0LFwidXNhZ2VfcGVyY19hXCI6MS44MSxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIm9iamVjdGZpdCxvYmplY3Rwb3NpdGlvblwiLFwiaWVfaWRcIjpcIm9iamVjdGZpdGFuZG9iamVjdHBvc2l0aW9uXCIsXCJjaHJvbWVfaWRcIjpcIjUzMDI2Njk3MDI4NTY3MDRcIn0sXCJ4aHIyXCI6e1widGl0bGVcIjpcIlhNTEh0dHBSZXF1ZXN0IDJcIixcImRlc2NyaXB0aW9uXCI6XCJBZGRzIG1vcmUgZnVuY3Rpb25hbGl0eSB0byBBSkFYIHJlcXVlc3RzIGxpa2UgZmlsZSB1cGxvYWRzLCB0cmFuc2ZlciBwcm9ncmVzcyBpbmZvcm1hdGlvbiBhbmQgdGhlIGFiaWxpdHkgdG8gc2VuZCBmb3JtIGRhdGEuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9YTUxIdHRwUmVxdWVzdDIvXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL1hNTEh0dHBSZXF1ZXN0L0Zvcm1EYXRhXCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGUgb24gRm9ybURhdGFcIn0se1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vM25yMWMvalVyaS5qc1wiLFwidGl0bGVcIjpcIlBvbHlmaWxsIGZvciBGb3JtRGF0YSBvYmplY3RcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9hcGlzL3hoci9YTUxIdHRwUmVxdWVzdFwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkRPTVwiLFwiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiYVwiLFwiMy42XCI6XCJhXCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwidVwiLFwiNVwiOlwidVwiLFwiNlwiOlwidVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo4NS4yOCxcInVzYWdlX3BlcmNfYVwiOjAuMTMsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJmb3JtZGF0YVwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJtaW5tYXh3aFwiOntcInRpdGxlXCI6XCJDU1MgbWluL21heC13aWR0aC9oZWlnaHRcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2Ygc2V0dGluZyBhIG1pbmltdW0gb3IgbWF4aW11bSB3aWR0aCBvciBoZWlnaHQgdG8gYW4gZWxlbWVudC4gXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS92aXN1ZGV0Lmh0bWwjbWluLW1heC13aWR0aHNcIixcInN0YXR1c1wiOlwicmVjXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9pZTctanMvXCIsXCJ0aXRsZVwiOlwiSlMgbGlicmFyeSB3aXRoIHN1cHBvcnRcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvcHJvcGVydGllcy9taW4td2lkdGhcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy5pbXByZXNzaXZld2Vicy5jb20vbWluLW1heC13aWR0aC1oZWlnaHQtY3NzL1wiLFwidGl0bGVcIjpcIkNTUyBCYXNpY3MgcG9zdFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTMlwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcInBcIixcIjZcIjpcInBcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJ5XCIsXCIzXCI6XCJ5XCIsXCIzLjVcIjpcInlcIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwieVwiLFwiMy4yXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJ5XCIsXCI5LjUtOS42XCI6XCJ5XCIsXCIxMC4wLTEwLjFcIjpcInlcIixcIjEwLjVcIjpcInlcIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInlcIixcIjQuMC00LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwieVwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInlcIixcIjIuMlwiOlwieVwiLFwiMi4zXCI6XCJ5XCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJJRTcgZG9lcyBub3Qgc3VwcG9ydCBcXFwiaW5oZXJpdFxcXCIgYXMgYSB2YWx1ZSBvbiBhbnkgb2YgdGhlc2UgcHJvcGVydGllcy4gSUU4IGhhcyBzb21lIGJ1Z3Mgd2l0aCBtYXgtd2lkdGgvaGVpZ2h0IGNvbWJpbmVkIHdpdGggb3ZlcmZsb3c6IGF1dG8vc2Nyb2xsLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo5Ni4xNCxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJtaW4td2lkdGgsbWluLWhlaWdodCxtYXgtd2lkdGgsbWF4LWhlaWdodFwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJkZXRhaWxzXCI6e1widGl0bGVcIjpcIkRldGFpbHMgJiBTdW1tYXJ5IGVsZW1lbnRzXCIsXCJkZXNjcmlwdGlvblwiOlwiVGhlIDxkZXRhaWxzPiBlbGVtZW50IGdlbmVyYXRlcyBhIHNpbXBsZSBuby1KYXZhU2NyaXB0IHdpZGdldCB0byBzaG93L2hpZGUgZWxlbWVudCBjb250ZW50cywgb3B0aW9uYWxseSBieSBjbGlja2luZyBvbiBpdHMgY2hpbGQgPHN1bW1hcnk+IGVsZW1lbnQuXCIsXCJzcGVjXCI6XCJodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI3RoZS1kZXRhaWxzLWVsZW1lbnRcIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2h0bWw1LWRldGFpbHMtanF1ZXJ5XCIsXCJ0aXRsZVwiOlwialF1ZXJ5IGZhbGxiYWNrIHNjcmlwdFwifSx7XCJ1cmxcIjpcImh0dHBzOi8vZ2lzdC5naXRodWIuY29tLzM3MDU5MFwiLFwidGl0bGVcIjpcIkZhbGxiYWNrIHNjcmlwdFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9odG1sNWRvY3Rvci5jb20vc3VtbWFyeS1maWdjYXB0aW9uLWVsZW1lbnQvXCIsXCJ0aXRsZVwiOlwiSFRNTDUgRG9jdG9yIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3QvZmVhdHVyZXMuanMjbmF0aXZlLWRldGFpbHNcIixcInRpdGxlXCI6XCJoYXMuanMgdGVzdFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2h0bWwvZWxlbWVudHMvZGV0YWlsc1wiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkhUTUw1XCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwicFwiLFwiN1wiOlwicFwiLFwiOFwiOlwicFwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcInBcIixcIjMuNVwiOlwicFwiLFwiMy42XCI6XCJwXCIsXCI0XCI6XCJwXCIsXCI1XCI6XCJwXCIsXCI2XCI6XCJwXCIsXCI3XCI6XCJwXCIsXCI4XCI6XCJwXCIsXCI5XCI6XCJwXCIsXCIxMFwiOlwicFwiLFwiMTFcIjpcInBcIixcIjEyXCI6XCJwXCIsXCIxM1wiOlwicFwiLFwiMTRcIjpcInBcIixcIjE1XCI6XCJwXCIsXCIxNlwiOlwicFwiLFwiMTdcIjpcInBcIixcIjE4XCI6XCJwXCIsXCIxOVwiOlwicFwiLFwiMjBcIjpcInBcIixcIjIxXCI6XCJwXCIsXCIyMlwiOlwicFwiLFwiMjNcIjpcInBcIixcIjI0XCI6XCJwXCIsXCIyNVwiOlwicFwiLFwiMjZcIjpcInBcIixcIjI3XCI6XCJwXCIsXCIyOFwiOlwicFwiLFwiMjlcIjpcInBcIixcIjMwXCI6XCJwXCIsXCIzMVwiOlwicFwiLFwiMzJcIjpcInBcIixcIjMzXCI6XCJwXCIsXCIzNFwiOlwicFwiLFwiMzVcIjpcInBcIixcIjM2XCI6XCJwXCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwicFwiLFwiNVwiOlwicFwiLFwiNlwiOlwicFwiLFwiN1wiOlwicFwiLFwiOFwiOlwicFwiLFwiOVwiOlwicFwiLFwiMTBcIjpcInBcIixcIjExXCI6XCJwXCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJwXCIsXCIzLjJcIjpcInBcIixcIjRcIjpcInBcIixcIjVcIjpcInBcIixcIjUuMVwiOlwicFwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcInBcIixcIjkuNS05LjZcIjpcInBcIixcIjEwLjAtMTAuMVwiOlwicFwiLFwiMTAuNVwiOlwicFwiLFwiMTAuNlwiOlwicFwiLFwiMTFcIjpcInBcIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwicFwiLFwiNC4wLTQuMVwiOlwicFwiLFwiNC4yLTQuM1wiOlwicFwiLFwiNS4wLTUuMVwiOlwicFwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJwXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwicFwiLFwiMi4yXCI6XCJwXCIsXCIyLjNcIjpcInBcIixcIjNcIjpcInBcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwicFwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwicFwiLFwiMTFcIjpcInBcIixcIjExLjFcIjpcInBcIixcIjExLjVcIjpcInBcIixcIjEyXCI6XCJwXCIsXCIxMi4xXCI6XCJwXCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJuXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo2MC42OSxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJkZXRhaWxzc3VtbWFyeVwiLFwiY2hyb21lX2lkXCI6XCI1MzQ4MDI0NTU3NTAyNDY0XCJ9LFwidGV4dC1zdHJva2VcIjp7XCJ0aXRsZVwiOlwiQ1NTIHRleHQtc3Ryb2tlXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGRlY2xhcmluZyB0aGUgb3V0bGluZSAoc3Ryb2tlKSB3aWR0aCBhbmQgY29sb3IgZm9yIHRleHQuXCIsXCJzcGVjXCI6XCJodHRwOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L3NhZmFyaS9kb2N1bWVudGF0aW9uL2FwcGxlYXBwbGljYXRpb25zL3JlZmVyZW5jZS9TYWZhcmlDU1NSZWYvQXJ0aWNsZXMvU3RhbmRhcmRDU1NQcm9wZXJ0aWVzLmh0bWwjLy9hcHBsZV9yZWYvZG9jL3VpZC9UUDMwMDAxMjY2LV93ZWJraXRfdGV4dF9zdHJva2VcIixcInN0YXR1c1wiOlwidW5vZmZcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2Nzcy10cmlja3MuY29tLzc0MDUtYWRkaW5nLXN0cm9rZS10by13ZWItdGV4dC9cIixcInRpdGxlXCI6XCJJbmZvcm1hdGlvbiAmIHdvcmthcm91bmRzXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy53ZXN0Y2l2LmNvbS90b29scy90ZXh0U3Ryb2tlL1wiLFwidGl0bGVcIjpcIkxpdmUgZWRpdG9yXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1NcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJ1XCIsXCIzNVwiOlwidVwiLFwiMzZcIjpcInVcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5IHhcIixcIjVcIjpcInkgeFwiLFwiNlwiOlwieSB4XCIsXCI3XCI6XCJ5IHhcIixcIjhcIjpcInkgeFwiLFwiOVwiOlwieSB4XCIsXCIxMFwiOlwieSB4XCIsXCIxMVwiOlwieSB4XCIsXCIxMlwiOlwieSB4XCIsXCIxM1wiOlwieSB4XCIsXCIxNFwiOlwieSB4XCIsXCIxNVwiOlwieSB4XCIsXCIxNlwiOlwieSB4XCIsXCIxN1wiOlwieSB4XCIsXCIxOFwiOlwieSB4XCIsXCIxOVwiOlwieSB4XCIsXCIyMFwiOlwieSB4XCIsXCIyMVwiOlwieSB4XCIsXCIyMlwiOlwieSB4XCIsXCIyM1wiOlwieSB4XCIsXCIyNFwiOlwieSB4XCIsXCIyNVwiOlwieSB4XCIsXCIyNlwiOlwieSB4XCIsXCIyN1wiOlwieSB4XCIsXCIyOFwiOlwieSB4XCIsXCIyOVwiOlwieSB4XCIsXCIzMFwiOlwieSB4XCIsXCIzMVwiOlwieSB4XCIsXCIzMlwiOlwieSB4XCIsXCIzM1wiOlwieSB4XCIsXCIzNFwiOlwieSB4XCIsXCIzNVwiOlwieSB4XCIsXCIzNlwiOlwieSB4XCIsXCIzN1wiOlwieSB4XCIsXCIzOFwiOlwieSB4XCIsXCIzOVwiOlwieSB4XCIsXCI0MFwiOlwieSB4XCIsXCI0MVwiOlwieSB4XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJ5IHhcIixcIjMuMlwiOlwieSB4XCIsXCI0XCI6XCJ5IHhcIixcIjVcIjpcInkgeFwiLFwiNS4xXCI6XCJ5IHhcIixcIjZcIjpcInkgeFwiLFwiNi4xXCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiNy4xXCI6XCJ5IHhcIixcIjhcIjpcInkgeFwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJhIHhcIixcIjQuMC00LjFcIjpcInkgeFwiLFwiNC4yLTQuM1wiOlwieSB4XCIsXCI1LjAtNS4xXCI6XCJ5IHhcIixcIjYuMC02LjFcIjpcInkgeFwiLFwiNy4wLTcuMVwiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInkgeFwiLFwiMi4yXCI6XCJ5IHhcIixcIjIuM1wiOlwieSB4XCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJ5IHhcIixcIjQuMVwiOlwieSB4XCIsXCI0LjItNC4zXCI6XCJ5IHhcIixcIjQuNFwiOlwieSB4XCIsXCI0LjQuM1wiOlwieSB4XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5IHhcIixcIjEwXCI6XCJ5IHhcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwieSB4XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5IHhcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiblwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJEb2VzIG5vdCB5ZXQgYXBwZWFyIGluIGFueSBXM0Mgc3BlY2lmaWNhdGlvbi4gV2FzIGJyaWVmbHkgaW5jbHVkZWQgaW4gYSBzcGVjIGFzIHRoZSBcXFwidGV4dC1vdXRsaW5lXFxcIiBwcm9wZXJ0eSwgYnV0IHRoaXMgd2FzIHJlbW92ZWQuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjU5LjYyLFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcInRleHRzdHJva2Usc3Ryb2tlLWNvbG9yLHN0cm9rZS13aWR0aCxmaWxsLWNvbG9yXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImlubGluZS1ibG9ja1wiOntcInRpdGxlXCI6XCJDU1MgaW5saW5lLWJsb2NrXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGRpc3BsYXlpbmcgYW4gZWxlbWVudCBhcyBhIGJsb2NrIHdoaWxlIGZsb3dpbmcgaXQgd2l0aCB0ZXh0LiBcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3Zpc3VyZW4uaHRtbCNmaXhlZC1wb3NpdGlvbmluZ1wiLFwic3RhdHVzXCI6XCJyZWNcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL3JvYmVydG55bWFuLmNvbS8yMDEwLzAyLzI0L2Nzcy1kaXNwbGF5LWlubGluZS1ibG9jay13aHktaXQtcm9ja3MtYW5kLXdoeS1pdC1zdWNrcy9cIixcInRpdGxlXCI6XCJCbG9nIHBvc3Qgdy9pbmZvXCJ9LHtcInVybFwiOlwiaHR0cDovL2Jsb2cubW96aWxsYS5jb20vd2ViZGV2LzIwMDkvMDIvMjAvY3Jvc3MtYnJvd3Nlci1pbmxpbmUtYmxvY2svXCIsXCJ0aXRsZVwiOlwiSW5mbyBvbiBjcm9zcyBicm93c2VyIHN1cHBvcnRcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvcHJvcGVydGllcy9kaXNwbGF5XCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTMlwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcImFcIixcIjZcIjpcImFcIixcIjdcIjpcImFcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJhIHhcIixcIjNcIjpcInlcIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJ5XCIsXCIzLjJcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcInlcIixcIjkuNS05LjZcIjpcInlcIixcIjEwLjAtMTAuMVwiOlwieVwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieVwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJ5XCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieVwiLFwiMi4yXCI6XCJ5XCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIk9ubHkgc3VwcG9ydGVkIGluIElFNiBhbmQgSUU3IG9uIGVsZW1lbnRzIHdpdGggYSBkaXNwbGF5IG9mIFxcXCJpbmxpbmVcXFwiIGJ5IGRlZmF1bHQuIFtBbHRlcm5hdGl2ZSBwcm9wZXJ0aWVzXShodHRwOi8vYmxvZy5tb3ppbGxhLmNvbS93ZWJkZXYvMjAwOS8wMi8yMC9jcm9zcy1icm93c2VyLWlubGluZS1ibG9jay8pIGFyZSBhdmFpbGFibGUgdG8gcHJvdmlkZSBjb21wbGV0ZSBjcm9zcy1icm93c2VyIHN1cHBvcnQuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjk2LjAzLFwidXNhZ2VfcGVyY19hXCI6MC4zLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiaW5saW5lYmxvY2tcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwibm90aWZpY2F0aW9uc1wiOntcInRpdGxlXCI6XCJXZWIgTm90aWZpY2F0aW9uc1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBhbGVydGluZyB0aGUgdXNlciBvdXRzaWRlIG9mIGEgd2ViIHBhZ2UgYnkgZGlzcGxheWluZyBub3RpZmljYXRpb25zICh0aGF0IGRvIG5vdCByZXF1aXJlIGludGVyYWN0aW9uIGJ5IHRoZSB1c2VyKS5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL25vdGlmaWNhdGlvbnMvXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vdHV0b3JpYWxzL25vdGlmaWNhdGlvbnMvcXVpY2svXCIsXCJ0aXRsZVwiOlwiSFRNTDUgUm9ja3MgdHV0b3JpYWxcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LmNocm9taXVtLm9yZy9kZXZlbG9wZXJzL2Rlc2lnbi1kb2N1bWVudHMvZGVza3RvcC1ub3RpZmljYXRpb25zL2FwaS1zcGVjaWZpY2F0aW9uXCIsXCJ0aXRsZVwiOlwiQ2hyb21pdW0gQVBJXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9hZGRvbnMubW96aWxsYS5vcmcvZW4tdXMvZmlyZWZveC9hZGRvbi8yMjE1MjMvXCIsXCJ0aXRsZVwiOlwiQWRkLW9uIFwifSx7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9ub3RpZmljYXRpb25cIixcInRpdGxlXCI6XCJNRE4gTm90aWZpY2F0aW9uc1wifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuc2l0ZXBvaW50LmNvbS9pbnRyb2R1Y3Rpb24td2ViLW5vdGlmaWNhdGlvbnMtYXBpL1wiLFwidGl0bGVcIjpcIlNpdGVQb2ludCBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL2F1cmVsaW8uYXVkZXJvLml0L2RlbW8vd2ViLW5vdGlmaWNhdGlvbnMtYXBpLWRlbW8uaHRtbFwiLFwidGl0bGVcIjpcIkRlbW9cIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcImEgeFwiLFwiNlwiOlwiYSB4XCIsXCI3XCI6XCJhIHhcIixcIjhcIjpcImEgeFwiLFwiOVwiOlwiYSB4XCIsXCIxMFwiOlwiYSB4XCIsXCIxMVwiOlwiYSB4XCIsXCIxMlwiOlwiYSB4XCIsXCIxM1wiOlwiYSB4XCIsXCIxNFwiOlwiYSB4XCIsXCIxNVwiOlwiYSB4XCIsXCIxNlwiOlwiYSB4XCIsXCIxN1wiOlwiYSB4XCIsXCIxOFwiOlwiYSB4XCIsXCIxOVwiOlwiYSB4XCIsXCIyMFwiOlwiYSB4XCIsXCIyMVwiOlwiYSB4XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcImEgeFwiLFwiNC40LjNcIjpcImEgeFwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwiYSB4XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJuXCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjQ3LjUyLFwidXNhZ2VfcGVyY19hXCI6Mi40MSxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIndlYm5vdGlmaWNhdGlvbnNcIixcImNocm9tZV9pZFwiOlwiNTA2NDM1MDU1NzUzNjI1NlwifSxcInN0cmVhbVwiOntcInRpdGxlXCI6XCJnZXRVc2VyTWVkaWEvU3RyZWFtIEFQSVwiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBhY2Nlc3NpbmcgZXh0ZXJuYWwgZGV2aWNlIGRhdGEgKHN1Y2ggYXMgYSB3ZWJjYW0gdmlkZW8gc3RyZWFtKS4gRm9ybWVybHkgdGhpcyB3YXMgZW52aXNpb25lZCBhcyB0aGUgPGRldmljZT4gZWxlbWVudC5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL21lZGlhY2FwdHVyZS1zdHJlYW1zL1wiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2Rldi5vcGVyYS5jb20vYmxvZy93ZWJjYW0tb3JpZW50YXRpb24tcHJldmlldy9cIixcInRpdGxlXCI6XCJUZWNobm9sb2d5IHByZXZpZXcgZnJvbSBPcGVyYVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2RvbS9OYXZpZ2F0b3IvZ2V0VXNlck1lZGlhXCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiSFRNTDVcIixcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIixcIjI3XCI6XCJ5IHhcIixcIjI4XCI6XCJ5IHhcIixcIjI5XCI6XCJ5IHhcIixcIjMwXCI6XCJ5IHhcIixcIjMxXCI6XCJ5IHhcIixcIjMyXCI6XCJ5IHhcIixcIjMzXCI6XCJ5IHhcIixcIjM0XCI6XCJ5IHhcIixcIjM1XCI6XCJ5IHhcIixcIjM2XCI6XCJ5IHhcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIixcIjI3XCI6XCJ5IHhcIixcIjI4XCI6XCJ5IHhcIixcIjI5XCI6XCJ5IHhcIixcIjMwXCI6XCJ5IHhcIixcIjMxXCI6XCJ5IHhcIixcIjMyXCI6XCJ5IHhcIixcIjMzXCI6XCJ5IHhcIixcIjM0XCI6XCJ5IHhcIixcIjM1XCI6XCJ5IHhcIixcIjM2XCI6XCJ5IHhcIixcIjM3XCI6XCJ5IHhcIixcIjM4XCI6XCJ5IHhcIixcIjM5XCI6XCJ5IHhcIixcIjQwXCI6XCJ5IHhcIixcIjQxXCI6XCJ5IHhcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcIm5cIixcIjcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwieSB4XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInkgeFwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5IHhcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieSB4XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NTcuMjksXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiY2FtZXJhLGRldmljZSxnZXRVc2VyTWVkaWEsbWVkaWEgc3RyZWFtLE1lZGlhIENhcHR1cmUgQVBJXCIsXCJpZV9pZFwiOlwibWVkaWFjYXB0dXJlYW5kc3RyZWFtc1wiLFwiY2hyb21lX2lkXCI6XCI2MDY3MzgwMDM5OTc0OTEyLDY2MDUwNDEyMjU5NTczNzZcIn0sXCJzdmctaW1nXCI6e1widGl0bGVcIjpcIlNWRyBpbiBIVE1MIGltZyBlbGVtZW50XCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGRpc3BsYXlpbmcgU1ZHIGltYWdlcyBpbiBIVE1MIHVzaW5nIDxpbWc+XCIsXCJzcGVjXCI6XCJodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWxcIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2Jsb2cuZGhvbGJlcnQub3JnLzIwMTAvMTAvc3ZnLWFzLWltYWdlLmh0bWxcIixcInRpdGxlXCI6XCJCbG9nIHBvc3Qgd2l0aCBleGFtcGxlc1wifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuY29kZWRyZWFkLmNvbS9ibG9nL1wiLFwidGl0bGVcIjpcIkJsb2cgd2l0aCBTVkdzIGFuIGltYWdlc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiU1ZHXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcImFcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcInlcIixcIjkuNS05LjZcIjpcInlcIixcIjEwLjAtMTAuMVwiOlwieVwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiYVwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJ5XCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo5MS4wNCxcInVzYWdlX3BlcmNfYVwiOjAuMDEsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJzdmctYXMtaW1nLHN2Zy1pbi1pbWdcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiZGF0YWxpc3RcIjp7XCJ0aXRsZVwiOlwiRGF0YWxpc3QgZWxlbWVudFwiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBzZXR0aW5nIGEgbGlzdCBvZiBvcHRpb25zIGZvciBhIHVzZXIgdG8gc2VsZWN0IGluIGEgdGV4dCBmaWVsZCwgd2hpbGUgbGVhdmluZyB0aGUgYWJpbGl0eSB0byBlbnRlciBhIGN1c3RvbSB2YWx1ZS5cIixcInNwZWNcIjpcImh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjdGhlLWRhdGFsaXN0LWVsZW1lbnRcIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2hhY2tzLm1vemlsbGEub3JnLzIwMTAvMTEvZmlyZWZveC00LWh0bWw1LWZvcm1zL1wiLFwidGl0bGVcIjpcIk1vemlsbGEgSGFja3MgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9hZmFya2FzLmdpdGh1Yi5jb20vd2Vic2hpbS9kZW1vcy9cIixcInRpdGxlXCI6XCJIVE1MNSBMaWJyYXJ5IGluY2x1ZGluZyBkYXRhbGlzdCBzdXBwb3J0XCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSFRNTC9FbGVtZW50L2RhdGFsaXN0XCIsXCJ0aXRsZVwiOlwiTUROIHJlZmVyZW5jZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2h0bWwvZWxlbWVudHMvZGF0YWxpc3RcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9LHtcInVybFwiOlwiaHR0cDovL2RlbW8uYWdla3Rtci5jb20vZGF0YWxpc3QvXCIsXCJ0aXRsZVwiOlwiRWlqaSBLaXRhbXVyYSdzIG9wdGlvbnMgZGVtb3MgJiB0ZXN0c1wifSx7XCJ1cmxcIjpcImh0dHA6Ly9naXRodWIuY29tL3RoZ3JlYXNpL2RhdGFsaXN0LXBvbHlmaWxsXCIsXCJ0aXRsZVwiOlwiTWluaW1hbCBEYXRhbGlzdCBwb2x5ZmlsbCB3L3R1dG9yaWFsXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJIVE1MNVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcInBcIixcIjdcIjpcInBcIixcIjhcIjpcInBcIixcIjlcIjpcInBcIixcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJwXCIsXCIzXCI6XCJwXCIsXCIzLjVcIjpcInBcIixcIjMuNlwiOlwicFwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInBcIixcIjVcIjpcInBcIixcIjZcIjpcInBcIixcIjdcIjpcInBcIixcIjhcIjpcInBcIixcIjlcIjpcInBcIixcIjEwXCI6XCJwXCIsXCIxMVwiOlwicFwiLFwiMTJcIjpcInBcIixcIjEzXCI6XCJwXCIsXCIxNFwiOlwicFwiLFwiMTVcIjpcInBcIixcIjE2XCI6XCJwXCIsXCIxN1wiOlwicFwiLFwiMThcIjpcInBcIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwicFwiLFwiMy4yXCI6XCJwXCIsXCI0XCI6XCJwXCIsXCI1XCI6XCJwXCIsXCI1LjFcIjpcInBcIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJ5XCIsXCI5LjUtOS42XCI6XCJ5XCIsXCIxMC4wLTEwLjFcIjpcInlcIixcIjEwLjVcIjpcInlcIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInBcIixcIjQuMC00LjFcIjpcInBcIixcIjQuMi00LjNcIjpcInBcIixcIjUuMC01LjFcIjpcInBcIixcIjYuMC02LjFcIjpcInBcIixcIjcuMC03LjFcIjpcInBcIixcIjhcIjpcInBcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInBcIixcIjIuMlwiOlwicFwiLFwiMi4zXCI6XCJwXCIsXCIzXCI6XCJwXCIsXCI0XCI6XCJwXCIsXCI0LjFcIjpcInBcIixcIjQuMi00LjNcIjpcInBcIixcIjQuNFwiOlwicFwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInBcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInBcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJwXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJQYXJ0aWFsIHN1cHBvcnQgaW4gSUUxMCByZWZlcnMgdG8gW3NpZ25pZmljYW50bHkgYnVnZ3kgYmVoYXZpb3JdKGh0dHA6Ly9wbGF5Z3JvdW5kLm9uZXJlYXNvbi5ldS8yMDEzLzA0L2llMTBzLWxvdXN5LXN1cHBvcnQtZm9yLWRhdGFsaXN0cy8pLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo1Ny45NCxcInVzYWdlX3BlcmNfYVwiOjkuNjYsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJmb3Jtc1wiLFwia2V5d29yZHNcIjpcImxpc3QgYXR0cmlidXRlXCIsXCJpZV9pZFwiOlwiZGF0YWxpc3RlbGVtZW50XCIsXCJjaHJvbWVfaWRcIjpcIjYwOTA5NTA4MjA0OTUzNjBcIn0sXCJkYXRhc2V0XCI6e1widGl0bGVcIjpcImRhdGFzZXQgJiBkYXRhLSogYXR0cmlidXRlc1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBhcHBseWluZyBhbmQgYWNjZXNzaW5nIGN1c3RvbSBkYXRhIHRvIGVsZW1lbnRzLlwiLFwic3BlY1wiOlwiaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZG9tLmh0bWwjZW1iZWRkaW5nLWN1c3RvbS1ub24tdmlzaWJsZS1kYXRhLXdpdGgtdGhlLWRhdGEtKi1hdHRyaWJ1dGVzXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9odG1sNWRvY3Rvci5jb20vaHRtbDUtY3VzdG9tLWRhdGEtYXR0cmlidXRlcy9cIixcInRpdGxlXCI6XCJIVE1MNSBEb2N0b3IgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9odG1sNWRlbW9zLmNvbS9kYXRhc2V0XCIsXCJ0aXRsZVwiOlwiRGVtbyB1c2luZyBkYXRhc2V0XCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9waGlnZ2luczQyL2hhcy5qcy9tYXN0ZXIvZGV0ZWN0L2RvbS5qcyNkb20tZGF0YXNldFwiLFwidGl0bGVcIjpcImhhcy5qcyB0ZXN0XCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvaHRtbC9hdHRyaWJ1dGVzL2RhdGEtKlwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn0se1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTEVsZW1lbnQuZGF0YXNldFwiLFwidGl0bGVcIjpcIk1ETiBSZWZlcmVuY2UgLSBkYXRhc2V0XCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvR3VpZGUvSFRNTC9Vc2luZ19kYXRhX2F0dHJpYnV0ZXNcIixcInRpdGxlXCI6XCJNRE4gR3VpZGUgLSBVc2luZyBkYXRhLSogYXR0cmlidXRlc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiSFRNTDVcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJhXCIsXCI2XCI6XCJhXCIsXCI3XCI6XCJhXCIsXCI4XCI6XCJhXCIsXCI5XCI6XCJhXCIsXCIxMFwiOlwiYVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiYVwiLFwiM1wiOlwiYVwiLFwiMy41XCI6XCJhXCIsXCIzLjZcIjpcImFcIixcIjRcIjpcImFcIixcIjVcIjpcImFcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJhXCIsXCI1XCI6XCJhXCIsXCI2XCI6XCJhXCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcImFcIixcIjMuMlwiOlwiYVwiLFwiNFwiOlwiYVwiLFwiNVwiOlwiYVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiYVwiLFwiOS41LTkuNlwiOlwiYVwiLFwiMTAuMC0xMC4xXCI6XCJhXCIsXCIxMC41XCI6XCJhXCIsXCIxMC42XCI6XCJhXCIsXCIxMVwiOlwiYVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJhXCIsXCI0LjAtNC4xXCI6XCJhXCIsXCI0LjItNC4zXCI6XCJhXCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcImFcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJhXCIsXCIyLjJcIjpcImFcIixcIjIuM1wiOlwiYVwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiYVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IHJlZmVycyB0byBiZWluZyBhYmxlIHRvIHVzZSBgZGF0YS0qYCBhdHRyaWJ1dGVzIGFuZCBhY2Nlc3MgdGhlbSB1c2luZyBgZ2V0QXR0cmlidXRlYC4gXFxyXFxuXFxyXFxuXFxcIlN1cHBvcnRlZFxcXCIgcmVmZXJzIHRvIGFjY2Vzc2luZyB0aGUgdmFsdWVzIHVzaW5nIHRoZSBgZGF0YXNldGAgcHJvcGVydHkuIEN1cnJlbnQgc3BlYyBvbmx5IHJlZmVycyB0byBzdXBwb3J0IG9uIEhUTUwgZWxlbWVudHMsIG9ubHkgc29tZSBicm93c2VycyBhbHNvIGhhdmUgc3VwcG9ydCBmb3IgU1ZHL01hdGhNTCBlbGVtZW50cy5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6ODIuMzYsXCJ1c2FnZV9wZXJjX2FcIjoxMy45NyxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIkRPTVN0cmluZ01hcFwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJjc3MtZ3JpZFwiOntcInRpdGxlXCI6XCJDU1MgR3JpZCBMYXlvdXRcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgdXNpbmcgYSBncmlkIGNvbmNlcHQgdG8gbGF5IG91dCBjb250ZW50LCBwcm92aWRpbmcgYSBtZWNoYW5pc20gZm9yIGF1dGhvcnMgdG8gZGl2aWRlIGF2YWlsYWJsZSBzcGFjZSBmb3IgbGF5IG91dCBpbnRvIGNvbHVtbnMgYW5kIHJvd3MgdXNpbmcgYSBzZXQgb2YgcHJlZGljdGFibGUgc2l6aW5nIGJlaGF2aW9yc1wiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1ncmlkLWxheW91dC9cIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvaWUvYXJjaGl2ZS8yMDExLzA0LzE0L2llMTAtcGxhdGZvcm0tcHJldmlldy1hbmQtY3NzLWZlYXR1cmVzLWZvci1hZGFwdGl2ZS1sYXlvdXRzLmFzcHhcIixcInRpdGxlXCI6XCJJRSBCbG9nIHBvc3RcIn0se1widXJsXCI6XCJodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjA3MzFcIixcInRpdGxlXCI6XCJXZWJraXQgKENocm9tZSwgU2FmYXJpLCBldGMuKSBmZWF0dXJlIHJlcXVlc3RcIn0se1widXJsXCI6XCJodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02MTY2MDVcIixcInRpdGxlXCI6XCJNb3ppbGxhIChGaXJlZm94KSBmZWF0dXJlIHJlcXVlc3RcIn0se1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vY29kbGVyL0dyaWQtTGF5b3V0LVBvbHlmaWxsXCIsXCJ0aXRsZVwiOlwiR3JpZCBMYXlvdXQgUG9seWZpbGxcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTU1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcInBcIixcIjEwXCI6XCJhIHggIzJcIixcIjExXCI6XCJhIHggIzJcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJwXCIsXCIyMFwiOlwicFwiLFwiMjFcIjpcInBcIixcIjIyXCI6XCJwXCIsXCIyM1wiOlwicFwiLFwiMjRcIjpcInBcIixcIjI1XCI6XCJwXCIsXCIyNlwiOlwicFwiLFwiMjdcIjpcInBcIixcIjI4XCI6XCJwXCIsXCIyOVwiOlwicFwiLFwiMzBcIjpcInBcIixcIjMxXCI6XCJwXCIsXCIzMlwiOlwicFwiLFwiMzNcIjpcInBcIixcIjM0XCI6XCJ1XCIsXCIzNVwiOlwidVwiLFwiMzZcIjpcInVcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwicFwiLFwiMjZcIjpcInBcIixcIjI3XCI6XCJwXCIsXCIyOFwiOlwicFwiLFwiMjlcIjpcInAgZCAjMVwiLFwiMzBcIjpcInAgZCAjMVwiLFwiMzFcIjpcInAgZCAjMVwiLFwiMzJcIjpcInAgZCAjMVwiLFwiMzNcIjpcInAgZCAjMVwiLFwiMzRcIjpcInAgZCAjMVwiLFwiMzVcIjpcInAgZCAjMVwiLFwiMzZcIjpcInAgZCAjMVwiLFwiMzdcIjpcInAgZCAjMVwiLFwiMzhcIjpcInAgZCAjMVwiLFwiMzlcIjpcInAgZCAjMVwiLFwiNDBcIjpcInAgZCAjMVwiLFwiNDFcIjpcInAgZCAjMVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcInBcIixcIjYuMVwiOlwicFwiLFwiN1wiOlwicFwiLFwiNy4xXCI6XCJwXCIsXCI4XCI6XCJwXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcInBcIixcIjcuMC03LjFcIjpcInBcIixcIjhcIjpcInBcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcInBcIixcIjQuNFwiOlwicFwiLFwiNC40LjNcIjpcInBcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInBcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInBcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiblwifSxcImllX21vYlwiOntcIjEwXCI6XCJhIHggIzJcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcIm5cIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e1wiMVwiOlwiRW5hYmxlZCBpbiBDaHJvbWUgdGhyb3VnaCB0aGUgXFxcImV4cGVyaW1lbnRhbCBXZWIgUGxhdGZvcm0gZmVhdHVyZXNcXFwiIGZsYWcgaW4gY2hyb21lOi8vZmxhZ3NcIixcIjJcIjpcIlBhcnRpYWwgc3VwcG9ydCBpbiBJRSByZWZlcnMgdG8gc3VwcG9ydGluZyBhbiBbb2xkZXIgdmVyc2lvbl0oaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9XRC1jc3MzLWdyaWQtbGF5b3V0LTIwMTEwNDA3Lykgb2YgdGhlIHNwZWNpZmljYXRpb24uXCJ9LFwidXNhZ2VfcGVyY195XCI6MCxcInVzYWdlX3BlcmNfYVwiOjEwLjEsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJncmlkcyxncmlkLXJvdyxncmlkLWNvbHVtblwiLFwiaWVfaWRcIjpcImdyaWRcIixcImNocm9tZV9pZFwiOlwiNDU4OTYzNjQxMjI0Mzk2OFwifSxcIm1lbnVcIjp7XCJ0aXRsZVwiOlwiVG9vbGJhci9jb250ZXh0IG1lbnVcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgZGVmaW5pbmcgYSB0b29sYmFyIG1lbnUsIGEgY29udGV4dCBtZW51IG9yIGEgbGlzdCBvZiAoaW50ZXJhY3RpdmUpIG9wdGlvbnMgdXNpbmcgdGhlIDxtZW51PiBlbGVtZW50LlwiLFwic3BlY1wiOlwiaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCN0aGUtbWVudS1lbGVtZW50XCIsXCJzdGF0dXNcIjpcImNyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vYnVnNjE3NTI4LmJ1Z3ppbGxhLm1vemlsbGEub3JnL2F0dGFjaG1lbnQuY2dpP2lkPTU1NDMwOVwiLFwidGl0bGVcIjpcIkRlbW9cIn0se1widXJsXCI6XCJodHRwOi8vYWRkeW9zbWFuaS5naXRodWIuY29tL2pRdWVyeS1jb250ZXh0TWVudS9cIixcInRpdGxlXCI6XCJqUXVlcnkgcG9seWZpbGxcIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3QvZXZlbnRzLmpzI2V2ZW50LWNvbnRleHRtZW51XCIsXCJ0aXRsZVwiOlwiaGFzLmpzIHRlc3RcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkhUTUw1XCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJhXCIsXCI5XCI6XCJhXCIsXCIxMFwiOlwiYVwiLFwiMTFcIjpcImFcIixcIjEyXCI6XCJhXCIsXCIxM1wiOlwiYVwiLFwiMTRcIjpcImFcIixcIjE1XCI6XCJhXCIsXCIxNlwiOlwiYVwiLFwiMTdcIjpcImFcIixcIjE4XCI6XCJhXCIsXCIxOVwiOlwiYVwiLFwiMjBcIjpcImFcIixcIjIxXCI6XCJhXCIsXCIyMlwiOlwiYVwiLFwiMjNcIjpcImFcIixcIjI0XCI6XCJhXCIsXCIyNVwiOlwiYVwiLFwiMjZcIjpcImFcIixcIjI3XCI6XCJhXCIsXCIyOFwiOlwiYVwiLFwiMjlcIjpcImFcIixcIjMwXCI6XCJhXCIsXCIzMVwiOlwiYVwiLFwiMzJcIjpcImFcIixcIjMzXCI6XCJhXCIsXCIzNFwiOlwiYVwiLFwiMzVcIjpcImFcIixcIjM2XCI6XCJhXCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcIm5cIixcIjM1XCI6XCJuXCIsXCIzNlwiOlwiblwiLFwiMzdcIjpcIm5cIixcIjM4XCI6XCJuXCIsXCIzOVwiOlwiblwiLFwiNDBcIjpcIm5cIixcIjQxXCI6XCJuXCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI3LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwiblwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwiblwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwiblwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJuXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcIm5cIn19LFwibm90ZXNcIjpcIlBhcnRpYWwgc3VwcG9ydCBpbiBGaXJlZm94IHJlZmVycyB0byBiZWluZyBsaW1pdGVkIHRvIGNvbnRleHQgbWVudXMsIG5vdCB0b29sYmFyIG1lbnVzLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjowLFwidXNhZ2VfcGVyY19hXCI6MTIuOTEsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJjb250ZXh0bWVudSxtZW51aXRlbSxjb21tYW5kXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcInJlbVwiOntcInRpdGxlXCI6XCJyZW0gKHJvb3QgZW0pIHVuaXRzXCIsXCJkZXNjcmlwdGlvblwiOlwiVHlwZSBvZiB1bml0IHNpbWlsYXIgdG8gXFxcImVtXFxcIiwgYnV0IHJlbGF0aXZlIG9ubHkgdG8gdGhlIHJvb3QgZWxlbWVudCwgbm90IGFueSBwYXJlbnQgZWxlbWVudC4gVGh1cyBjb21wb3VuZGluZyBkb2VzIG5vdCBvY2N1ciBhcyBpdCBkb2VzIHdpdGggXFxcImVtXFxcIiB1bml0cy5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdmFsdWVzLyNmb250LXJlbGF0aXZlLWxlbmd0aHNcIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL3Nub29rLmNhL2FyY2hpdmVzL2h0bWxfYW5kX2Nzcy9mb250LXNpemUtd2l0aC1yZW1cIixcInRpdGxlXCI6XCJBcnRpY2xlIG9uIHVzYWdlXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2NodWNrY2FycGVudGVyL1JFTS11bml0LXBvbHlmaWxsXCIsXCJ0aXRsZVwiOlwiUkVNIFBvbHlmaWxsXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1MzXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwidVwiLFwiNVwiOlwidVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieVwiLFwiMi4yXCI6XCJ5XCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo4OC42NSxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJyZW1zXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcInR0ZlwiOntcInRpdGxlXCI6XCJUVEYvT1RGIC0gVHJ1ZVR5cGUgYW5kIE9wZW5UeXBlIGZvbnQgc3VwcG9ydFwiLFwiZGVzY3JpcHRpb25cIjpcIlN1cHBvcnQgZm9yIHRoZSBUcnVlVHlwZSAoLnR0ZilhbmQgT3BlblR5cGUgKC5vdGYpIG91dGxpbmUgZm9udCBmb3JtYXRzIGluIEBmb250LWZhY2UuIFwiLFwic3BlY1wiOlwiaHR0cDovL2RldmVsb3Blci5hcHBsZS5jb20vZm9udHMvVFRSZWZNYW4vaW5kZXguaHRtbFwiLFwic3RhdHVzXCI6XCJvdGhlclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE3Njk0MTQzL3doYXQtaXMtdGhlLXN0YXR1cy1vZi10dGYtc3VwcG9ydC1pbi1pbnRlcm5ldC1leHBsb3JlclwiLFwidGl0bGVcIjpcIldoYXQgaXMgdGhlIHN0YXR1cyBvZiBUVEYgc3VwcG9ydCBpbiBJbnRlcm5ldCBFeHBsb3Jlcj9cIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJhXCIsXCIxMFwiOlwiYVwiLFwiMTFcIjpcImFcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInlcIixcIjMuMlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJ5XCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcInlcIixcIjIuM1wiOlwieVwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwidVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IGluIElFOSByZWZlcnMgdG8gdGhlIGZvbnRzIG9ubHkgd29ya2luZyBbd2hlbiBzZXQgdG8gYmUgXFxcImluc3RhbGxhYmxlXFxcIl0oaHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvaWUvYXJjaGl2ZS8yMDEwLzA3LzE1L3RoZS1jc3MtY29ybmVyLWJldHRlci13ZWItdHlwb2dyYXBoeS1mb3ItYmV0dGVyLWRlc2lnbi5hc3B4KS5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NzYuMzcsXCJ1c2FnZV9wZXJjX2FcIjoxMi4wNixcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcImZvbnRmYWNlXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcInRvdWNoXCI6e1widGl0bGVcIjpcIlRvdWNoIGV2ZW50c1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiByZWdpc3RlcmluZyB3aGVuLCB3aGVyZSBhbmQgaG93IHRoZSBpbnRlcmZhY2UgaXMgdG91Y2hlZCwgZm9yIGRldmljZXMgd2l0aCBhIHRvdWNoIHNjcmVlbi4gVGhlc2UgRE9NIGV2ZW50cyBhcmUgc2ltaWxhciB0byBtb3VzZWRvd24sIG1vdXNlbW92ZSwgZXRjLlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvdG91Y2gtZXZlbnRzL1wiLFwic3RhdHVzXCI6XCJyZWNcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9tb2JpbGUvdGFibGVUb3VjaC5odG1sXCIsXCJ0aXRsZVwiOlwiRGV0YWlsZWQgc3VwcG9ydCB0YWJsZXNcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL20vdGVzdHMvZHJhZzIuaHRtbFwiLFwidGl0bGVcIjpcIk11bHRpLXRvdWNoIGRlbW9cIn0se1widXJsXCI6XCJodHRwOi8vc2NoZXBlcnMuY2MvZ2V0aW50b3VjaFwiLFwidGl0bGVcIjpcIkluZm9ybWF0aW9uIG9uIHRoZSBzcGVjIGRldmVsb3BtZW50XCJ9LHtcInVybFwiOlwiaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNjczNTU3KHY9dnMuODUpLmFzcHhcIixcInRpdGxlXCI6XCJJbnRlcm5ldCBFeHBsb3JlcidzIGdlc3R1cmUgYW5kIHRvdWNoIGltcGxlbWVudGF0aW9uLlwifSx7XCJ1cmxcIjpcImh0dHA6Ly9naXRodWIuY29tL0NhbUhlbmxpbi9Ub3VjaFBvbHlmaWxsXCIsXCJ0aXRsZVwiOlwiVG91Y2ggcG9seWZpbGwgZm9yIHN1cHBvcnRpbmcgdG91Y2ggZXZlbnRzIG9uIEludGVybmV0IEV4cGxvcmVyXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJET01cIixcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJwXCIsXCIxMVwiOlwicFwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiYVwiLFwiNVwiOlwiYVwiLFwiNlwiOlwiYVwiLFwiN1wiOlwiYVwiLFwiOFwiOlwiYVwiLFwiOVwiOlwiYVwiLFwiMTBcIjpcImFcIixcIjExXCI6XCJhXCIsXCIxMlwiOlwiYVwiLFwiMTNcIjpcImFcIixcIjE0XCI6XCJhXCIsXCIxNVwiOlwiYVwiLFwiMTZcIjpcImFcIixcIjE3XCI6XCJhXCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcIm4gZCAjMVwiLFwiMjZcIjpcIm4gZCAjMVwiLFwiMjdcIjpcIm4gZCAjMVwiLFwiMjhcIjpcIm4gZCAjMVwiLFwiMjlcIjpcIm4gZCAjMVwiLFwiMzBcIjpcIm4gZCAjMVwiLFwiMzFcIjpcIm4gZCAjMVwiLFwiMzJcIjpcIm4gZCAjMVwiLFwiMzNcIjpcIm4gZCAjMVwiLFwiMzRcIjpcIm4gZCAjMVwiLFwiMzVcIjpcIm4gZCAjMVwiLFwiMzZcIjpcIm4gZCAjMVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInlcIixcIjQuMC00LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInlcIixcIjIuMlwiOlwieVwiLFwiMi4zXCI6XCJ5XCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJwXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJJbnRlcm5ldCBFeHBsb3JlciBpbXBsZW1lbnRzIFBvaW50ZXIgRXZlbnRzIHNwZWNpZmljYXRpb24gd2hpY2ggc3VwcG9ydHMgbW9yZSBpbnB1dCBkZXZpY2VzIHRoYW4gVG91Y2ggRXZlbnRzIG9uZS5cXHJcXG5cXHJcXG5UaGVyZSBpcyBhIGxpYnJhcnkgb24gR2l0SHViIHRoYXQgaXMgd29ya2luZyB0b3dhcmQgYnJpbmdpbmcgVzNDIHRvdWNoIGV2ZW50cyB0byBJRSAxMCBhbmQgMTE6IGh0dHBzOi8vZ2l0aHViLmNvbS9DYW1IZW5saW4vVG91Y2hQb2x5ZmlsbCBcXHJcXG5cXHJcXG5SZW1vdmVkIHN1cHBvcnQgaW4gRmlyZWZveCByZWZlcnMgdG8gZGVza3RvcCBGaXJlZm94IG9ubHkuXCIsXCJub3Rlc19ieV9udW1cIjp7XCIxXCI6XCJDYW4gYmUgZW5hYmxlZCBpbiBGaXJlZm94IHVzaW5nIHRoZSBkb20udzNjX3RvdWNoX2V2ZW50cy5lbmFibGVkIGZsYWcgKGRpc2FibGVkIGJ5IGRlZmF1bHQgZm9yIHNpdGUgY29tcGF0aWJpbGl0eSByZWFzb25zKVwifSxcInVzYWdlX3BlcmNfeVwiOjU5LjI0LFwidXNhZ2VfcGVyY19hXCI6MC41OCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcInRvdWNoc3RhcnQsdG91Y2hlbmQsdG91Y2htb3ZlLHRvdWNoZW50ZXIsdG91Y2hsZWF2ZSx0b3VjaGNhbmNlbFwiLFwiaWVfaWRcIjpcInRvdWNoZXZlbnRzXCIsXCJjaHJvbWVfaWRcIjpcIjYyOTY5MDMwOTIyNzMxNTJcIn0sXCJtYXRjaGVzc2VsZWN0b3JcIjp7XCJ0aXRsZVwiOlwibWF0Y2hlcygpIERPTSBtZXRob2RcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgdGVzdGluZyB3aGV0aGVyIG9yIG5vdCBhIERPTSBlbGVtZW50IG1hdGNoZXMgYSBnaXZlbiBzZWxlY3Rvci4gRm9ybWVybHkga25vd24gKGFuZCBsYXJnZWx5IHN1cHBvcnRlZCB3aXRoIHByZWZpeCkgYXMgbWF0Y2hlc1NlbGVjdG9yLlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLWFwaTIvXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS9FbGVtZW50Lm1vek1hdGNoZXNTZWxlY3RvclwiLFwidGl0bGVcIjpcIk1ETiBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvZG9tL0hUTUxFbGVtZW50L21hdGNoZXNTZWxlY3RvclwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkRPTVwiLFwiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiYSB4XCIsXCIxMFwiOlwiYSB4XCIsXCIxMVwiOlwiYSB4XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJhIHhcIixcIjRcIjpcImEgeFwiLFwiNVwiOlwiYSB4XCIsXCI2XCI6XCJhIHhcIixcIjdcIjpcImEgeFwiLFwiOFwiOlwiYSB4XCIsXCI5XCI6XCJhIHhcIixcIjEwXCI6XCJhIHhcIixcIjExXCI6XCJhIHhcIixcIjEyXCI6XCJhIHhcIixcIjEzXCI6XCJhIHhcIixcIjE0XCI6XCJhIHhcIixcIjE1XCI6XCJhIHhcIixcIjE2XCI6XCJhIHhcIixcIjE3XCI6XCJhIHhcIixcIjE4XCI6XCJhIHhcIixcIjE5XCI6XCJhIHhcIixcIjIwXCI6XCJhIHhcIixcIjIxXCI6XCJhIHhcIixcIjIyXCI6XCJhIHhcIixcIjIzXCI6XCJhIHhcIixcIjI0XCI6XCJhIHhcIixcIjI1XCI6XCJhIHhcIixcIjI2XCI6XCJhIHhcIixcIjI3XCI6XCJhIHhcIixcIjI4XCI6XCJhIHhcIixcIjI5XCI6XCJhIHhcIixcIjMwXCI6XCJhIHhcIixcIjMxXCI6XCJhIHhcIixcIjMyXCI6XCJhIHhcIixcIjMzXCI6XCJhIHhcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJhIHhcIixcIjVcIjpcImEgeFwiLFwiNlwiOlwiYSB4XCIsXCI3XCI6XCJhIHhcIixcIjhcIjpcImEgeFwiLFwiOVwiOlwiYSB4XCIsXCIxMFwiOlwiYSB4XCIsXCIxMVwiOlwiYSB4XCIsXCIxMlwiOlwiYSB4XCIsXCIxM1wiOlwiYSB4XCIsXCIxNFwiOlwiYSB4XCIsXCIxNVwiOlwiYSB4XCIsXCIxNlwiOlwiYSB4XCIsXCIxN1wiOlwiYSB4XCIsXCIxOFwiOlwiYSB4XCIsXCIxOVwiOlwiYSB4XCIsXCIyMFwiOlwiYSB4XCIsXCIyMVwiOlwiYSB4XCIsXCIyMlwiOlwiYSB4XCIsXCIyM1wiOlwiYSB4XCIsXCIyNFwiOlwiYSB4XCIsXCIyNVwiOlwiYSB4XCIsXCIyNlwiOlwiYSB4XCIsXCIyN1wiOlwiYSB4XCIsXCIyOFwiOlwiYSB4XCIsXCIyOVwiOlwiYSB4XCIsXCIzMFwiOlwiYSB4XCIsXCIzMVwiOlwiYSB4XCIsXCIzMlwiOlwiYSB4XCIsXCIzM1wiOlwiYSB4XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiYSB4XCIsXCI1LjFcIjpcImEgeFwiLFwiNlwiOlwiYSB4XCIsXCI2LjFcIjpcImEgeFwiLFwiN1wiOlwiYSB4XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcImEgeFwiLFwiMTEuNlwiOlwiYSB4XCIsXCIxMlwiOlwiYSB4XCIsXCIxMi4xXCI6XCJhIHhcIixcIjE1XCI6XCJhIHhcIixcIjE2XCI6XCJhIHhcIixcIjE3XCI6XCJhIHhcIixcIjE4XCI6XCJhIHhcIixcIjE5XCI6XCJhIHhcIixcIjIwXCI6XCJhIHhcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJhIHhcIixcIjQuMi00LjNcIjpcImEgeFwiLFwiNS4wLTUuMVwiOlwiYSB4XCIsXCI2LjAtNi4xXCI6XCJhIHhcIixcIjcuMC03LjFcIjpcImEgeFwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJhIHhcIixcIjIuM1wiOlwiYSB4XCIsXCIzXCI6XCJhIHhcIixcIjRcIjpcImEgeFwiLFwiNC4xXCI6XCJhIHhcIixcIjQuMi00LjNcIjpcImEgeFwiLFwiNC40XCI6XCJhIHhcIixcIjQuNC4zXCI6XCJhIHhcIn0sXCJiYlwiOntcIjdcIjpcImEgeFwiLFwiMTBcIjpcImEgeFwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiYSB4XCIsXCIxMS41XCI6XCJhIHhcIixcIjEyXCI6XCJhIHhcIixcIjEyLjFcIjpcImEgeFwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiYSB4XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcImEgeFwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiYSB4XCJ9fSxcIm5vdGVzXCI6XCJQYXJ0aWFsIHN1cHBvcnQgcmVmZXJzIHRvIHN1cHBvcnRpbmcgdGhlIG9sZGVyIHNwZWNpZmljYXRpb24ncyBcXFwibWF0Y2hlc1NlbGVjdG9yXFxcIiBuYW1lIHJhdGhlciB0aGFuIGp1c3QgXFxcIm1hdGNoZXNcXFwiLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjozOS44NCxcInVzYWdlX3BlcmNfYVwiOjQ4Ljg0LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiIG1hdGNoZXNTZWxlY3RvclwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJwb2ludGVyLWV2ZW50c1wiOntcInRpdGxlXCI6XCJDU1MgcG9pbnRlci1ldmVudHMgKGZvciBIVE1MKVwiLFwiZGVzY3JpcHRpb25cIjpcIlRoaXMgQ1NTIHByb3BlcnR5LCB3aGVuIHNldCB0byBcXFwibm9uZVxcXCIgYWxsb3dzIGVsZW1lbnRzIHRvIG5vdCByZWNlaXZlIGhvdmVyL2NsaWNrIGV2ZW50cywgaW5zdGVhZCB0aGUgZXZlbnQgd2lsbCBvY2N1ciBvbiBhbnl0aGluZyBiZWhpbmQgaXQuIFwiLFwic3BlY1wiOlwiaHR0cDovL3dpa2kuY3Nzd2cub3JnL3NwZWMvY3NzNC11aSNwb2ludGVyLWV2ZW50c1wiLFwic3RhdHVzXCI6XCJ1bm9mZlwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vcm9iZXJ0bnltYW4uY29tLzIwMTAvMDMvMjIvY3NzLXBvaW50ZXItZXZlbnRzLXRvLWFsbG93LWNsaWNrcy1vbi11bmRlcmx5aW5nLWVsZW1lbnRzL1wiLFwidGl0bGVcIjpcIkFydGljbGUgJiB0dXRvcmlhbFwifSx7XCJ1cmxcIjpcImh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vcGhpZ2dpbnM0Mi9oYXMuanMvbWFzdGVyL2RldGVjdC9jc3MuanMjY3NzLXBvaW50ZXJldmVudHNcIixcInRpdGxlXCI6XCJoYXMuanMgdGVzdFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTM1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInlcIixcIjQuMC00LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInlcIixcIjIuMlwiOlwieVwiLFwiMi4zXCI6XCJ5XCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJBbHJlYWR5IHBhcnQgb2YgdGhlIFNWRyBzcGVjaWZpY2F0aW9uLCBhbmQgYWxsIFNWRy1zdXBwb3J0aW5nIGJyb3dzZXJzIGFwcGVhciB0byBzdXBwb3J0IHRoZSBwcm9wZXJ0eSBvbiBTVkcgZWxlbWVudHMuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjgzLjMzLFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcInBvaW50ZXJldmVudHNcIixcImllX2lkXCI6XCJjc3Nwb2ludGVyZXZlbnRzXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImJsb2JidWlsZGVyXCI6e1widGl0bGVcIjpcIkJsb2IgY29uc3RydWN0aW5nXCIsXCJkZXNjcmlwdGlvblwiOlwiQ29uc3RydWN0IEJsb2JzIChiaW5hcnkgbGFyZ2Ugb2JqZWN0cykgZWl0aGVyIHVzaW5nIHRoZSBCbG9iQnVpbGRlciBBUEkgKGRlcHJlY2F0ZWQpIG9yIHRoZSBCbG9iIGNvbnN0cnVjdG9yLlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvZmlsZS13cml0ZXItYXBpLyN0aGUtYmxvYmJ1aWxkZXItaW50ZXJmYWNlXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS9CbG9iQnVpbGRlclwiLFwidGl0bGVcIjpcIk1ETiBhcnRpY2xlIG9uIEJsb2JCdWlsZGVyXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9ET00vQmxvYlwiLFwidGl0bGVcIjpcIk1ETiBhcnRpY2xlIG9uIEJsb2JzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJKUyBBUElcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcImEgeFwiLFwiN1wiOlwiYSB4XCIsXCI4XCI6XCJhIHhcIixcIjlcIjpcImEgeFwiLFwiMTBcIjpcImEgeFwiLFwiMTFcIjpcImEgeFwiLFwiMTJcIjpcImEgeFwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcImEgeFwiLFwiOVwiOlwiYSB4XCIsXCIxMFwiOlwiYSB4XCIsXCIxMVwiOlwiYSB4XCIsXCIxMlwiOlwiYSB4XCIsXCIxM1wiOlwiYSB4XCIsXCIxNFwiOlwiYSB4XCIsXCIxNVwiOlwiYSB4XCIsXCIxNlwiOlwiYSB4XCIsXCIxN1wiOlwiYSB4XCIsXCIxOFwiOlwiYSB4XCIsXCIxOVwiOlwiYSB4XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJhIHhcIixcIjRcIjpcImEgeFwiLFwiNC4xXCI6XCJhIHhcIixcIjQuMi00LjNcIjpcImEgeFwiLFwiNC40XCI6XCJhIHhcIixcIjQuNC4zXCI6XCJhIHhcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJhIHhcIn19LFwibm90ZXNcIjpcIlBhcnRpYWwgc3VwcG9ydCByZWZlcnMgdG8gb25seSBzdXBwb3J0aW5nIHRoZSBub3cgZGVwcmVjYXRlZCBCbG9iQnVpbGRlciB0byBjcmVhdGUgYmxvYnMuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjc0LjYsXCJ1c2FnZV9wZXJjX2FcIjo5LjY5LFwidWNwcmVmaXhcIjp0cnVlLFwicGFyZW50XCI6XCJmaWxlYXBpXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiYmxvYlwiLFwiY2hyb21lX2lkXCI6XCI1MzI4NzgzMTA0MDE2Mzg0XCJ9LFwiZmlsZXJlYWRlclwiOntcInRpdGxlXCI6XCJGaWxlUmVhZGVyIEFQSVwiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiByZWFkaW5nIHRoZSBjb250ZW50cyBvZiBhIEZpbGUgb3IgQmxvYiBvYmplY3QgaW50byBtZW1vcnlcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL0ZpbGVBUEkvI2Rmbi1maWxlcmVhZGVyXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS9GaWxlUmVhZGVyXCIsXCJ0aXRsZVwiOlwiRmlsZVJlYWRlciBBUElcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9hcGlzL2ZpbGUvRmlsZVJlYWRlclwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6ODQuNTUsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiZmlsZWFwaVwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcImZpbGVyZWFkZXJcIixcImNocm9tZV9pZFwiOlwiNTE3MTAwMzE4NTQzMDUyOFwifSxcImZpbGVzeXN0ZW1cIjp7XCJ0aXRsZVwiOlwiRmlsZXN5c3RlbSAmIEZpbGVXcml0ZXIgQVBJXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHJlYWRpbmcgYW5kIHdyaXRpbmcgZmlsZXMgdG8gYSBzYW5kYm94ZWQgZmlsZSBzeXN0ZW0uXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9maWxlLXN5c3RlbS1hcGkvXCIsXCJzdGF0dXNcIjpcInVub2ZmXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2ZpbGUvZmlsZXN5c3RlbS9cIixcInRpdGxlXCI6XCJIVE1MNSBSb2NrcyB0dXRvcmlhbFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2FwaXMvZmlsZXN5c3RlbVwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcIm5cIixcIjM1XCI6XCJuXCIsXCIzNlwiOlwiblwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcImEgeFwiLFwiOVwiOlwiYSB4XCIsXCIxMFwiOlwiYSB4XCIsXCIxMVwiOlwiYSB4XCIsXCIxMlwiOlwiYSB4XCIsXCIxM1wiOlwieSB4XCIsXCIxNFwiOlwieSB4XCIsXCIxNVwiOlwieSB4XCIsXCIxNlwiOlwieSB4XCIsXCIxN1wiOlwieSB4XCIsXCIxOFwiOlwieSB4XCIsXCIxOVwiOlwieSB4XCIsXCIyMFwiOlwieSB4XCIsXCIyMVwiOlwieSB4XCIsXCIyMlwiOlwieSB4XCIsXCIyM1wiOlwieSB4XCIsXCIyNFwiOlwieSB4XCIsXCIyNVwiOlwieSB4XCIsXCIyNlwiOlwieSB4XCIsXCIyN1wiOlwieSB4XCIsXCIyOFwiOlwieSB4XCIsXCIyOVwiOlwieSB4XCIsXCIzMFwiOlwieSB4XCIsXCIzMVwiOlwieSB4XCIsXCIzMlwiOlwieSB4XCIsXCIzM1wiOlwieSB4XCIsXCIzNFwiOlwieSB4XCIsXCIzNVwiOlwieSB4XCIsXCIzNlwiOlwieSB4XCIsXCIzN1wiOlwieSB4XCIsXCIzOFwiOlwieSB4XCIsXCIzOVwiOlwieSB4XCIsXCI0MFwiOlwieSB4XCIsXCI0MVwiOlwieSB4XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI3LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwieSB4XCIsXCIxNlwiOlwieSB4XCIsXCIxN1wiOlwieSB4XCIsXCIxOFwiOlwieSB4XCIsXCIxOVwiOlwieSB4XCIsXCIyMFwiOlwieSB4XCIsXCIyMVwiOlwieSB4XCIsXCIyMlwiOlwieSB4XCIsXCIyM1wiOlwieSB4XCIsXCIyNFwiOlwieSB4XCIsXCIyNVwiOlwieSB4XCIsXCIyNlwiOlwieSB4XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwiblwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcInkgeFwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJ5IHhcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInkgeFwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJuXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcIm5cIn19LFwibm90ZXNcIjpcIlRoZSBGaWxlIEFQSTogRGlyZWN0b3JpZXMgYW5kIFN5c3RlbSBzcGVjaWZpY2F0aW9uIGlzIG5vIGxvbmdlciBiZWluZyBtYWludGFpbmVkIGFuZCBzdXBwb3J0IG1heSBiZSBkcm9wcGVkIGluIGZ1dHVyZSB2ZXJzaW9ucy5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NDEuNDksXCJ1c2FnZV9wZXJjX2FcIjowLjE4LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiZmlsZXdyaXRlclwiLFwiaWVfaWRcIjpcImZpbGV3cml0ZXJcIixcImNocm9tZV9pZFwiOlwiNTQ1MjQ3ODE2MjE0MTE4NFwifSxcImJsb2J1cmxzXCI6e1widGl0bGVcIjpcIkJsb2IgVVJMc1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBjcmVhdGluZyBVUkwgaGFuZGxlcyB0byB0aGUgc3BlY2lmaWVkIEZpbGUgb3IgQmxvYiBvYmplY3QuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9GaWxlQVBJLyN1cmxcIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMXCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcInkgeFwiLFwiOVwiOlwieSB4XCIsXCIxMFwiOlwieSB4XCIsXCIxMVwiOlwieSB4XCIsXCIxMlwiOlwieSB4XCIsXCIxM1wiOlwieSB4XCIsXCIxNFwiOlwieSB4XCIsXCIxNVwiOlwieSB4XCIsXCIxNlwiOlwieSB4XCIsXCIxN1wiOlwieSB4XCIsXCIxOFwiOlwieSB4XCIsXCIxOVwiOlwieSB4XCIsXCIyMFwiOlwieSB4XCIsXCIyMVwiOlwieSB4XCIsXCIyMlwiOlwieSB4XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcInkgeFwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwieSB4XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwieSB4XCIsXCI0LjFcIjpcInkgeFwiLFwiNC4yLTQuM1wiOlwieSB4XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwieSB4XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5IHhcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo4My42MyxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJmaWxlYXBpXCIsXCJrZXl3b3Jkc1wiOlwiY3JlYXRlb2JqZWN0dXJsXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcInJlbGxpc3RcIjp7XCJ0aXRsZVwiOlwicmVsTGlzdCAoRE9NVG9rZW5MaXN0KVwiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBlYXNpbHkgbWFuaXB1bGF0aW5nIHJlbCBhdHRyaWJ1dGUgdmFsdWVzIG9uIGVsZW1lbnRzLCB1c2luZyB0aGUgRE9NVG9rZW5MaXN0IG9iamVjdCAoc2ltaWxhciB0byBjbGFzc0xpc3QpLlwiLFwic3BlY1wiOlwiaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2VtYW50aWNzLmh0bWwjZG9tLWEtcmVsbGlzdFwiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0RPTS9ET01Ub2tlbkxpc3RcIixcInRpdGxlXCI6XCJNRE4gLSBET01Ub2tlbkxpc3RcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkRPTVwiLFwiSFRNTDVcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuXCIsXCIzMVwiOlwiblwiLFwiMzJcIjpcIm5cIixcIjMzXCI6XCJuXCIsXCIzNFwiOlwiblwiLFwiMzVcIjpcIm5cIixcIjM2XCI6XCJuXCIsXCIzN1wiOlwiblwiLFwiMzhcIjpcIm5cIixcIjM5XCI6XCJuXCIsXCI0MFwiOlwiblwiLFwiNDFcIjpcIm5cIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcIm5cIixcIjcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJuXCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJuXCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjExLjM3LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJ0eXBlZGFycmF5c1wiOntcInRpdGxlXCI6XCJUeXBlZCBBcnJheXNcIixcImRlc2NyaXB0aW9uXCI6XCJKYXZhU2NyaXB0IHR5cGVkIGFycmF5cyBwcm92aWRlIGEgbWVjaGFuaXNtIGZvciBhY2Nlc3NpbmcgcmF3IGJpbmFyeSBkYXRhIG11Y2ggbW9yZSBlZmZpY2llbnRseS5cXHJcXG5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvdHlwZWRhcnJheS9zcGVjcy9sYXRlc3QvXCIsXCJzdGF0dXNcIjpcIm90aGVyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2phdmFzY3JpcHRfdHlwZWRfYXJyYXlzXCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcInlcIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6ODUuMDMsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiZmxvYXQ2NGFycmF5LGRhdGF2aWV3LHVpbnQ4YXJyYXlcIixcImllX2lkXCI6XCJ0eXBlZGFycmF5c1wiLFwiY2hyb21lX2lkXCI6XCI1MTM1ODE4ODEzMzQxNjk2XCJ9LFwiZGV2aWNlb3JpZW50YXRpb25cIjp7XCJ0aXRsZVwiOlwiRGV2aWNlT3JpZW50YXRpb24gZXZlbnRzXCIsXCJkZXNjcmlwdGlvblwiOlwiQVBJIGZvciBkZXRlY3Rpbmcgb3JpZW50YXRpb24gYW5kIG1vdGlvbiBldmVudHMgZnJvbSB0aGUgZGV2aWNlIHJ1bm5pbmcgdGhlIGJyb3dzZXIuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9vcmllbnRhdGlvbi1ldmVudC9cIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2aWNlL29yaWVudGF0aW9uL1wiLFwidGl0bGVcIjpcIkhUTUw1IFJvY2tzIHR1dG9yaWFsXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9waGlnZ2luczQyL2hhcy5qcy9tYXN0ZXIvZGV0ZWN0L2ZlYXR1cmVzLmpzI25hdGl2ZS1vcmllbnRhdGlvblwiLFwidGl0bGVcIjpcImhhcy5qcyB0ZXN0XCJ9LHtcInVybFwiOlwiaHR0cDovL2h0bWw1bGFicy5pbnRlcm9wZXJhYmlsaXR5YnJpZGdlcy5jb20vcHJvdG90eXBlcy9kZXZpY2Utb3JpZW50YXRpb24tZXZlbnRzL2RldmljZS1vcmllbnRhdGlvbi1ldmVudHMvaW5mb1wiLFwidGl0bGVcIjpcIkRldmljZU9yaWVudGF0aW9uIGltcGxlbWVudGF0aW9uIHByb3RvdHlwZSBmb3IgSUUxMFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9hdXJlbGlvLmF1ZGVyby5pdC9kZW1vL2RldmljZS1vcmllbnRhdGlvbi1hcGktZGVtby5odG1sXCIsXCJ0aXRsZVwiOlwiRGVtb1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJhXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJwXCIsXCI0XCI6XCJwXCIsXCI1XCI6XCJwXCIsXCI2XCI6XCJhXCIsXCI3XCI6XCJhXCIsXCI4XCI6XCJhXCIsXCI5XCI6XCJhXCIsXCIxMFwiOlwiYVwiLFwiMTFcIjpcImFcIixcIjEyXCI6XCJhXCIsXCIxM1wiOlwiYVwiLFwiMTRcIjpcImFcIixcIjE1XCI6XCJhXCIsXCIxNlwiOlwiYVwiLFwiMTdcIjpcImFcIixcIjE4XCI6XCJhXCIsXCIxOVwiOlwiYVwiLFwiMjBcIjpcImFcIixcIjIxXCI6XCJhXCIsXCIyMlwiOlwiYVwiLFwiMjNcIjpcImFcIixcIjI0XCI6XCJhXCIsXCIyNVwiOlwiYVwiLFwiMjZcIjpcImFcIixcIjI3XCI6XCJhXCIsXCIyOFwiOlwiYVwiLFwiMjlcIjpcImFcIixcIjMwXCI6XCJhXCIsXCIzMVwiOlwiYVwiLFwiMzJcIjpcImFcIixcIjMzXCI6XCJhXCIsXCIzNFwiOlwiYVwiLFwiMzVcIjpcImFcIixcIjM2XCI6XCJhXCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiYVwiLFwiOFwiOlwiYVwiLFwiOVwiOlwiYVwiLFwiMTBcIjpcImFcIixcIjExXCI6XCJhXCIsXCIxMlwiOlwiYVwiLFwiMTNcIjpcImFcIixcIjE0XCI6XCJhXCIsXCIxNVwiOlwiYVwiLFwiMTZcIjpcImFcIixcIjE3XCI6XCJhXCIsXCIxOFwiOlwiYVwiLFwiMTlcIjpcImFcIixcIjIwXCI6XCJhXCIsXCIyMVwiOlwiYVwiLFwiMjJcIjpcImFcIixcIjIzXCI6XCJhXCIsXCIyNFwiOlwiYVwiLFwiMjVcIjpcImFcIixcIjI2XCI6XCJhXCIsXCIyN1wiOlwiYVwiLFwiMjhcIjpcImFcIixcIjI5XCI6XCJhXCIsXCIzMFwiOlwiYVwiLFwiMzFcIjpcImFcIixcIjMyXCI6XCJhXCIsXCIzM1wiOlwiYVwiLFwiMzRcIjpcImFcIixcIjM1XCI6XCJhXCIsXCIzNlwiOlwiYVwiLFwiMzdcIjpcImFcIixcIjM4XCI6XCJhXCIsXCIzOVwiOlwiYVwiLFwiNDBcIjpcImFcIixcIjQxXCI6XCJhXCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI3LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwiYVwiLFwiMTZcIjpcImFcIixcIjE3XCI6XCJhXCIsXCIxOFwiOlwiYVwiLFwiMTlcIjpcImFcIixcIjIwXCI6XCJhXCIsXCIyMVwiOlwiYVwiLFwiMjJcIjpcImFcIixcIjIzXCI6XCJhXCIsXCIyNFwiOlwiYVwiLFwiMjVcIjpcImFcIixcIjI2XCI6XCJhXCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiYVwiLFwiNS4wLTUuMVwiOlwiYVwiLFwiNi4wLTYuMVwiOlwiYVwiLFwiNy4wLTcuMVwiOlwiYVwiLFwiOFwiOlwiYVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcImFcIixcIjRcIjpcImFcIixcIjQuMVwiOlwiYVwiLFwiNC4yLTQuM1wiOlwiYVwiLFwiNC40XCI6XCJhXCIsXCI0LjQuM1wiOlwiYVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcImFcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwiYVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwiYVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJhXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcImFcIn19LFwibm90ZXNcIjpcIlBhcnRpYWwgc3VwcG9ydCByZWZlcnMgdG8gdGhlIGxhY2sgb2YgY29tcGFzc25lZWRzY2FsaWJyYXRpb24gZXZlbnQuIFBhcnRpYWwgc3VwcG9ydCBhbHNvIHJlZmVycyB0byB0aGUgbGFjayBvZiBkZXZpY2Vtb3Rpb24gZXZlbnQgc3VwcG9ydCBmb3IgQ2hyb21lIDMwLSBhbmQgT3BlcmEuIE9wZXJhIE1vYmlsZSAxNCBsb3N0IHRoZSBvbmRldmljZW1vdGlvbiBldmVudCBzdXBwb3J0LiBGaXJlZm94IDMuNiwgNCBhbmQgNSBzdXBwb3J0IHRoZSBub24tc3RhbmRhcmQgW01vek9yaWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vTW96T3JpZW50YXRpb24pIGV2ZW50LlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjowLjA2LFwidXNhZ2VfcGVyY19hXCI6NzguNjksXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJkZXZpY2VvcmllbnRhdGlvbixkZXZpY2Vtb3Rpb25cIixcImNocm9tZV9pZFwiOlwiNTg3NDY5MDYyNzIwNzE2OCw1NTU2OTMxNzY2Nzc5OTA0XCJ9LFwic2NyaXB0LWRlZmVyXCI6e1widGl0bGVcIjpcImRlZmVyIGF0dHJpYnV0ZSBmb3IgZXh0ZXJuYWwgc2NyaXB0c1wiLFwiZGVzY3JpcHRpb25cIjpcIlRoZSBib29sZWFuIGRlZmVyIGF0dHJpYnV0ZSBvbiBzY3JpcHQgZWxlbWVudHMgYWxsb3dzIHRoZSBleHRlcm5hbCBKYXZhU2NyaXB0IGZpbGUgdG8gcnVuIHdoZW4gdGhlIERPTSBpcyBsb2FkZWQsIHdpdGhvdXQgZGVsYXlpbmcgcGFnZSBsb2FkIGZpcnN0LlwiLFwic3BlY1wiOlwiaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjYXR0ci1zY3JpcHQtZGVmZXJcIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSFRNTC9FbGVtZW50L3NjcmlwdCNBdHRyaWJ1dGVzXCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3Qvc2NyaXB0LmpzI3NjcmlwdC1kZWZlclwiLFwidGl0bGVcIjpcImhhcy5qcyB0ZXN0XCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvaHRtbC9hdHRyaWJ1dGVzL2RlZmVyXCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiRE9NXCIsXCJIVE1MNVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcImFcIixcIjZcIjpcImFcIixcIjdcIjpcImFcIixcIjhcIjpcImFcIixcIjlcIjpcImFcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcInlcIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJQYXJ0aWFsIHN1cHBvcnQgaW4gb2xkZXIgSUUgcmVmZXJzIHRvIGEgYnVnZ3kgaW1wbGVtZW50YXRpb24gKHNlZSBpc3N1ZSlcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6ODUuMDksXCJ1c2FnZV9wZXJjX2FcIjo2LjY0LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcIm5hdi10aW1pbmdcIjp7XCJ0aXRsZVwiOlwiTmF2aWdhdGlvbiBUaW1pbmcgQVBJXCIsXCJkZXNjcmlwdGlvblwiOlwiQVBJIGZvciBhY2Nlc3NpbmcgdGltaW5nIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gbmF2aWdhdGlvbiBhbmQgZWxlbWVudHMuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9uYXZpZ2F0aW9uLXRpbWluZy9cIixcInN0YXR1c1wiOlwicmVjXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0FQSS9uYXZpZ2F0aW9uVGltaW5nXCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy93ZWJwZXJmb3JtYW5jZS9iYXNpY3MvXCIsXCJ0aXRsZVwiOlwiSFRNTDUgUm9ja3MgdHV0b3JpYWxcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9hcGlzL25hdmlnYXRpb25fdGltaW5nXCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiRE9NXCIsXCJKUyBBUElcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiOFwiOlwieSB4XCIsXCI5XCI6XCJ5IHhcIixcIjEwXCI6XCJ5IHhcIixcIjExXCI6XCJ5IHhcIixcIjEyXCI6XCJ5IHhcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NzcuOTksXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwicGVyZm9ybWFuY2UscGVyZm9ybWFuY2UudGltaW5nXCIsXCJpZV9pZFwiOlwibmF2aWdhdGlvbnRpbWluZ2FwaVwiLFwiY2hyb21lX2lkXCI6XCI1NTg0MTQ0Njc5NTY3MzYwXCJ9LFwiYXVkaW8tYXBpXCI6e1widGl0bGVcIjpcIldlYiBBdWRpbyBBUElcIixcImRlc2NyaXB0aW9uXCI6XCJIaWdoLWxldmVsIEphdmFTY3JpcHQgQVBJIGZvciBwcm9jZXNzaW5nIGFuZCBzeW50aGVzaXppbmcgYXVkaW9cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL3dlYmF1ZGlvL1wiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vY29yYmFuYnJvb2svYXVkaW9ub2RlLmpzXCIsXCJ0aXRsZVwiOlwiUG9seWZpbGwgdG8gc3VwcG9ydCBXZWIgQXVkaW8gQVBJIGluIEZpcmVmb3hcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9hcGlzL3dlYmF1ZGlvXCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuZG9ib2lzbS5jb20vcHJvamVjdHMvd2ViYXVkaW8tY29tcGF0aWJpbGl0eS9cIixcInRpdGxlXCI6XCJBZGRpdGlvbmFsIGJyb3dzZXIgY29tcGF0aWJpbGl0eSB0ZXN0cyBmb3Igc3BlY2lmaWMgZmVhdHVyZXNcIn0se1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vZzIwMGtnL1dBQVBJU2ltXCIsXCJ0aXRsZVwiOlwiUG9seWZpbGwgdG8gZW5hYmxlIFdlYiBBdWRpbyBBUEkgdGhyb3VnaCBGaXJlZm94IEF1ZGlvIERhdGEgYXBpIG9yIGZsYXNoXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJKUyBBUElcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwieSB4XCIsXCIxMVwiOlwieSB4XCIsXCIxMlwiOlwieSB4XCIsXCIxM1wiOlwieSB4XCIsXCIxNFwiOlwieSB4XCIsXCIxNVwiOlwieSB4XCIsXCIxNlwiOlwieSB4XCIsXCIxN1wiOlwieSB4XCIsXCIxOFwiOlwieSB4XCIsXCIxOVwiOlwieSB4XCIsXCIyMFwiOlwieSB4XCIsXCIyMVwiOlwieSB4XCIsXCIyMlwiOlwieSB4XCIsXCIyM1wiOlwieSB4XCIsXCIyNFwiOlwieSB4XCIsXCIyNVwiOlwieSB4XCIsXCIyNlwiOlwieSB4XCIsXCIyN1wiOlwieSB4XCIsXCIyOFwiOlwieSB4XCIsXCIyOVwiOlwieSB4XCIsXCIzMFwiOlwieSB4XCIsXCIzMVwiOlwieSB4XCIsXCIzMlwiOlwieSB4XCIsXCIzM1wiOlwieSB4XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJ5IHhcIixcIjYuMVwiOlwieSB4XCIsXCI3XCI6XCJ5IHhcIixcIjcuMVwiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwieSB4XCIsXCIxNlwiOlwieSB4XCIsXCIxN1wiOlwieSB4XCIsXCIxOFwiOlwieSB4XCIsXCIxOVwiOlwieSB4XCIsXCIyMFwiOlwieSB4XCIsXCIyMVwiOlwieSB4XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJ5IHhcIixcIjcuMC03LjFcIjpcInkgeFwiLFwiOFwiOlwieSB4XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiRmlyZWZveCB2ZXJzaW9ucyA8IDI1IHN1cHBvcnQgYW4gYWx0ZXJuYXRpdmUsIGRlcHJlY2F0ZWQgYXVkaW8gQVBJLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo2My43MyxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJ3ZWItYXVkaW9cIixcImllX2lkXCI6XCJ3ZWJhdWRpb2FwaVwiLFwiY2hyb21lX2lkXCI6XCI2MjYxNzE4NzIwMTg0MzIwXCJ9LFwiY3NzLXJlZ2lvbnNcIjp7XCJ0aXRsZVwiOlwiQ1NTIFJlZ2lvbnNcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgZmxvd2luZyBjb250ZW50IGludG8gbXVsdGlwbGUgZWxlbWVudHMuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXJlZ2lvbnMvXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9odG1sLmFkb2JlLmNvbS93ZWJzdGFuZGFyZHMvY3NzcmVnaW9ucy9cIixcInRpdGxlXCI6XCJBZG9iZSBkZW1vcyBhbmQgc2FtcGxlc1wifSx7XCJ1cmxcIjpcImh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvaWUvaGgyNzI5MDIjX0NTU0Nvbm5lY3RlZFwiLFwidGl0bGVcIjpcIklFMTAgZGV2ZWxvcGVyIGd1aWRlIGluZm9cIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvYXRydWxlcy9AcmVnaW9uXCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTM1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJhIHhcIixcIjExXCI6XCJhIHhcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJuXCIsXCIzNVwiOlwiblwiLFwiMzZcIjpcIm5cIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJhIHhcIixcIjE2XCI6XCJhIHhcIixcIjE3XCI6XCJhIHhcIixcIjE4XCI6XCJhIHhcIixcIjE5XCI6XCJuIGRcIixcIjIwXCI6XCJuIGRcIixcIjIxXCI6XCJuIGRcIixcIjIyXCI6XCJuIGRcIixcIjIzXCI6XCJuIGRcIixcIjI0XCI6XCJuIGRcIixcIjI1XCI6XCJuIGRcIixcIjI2XCI6XCJuIGRcIixcIjI3XCI6XCJuIGRcIixcIjI4XCI6XCJuIGRcIixcIjI5XCI6XCJuIGRcIixcIjMwXCI6XCJuIGRcIixcIjMxXCI6XCJuIGRcIixcIjMyXCI6XCJuIGRcIixcIjMzXCI6XCJuIGRcIixcIjM0XCI6XCJuIGRcIixcIjM1XCI6XCJuXCIsXCIzNlwiOlwiblwiLFwiMzdcIjpcIm5cIixcIjM4XCI6XCJuXCIsXCIzOVwiOlwiblwiLFwiNDBcIjpcIm5cIixcIjQxXCI6XCJuXCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiNy4xXCI6XCJ5IHhcIixcIjhcIjpcInkgeFwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJ5IHhcIixcIjhcIjpcInkgeFwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwiblwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwiblwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwiblwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJuXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcImEgeFwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieSB4XCJ9fSxcIm5vdGVzXCI6XCJTdXBwb3J0IGluIElFMTAgYW5kIElFMTEgaXMgbGltaXRlZCB0byB1c2luZyBhbiBpZnJhbWUgYXMgYSBjb250ZW50IHNvdXJjZSB3aXRoIHRoZSBgLW1zLWZsb3ctaW50bzogZmxvd19uYW1lO2AgYW5kIGAtbXMtZmxvdy1mcm9tOiBmbG93X25hbWU7YCBzeW50YXguIFwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjoxMi43NyxcInVzYWdlX3BlcmNfYVwiOjEwLjIxLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwicmVnaW9uc1wiLFwiY2hyb21lX2lkXCI6XCI1NjU1NjEyOTM1MzcyODAwXCJ9LFwic3BlbGxjaGVjay1hdHRyaWJ1dGVcIjp7XCJ0aXRsZVwiOlwiU3BlbGxjaGVjayBhdHRyaWJ1dGVcIixcImRlc2NyaXB0aW9uXCI6XCJBdHRyaWJ1dGUgZm9yIGBpbnB1dGAvYHRleHRhcmVhYCBmaWVsZHMgdG8gZW5hYmxlL2Rpc2FibGUgdGhlIGJyb3dzZXIncyBzcGVsbGNoZWNrZXIuXCIsXCJzcGVjXCI6XCJodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbnRlcmFjdGlvbi5odG1sI3NwZWxsaW5nLWFuZC1ncmFtbWFyLWNoZWNraW5nXCIsXCJzdGF0dXNcIjpcImNyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvQ29udHJvbGxpbmdfc3BlbGxfY2hlY2tpbmdfaW5fSFRNTF9mb3Jtc0NvbnRyb2xsaW5nX3NwZWxsX2NoZWNraW5nX2luX0hUTUxfZm9ybXNcIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwifV0sXCJjYXRlZ29yaWVzXCI6W1wiSFRNTDVcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwieVwiLFwiM1wiOlwieVwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJhXCIsXCI0LjAtNC4xXCI6XCJhXCIsXCI0LjItNC4zXCI6XCJhXCIsXCI1LjAtNS4xXCI6XCJhXCIsXCI2LjAtNi4xXCI6XCJhXCIsXCI3LjAtNy4xXCI6XCJhXCIsXCI4XCI6XCJhXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcImFcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJhXCIsXCIyLjJcIjpcImFcIixcIjIuM1wiOlwiYVwiLFwiM1wiOlwiYVwiLFwiNFwiOlwiYVwiLFwiNC4xXCI6XCJhXCIsXCI0LjItNC4zXCI6XCJhXCIsXCI0LjRcIjpcImFcIixcIjQuNC4zXCI6XCJhXCJ9LFwiYmJcIjp7XCI3XCI6XCJhXCIsXCIxMFwiOlwiYVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwiLFwiMTEuMVwiOlwiYVwiLFwiMTEuNVwiOlwiYVwiLFwiMTJcIjpcImFcIixcIjEyLjFcIjpcImFcIixcIjI0XCI6XCJhXCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJhXCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcImFcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiYVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiYVwifX0sXCJub3Rlc1wiOlwiVGhlIHBhcnRpYWwgc3VwcG9ydCBpbiBtb2JpbGUgYnJvd3NlcnMgcmVzdWx0cyBmcm9tIHRoZWlyIE9TIGdlbmVyYWxseSBoYXZpbmcgYnVpbHQtaW4gc3BlbGwgY2hlY2tpbmcgaW5zdGVhZCBvZiB1c2luZyB0aGUgd2F2eSB1bmRlcmxpbmUgdG8gaW5kaWNhdGUgbWlzc3BlbGxlZCB3b3Jkcy4gYHNwZWxsY2hlY2s9XFxcImZhbHNlXFxcImAgZG9lcyBub3Qgc2VlbSB0byBoYXZlIGFueSBlZmZlY3QgaW4gdGhlc2UgYnJvd3NlcnMuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjYwLjM0LFwidXNhZ2VfcGVyY19hXCI6MjguOTYsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJzcGVsbGluZ1wiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJmdWxsc2NyZWVuXCI6e1widGl0bGVcIjpcIkZ1bGwgU2NyZWVuIEFQSVwiLFwiZGVzY3JpcHRpb25cIjpcIkFQSSBmb3IgYWxsb3dpbmcgY29udGVudCAobGlrZSBhIHZpZGVvIG9yIGNhbnZhcyBlbGVtZW50KSB0byB0YWtlIHVwIHRoZSBlbnRpcmUgc2NyZWVuLlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvZnVsbHNjcmVlbi9cIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL1VzaW5nX2Z1bGwtc2NyZWVuX21vZGVcIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9qbG9uZ3N0ZXIuY29tLzIwMTEvMTEvMjEvY2FudmFzLmh0bWxcIixcInRpdGxlXCI6XCJCbG9nIHBvc3RcIn0se1widXJsXCI6XCJodHRwOi8vaGFja3MubW96aWxsYS5vcmcvMjAxMi8wMS91c2luZy10aGUtZnVsbHNjcmVlbi1hcGktaW4td2ViLWJyb3dzZXJzL1wiLFwidGl0bGVcIjpcIk1vemlsbGEgaGFja3MgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2RvbS9FbGVtZW50L3JlcXVlc3RGdWxsc2NyZWVuXCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJ5IHhcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJhIHhcIixcIjExXCI6XCJhIHhcIixcIjEyXCI6XCJhIHhcIixcIjEzXCI6XCJhIHhcIixcIjE0XCI6XCJhIHhcIixcIjE1XCI6XCJhIHhcIixcIjE2XCI6XCJhIHhcIixcIjE3XCI6XCJhIHhcIixcIjE4XCI6XCJhIHhcIixcIjE5XCI6XCJhIHhcIixcIjIwXCI6XCJhIHhcIixcIjIxXCI6XCJhIHhcIixcIjIyXCI6XCJhIHhcIixcIjIzXCI6XCJhIHhcIixcIjI0XCI6XCJhIHhcIixcIjI1XCI6XCJhIHhcIixcIjI2XCI6XCJhIHhcIixcIjI3XCI6XCJhIHhcIixcIjI4XCI6XCJhIHhcIixcIjI5XCI6XCJhIHhcIixcIjMwXCI6XCJhIHhcIixcIjMxXCI6XCJhIHhcIixcIjMyXCI6XCJhIHhcIixcIjMzXCI6XCJhIHhcIixcIjM0XCI6XCJhIHhcIixcIjM1XCI6XCJhIHhcIixcIjM2XCI6XCJhIHhcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJhIHhcIixcIjE2XCI6XCJhIHhcIixcIjE3XCI6XCJhIHhcIixcIjE4XCI6XCJhIHhcIixcIjE5XCI6XCJhIHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIixcIjI3XCI6XCJ5IHhcIixcIjI4XCI6XCJ5IHhcIixcIjI5XCI6XCJ5IHhcIixcIjMwXCI6XCJ5IHhcIixcIjMxXCI6XCJ5IHhcIixcIjMyXCI6XCJ5IHhcIixcIjMzXCI6XCJ5IHhcIixcIjM0XCI6XCJ5IHhcIixcIjM1XCI6XCJ5IHhcIixcIjM2XCI6XCJ5IHhcIixcIjM3XCI6XCJ5IHhcIixcIjM4XCI6XCJ5IHhcIixcIjM5XCI6XCJ5IHhcIixcIjQwXCI6XCJ5IHhcIixcIjQxXCI6XCJ5IHhcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJhIHhcIixcIjZcIjpcInkgeFwiLFwiNi4xXCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiNy4xXCI6XCJ5IHhcIixcIjhcIjpcInkgeFwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiYVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJ5IHhcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInkgeFwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJhIHhcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IHJlZmVycyB0byBzdXBwb3J0aW5nIGFuIGVhcmxpZXIgZHJhZnQgb2YgdGhlIHNwZWMuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjUxLjU3LFwidXNhZ2VfcGVyY19hXCI6MTMuNjksXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJmdWxsLXNjcmVlblwiLFwiaWVfaWRcIjpcImZ1bGxzY3JlZW5hcGlcIixcImNocm9tZV9pZFwiOlwiNTI1OTUxMzg3MTQ2NjQ5NlwifSxcInJlcXVlc3RhbmltYXRpb25mcmFtZVwiOntcInRpdGxlXCI6XCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIixcImRlc2NyaXB0aW9uXCI6XCJBUEkgYWxsb3dpbmcgYSBtb3JlIGVmZmljaWVudCB3YXkgb2YgcnVubmluZyBzY3JpcHQtYmFzZWQgYW5pbWF0aW9uLCBjb21wYXJlZCB0byB0cmFkaXRpb25hbCBtZXRob2RzIHVzaW5nIHRpbWVvdXRzLlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvYW5pbWF0aW9uLXRpbWluZy8jcmVxdWVzdEFuaW1hdGlvbkZyYW1lXCIsXCJzdGF0dXNcIjpcImNyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9wYXVsaXJpc2guY29tLzIwMTEvcmVxdWVzdGFuaW1hdGlvbmZyYW1lLWZvci1zbWFydC1hbmltYXRpbmcvXCIsXCJ0aXRsZVwiOlwiQmxvZyBwb3N0XCJ9LHtcInVybFwiOlwiaHR0cDovL2hhY2tzLm1vemlsbGEub3JnLzIwMTEvMDgvYW5pbWF0aW5nLXdpdGgtamF2YXNjcmlwdC1mcm9tLXNldGludGVydmFsLXRvLXJlcXVlc3RhbmltYXRpb25mcmFtZS9cIixcInRpdGxlXCI6XCJNb3ppbGxhIEhhY2tzIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9kb20vV2luZG93L3JlcXVlc3RBbmltYXRpb25GcmFtZVwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwieSB4XCIsXCI1XCI6XCJ5IHhcIixcIjZcIjpcInkgeFwiLFwiN1wiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIixcIjlcIjpcInkgeFwiLFwiMTBcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTNcIjpcInkgeFwiLFwiMTRcIjpcInkgeFwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInkgeFwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTNcIjpcInkgeFwiLFwiMTRcIjpcInkgeFwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInkgeFwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcInkgeFwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwieSB4XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwieSB4XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NzkuNzUsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwicmVxdWVzdGFuaW1hdGlvbmZyYW1lXCIsXCJjaHJvbWVfaWRcIjpcIjUyMzM0MDA0NzAzMDY4MTZcIn0sXCJpbnB1dC1yYW5nZVwiOntcInRpdGxlXCI6XCJSYW5nZSBpbnB1dCB0eXBlXCIsXCJkZXNjcmlwdGlvblwiOlwiRm9ybSBmaWVsZCB0eXBlIHRoYXQgYWxsb3dzIHRoZSB1c2VyIHRvIHNlbGVjdCBhIHZhbHVlIHVzaW5nIGEgc2xpZGVyIHdpZGdldC5cIixcInNwZWNcIjpcImh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjcmFuZ2Utc3RhdGUtKHR5cGU9cmFuZ2UpXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9mcnluL2h0bWw1c2xpZGVyXCIsXCJ0aXRsZVwiOlwiUG9seWZpbGwgZm9yIEZpcmVmb3hcIn0se1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vZnJlcWRlYy9mZC1zbGlkZXJcIixcInRpdGxlXCI6XCJDcm9zcy1icm93c2VyIHBvbHlmaWxsXCJ9LHtcInVybFwiOlwiaHR0cDovL3R1dG9yaWFsemluZS5jb20vMjAxMS8xMi93aGF0LXlvdS1uZWVkLXRvLWtub3ctaHRtbDUtcmFuZ2UtaW5wdXQvXCIsXCJ0aXRsZVwiOlwiVHV0b3JpYWxcIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3QvZm9ybS5qcyNpbnB1dC10eXBlLXJhbmdlXCIsXCJ0aXRsZVwiOlwiaGFzLmpzIHRlc3RcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9odG1sL2VsZW1lbnRzL2lucHV0L3R5cGUvcmFuZ2VcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2FuZHJlcnVmZmVydC9yYW5nZXNsaWRlci5qc1wiLFwidGl0bGVcIjpcInJhbmdlc2xpZGVyLmpzIHBvbHlmaWxsXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJIVE1MNVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInVcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwieVwiLFwiMy4yXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJ5XCIsXCI5LjUtOS42XCI6XCJ5XCIsXCIxMC4wLTEwLjFcIjpcInlcIixcIjEwLjVcIjpcInlcIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcImFcIixcIjIuMlwiOlwiYVwiLFwiMi4zXCI6XCJhXCIsXCIzXCI6XCJhXCIsXCI0XCI6XCJhXCIsXCI0LjFcIjpcImFcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJDdXJyZW50bHkgYWxsIEFuZHJvaWQgYnJvd3NlcnMgd2l0aCBwYXJ0aWFsIHN1cHBvcnQgaGlkZSB0aGUgc2xpZGVyIGlucHV0IGZpZWxkIGJ5IGRlZmF1bHQuIEhvd2V2ZXIsIHRoZSBlbGVtZW50IFtjYW4gYmUgc3R5bGVkXShodHRwOi8vdGlmZmFueWJicm93bi5jb20vMjAxMi8wMi8wNy9pbnB1dC10eXBlcmFuZ2UtYW5kLWFuZHJvaWRzLXN0b2NrLWJyb3dzZXIvKSB0byBiZSBtYWRlIHZpc2libGUgYW5kIHVzYWJsZS5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6ODIuMjYsXCJ1c2FnZV9wZXJjX2FcIjozLjE4LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiZm9ybXNcIixcImtleXdvcmRzXCI6XCJpbnB1dCB0eXBlPVxcXCJyYW5nZVxcXCJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwibWF0Y2htZWRpYVwiOntcInRpdGxlXCI6XCJtYXRjaE1lZGlhXCIsXCJkZXNjcmlwdGlvblwiOlwiQVBJIGZvciBmaW5kaW5nIG91dCB3aGV0aGVyIG9yIG5vdCBhIG1lZGlhIHF1ZXJ5IGFwcGxpZXMgdG8gdGhlIGRvY3VtZW50LlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3Nzb20tdmlldy8jZG9tLXdpbmRvdy1tYXRjaG1lZGlhXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9wYXVsaXJpc2gvbWF0Y2hNZWRpYS5qcy9cIixcInRpdGxlXCI6XCJtYXRjaE1lZGlhLmpzIHBvbHlmaWxsXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5tYXRjaE1lZGlhXCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9DU1MvVXNpbmdfbWVkaWFfcXVlcmllc19mcm9tX2NvZGVcIixcInRpdGxlXCI6XCJNRE4gdHV0b3JpYWxcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvbWVkaWFfcXVlcmllcy9hcGlzL21hdGNoTWVkaWFcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJET01cIixcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6ODQuOTEsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwibWVkaWFxdWVyeWxpc3RcIixcImllX2lkXCI6XCJtYXRjaG1lZGlhXCIsXCJjaHJvbWVfaWRcIjpcIjQ2Nzc4NzIyMjAzNzI5OTJcIn0sXCJpbnB1dC1kYXRldGltZVwiOntcInRpdGxlXCI6XCJEYXRlIGFuZCB0aW1lIGlucHV0IHR5cGVzXCIsXCJkZXNjcmlwdGlvblwiOlwiRm9ybSBmaWVsZCB3aWRnZXQgdG8gZWFzaWx5IGFsbG93IHVzZXJzIHRvIGVudGVyIGEgZGF0ZSBvciBhIHRpbWUsIGdlbmVyYWxseSBieSB1c2luZyBhIGNhbGVuZGFyL3RpbWUgaW5wdXQgd2lkZ2V0LiBQcmV2aW91c2x5IHRoZXJlIHdhcyBhbHNvIGEgc2luZ2xlIGZpZWxkIGZvciBib3RoIGRhdGUgJiB0aW1lLCBidXQgdGhpcyBoYXMgYmVlbiBkZXByZWNhdGVkLlwiLFwic3BlY1wiOlwiaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNkYXRlLXN0YXRlLSh0eXBlPWRhdGUpXCIsXCJzdGF0dXNcIjpcImNyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9uZXQudHV0c3BsdXMuY29tL3R1dG9yaWFscy9qYXZhc2NyaXB0LWFqYXgvcXVpY2stdGlwLWNyb3NzLWJyb3dzZXItZGF0ZXBpY2tlcnMtd2l0aGluLW1pbnV0ZXMvXCIsXCJ0aXRsZVwiOlwiRGF0ZXBpY2tlciB0dXRvcmlhbCB3L3BvbHlmaWxsXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL3pvbHRhbi1kdWxhYy9odG1sNUZvcm1zLmpzXCIsXCJ0aXRsZVwiOlwiUG9seWZpbGwgZm9yIEhUTUw1IGZvcm1zXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9waGlnZ2luczQyL2hhcy5qcy9tYXN0ZXIvZGV0ZWN0L2Zvcm0uanMjaW5wdXQtdHlwZS1kYXRldGltZTtpbnB1dC10eXBlLWRhdGV0aW1lLWxvY2FsXCIsXCJ0aXRsZVwiOlwiaGFzLmpzIHRlc3RcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9odG1sL2VsZW1lbnRzL2lucHV0L3R5cGUvZGF0ZVwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkhUTUw1XCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuXCIsXCIzMVwiOlwiblwiLFwiMzJcIjpcIm5cIixcIjMzXCI6XCJuXCIsXCIzNFwiOlwiblwiLFwiMzVcIjpcIm5cIixcIjM2XCI6XCJuXCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI3LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcGVyYVwiOntcIjlcIjpcInlcIixcIjkuNS05LjZcIjpcInlcIixcIjEwLjAtMTAuMVwiOlwieVwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJuXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlBhcnRpYWwgc3VwcG9ydCBpbiBpT1MgcmVmZXJzIHRvIGEgbGFjayBvZiBzdXBwb3J0IGZvciBhdHRyaWJ1dGVzIGxpa2Ugc3RlcCwgbWluLCBvciBtYXguXFxyXFxuXFxyXFxuT2xkZXIgdmVyc2lvbnMgb2YgU2FmYXJpIHByb3ZpZGUgZGF0ZS1mb3JtYXR0ZWQgdGV4dCBmaWVsZHMsIGJ1dCBubyByZWFsIGNhbGVuZGFyIHdpZGdldC5cXHJcXG5cXHJcXG5Tb21lIG1vZGlmaWVkIHZlcnNpb25zIG9mIHRoZSBBbmRyb2lkIDQueCBicm93c2VyIGRvIGhhdmUgc3VwcG9ydCBmb3IgZGF0ZS90aW1lIGZpZWxkcy5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NTMuOTcsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiZm9ybXNcIixcImtleXdvcmRzXCI6XCJkYXRlcGlja2VyLHRpbWVwaWNrZXIsaW5wdXQgdHlwZT1cXFwiZGF0ZVxcXCIsaW5wdXQgdHlwZT1cXFwidGltZVxcXCJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiNjY0MDkzMzk5OTIxNDU5MlwifSxcImlucHV0LWNvbG9yXCI6e1widGl0bGVcIjpcIkNvbG9yIGlucHV0IHR5cGVcIixcImRlc2NyaXB0aW9uXCI6XCJGb3JtIGZpZWxkIGFsbG93aW5nIHRoZSB1c2VyIHRvIHNlbGVjdCBhIGNvbG9yLlwiLFwic3BlY1wiOlwiaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb2xvci1zdGF0ZS0odHlwZT1jb2xvcilcIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL3d3dy5odG1sNXR1dG9yaWFsLmluZm8vaHRtbDUtY29sb3IucGhwXCIsXCJ0aXRsZVwiOlwiVHV0b3JpYWxcIn0se1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vam9uc3RpcGUvY29sb3ItcG9seWZpbGxcIixcInRpdGxlXCI6XCJQb2x5ZmlsbFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2h0bWwvZWxlbWVudHMvaW5wdXQvdHlwZS9jb2xvclwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkhUTUw1XCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI3LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcImFcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo1NC45NSxcInVzYWdlX3BlcmNfYVwiOjMuMTEsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJmb3Jtc1wiLFwia2V5d29yZHNcIjpcImNvbG91cixpbnB1dCB0eXBlPVxcXCJjb2xvclxcXCJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiaW5wdXQtbnVtYmVyXCI6e1widGl0bGVcIjpcIk51bWJlciBpbnB1dCB0eXBlXCIsXCJkZXNjcmlwdGlvblwiOlwiRm9ybSBmaWVsZCB0eXBlIGZvciBudW1iZXJzLlwiLFwic3BlY1wiOlwiaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNudW1iZXItc3RhdGUtKHR5cGU9bnVtYmVyKVwiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vd3d3Lmh0bWw1dHV0b3JpYWwuaW5mby9odG1sNS1udW1iZXIucGhwXCIsXCJ0aXRsZVwiOlwiVHV0b3JpYWxcIn0se1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vam9uc3RpcGUvbnVtYmVyLXBvbHlmaWxsXCIsXCJ0aXRsZVwiOlwiUG9seWZpbGxcIn0se1widXJsXCI6XCJodHRwczovL3Jhdy5naXRodWIuY29tL3BoaWdnaW5zNDIvaGFzLmpzL21hc3Rlci9kZXRlY3QvZm9ybS5qcyNpbnB1dC10eXBlLW51bWJlclwiLFwidGl0bGVcIjpcImhhcy5qcyB0ZXN0XCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvaHRtbC9lbGVtZW50cy9pbnB1dC90eXBlL251bWJlclwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkhUTUw1XCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcImFcIixcIjExXCI6XCJhXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcInlcIixcIjkuNS05LjZcIjpcInlcIixcIjEwLjAtMTAuMVwiOlwieVwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiYVwiLFwiNC4wLTQuMVwiOlwiYVwiLFwiNC4yLTQuM1wiOlwiYVwiLFwiNS4wLTUuMVwiOlwiYVwiLFwiNi4wLTYuMVwiOlwiYVwiLFwiNy4wLTcuMVwiOlwiYVwiLFwiOFwiOlwiYVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcImFcIixcIjQuMVwiOlwiYVwiLFwiNC4yLTQuM1wiOlwiYVwiLFwiNC40XCI6XCJhXCIsXCI0LjQuM1wiOlwiYVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcImFcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwiYVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwiYVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJhXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcImFcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcImFcIn19LFwibm90ZXNcIjpcImlPUyBTYWZhcmksIEFuZHJvaWQgNCwgQ2hyb21lIGZvciBBbmRyb2lkIHNob3cgbnVtYmVyIGlucHV0LCBidXQgZG8gbm90IHVzZSBcXFwic3RlcFxcXCIsIFxcXCJtaW5cXFwiIG9yIFxcXCJtYXhcXFwiIGF0dHJpYnV0ZXMgb3Igc2hvdyBpbmNyZW1lbnQvZGVjcmVtZW50IGJ1dHRvbnMuIEludGVybmV0IEV4cGxvcmVyIDEwIGFuZCAxMSBkbyBub3Qgc2hvdyBpbmNyZW1lbnQvZGVjcmVtZW50IGJ1dHRvbnMuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjQ5LjIxLFwidXNhZ2VfcGVyY19hXCI6MzQuNTEsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJmb3Jtc1wiLFwia2V5d29yZHNcIjpcInNwaW5uZXIsaW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJpZnJhbWUtc2FuZGJveFwiOntcInRpdGxlXCI6XCJzYW5kYm94IGF0dHJpYnV0ZSBmb3IgaWZyYW1lc1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBydW5uaW5nIGV4dGVybmFsIHNpdGUgcGFnZXMgd2l0aCByZWR1Y2VkIHByaXZpbGVnZXMgKGUuZy4gbm8gSmF2YVNjcmlwdCkgaW4gaWZyYW1lc1wiLFwic3BlY1wiOlwiaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZW1iZWRkZWQtY29udGVudC5odG1sI2F0dHItaWZyYW1lLXNhbmRib3hcIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2Jsb2cuY2hyb21pdW0ub3JnLzIwMTAvMDUvc2VjdXJpdHktaW4tZGVwdGgtaHRtbDVzLXNhbmRib3guaHRtbFwiLFwidGl0bGVcIjpcIkNocm9taXVtIGJsb2cgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvaGg1NjM0OTZcIixcInRpdGxlXCI6XCJNU0ROIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9odG1sL2F0dHJpYnV0ZXMvc2FuZGJveFwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkhUTUw1XCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcImFcIixcIjE4XCI6XCJhXCIsXCIxOVwiOlwiYVwiLFwiMjBcIjpcImFcIixcIjIxXCI6XCJhXCIsXCIyMlwiOlwiYVwiLFwiMjNcIjpcImFcIixcIjI0XCI6XCJhXCIsXCIyNVwiOlwiYVwiLFwiMjZcIjpcImFcIixcIjI3XCI6XCJhXCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJ5XCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo4NC4zNixcInVzYWdlX3BlcmNfYVwiOjAuOTcsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJpZnJhbWVzYW5kYm94YXR0cmlidXRlXCIsXCJjaHJvbWVfaWRcIjpcIjU3MTU1MzYzMTkwODY1OTJcIn0sXCJjc3MtY291bnRlcnNcIjp7XCJ0aXRsZVwiOlwiQ1NTIENvdW50ZXJzXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGNvbnRyb2xsaW5nIG51bWJlciB2YWx1ZXMgaW4gZ2VuZXJhdGVkIGNvbnRlbnQsIHVzaW5nIHRoZSBjb3VudGVyLXJlc2V0IGFuZCBjb3VudGVyLWluY3JlbWVudCBwcm9wZXJ0aWVzLlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvZ2VuZXJhdGUuaHRtbCNjb3VudGVyc1wiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vb253ZWJkZXYuYmxvZ3Nwb3QuY29tLzIwMTIvMDIvY3NzLWNvdW50ZXJzLXR1dG9yaWFsLmh0bWxcIixcInRpdGxlXCI6XCJUdXRvcmlhbCBhbmQgaW5mb3JtYXRpb25cIn0se1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9DU1NfQ291bnRlcnNcIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9wcm9wZXJ0aWVzL2NvdW50ZXItcmVzZXRcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1MyXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcInlcIixcIjNcIjpcInlcIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJ5XCIsXCIzLjJcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcInlcIixcIjkuNS05LjZcIjpcInlcIixcIjEwLjAtMTAuMVwiOlwieVwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieVwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJ5XCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieVwiLFwiMi4yXCI6XCJ5XCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo5Ni4wNCxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiY3NzLXJlc2l6ZVwiOntcInRpdGxlXCI6XCJDU1MgcmVzaXplIHByb3BlcnR5XCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGFsbG93aW5nIGFuIGVsZW1lbnQgdG8gYmUgcmVzaXplZCBieSB0aGUgdXNlciwgd2l0aCBvcHRpb25zIHRvIGxpbWl0IHRvIGEgZ2l2ZW4gZGlyZWN0aW9uLiBcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdWkvI3Jlc2l6ZVwiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vY3NzLXRyaWNrcy5jb20vYWxtYW5hYy9wcm9wZXJ0aWVzL3IvcmVzaXplL1wiLFwidGl0bGVcIjpcIkNTUyBUcmlja3MgaW5mb1wifSx7XCJ1cmxcIjpcImh0dHA6Ly9kYXZpZHdhbHNoLm5hbWUvdGV4dGFyZWEtcmVzaXplXCIsXCJ0aXRsZVwiOlwiT24gdGV4dGFyZWEgcmVzaXppbmdcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcInkgeFwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiYVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcIm5cIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJPcGVyYSAxMi4xMCsgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgdGhlIHJlc2l6ZSBwcm9wZXJ0eSBmb3IgdGV4dGFyZWEgZWxlbWVudHMuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjU4LjM2LFwidXNhZ2VfcGVyY19hXCI6MC4yMyxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImhvcml6b250YWwsdmVydGljYWxcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiaW5wdXQtcGxhY2Vob2xkZXJcIjp7XCJ0aXRsZVwiOlwiaW5wdXQgcGxhY2Vob2xkZXIgYXR0cmlidXRlXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHNldHRpbmcgcGxhY2Vob2xkZXIgdGV4dCBmb3IgdGV4dC1saWtlIGlucHV0IGZpZWxkcywgdG8gc3VnZ2VzdCB0aGUgZXhwZWN0ZWQgaW5zZXJ0ZWQgaW5mb3JtYXRpb24uXCIsXCJzcGVjXCI6XCJodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2F0dHItaW5wdXQtcGxhY2Vob2xkZXJcIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL3d3dy56YWNobGVhdC5jb20vd2ViL3BsYWNlaG9sZGVyL1wiLFwidGl0bGVcIjpcIkFydGljbGUgb24gdXNhZ2VcIn0se1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9qcXVlcnktcGxhY2Vob2xkZXJcIixcInRpdGxlXCI6XCJQb2x5ZmlsbFwifSx7XCJ1cmxcIjpcImh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vcGhpZ2dpbnM0Mi9oYXMuanMvbWFzdGVyL2RldGVjdC9mb3JtLmpzI2lucHV0LWF0dHItcGxhY2Vob2xkZXJcIixcInRpdGxlXCI6XCJoYXMuanMgdGVzdFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2h0bWwvYXR0cmlidXRlcy9wbGFjZWhvbGRlclwiLFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIn0se1widXJsXCI6XCJodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2FuZHJvaWQvaXNzdWVzL2RldGFpbD9pZD0yNDYyNlwiLFwidGl0bGVcIjpcIklzc3VlIDI0NjI2OiBQbGFjZWhvbGRlciB0ZXh0IGZvciBhbiBpbnB1dCB0eXBlPVwifV0sXCJjYXRlZ29yaWVzXCI6W1wiSFRNTDVcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcImFcIixcIjMuMlwiOlwiYVwiLFwiNFwiOlwiYVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiYVwiLFwiMTEuMVwiOlwiYVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ5XCIsXCI0LjAtNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ5XCIsXCIyLjJcIjpcInlcIixcIjIuM1wiOlwieVwiLFwiM1wiOlwieVwiLFwiNFwiOlwiYVwiLFwiNC4xXCI6XCJhXCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IGluIG9sZGVyIFNhZmFyaSBhbmQgT3BlcmEgdmVyc2lvbnMgcmVmZXJzIHRvIGxhY2tpbmcgcGxhY2Vob2xkZXIgc3VwcG9ydCBvbiB0ZXh0YXJlYSBlbGVtZW50cy4gXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjgzLjgzLFwidXNhZ2VfcGVyY19hXCI6Mi40OCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcImZvcm1zXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcInNwZHlcIjp7XCJ0aXRsZVwiOlwiU1BEWSBuZXR3b3JraW5nIHByb3RvY29sXCIsXCJkZXNjcmlwdGlvblwiOlwiTmV0d29ya2luZyBwcm90b2NvbCBmb3IgbG93LWxhdGVuY3kgdHJhbnNwb3J0IG9mIGNvbnRlbnQgb3ZlciB0aGUgd2ViLlwiLFwic3BlY1wiOlwiaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtbWJlbHNoZS1odHRwYmlzLXNwZHktMDBcIixcInN0YXR1c1wiOlwidW5vZmZcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TUERZXCIsXCJ0aXRsZVwiOlwiV2lraXBlZGlhXCJ9LHtcInVybFwiOlwiaHR0cDovL2Rldi5jaHJvbWl1bS5vcmcvc3BkeS9zcGR5LXdoaXRlcGFwZXJcIixcInRpdGxlXCI6XCJTUERZIHdoaXRlcGFwZXJcIn1dLFwiY2F0ZWdvcmllc1wiOltcIk90aGVyXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJhXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI3LjFcIjpcIm5cIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwiblwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInVcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo2Mi40NSxcInVzYWdlX3BlcmNfYVwiOjcuMzcsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJzcGR5M1wiLFwiY2hyb21lX2lkXCI6XCI1MTUyNTg2MzY1NjY1MjgwXCJ9LFwiY3NzLXJlcGVhdGluZy1ncmFkaWVudHNcIjp7XCJ0aXRsZVwiOlwiQ1NTIFJlcGVhdGluZyBHcmFkaWVudHNcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgZGVmaW5pbmcgYSByZXBlYXRpbmcgbGluZWFyIG9yIHJhZGlhbCBjb2xvciBncmFkaWVudCBhcyBhIENTUyBpbWFnZS5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtaW1hZ2VzLyNyZXBlYXRpbmctZ3JhZGllbnRzXCIsXCJzdGF0dXNcIjpcImNyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0NTUy9yZXBlYXRpbmctbGluZWFyLWdyYWRpZW50XCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LmNzczNmaWxlcy5jb20vZ3JhZGllbnQvI3JlcGVhdGluZ2xpbmVhcmdyYWRpZW50XCIsXCJ0aXRsZVwiOlwiSW5mb3JtYXRpb24gcGFnZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9yZXBlYXRpbmctbGluZWFyLWdyYWRpZW50XCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTM1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwieSB4XCIsXCI0XCI6XCJ5IHhcIixcIjVcIjpcInkgeFwiLFwiNlwiOlwieSB4XCIsXCI3XCI6XCJ5IHhcIixcIjhcIjpcInkgeFwiLFwiOVwiOlwieSB4XCIsXCIxMFwiOlwieSB4XCIsXCIxMVwiOlwieSB4XCIsXCIxMlwiOlwieSB4XCIsXCIxM1wiOlwieSB4XCIsXCIxNFwiOlwieSB4XCIsXCIxNVwiOlwieSB4XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTNcIjpcInkgeFwiLFwiMTRcIjpcInkgeFwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInkgeFwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJ5IHhcIixcIjZcIjpcInkgeFwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcImEgeFwiLFwiMTEuNVwiOlwiYSB4XCIsXCIxMS42XCI6XCJ5IHhcIixcIjEyXCI6XCJ5IHhcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJ5IHhcIixcIjYuMC02LjFcIjpcInkgeFwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcInkgeFwiLFwiNC4xXCI6XCJ5IHhcIixcIjQuMi00LjNcIjpcInkgeFwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcInkgeFwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiYSB4XCIsXCIxMS41XCI6XCJhIHhcIixcIjEyXCI6XCJ5IHhcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieSB4XCJ9fSxcIm5vdGVzXCI6XCJGaXJlZm94IDEwKywgQ2hyb21lIDI2KyBhbmQgT3BlcmEgMTEuNisgYWxzbyBzdXBwb3J0IHRoZSBuZXcgXFxcInRvIChzaWRlKVxcXCIgc3ludGF4LlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo4NS4xLFwidXNhZ2VfcGVyY19hXCI6MC4wMixcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcImNzcy1ncmFkaWVudHNcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiY3NzLWZpbHRlcnNcIjp7XCJ0aXRsZVwiOlwiQ1NTIEZpbHRlciBFZmZlY3RzXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGFwcGx5aW5nIGZpbHRlciBlZmZlY3RzIChsaWtlIGJsdXIsIGdyYXlzY2FsZSwgYnJpZ2h0bmVzcywgY29udHJhc3QgYW5kIGh1ZSkgdG8gZWxlbWVudHMsIHByZXZpb3VzbHkgb25seSBwb3NzaWJsZSBieSB1c2luZyBTVkcuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9maWx0ZXItZWZmZWN0cy9cIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2h0bWw1LWRlbW9zLmFwcHNwb3QuY29tL3N0YXRpYy9jc3MvZmlsdGVycy9pbmRleC5odG1sXCIsXCJ0aXRsZVwiOlwiRGVtbyBmaWxlIGZvciBXZWJLaXQgYnJvd3NlcnNcIn0se1widXJsXCI6XCJodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9maWx0ZXJzL3VuZGVyc3RhbmRpbmctY3NzL1wiLFwidGl0bGVcIjpcIkhUTUw1Um9ja3MgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kbC5kcm9wYm94LmNvbS91LzMyNjAzMjcvYW5ndWxhci9DU1MzSW1hZ2VNYW5pcHVsYXRpb24uaHRtbFwiLFwidGl0bGVcIjpcIkZpbHRlciBlZGl0b3JcIn0se1widXJsXCI6XCJodHRwOi8vYmVubmV0dGZlZWx5LmNvbS9maWx0ZXJzL1wiLFwidGl0bGVcIjpcIkZpbHRlciBQbGF5Z3JvdW5kXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1NcIixcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcImFcIixcIjRcIjpcImFcIixcIjVcIjpcImFcIixcIjZcIjpcImFcIixcIjdcIjpcImFcIixcIjhcIjpcImFcIixcIjlcIjpcImFcIixcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwiLFwiMTJcIjpcImFcIixcIjEzXCI6XCJhXCIsXCIxNFwiOlwiYVwiLFwiMTVcIjpcImFcIixcIjE2XCI6XCJhXCIsXCIxN1wiOlwiYVwiLFwiMThcIjpcImFcIixcIjE5XCI6XCJhXCIsXCIyMFwiOlwiYVwiLFwiMjFcIjpcImFcIixcIjIyXCI6XCJhXCIsXCIyM1wiOlwiYVwiLFwiMjRcIjpcImFcIixcIjI1XCI6XCJhXCIsXCIyNlwiOlwiYVwiLFwiMjdcIjpcImFcIixcIjI4XCI6XCJhXCIsXCIyOVwiOlwiYVwiLFwiMzBcIjpcImFcIixcIjMxXCI6XCJhXCIsXCIzMlwiOlwiYVwiLFwiMzNcIjpcImFcIixcIjM0XCI6XCJhIGRcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInkgeFwiLFwiMjdcIjpcInkgeFwiLFwiMjhcIjpcInkgeFwiLFwiMjlcIjpcInkgeFwiLFwiMzBcIjpcInkgeFwiLFwiMzFcIjpcInkgeFwiLFwiMzJcIjpcInkgeFwiLFwiMzNcIjpcInkgeFwiLFwiMzRcIjpcInkgeFwiLFwiMzVcIjpcInkgeFwiLFwiMzZcIjpcInkgeFwiLFwiMzdcIjpcInkgeFwiLFwiMzhcIjpcInkgeFwiLFwiMzlcIjpcInkgeFwiLFwiNDBcIjpcInkgeFwiLFwiNDFcIjpcInkgeFwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcInkgeFwiLFwiNi4xXCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiNy4xXCI6XCJ5IHhcIixcIjhcIjpcInkgeFwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJ5IHhcIixcIjcuMC03LjFcIjpcInkgeFwiLFwiOFwiOlwieSB4XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcInkgeFwiLFwiNC40LjNcIjpcInkgeFwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcInkgeFwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJ5IHhcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInkgeFwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJuXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInkgeFwifX0sXCJub3Rlc1wiOlwiTm90ZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgc2lnbmlmaWNhbnRseSBkaWZmZXJlbnQgZnJvbSBhbmQgaW5jb21wYXRpYmxlIHdpdGggTWljcm9zb2Z0J3MgW29sZGVyIFxcXCJmaWx0ZXJcXFwiIHByb3BlcnR5XShodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvbXM1MzA3NTIlMjh2PXZzLjg1JTI5LmFzcHgpLlxcclxcblxcclxcblBhcnRpYWwgc3VwcG9ydCBpbiBGaXJlZm94IDMxIFtvbmx5IHdpdGggdXJsKCkgdmVyc2lvbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZpbHRlciNCcm93c2VyX2NvbXBhdGliaWxpdHkpXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjU2LjI1LFwidXNhZ2VfcGVyY19hXCI6MTMuMDgsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJzZXBpYSxodWUtcm90YXRlLGludmVydCxzYXR1cmF0ZVwiLFwiaWVfaWRcIjpcImZpbHRlcnNcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiZ2V0Y29tcHV0ZWRzdHlsZVwiOntcInRpdGxlXCI6XCJnZXRDb21wdXRlZFN0eWxlXCIsXCJkZXNjcmlwdGlvblwiOlwiQVBJIHRvIGdldCB0aGUgY3VycmVudCBjb21wdXRlZCBDU1Mgc3R5bGVzIGFwcGxpZWQgdG8gYW4gZWxlbWVudC4gVGhpcyBtYXkgYmUgdGhlIGN1cnJlbnQgdmFsdWUgYXBwbGllZCBieSBhbiBhbmltYXRpb24gb3IgYXMgc2V0IGJ5IGEgc3R5bGVzaGVldC5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2Nzc29tLyNkb20td2luZG93LWdldGNvbXB1dGVkc3R5bGVcIixcInN0YXR1c1wiOlwicmVjXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZVwiLFwidGl0bGVcIjpcIk1ETiBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL2llLm1pY3Jvc29mdC5jb20vdGVzdGRyaXZlL0hUTUw1L2dldENvbXB1dGVkU3R5bGUvXCIsXCJ0aXRsZVwiOlwiRGVtb1wifSx7XCJ1cmxcIjpcImh0dHA6Ly9zbmlwcGxyLmNvbS92aWV3LzEzNTIzL1wiLFwidGl0bGVcIjpcIlBvbHlmaWxsIGZvciBJRVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9jc3NvbS9tZXRob2RzL2dldENvbXB1dGVkU3R5bGVcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1MzXCIsXCJET01cIixcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJhXCIsXCIzLjVcIjpcImFcIixcIjMuNlwiOlwiYVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcImFcIixcIjVcIjpcImFcIixcIjZcIjpcImFcIixcIjdcIjpcImFcIixcIjhcIjpcImFcIixcIjlcIjpcImFcIixcIjEwXCI6XCJhXCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiYVwiLFwiMy4yXCI6XCJhXCIsXCI0XCI6XCJhXCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJhXCIsXCI5LjUtOS42XCI6XCJhXCIsXCIxMC4wLTEwLjFcIjpcImFcIixcIjEwLjVcIjpcImFcIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcImFcIixcIjQuMC00LjFcIjpcImFcIixcIjQuMi00LjNcIjpcImFcIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiYVwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcImFcIixcIjIuMlwiOlwiYVwiLFwiMi4zXCI6XCJhXCIsXCIzXCI6XCJhXCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcImFcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcImFcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJQYXJ0aWFsIHN1cHBvcnQgaW4gb2xkZXIgRmlyZWZveCB2ZXJzaW9ucyByZWZlcnMgdG8gcmVxdWlyaW5nIHRoZSBzZWNvbmQgcGFyYW1ldGVyIHRvIGJlIGluY2x1ZGVkLlxcclxcblxcclxcblBhcnRpYWwgc3VwcG9ydCBpbiBhbGwgb3RoZXIgYnJvd3NlcnMgcmVmZXJzIHRvIG5vdCBzdXBwb3J0aW5nIGdldENvbXB1dGVkU3R5bGUgb24gcHNldWRvLWVsZW1lbnRzLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo4Ny41NyxcInVzYWdlX3BlcmNfYVwiOjQuNSxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJ3b3JkLWJyZWFrXCI6e1widGl0bGVcIjpcIkNTUzMgd29yZC1icmVha1wiLFwiZGVzY3JpcHRpb25cIjpcIlByb3BlcnR5IHRvIHByZXZlbnQgb3IgYWxsb3cgd29yZHMgdG8gYmUgYnJva2VuIG92ZXIgbXVsdGlwbGUgbGluZXMgYmV0d2VlbiBsZXR0ZXJzLlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy10ZXh0LyN3b3JkLWJyZWFrXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0NTUy93b3JkLWJyZWFrXCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvcHJvcGVydGllcy93b3JkLWJyZWFrXCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTM1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcImFcIixcIjVcIjpcImFcIixcIjZcIjpcImFcIixcIjdcIjpcImFcIixcIjhcIjpcImFcIixcIjlcIjpcImFcIixcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwiLFwiMTJcIjpcImFcIixcIjEzXCI6XCJhXCIsXCIxNFwiOlwiYVwiLFwiMTVcIjpcImFcIixcIjE2XCI6XCJhXCIsXCIxN1wiOlwiYVwiLFwiMThcIjpcImFcIixcIjE5XCI6XCJhXCIsXCIyMFwiOlwiYVwiLFwiMjFcIjpcImFcIixcIjIyXCI6XCJhXCIsXCIyM1wiOlwiYVwiLFwiMjRcIjpcImFcIixcIjI1XCI6XCJhXCIsXCIyNlwiOlwiYVwiLFwiMjdcIjpcImFcIixcIjI4XCI6XCJhXCIsXCIyOVwiOlwiYVwiLFwiMzBcIjpcImFcIixcIjMxXCI6XCJhXCIsXCIzMlwiOlwiYVwiLFwiMzNcIjpcImFcIixcIjM0XCI6XCJhXCIsXCIzNVwiOlwiYVwiLFwiMzZcIjpcImFcIixcIjM3XCI6XCJhXCIsXCIzOFwiOlwiYVwiLFwiMzlcIjpcImFcIixcIjQwXCI6XCJhXCIsXCI0MVwiOlwiYVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiYVwiLFwiMy4yXCI6XCJhXCIsXCI0XCI6XCJhXCIsXCI1XCI6XCJhXCIsXCI1LjFcIjpcImFcIixcIjZcIjpcImFcIixcIjYuMVwiOlwiYVwiLFwiN1wiOlwiYVwiLFwiNy4xXCI6XCJhXCIsXCI4XCI6XCJhXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcImFcIixcIjE2XCI6XCJhXCIsXCIxN1wiOlwiYVwiLFwiMThcIjpcImFcIixcIjE5XCI6XCJhXCIsXCIyMFwiOlwiYVwiLFwiMjFcIjpcImFcIixcIjIyXCI6XCJhXCIsXCIyM1wiOlwiYVwiLFwiMjRcIjpcImFcIixcIjI1XCI6XCJhXCIsXCIyNlwiOlwiYVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcImFcIixcIjQuMC00LjFcIjpcImFcIixcIjQuMi00LjNcIjpcImFcIixcIjUuMC01LjFcIjpcImFcIixcIjYuMC02LjFcIjpcImFcIixcIjcuMC03LjFcIjpcImFcIixcIjhcIjpcImFcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcImFcIixcIjIuMlwiOlwiYVwiLFwiMi4zXCI6XCJhXCIsXCIzXCI6XCJhXCIsXCI0XCI6XCJhXCIsXCI0LjFcIjpcImFcIixcIjQuMi00LjNcIjpcImFcIixcIjQuNFwiOlwiYVwiLFwiNC40LjNcIjpcImFcIn0sXCJiYlwiOntcIjdcIjpcImFcIixcIjEwXCI6XCJhXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcImFcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcImFcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJhXCJ9fSxcIm5vdGVzXCI6XCJQYXJ0aWFsIHN1cHBvcnQgcmVmZXJzIHRvIHN1cHBvcnRpbmcgdGhlIFxcXCJicmVhay1hbGxcXFwiIHZhbHVlLCBidXQgbm90IHRoZSBcXFwia2VlcC1hbGxcXFwiIHZhbHVlLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjoyOS40OCxcInVzYWdlX3BlcmNfYVwiOjYyLjczLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiYnJlYWstYWxsLGtlZXAtYWxsXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcInZpZXdwb3J0LXVuaXRzXCI6e1widGl0bGVcIjpcIlZpZXdwb3J0IHVuaXRzOiB2dywgdmgsIHZtaW4sIHZtYXhcIixcImRlc2NyaXB0aW9uXCI6XCJMZW5ndGggdW5pdHMgcmVwcmVzZW50aW5nIDElIG9mIHRoZSB2aWV3cG9ydCBzaXplIGZvciB2aWV3cG9ydCB3aWR0aCAodncpLCBoZWlnaHQgKHZoKSwgdGhlIHNtYWxsZXIgb2YgdGhlIHR3byAodm1pbiksIG9yIHRoZSBsYXJnZXIgb2YgdGhlIHR3byAodm1heCkuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXZhbHVlcy8jdmlld3BvcnQtcmVsYXRpdmUtbGVuZ3Roc1wiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vY3NzLXRyaWNrcy5jb20vdmlld3BvcnQtc2l6ZWQtdHlwb2dyYXBoeS9cIixcInRpdGxlXCI6XCJCbG9nIHBvc3RcIn0se1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vc2FhYmkvdm1pbnBvbHlcIixcInRpdGxlXCI6XCJQb2x5ZmlsbFwifSx7XCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9yb2RuZXlyZWhtL3ZpZXdwb3J0LXVuaXRzLWJ1Z2d5ZmlsbFwiLFwidGl0bGVcIjpcIkJ1Z2d5ZmlsbCAtIFBvbHlmaWxsIHRoYXQgZml4ZXMgYnVnZ3kgc3VwcG9ydFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9ibG9nLnJvZG5leXJlaG0uZGUvYXJjaGl2ZXMvMzQtaU9TNy1Nb2JpbGUtU2FmYXJpLUFuZC1WaWV3cG9ydC1Vbml0cy5odG1sXCIsXCJ0aXRsZVwiOlwiQmFjay1Gb3J3YXJkIGlzc3VlIGJsb2cgcG9zdFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTM1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcImFcIixcIjEwXCI6XCJhXCIsXCIxMVwiOlwiYVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiYVwiLFwiMjFcIjpcImFcIixcIjIyXCI6XCJhXCIsXCIyM1wiOlwiYVwiLFwiMjRcIjpcImFcIixcIjI1XCI6XCJhXCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcImFcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcImFcIixcIjcuMC03LjFcIjpcImFcIixcIjhcIjpcImFcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJhXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJhICMxXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJQYXJ0aWFsIHN1cHBvcnQgaW4gSUU5IHJlZmVycyB0byBzdXBwb3J0aW5nIFxcXCJ2bVxcXCIgaW5zdGVhZCBvZiBcXFwidm1pblxcXCIuXFxyXFxuXFxyXFxuUGFydGlhbCBzdXBwb3J0IGluIElFMTAgcmVmZXJzIHRvIGxhY2sgb2YgXFxcInZtYXhcXFwiIHN1cHBvcnQuXFxyXFxuXFxyXFxuUGFydGlhbCBzdXBwb3J0IGluIGlPUzcgaXMgZHVlIHRvIGJ1Z2d5IGJlaGF2aW9yIG9mIHRoZSBcXFwidmhcXFwiIHVuaXQgKHNlZSBbd29ya2Fyb3VuZF0oaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGJ1cnRjaGFlbGwvZTcwMmY0NDFiYTliM2Y3NmY1ODcpKS5cXHJcXG5cXHJcXG5BbGwgb3RoZXIgcGFydGlhbCBzdXBwb3J0IHJlZmVycyB0byBub3Qgc3VwcG9ydGluZyB0aGUgXFxcInZtYXhcXFwiIHVuaXQuIFwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo1Ny4zNSxcInVzYWdlX3BlcmNfYVwiOjIwLjcxLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwidm0sdmlld3BvcnQtcGVyY2VudGFnZVwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJjb250ZW50c2VjdXJpdHlwb2xpY3lcIjp7XCJ0aXRsZVwiOlwiQ29udGVudCBTZWN1cml0eSBQb2xpY3kgMS4wXCIsXCJkZXNjcmlwdGlvblwiOlwiTWl0aWdhdGUgY3Jvc3Mtc2l0ZSBzY3JpcHRpbmcgYXR0YWNrcyBieSB3aGl0ZWxpc3RpbmcgYWxsb3dlZCBzb3VyY2VzIG9mIHNjcmlwdCwgc3R5bGUsIGFuZCBvdGhlciByZXNvdXJjZXMuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9DU1AvXCIsXCJzdGF0dXNcIjpcImNyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvc2VjdXJpdHkvY29udGVudC1zZWN1cml0eS1wb2xpY3kvXCIsXCJ0aXRsZVwiOlwiSFRNTDVSb2NrcyBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL2NvbnRlbnQtc2VjdXJpdHktcG9saWN5LmNvbS9cIixcInRpdGxlXCI6XCJDU1AgRXhhbXBsZXMgJiBRdWljayBSZWZlcmVuY2VcIn1dLFwiY2F0ZWdvcmllc1wiOltcIk90aGVyXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcImEgIzFcIixcIjExXCI6XCJhICMxXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJ5ICMxXCIsXCI1XCI6XCJ5ICMxXCIsXCI2XCI6XCJ5ICMxXCIsXCI3XCI6XCJ5ICMxXCIsXCI4XCI6XCJ5ICMxXCIsXCI5XCI6XCJ5ICMxXCIsXCIxMFwiOlwieSAjMVwiLFwiMTFcIjpcInkgIzFcIixcIjEyXCI6XCJ5ICMxXCIsXCIxM1wiOlwieSAjMVwiLFwiMTRcIjpcInkgIzFcIixcIjE1XCI6XCJ5ICMxXCIsXCIxNlwiOlwieSAjMVwiLFwiMTdcIjpcInkgIzFcIixcIjE4XCI6XCJ5ICMxXCIsXCIxOVwiOlwieSAjMVwiLFwiMjBcIjpcInkgIzFcIixcIjIxXCI6XCJ5ICMxXCIsXCIyMlwiOlwieSAjMVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJ5ICMyXCIsXCIxNVwiOlwieSAjMlwiLFwiMTZcIjpcInkgIzJcIixcIjE3XCI6XCJ5ICMyXCIsXCIxOFwiOlwieSAjMlwiLFwiMTlcIjpcInkgIzJcIixcIjIwXCI6XCJ5ICMyXCIsXCIyMVwiOlwieSAjMlwiLFwiMjJcIjpcInkgIzJcIixcIjIzXCI6XCJ5ICMyXCIsXCIyNFwiOlwieSAjMlwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiYSAjMlwiLFwiNlwiOlwieSAjMlwiLFwiNi4xXCI6XCJ5ICMyXCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiYSAjMlwiLFwiNi4wLTYuMVwiOlwieSAjMlwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcInkgIzJcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcImEgIzFcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInkgeFwifX0sXCJub3Rlc1wiOlwiVGhlIHN0YW5kYXJkIEhUVFAgaGVhZGVyIGlzIGBDb250ZW50LVNlY3VyaXR5LVBvbGljeWAgd2hpY2ggaXMgdXNlZCB1bmxlc3Mgb3RoZXJ3aXNlIG5vdGVkLlwiLFwibm90ZXNfYnlfbnVtXCI6e1wiMVwiOlwiU3VwcG9ydGVkIHRocm91Z2ggdGhlIGBYLUNvbnRlbnQtU2VjdXJpdHktUG9saWN5YCBoZWFkZXJcIixcIjJcIjpcIlN1cHBvcnRlZCB0aHJvdWdoIHRoZSBgWC1XZWJraXQtQ1NQYCBoZWFkZXJcIn0sXCJ1c2FnZV9wZXJjX3lcIjo2OS40NixcInVzYWdlX3BlcmNfYVwiOjEwLjcyLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiY3NwLHNlY3VyaXR5LGhlYWRlclwiLFwiaWVfaWRcIjpcImNvbnRlbnRzZWN1cml0eXBvbGljeVwiLFwiY2hyb21lX2lkXCI6XCI1MjA1MDg4MDQ1ODkxNTg0XCJ9LFwicGFnZXZpc2liaWxpdHlcIjp7XCJ0aXRsZVwiOlwiUGFnZSBWaXNpYmlsaXR5XCIsXCJkZXNjcmlwdGlvblwiOlwiSmF2YVNjcmlwdCBBUEkgZm9yIGRldGVybWluaW5nIHdoZXRoZXIgYSBkb2N1bWVudCBpcyB2aXNpYmxlIG9uIHRoZSBkaXNwbGF5XCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9wYWdlLXZpc2liaWxpdHkvXCIsXCJzdGF0dXNcIjpcInJlY1wiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0RPTS9Vc2luZ190aGVfUGFnZV9WaXNpYmlsaXR5X0FQSVwiLFwidGl0bGVcIjpcIk1ETiBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvYXBpcy90aW1pbmcvcHJvcGVydGllcy92aXNpYmlsaXR5U3RhdGVcIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy5zaXRlcG9pbnQuY29tL2ludHJvZHVjdGlvbi10by1wYWdlLXZpc2liaWxpdHktYXBpL1wiLFwidGl0bGVcIjpcIlNpdGVQb2ludCBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL2F1cmVsaW8uYXVkZXJvLml0L2RlbW8vcGFnZS12aXNpYmlsaXR5LWFwaS1kZW1vLmh0bWxcIixcInRpdGxlXCI6XCJEZW1vXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJKUyBBUElcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5IHhcIixcIjExXCI6XCJ5IHhcIixcIjEyXCI6XCJ5IHhcIixcIjEzXCI6XCJ5IHhcIixcIjE0XCI6XCJ5IHhcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJ5IHhcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIixcIjI3XCI6XCJ5IHhcIixcIjI4XCI6XCJ5IHhcIixcIjI5XCI6XCJ5IHhcIixcIjMwXCI6XCJ5IHhcIixcIjMxXCI6XCJ5IHhcIixcIjMyXCI6XCJ5IHhcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJ5IHhcIixcIjQuNC4zXCI6XCJ5IHhcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJ5IHhcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInkgeFwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjc5LjI2LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcInZpc2liaWxpdHlzdGF0ZVwiLFwiaWVfaWRcIjpcInBhZ2V2aXNpYmlsaXR5YXBpXCIsXCJjaHJvbWVfaWRcIjpcIjU2ODk2OTc3OTU4MzM4NTZcIn0sXCJzdHJpY3R0cmFuc3BvcnRzZWN1cml0eVwiOntcInRpdGxlXCI6XCJTdHJpY3QgVHJhbnNwb3J0IFNlY3VyaXR5XCIsXCJkZXNjcmlwdGlvblwiOlwiRGVjbGFyZSB0aGF0IGEgd2Vic2l0ZSBpcyBvbmx5IGFjY2Vzc2libGUgb3ZlciBhIHNlY3VyZSBjb25uZWN0aW9uIChIVFRQUykuXCIsXCJzcGVjXCI6XCJodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2Nzk3XCIsXCJzdGF0dXNcIjpcIm90aGVyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9kZXYuY2hyb21pdW0ub3JnL3N0c1wiLFwidGl0bGVcIjpcIkNocm9taXVtIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1NlY3VyaXR5L0hUVFBfU3RyaWN0X1RyYW5zcG9ydF9TZWN1cml0eVwiLFwidGl0bGVcIjpcIk1ETiBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9IVFRQX1N0cmljdF9UcmFuc3BvcnRfU2VjdXJpdHlcIixcInRpdGxlXCI6XCJPV0FTUCBhcnRpY2xlXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJPdGhlclwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcInVcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ1XCJ9fSxcIm5vdGVzXCI6XCJUaGUgSFRUUCBoZWFkZXIgaXMgJ1N0cmljdC1UcmFuc3BvcnQtU2VjdXJpdHknLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo2MC4zNCxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJzdHMsaHN0cyxzZWN1cml0eSxoZWFkZXJcIixcImllX2lkXCI6XCJodHRwc3RyaWN0dHJhbnNwb3J0c2VjdXJpdHloc3RzXCIsXCJjaHJvbWVfaWRcIjpcIjQ5NDE0ODAxMzMxMzIyODhcIn0sXCJzdHlsZS1zY29wZWRcIjp7XCJ0aXRsZVwiOlwiU2NvcGVkIENTU1wiLFwiZGVzY3JpcHRpb25cIjpcIkFsbG93cyBDU1MgcnVsZXMgdG8gYmUgc2NvcGVkIHRvIHBhcnQgb2YgdGhlIGRvY3VtZW50LCBiYXNlZCBvbiB0aGUgcG9zaXRpb24gb2YgdGhlIHN0eWxlIGVsZW1lbnQuXCIsXCJzcGVjXCI6XCJodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zZW1hbnRpY3MuaHRtbCNhdHRyLXN0eWxlLXNjb3BlZFwiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vUE01NTQ0L3Njb3BlZC1wb2x5ZmlsbFwiLFwidGl0bGVcIjpcIlBvbHlmaWxsXCJ9LHtcInVybFwiOlwiaHR0cDovL2h0bWw1ZG9jdG9yLmNvbS90aGUtc2NvcGVkLWF0dHJpYnV0ZS9cIixcInRpdGxlXCI6XCJIVE1MNSBEb2N0b3IgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly91cGRhdGVzLmh0bWw1cm9ja3MuY29tLzIwMTIvMDMvQS1OZXctRXhwZXJpbWVudGFsLUZlYXR1cmUtc3R5bGUtc2NvcGVkXCIsXCJ0aXRsZVwiOlwiSFRNTDVSb2NrcyBhcnRpY2xlXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1NcIixcIkhUTUw1XCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuIGQgIzFcIixcIjIxXCI6XCJuIGQgIzFcIixcIjIyXCI6XCJuIGQgIzFcIixcIjIzXCI6XCJuIGQgIzFcIixcIjI0XCI6XCJuIGQgIzFcIixcIjI1XCI6XCJuIGQgIzFcIixcIjI2XCI6XCJuIGQgIzFcIixcIjI3XCI6XCJuIGQgIzFcIixcIjI4XCI6XCJuIGQgIzFcIixcIjI5XCI6XCJuIGQgIzFcIixcIjMwXCI6XCJuIGQgIzFcIixcIjMxXCI6XCJuIGQgIzFcIixcIjMyXCI6XCJuIGQgIzFcIixcIjMzXCI6XCJuIGQgIzFcIixcIjM0XCI6XCJuIGQgIzFcIixcIjM1XCI6XCJuIGQgIzFcIixcIjM2XCI6XCJuIGQgIzFcIixcIjM3XCI6XCJuXCIsXCIzOFwiOlwiblwiLFwiMzlcIjpcIm5cIixcIjQwXCI6XCJuXCIsXCI0MVwiOlwiblwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcIm5cIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwidVwiLFwiMjRcIjpcIm5cIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcIm5cIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOntcIjFcIjpcIkVuYWJsZWQgaW4gQ2hyb21lIHRocm91Z2ggdGhlIFxcXCJleHBlcmltZW50YWwgV2ViIFBsYXRmb3JtIGZlYXR1cmVzXFxcIiBmbGFnIGluIGNocm9tZTovL2ZsYWdzXCJ9LFwidXNhZ2VfcGVyY195XCI6MTUuNTEsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwic2NvcGVcIixcImllX2lkXCI6XCJzY29wZWRzdHlsZXNcIixcImNocm9tZV9pZFwiOlwiNTM3NDEzNzk1ODY2MjE0NFwifSxcInN2Zy1mcmFnbWVudFwiOntcInRpdGxlXCI6XCJTVkcgZnJhZ21lbnQgaWRlbnRpZmllcnNcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgZGlzcGxheWluZyBvbmx5IGEgcGFydCBvZiBhbiBTVkcgaW1hZ2UgYnkgZGVmaW5pbmcgYSB2aWV3IElEIG9yIHZpZXcgYm94IGRpbWVuc2lvbnMgYXMgdGhlIGZpbGUncyBmcmFnbWVudCBpZGVudGlmaWVyLlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL2xpbmtpbmcuaHRtbCNTVkdGcmFnbWVudElkZW50aWZpZXJzXCIsXCJzdGF0dXNcIjpcInJlY1wiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vd3d3LmJyb2tlbi1saW5rcy5jb20vMjAxMi8wOC8xNC9iZXR0ZXItc3ZnLXNwcml0ZXMtd2l0aC1mcmFnbWVudC1pZGVudGlmaWVycy9cIixcInRpdGxlXCI6XCJCbG9nIHBvc3RcIn1dLFwiY2F0ZWdvcmllc1wiOltcIlNWR1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJuXCIsXCIzNVwiOlwiblwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJ1XCIsXCI5LjUtOS42XCI6XCJ1XCIsXCIxMC4wLTEwLjFcIjpcInVcIixcIjEwLjVcIjpcInVcIixcIjEwLjZcIjpcInVcIixcIjExXCI6XCJ1XCIsXCIxMS4xXCI6XCJ1XCIsXCIxMS41XCI6XCJ1XCIsXCIxMS42XCI6XCJ1XCIsXCIxMlwiOlwidVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwieVwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcIm5cIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInVcIixcIjExXCI6XCJ1XCIsXCIxMS4xXCI6XCJ1XCIsXCIxMS41XCI6XCJ1XCIsXCIxMlwiOlwidVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NjQuMjksXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiZnJhZ21lbnRzLHNwcml0ZVwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJvdXRsaW5lXCI6e1widGl0bGVcIjpcIkNTUyBvdXRsaW5lXCIsXCJkZXNjcmlwdGlvblwiOlwiVGhlIENTUyBvdXRsaW5lIHByb3BlcnR5IGlzIGEgc2hvcnRoYW5kIHByb3BlcnR5IGZvciBzZXR0aW5nIG9uZSBvciBtb3JlIG9mIHRoZSBpbmRpdmlkdWFsIG91dGxpbmUgcHJvcGVydGllcyBvdXRsaW5lLXN0eWxlLCBvdXRsaW5lLXdpZHRoIGFuZCBvdXRsaW5lLWNvbG9yIGluIGEgc2luZ2xlIHJ1bGUuIEluIG1vc3QgY2FzZXMgdGhlIHVzZSBvZiB0aGlzIHNob3J0Y3V0IGlzIHByZWZlcmFibGUgYW5kIG1vcmUgY29udmVuaWVudC5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIvdWkuaHRtbCNwcm9wZGVmLW91dGxpbmVcIixcInN0YXR1c1wiOlwicmVjXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2NzczMtdWkvI291dGxpbmVcIixcInRpdGxlXCI6XCJDU1MgQmFzaWMgVXNlciBJbnRlcmZhY2UgTW9kdWxlIExldmVsIDNcIn0se1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9vdXRsaW5lXCIsXCJ0aXRsZVwiOlwiTW96aWxsYSBEZXZlbG9wZXIgTmV0d29yazogb3V0bGluZVwifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTMlwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcInlcIixcIjlcIjpcInkgIzFcIixcIjEwXCI6XCJ5ICMxXCIsXCIxMVwiOlwieSAjMVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJ5XCIsXCIzXCI6XCJ5XCIsXCIzLjVcIjpcInlcIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwieVwiLFwiMy4yXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJ5XCIsXCI5LjUtOS42XCI6XCJ5XCIsXCIxMC4wLTEwLjFcIjpcInlcIixcIjEwLjVcIjpcInlcIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieSAjMVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInlcIixcIjQuMC00LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInlcIixcIjIuMlwiOlwieVwiLFwiMi4zXCI6XCJ5XCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5ICMxXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOntcIjFcIjpcIkFsc28gc3VwcG9ydHMgdGhlIHZhbHVlIG9mIGBpbnZlcnRgIGZvciBgb3V0bGluZS1jb2xvcmAuIChzdXBwb3J0IG9mIHRoaXMgdmFsdWUgaXMgb3B0aW9uYWwgZm9yIGJyb3dzZXJzKVwifSxcInVzYWdlX3BlcmNfeVwiOjkyLjkyLFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIi1tb3otb3V0bGluZSxvdXRsaW5lLXdpZHRoLG91dGxpbmUtc3R5bGUsb3V0bGluZS1jb2xvclwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJkb3dubG9hZFwiOntcInRpdGxlXCI6XCJEb3dubG9hZCBhdHRyaWJ1dGVcIixcImRlc2NyaXB0aW9uXCI6XCJXaGVuIHVzZWQgb24gYW4gYW5jaG9yLCB0aGlzIGF0dHJpYnV0ZSBzaWduaWZpZXMgdGhhdCB0aGUgcmVzb3VyY2UgaXQgcG9pbnRzIHRvIHNob3VsZCBiZSBkb3dubG9hZGVkIGJ5IHRoZSBicm93c2VyIHJhdGhlciB0aGFuIG5hdmlnYXRlIHRvIGl0LlwiLFwic3BlY1wiOlwiaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2VtYW50aWNzLmh0bWwjZG93bmxvYWRpbmctcmVzb3VyY2VzXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly91cGRhdGVzLmh0bWw1cm9ja3MuY29tLzIwMTEvMDgvRG93bmxvYWRpbmctcmVzb3VyY2VzLWluLUhUTUw1LWEtZG93bmxvYWRcIixcInRpdGxlXCI6XCJIVE1MNVJvY2tzIHBvc3RcIn0se1widXJsXCI6XCJodHRwOi8vaHRtbDUtZGVtb3MuYXBwc3BvdC5jb20vc3RhdGljL2EuZG93bmxvYWQuaHRtbFwiLFwidGl0bGVcIjpcIkRlbW86IGNyZWF0aW5nIGEgdGV4dCBmaWxlIGFuZCBkb3dubG9hZGluZyBpdC5cIn1dLFwiY2F0ZWdvcmllc1wiOltcIkhUTUw1XCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI3LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcIm5cIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo1NS41OSxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJkb3dubG9hZCxhLmRvd25sb2FkLGFbZG93bmxvYWRdLGRvd25sb2FkIGF0dHJpYnV0ZVwiLFwiaWVfaWRcIjpcImFkb3dubG9hZGF0dHJpYnV0ZVwiLFwiY2hyb21lX2lkXCI6XCI2NDczOTI0NDY0MzQ1MDg4XCJ9LFwicG9pbnRlclwiOntcInRpdGxlXCI6XCJQb2ludGVyIGV2ZW50c1wiLFwiZGVzY3JpcHRpb25cIjpcIlRoaXMgc3BlY2lmaWNhdGlvbiBpbnRlZ3JhdGVzIHZhcmlvdXMgaW5wdXRzIGZyb20gbWljZSwgdG91Y2hzY3JlZW5zLCBhbmQgcGVucywgbWFraW5nIHNlcGFyYXRlIGltcGxlbWVudGF0aW9ucyBubyBsb25nZXIgbmVjZXNzYXJ5IGFuZCBhdXRob3JpbmcgZm9yIGNyb3NzLWRldmljZSBwb2ludGVycyBlYXNpZXIuIE5vdCB0byBiZSBtaXN0YWtlbiB3aXRoIHRoZSB1bnJlbGF0ZWQgXFxcInBvaW50ZXItZXZlbnRzXFxcIiBDU1MgcHJvcGVydHkuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9wb2ludGVyZXZlbnRzL1wiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZS9hcmNoaXZlLzIwMTEvMDkvMjAvdG91Y2gtaW5wdXQtZm9yLWllMTAtYW5kLW1ldHJvLXN0eWxlLWFwcHMuYXNweFwiLFwidGl0bGVcIjpcIkltcGxlbWVudGF0aW9uIG9mIFBvaW50ZXIgRXZlbnRzIGluIElFMTBcIn0se1widXJsXCI6XCJodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9ldGVybmFsY29kaW5nL2FyY2hpdmUvMjAxMy8wMS8xNi9oYW5kLWpzLWEtcG9seWZpbGwtZm9yLXN1cHBvcnRpbmctcG9pbnRlci1ldmVudHMtb24tZXZlcnktYnJvd3Nlci5hc3B4XCIsXCJ0aXRsZVwiOlwiSGFuZC5qcywgdGhlIHBvbHlmaWxsIGZvciBicm93c2VycyBvbmx5IHN1cHBvcnRpbmcgVG91Y2ggRXZlbnRzXCJ9LHtcInVybFwiOlwiaHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvZGF2cm91cy9hcmNoaXZlLzIwMTMvMDIvMjAvaGFuZGxpbmctdG91Y2gtaW4teW91ci1odG1sNS1hcHBzLXRoYW5rcy10by10aGUtcG9pbnRlci1ldmVudHMtb2YtaWUxMC1hbmQtd2luZG93cy04LmFzcHhcIixcInRpdGxlXCI6XCJBcnRpY2xlICYgdHV0b3JpYWxcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkRPTVwiLFwiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcImEgeFwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcInBcIixcIjdcIjpcInBcIixcIjhcIjpcInBcIixcIjlcIjpcInBcIixcIjEwXCI6XCJwXCIsXCIxMVwiOlwicFwiLFwiMTJcIjpcInBcIixcIjEzXCI6XCJwXCIsXCIxNFwiOlwicFwiLFwiMTVcIjpcInBcIixcIjE2XCI6XCJwXCIsXCIxN1wiOlwicFwiLFwiMThcIjpcInBcIixcIjE5XCI6XCJwXCIsXCIyMFwiOlwicFwiLFwiMjFcIjpcInBcIixcIjIyXCI6XCJwXCIsXCIyM1wiOlwicFwiLFwiMjRcIjpcInBcIixcIjI1XCI6XCJwXCIsXCIyNlwiOlwicFwiLFwiMjdcIjpcInBcIixcIjI4XCI6XCJwXCIsXCIyOVwiOlwicFwiLFwiMzBcIjpcInBcIixcIjMxXCI6XCJwXCIsXCIzMlwiOlwicFwiLFwiMzNcIjpcInBcIixcIjM0XCI6XCJwXCIsXCIzNVwiOlwicFwiLFwiMzZcIjpcInBcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwicFwiLFwiMjNcIjpcInBcIixcIjI0XCI6XCJwXCIsXCIyNVwiOlwicFwiLFwiMjZcIjpcInBcIixcIjI3XCI6XCJwXCIsXCIyOFwiOlwicFwiLFwiMjlcIjpcInBcIixcIjMwXCI6XCJwXCIsXCIzMVwiOlwicFwiLFwiMzJcIjpcInBcIixcIjMzXCI6XCJwXCIsXCIzNFwiOlwicFwiLFwiMzVcIjpcInBcIixcIjM2XCI6XCJwXCIsXCIzN1wiOlwicFwiLFwiMzhcIjpcInBcIixcIjM5XCI6XCJwXCIsXCI0MFwiOlwicFwiLFwiNDFcIjpcInBcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcInVcIixcIjdcIjpcInVcIixcIjcuMVwiOlwidVwiLFwiOFwiOlwidVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJwXCIsXCIxNlwiOlwicFwiLFwiMTdcIjpcInBcIixcIjE4XCI6XCJwXCIsXCIxOVwiOlwicFwiLFwiMjBcIjpcInBcIixcIjIxXCI6XCJwXCIsXCIyMlwiOlwicFwiLFwiMjNcIjpcInBcIixcIjI0XCI6XCJwXCIsXCIyNVwiOlwicFwiLFwiMjZcIjpcInBcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJwXCIsXCI0LjAtNC4xXCI6XCJwXCIsXCI0LjItNC4zXCI6XCJwXCIsXCI1LjAtNS4xXCI6XCJwXCIsXCI2LjAtNi4xXCI6XCJwXCIsXCI3LjAtNy4xXCI6XCJwXCIsXCI4XCI6XCJwXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJwXCIsXCIyLjJcIjpcInBcIixcIjIuM1wiOlwicFwiLFwiM1wiOlwicFwiLFwiNFwiOlwicFwiLFwiNC4xXCI6XCJwXCIsXCI0LjItNC4zXCI6XCJwXCIsXCI0LjRcIjpcInBcIixcIjQuNC4zXCI6XCJwXCJ9LFwiYmJcIjp7XCI3XCI6XCJwXCIsXCIxMFwiOlwicFwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwicFwiLFwiMTEuMVwiOlwicFwiLFwiMTEuNVwiOlwicFwiLFwiMTJcIjpcInBcIixcIjEyLjFcIjpcInBcIixcIjI0XCI6XCJwXCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJwXCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInBcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiYSB4XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJwXCJ9fSxcIm5vdGVzXCI6XCJQYXJ0aWFsIHN1cHBvcnQgaW4gSUUxMCByZWZlcnMgdGhlIGxhY2sgb2YgcG9pbnRlcmVudGVyIGFuZCBwb2ludGVybGVhdmUgZXZlbnRzLiBGaXJlZm94IE5pZ2h0bHkgcHJvdmlkZXMgJ2RvbS53M2NfcG9pbnRlcl9ldmVudHMuZW5hYmxlZCcgb3B0aW9uIHRvIHN1cHBvcnQgdGhpcyBzcGVjaWZpY2F0aW9uIHN0YXJ0aW5nIHdpdGggdmVyc2lvbiAyOC5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6Ny4zNyxcInVzYWdlX3BlcmNfYVwiOjIuNzMsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJwb2ludGVyZG93bixwb2ludGVybW92ZSxwb2ludGVydXAscG9pbnRlcmNhbmNlbCxwb2ludGVyb3Zlcixwb2ludGVyb3V0LHBvaW50ZXJlbnRlcixwb2ludGVybGVhdmVcIixcImllX2lkXCI6XCJwb2ludGVyZXZlbnRzXCIsXCJjaHJvbWVfaWRcIjpcIjQ1MDQ2OTkxMzg5OTgyNzJcIn0sXCJ1c2VyLXNlbGVjdC1ub25lXCI6e1widGl0bGVcIjpcIkNTUyB1c2VyLXNlbGVjdDogbm9uZVwiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBwcmV2ZW50aW5nIHRleHQvZWxlbWVudCBzZWxlY3Rpb24gdXNpbmcgQ1NTLiBcIixcInNwZWNcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL3VzZXItc2VsZWN0XCIsXCJzdGF0dXNcIjpcInVub2ZmXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL3VzZXItc2VsZWN0XCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vY3NzLXRyaWNrcy5jb20vYWxtYW5hYy9wcm9wZXJ0aWVzL3UvdXNlci1zZWxlY3QvXCIsXCJ0aXRsZVwiOlwiQ1NTIFRyaWNrcyBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNzgxNDkyKHY9dnMuODUpLmFzcHhcIixcInRpdGxlXCI6XCJNU0ROIERvY3VtZW50YXRpb25cIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTU1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5IHhcIixcIjExXCI6XCJ5IHhcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwieSB4XCIsXCIzXCI6XCJ5IHhcIixcIjMuNVwiOlwieSB4XCIsXCIzLjZcIjpcInkgeFwiLFwiNFwiOlwieSB4XCIsXCI1XCI6XCJ5IHhcIixcIjZcIjpcInkgeFwiLFwiN1wiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIixcIjlcIjpcInkgeFwiLFwiMTBcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTNcIjpcInkgeFwiLFwiMTRcIjpcInkgeFwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInkgeFwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInkgeFwiLFwiMjdcIjpcInkgeFwiLFwiMjhcIjpcInkgeFwiLFwiMjlcIjpcInkgeFwiLFwiMzBcIjpcInkgeFwiLFwiMzFcIjpcInkgeFwiLFwiMzJcIjpcInkgeFwiLFwiMzNcIjpcInkgeFwiLFwiMzRcIjpcInkgeFwiLFwiMzVcIjpcInkgeFwiLFwiMzZcIjpcInkgeFwifSxcImNocm9tZVwiOntcIjRcIjpcInVcIixcIjVcIjpcInVcIixcIjZcIjpcInkgeFwiLFwiN1wiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIixcIjlcIjpcInkgeFwiLFwiMTBcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTNcIjpcInkgeFwiLFwiMTRcIjpcInkgeFwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInkgeFwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInkgeFwiLFwiMjdcIjpcInkgeFwiLFwiMjhcIjpcInkgeFwiLFwiMjlcIjpcInkgeFwiLFwiMzBcIjpcInkgeFwiLFwiMzFcIjpcInkgeFwiLFwiMzJcIjpcInkgeFwiLFwiMzNcIjpcInkgeFwiLFwiMzRcIjpcInkgeFwiLFwiMzVcIjpcInkgeFwiLFwiMzZcIjpcInkgeFwiLFwiMzdcIjpcInkgeFwiLFwiMzhcIjpcInkgeFwiLFwiMzlcIjpcInkgeFwiLFwiNDBcIjpcInkgeFwiLFwiNDFcIjpcInkgeFwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwieSB4XCIsXCIzLjJcIjpcInkgeFwiLFwiNFwiOlwieSB4XCIsXCI1XCI6XCJ5IHhcIixcIjUuMVwiOlwieSB4XCIsXCI2XCI6XCJ5IHhcIixcIjYuMVwiOlwieSB4XCIsXCI3XCI6XCJ5IHhcIixcIjcuMVwiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwieSB4XCIsXCIxNlwiOlwieSB4XCIsXCIxN1wiOlwieSB4XCIsXCIxOFwiOlwieSB4XCIsXCIxOVwiOlwieSB4XCIsXCIyMFwiOlwieSB4XCIsXCIyMVwiOlwieSB4XCIsXCIyMlwiOlwieSB4XCIsXCIyM1wiOlwieSB4XCIsXCIyNFwiOlwieSB4XCIsXCIyNVwiOlwieSB4XCIsXCIyNlwiOlwieSB4XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieSB4XCIsXCI0LjAtNC4xXCI6XCJ5IHhcIixcIjQuMi00LjNcIjpcInkgeFwiLFwiNS4wLTUuMVwiOlwieSB4XCIsXCI2LjAtNi4xXCI6XCJ5IHhcIixcIjcuMC03LjFcIjpcInkgeFwiLFwiOFwiOlwieSB4XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJ5IHhcIixcIjIuMlwiOlwieSB4XCIsXCIyLjNcIjpcInkgeFwiLFwiM1wiOlwieSB4XCIsXCI0XCI6XCJ5IHhcIixcIjQuMVwiOlwieSB4XCIsXCI0LjItNC4zXCI6XCJ5IHhcIixcIjQuNFwiOlwieSB4XCIsXCI0LjQuM1wiOlwieSB4XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5IHhcIixcIjEwXCI6XCJ5IHhcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwieSB4XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5IHhcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieSB4XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInkgeFwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieSB4XCJ9fSxcIm5vdGVzXCI6XCJDdXJyZW50bHkgdGhlIHVzZXItc2VsZWN0IHByb3BlcnR5IGRvZXMgbm90IGFwcGVhciBpbiBhbnkgVzNDIHNwZWNpZmljYXRpb24uIFN1cHBvcnQgaW5mb3JtYXRpb24gaGVyZSBpcyBvbmx5IGZvciBcXFwibm9uZVxcXCIgdmFsdWUsIG5vdCBvdGhlcnMuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjg2LjEzLFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJ3ZWJwXCI6e1widGl0bGVcIjpcIldlYlAgaW1hZ2UgZm9ybWF0XCIsXCJkZXNjcmlwdGlvblwiOlwiSW1hZ2UgZm9ybWF0IHRoYXQgc3VwcG9ydHMgbG9zc3kgYW5kIGxvc3NsZXNzIGNvbXByZXNzaW9uLCBhcyB3ZWxsIGFzIGFuaW1hdGlvbiBhbmQgYWxwaGEgdHJhbnNwYXJlbmN5LlwiLFwic3BlY1wiOlwiaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc3BlZWQvd2VicC9cIixcInN0YXR1c1wiOlwib3RoZXJcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc3BlZWQvd2VicC9cIixcInRpdGxlXCI6XCJPZmZpY2lhbCB3ZWJzaXRlXCJ9LHtcInVybFwiOlwiaHR0cDovL2FudGltYXR0ZXIxNS5naXRodWIuaW8vd2VwcHkvZGVtby5odG1sXCIsXCJ0aXRsZVwiOlwiUG9seWZpbGwgZm9yIGJyb3dzZXJzIHdpdGggV2ViTSBzdXBwb3J0XCJ9LHtcInVybFwiOlwiaHR0cDovL2xpYndlYnBqcy5hcHBzcG90LmNvbS9cIixcInRpdGxlXCI6XCJEZWNvZGVyIGluIEpTXCJ9LHtcInVybFwiOlwiaHR0cDovL3dlYnBqcy5hcHBzcG90LmNvbS9cIixcInRpdGxlXCI6XCJQb2x5ZmlsbCBmb3IgYnJvd3NlcnMgd2l0aCBvciB3aXRob3V0IFdlYk0gc3VwcG9ydCAoaS5lLiBJRTYtSUU5LCBTYWZhcmkvaU9TIHZlcnNpb24gNi4xIGFuZCBiZWxvdzsgRmlyZWZveCB2ZXJzaW9ucyAyNCBhbmQgYmVsXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc3BlZWQvd2VicC9mYXEjd2hpY2hfd2ViX2Jyb3dzZXJzX25hdGl2ZWx5X3N1cHBvcnRfd2VicFwiLFwidGl0bGVcIjpcIk9mZmljaWFsIHdlYnNpdGUgRkFRIC0gV2hpY2ggd2ViIGJyb3dzZXJzIG5hdGl2ZWx5IHN1cHBvcnQgV2ViUD9cIn1dLFwiY2F0ZWdvcmllc1wiOltcIk90aGVyXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJwXCIsXCI1XCI6XCJwXCIsXCI2XCI6XCJwXCIsXCI3XCI6XCJwXCIsXCI4XCI6XCJwXCIsXCI5XCI6XCJwXCIsXCIxMFwiOlwicFwiLFwiMTFcIjpcInBcIixcIjEyXCI6XCJwXCIsXCIxM1wiOlwicFwiLFwiMTRcIjpcInBcIixcIjE1XCI6XCJwXCIsXCIxNlwiOlwicFwiLFwiMTdcIjpcInBcIixcIjE4XCI6XCJwXCIsXCIxOVwiOlwicFwiLFwiMjBcIjpcInBcIixcIjIxXCI6XCJwXCIsXCIyMlwiOlwicFwiLFwiMjNcIjpcInBcIixcIjI0XCI6XCJwXCIsXCIyNVwiOlwicFwiLFwiMjZcIjpcInBcIixcIjI3XCI6XCJwXCIsXCIyOFwiOlwicFwiLFwiMjlcIjpcInBcIixcIjMwXCI6XCJwXCIsXCIzMVwiOlwicFwiLFwiMzJcIjpcInBcIixcIjMzXCI6XCJwXCIsXCIzNFwiOlwicFwiLFwiMzVcIjpcInBcIixcIjM2XCI6XCJwXCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwicFwiLFwiN1wiOlwicFwiLFwiOFwiOlwicFwiLFwiOVwiOlwiYVwiLFwiMTBcIjpcImFcIixcIjExXCI6XCJhXCIsXCIxMlwiOlwiYVwiLFwiMTNcIjpcImFcIixcIjE0XCI6XCJhXCIsXCIxNVwiOlwiYVwiLFwiMTZcIjpcImFcIixcIjE3XCI6XCJhXCIsXCIxOFwiOlwiYVwiLFwiMTlcIjpcImFcIixcIjIwXCI6XCJhXCIsXCIyMVwiOlwiYVwiLFwiMjJcIjpcImFcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI3LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwicFwiLFwiMTFcIjpcInBcIixcIjExLjFcIjpcImFcIixcIjExLjVcIjpcImFcIixcIjExLjZcIjpcImFcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJ5XCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcImFcIixcIjQuMVwiOlwiYVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcImFcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJuXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlBhcnRpYWwgc3VwcG9ydCBpbiBvbGRlciBDaHJvbWUsIE9wZXJhIGFuZCBBbmRyb2lkIHJlZmVycyB0byBicm93c2VyIG5vdCBzdXBwb3J0aW5nIGxvc3NsZXNzIGFuZCBhbHBoYSB2ZXJzaW9ucyBvZiBXZWJQLiBBbmltYXRlZCB3ZWJwIGltYWdlcyBhcmUgc3VwcG9ydGVkIGluIENocm9tZSAzMisgYW5kIE9wZXJhIDE5Ky5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NTEuMDEsXCJ1c2FnZV9wZXJjX2FcIjozLjE4LFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwid2VicGltYWdlZm9ybWF0c3VwcG9ydFwiLFwiY2hyb21lX2lkXCI6XCI2NDcxNzI1NDQxMDg5NTM2LDQ3ODUwNzQ2MDQwODExNTJcIn0sXCJpbnRyaW5zaWMtd2lkdGhcIjp7XCJ0aXRsZVwiOlwiSW50cmluc2ljICYgRXh0cmluc2ljIFNpemluZ1wiLFwiZGVzY3JpcHRpb25cIjpcIkFsbG93cyBmb3IgdGhlIGhlaWdodHMgYW5kIHdpZHRocyB0byBiZSBzcGVjaWZpZWQgaW4gaW50cmluc2ljIHZhbHVlcyB1c2luZyB0aGUgZmlsbC1hdmFpbGFibGUsIG1heC1jb250ZW50LCBtaW4tY29udGVudCwgYW5kIGZpdC1jb250ZW50IHByb3BlcnRpZXMuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNpemluZy9cIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2RlbW9zdGhlbmVzLmluZm8vYmxvZy82NjIvRGVzaWduLUZyb20tdGhlLUluc2lkZS1PdXQtV2l0aC1DU1MtTWluQ29udGVudFwiLFwidGl0bGVcIjpcIk1pbi1Db250ZW50IHR1dG9yaWFsXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1MzXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJ5IHhcIixcIjVcIjpcInkgeFwiLFwiNlwiOlwieSB4XCIsXCI3XCI6XCJ5IHhcIixcIjhcIjpcInkgeFwiLFwiOVwiOlwieSB4XCIsXCIxMFwiOlwieSB4XCIsXCIxMVwiOlwieSB4XCIsXCIxMlwiOlwieSB4XCIsXCIxM1wiOlwieSB4XCIsXCIxNFwiOlwieSB4XCIsXCIxNVwiOlwieSB4XCIsXCIxNlwiOlwieSB4XCIsXCIxN1wiOlwieSB4XCIsXCIxOFwiOlwieSB4XCIsXCIxOVwiOlwieSB4XCIsXCIyMFwiOlwieSB4XCIsXCIyMVwiOlwieSB4XCIsXCIyMlwiOlwieSB4XCIsXCIyM1wiOlwieSB4XCIsXCIyNFwiOlwieSB4XCIsXCIyNVwiOlwieSB4XCIsXCIyNlwiOlwieSB4XCIsXCIyN1wiOlwieSB4XCIsXCIyOFwiOlwieSB4XCIsXCIyOVwiOlwieSB4XCIsXCIzMFwiOlwieSB4XCIsXCIzMVwiOlwieSB4XCIsXCIzMlwiOlwieSB4XCIsXCIzM1wiOlwieSB4XCIsXCIzNFwiOlwieSB4XCIsXCIzNVwiOlwieSB4XCIsXCIzNlwiOlwieSB4XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInkgeFwiLFwiMjdcIjpcInkgeFwiLFwiMjhcIjpcInkgeFwiLFwiMjlcIjpcInkgeFwiLFwiMzBcIjpcInkgeFwiLFwiMzFcIjpcInkgeFwiLFwiMzJcIjpcInkgeFwiLFwiMzNcIjpcInkgeFwiLFwiMzRcIjpcInkgeFwiLFwiMzVcIjpcInkgeFwiLFwiMzZcIjpcInkgeFwiLFwiMzdcIjpcInkgeFwiLFwiMzhcIjpcInkgeFwiLFwiMzlcIjpcInkgeFwiLFwiNDBcIjpcInkgeFwiLFwiNDFcIjpcInkgeFwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwieSB4XCIsXCI3XCI6XCJ5IHhcIixcIjcuMVwiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwieSB4XCIsXCIxNlwiOlwieSB4XCIsXCIxN1wiOlwieSB4XCIsXCIxOFwiOlwieSB4XCIsXCIxOVwiOlwieSB4XCIsXCIyMFwiOlwieSB4XCIsXCIyMVwiOlwieSB4XCIsXCIyMlwiOlwieSB4XCIsXCIyM1wiOlwieSB4XCIsXCIyNFwiOlwieSB4XCIsXCIyNVwiOlwieSB4XCIsXCIyNlwiOlwieSB4XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwieSB4XCIsXCI0LjQuM1wiOlwieSB4XCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwieSB4XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInkgeFwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieSB4XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInkgeFwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJQcmVmaXhlcyBhcmUgb24gdGhlIHZhbHVlcywgbm90IHRoZSBwcm9wZXJ0eSBuYW1lcyAoZS5nLiAtd2Via2l0LW1pbi1jb250ZW50KSBGaXJlZm94IGN1cnJlbnRseSBzdXBwb3J0cyB0aGUgXFxcIi1tb3otYXZhaWxhYmxlXFxcIiBwcm9wZXJ0eSByYXRoZXIgdGhhbiBcXFwiLW1vei1maWxsLWF2YWlsYWJsZVxcXCIuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjY1LjQyLFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImZpbGwtYXZhaWxhYmxlLG1heC1jb250ZW50LG1pbi1jb250ZW50LGZpdC1jb250ZW50LGNvbnRhaW4tZmxvYXRzXCIsXCJpZV9pZFwiOlwiY3NzaW50cmluc2ljc2l6aW5nXCIsXCJjaHJvbWVfaWRcIjpcIjU5MDEzNTM3ODQxODA3MzZcIn0sXCJjcnlwdG9ncmFwaHlcIjp7XCJ0aXRsZVwiOlwiV2ViIENyeXB0b2dyYXBoeVwiLFwiZGVzY3JpcHRpb25cIjpcIkphdmFTY3JpcHQgQVBJIGZvciBwZXJmb3JtaW5nIGJhc2ljIGNyeXB0b2dyYXBoaWMgb3BlcmF0aW9ucyBpbiB3ZWIgYXBwbGljYXRpb25zXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9XZWJDcnlwdG9BUEkvXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9wb2x5Y3J5cHQubmV0L1wiLFwidGl0bGVcIjpcIlBvbHlDcnlwdDogQSBXZWJDcnlwdG8gUG9seWZpbGxcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LnNsaWRlc2hhcmUubmV0L0NoYW5ueS90aGUtaGlzdG9yeS1hbmQtc3RhdHVzLW9mLXdlYi1jcnlwdG8tYXBpXCIsXCJ0aXRsZVwiOlwiVGhlIEhpc3RvcnkgYW5kIFN0YXR1cyBvZiBXZWIgQ3J5cHRvIEFQSVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9yZXNlYXJjaC5taWNyb3NvZnQuY29tL2VuLXVzL3Byb2plY3RzL21zcmpzY3J5cHRvL1wiLFwidGl0bGVcIjpcIk1pY3Jvc29mdCBSZXNlYXJjaCBKYXZhU2NyaXB0IENyeXB0b2dyYXBoeSBMaWJyYXJ5XCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJIVE1MNVwiLFwiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwicFwiLFwiN1wiOlwicFwiLFwiOFwiOlwicFwiLFwiOVwiOlwicFwiLFwiMTBcIjpcInBcIixcIjExXCI6XCJhICMxXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcInBcIixcIjNcIjpcInBcIixcIjMuNVwiOlwicFwiLFwiMy42XCI6XCJwXCIsXCI0XCI6XCJwXCIsXCI1XCI6XCJwXCIsXCI2XCI6XCJwXCIsXCI3XCI6XCJwXCIsXCI4XCI6XCJwXCIsXCI5XCI6XCJwXCIsXCIxMFwiOlwicFwiLFwiMTFcIjpcInBcIixcIjEyXCI6XCJwXCIsXCIxM1wiOlwicFwiLFwiMTRcIjpcInBcIixcIjE1XCI6XCJwXCIsXCIxNlwiOlwicFwiLFwiMTdcIjpcInBcIixcIjE4XCI6XCJwXCIsXCIxOVwiOlwicFwiLFwiMjBcIjpcInBcIixcIjIxXCI6XCJwXCIsXCIyMlwiOlwicFwiLFwiMjNcIjpcInBcIixcIjI0XCI6XCJwXCIsXCIyNVwiOlwicFwiLFwiMjZcIjpcInBcIixcIjI3XCI6XCJwXCIsXCIyOFwiOlwicFwiLFwiMjlcIjpcInBcIixcIjMwXCI6XCJwXCIsXCIzMVwiOlwicFwiLFwiMzJcIjpcIm4gZCAjMlwiLFwiMzNcIjpcIm4gZCAjMlwiLFwiMzRcIjpcIm4gZCAjMlwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwicFwiLFwiNVwiOlwicFwiLFwiNlwiOlwicFwiLFwiN1wiOlwicFwiLFwiOFwiOlwicFwiLFwiOVwiOlwicFwiLFwiMTBcIjpcInBcIixcIjExXCI6XCJwXCIsXCIxMlwiOlwicFwiLFwiMTNcIjpcInBcIixcIjE0XCI6XCJwXCIsXCIxNVwiOlwicFwiLFwiMTZcIjpcInBcIixcIjE3XCI6XCJwXCIsXCIxOFwiOlwicFwiLFwiMTlcIjpcInBcIixcIjIwXCI6XCJwXCIsXCIyMVwiOlwicFwiLFwiMjJcIjpcInBcIixcIjIzXCI6XCJwXCIsXCIyNFwiOlwicFwiLFwiMjVcIjpcInBcIixcIjI2XCI6XCJwXCIsXCIyN1wiOlwicFwiLFwiMjhcIjpcInBcIixcIjI5XCI6XCJwXCIsXCIzMFwiOlwicFwiLFwiMzFcIjpcInBcIixcIjMyXCI6XCJwXCIsXCIzM1wiOlwicFwiLFwiMzRcIjpcInBcIixcIjM1XCI6XCJwXCIsXCIzNlwiOlwicFwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJwXCIsXCIzLjJcIjpcInBcIixcIjRcIjpcInBcIixcIjVcIjpcInBcIixcIjUuMVwiOlwicFwiLFwiNlwiOlwicFwiLFwiNi4xXCI6XCJwXCIsXCI3XCI6XCJwXCIsXCI3LjFcIjpcInkgeCAjM1wiLFwiOFwiOlwieSB4ICMzXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJwXCIsXCI5LjUtOS42XCI6XCJwXCIsXCIxMC4wLTEwLjFcIjpcInBcIixcIjEwLjVcIjpcInBcIixcIjEwLjZcIjpcInBcIixcIjExXCI6XCJwXCIsXCIxMS4xXCI6XCJwXCIsXCIxMS41XCI6XCJwXCIsXCIxMS42XCI6XCJwXCIsXCIxMlwiOlwicFwiLFwiMTIuMVwiOlwicFwiLFwiMTVcIjpcInBcIixcIjE2XCI6XCJwXCIsXCIxN1wiOlwicFwiLFwiMThcIjpcInBcIixcIjE5XCI6XCJwXCIsXCIyMFwiOlwicFwiLFwiMjFcIjpcInBcIixcIjIyXCI6XCJwXCIsXCIyM1wiOlwicFwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInBcIixcIjQuMC00LjFcIjpcInBcIixcIjQuMi00LjNcIjpcInBcIixcIjUuMC01LjFcIjpcInBcIixcIjYuMC02LjFcIjpcInBcIixcIjcuMC03LjFcIjpcInBcIixcIjhcIjpcInkgeCAjM1wifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwicFwiLFwiMi4yXCI6XCJwXCIsXCIyLjNcIjpcInBcIixcIjNcIjpcInBcIixcIjRcIjpcInBcIixcIjQuMVwiOlwicFwiLFwiNC4yLTQuM1wiOlwicFwiLFwiNC40XCI6XCJwXCIsXCI0LjQuM1wiOlwicFwifSxcImJiXCI6e1wiN1wiOlwicFwiLFwiMTBcIjpcInBcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwicFwiLFwiMTFcIjpcInBcIixcIjExLjFcIjpcInBcIixcIjExLjVcIjpcInBcIixcIjEyXCI6XCJwXCIsXCIxMi4xXCI6XCJwXCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJwXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInBcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInBcIn19LFwibm90ZXNcIjpcIk1hbnkgYnJvd3NlcnMgc3VwcG9ydCB0aGUgYFtjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCldKCNmZWF0PWdldHJhbmRvbXZhbHVlcylgIG1ldGhvZCwgYnV0IG5vdCBhY3R1YWwgY3J5cHRvZ3JhcGh5IGZ1bmN0aW9uYWxpdHkgdW5kZXIgYGNyeXB0by5zdWJ0bGVgLiBcXHJcXG5cXHJcXG5BcyB0aGUgc3BlY2lmaWNhdGlvbiBpcyBjdXJyZW50bHkgc3RpbGwgaW4gZGV2ZWxvcG1lbnQsIHVzZXJzIG1heSBiZSBiZXR0ZXIgb2ZmIHVzaW5nIHBvbHlmaWxscyBvciBsaWJyYXJpZXMgbGlrZSBbUG9seUNyeXB0XShodHRwOi8vcG9seWNyeXB0Lm5ldC8pLiBcXHJcXG5cXHJcXG5GaXJlZm94IGFsc28gaGFzIHN1cHBvcnQgZm9yIFt1bm9mZmljaWFsIGZlYXR1cmVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0phdmFTY3JpcHRfY3J5cHRvKS4gXFxyXFxuXFxyXFxuSW4gQ2hyb21lIHRoZSBBUEkgaXMgb25seSB1c2FibGUgb3ZlciBzZWN1cmUgY29ubmVjdGlvbnMuIChbY29ycmVzcG9uZGluZyBidWddKGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzMwMzIpKVwiLFwibm90ZXNfYnlfbnVtXCI6e1wiMVwiOlwiU3VwcG9ydCBpbiBJRTExIGlzIGJhc2VkIGFuIG9sZGVyIHZlcnNpb24gb2YgdGhlIHNwZWNpZmljYXRpb24uIFwiLFwiMlwiOlwiU3VwcG9ydGVkIGluIEZpcmVmb3ggYmVoaW5kIHRoZSBgZG9tLndlYmNyeXB0by5lbmFibGVkYCBmbGFnLiBcIixcIjNcIjpcIlN1cHBvcnRlZCBpbiBTYWZhcmkgdXNpbmcgdGhlIGBjcnlwdG8ud2Via2l0U3VidGxlYCBwcmVmaXhcIn0sXCJ1c2FnZV9wZXJjX3lcIjozMy41OSxcInVzYWdlX3BlcmNfYVwiOjcuMzcsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJzdWJ0bGUsc3VidGxlY3J5cHRvXCIsXCJpZV9pZFwiOlwid2ViY3J5cHRvYXBpXCIsXCJjaHJvbWVfaWRcIjpcIjUwMzAyNjU2OTcwNzUyMDBcIn0sXCJ0ZW1wbGF0ZVwiOntcInRpdGxlXCI6XCJIVE1MIHRlbXBsYXRlc1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBkZWNsYXJpbmcgYSBwb3J0aW9uIG9mIHJldXNhYmxlIG1hcmt1cCB0aGF0IGlzIHBhcnNlZCBidXQgbm90IHJlbmRlcmVkIHVudGlsIGNsb25lZC5cIixcInNwZWNcIjpcImh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3RoZS10ZW1wbGF0ZS1lbGVtZW50XCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL3dlYmNvbXBvbmVudHMvdGVtcGxhdGUvXCIsXCJ0aXRsZVwiOlwiSFRNTDVSb2NrcyAtIEhUTUwncyBOZXcgdGVtcGxhdGUgVGFnXCJ9LHtcInVybFwiOlwiaHR0cDovL3BvbHltZXItcHJvamVjdC5vcmdcIixcInRpdGxlXCI6XCJQb2x5bWVyIHByb2plY3QgKHBvbHlmaWxsICYgd2ViIGNvbXBvbmVudHMgZnJhbWV3b3JrKVwifV0sXCJjYXRlZ29yaWVzXCI6W1wiRE9NXCIsXCJIVE1MNVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NTYuNDcsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwid2ViIGNvbXBvbmVudHMsIHRlbXBsYXRlXCIsXCJpZV9pZFwiOlwidGVtcGxhdGVlbGVtZW50XCIsXCJjaHJvbWVfaWRcIjpcIjUyMDcyODcwNjkxNDcxMzZcIn0sXCJvcHVzXCI6e1widGl0bGVcIjpcIk9wdXNcIixcImRlc2NyaXB0aW9uXCI6XCJSb3lhbHR5LWZyZWUgb3BlbiBhdWRpbyBjb2RlYyBieSBJRVRGLCB3aGljaCBpbmNvcnBvcmF0ZWQgU0lMSyBmcm9tIFNreXBlIGFuZCBDRUxUIGZyb20gWGlwaC5vcmcsIHRvIHNlcnZlIGhpZ2hlciBzb3VuZCBxdWFsaXR5IGFuZCBsb3dlciBsYXRlbmN5IGF0IHRoZSBzYW1lIGJpdHJhdGUuXCIsXCJzcGVjXCI6XCJodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2NzE2XCIsXCJzdGF0dXNcIjpcIm90aGVyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vaGFja3MubW96aWxsYS5vcmcvMjAxMi8wNy9maXJlZm94LWJldGEtMTUtc3VwcG9ydHMtdGhlLW5ldy1vcHVzLWF1ZGlvLWZvcm1hdC9cIixcInRpdGxlXCI6XCJJbnRyb2R1Y3Rpb24gb2YgT3B1cyBieSBNb3ppbGxhXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy5pZXRmLm9yZy9tYWlsLWFyY2hpdmUvd2ViL3J0Y3dlYi9jdXJyZW50L21zZzA0OTUzLmh0bWxcIixcInRpdGxlXCI6XCJHb29nbGUncyBzdGF0ZW1lbnQgYWJvdXQgdGhlIHVzZSBvZiBWUDggYW5kIE9wdXMgY29kZWMgZm9yIFdlYlJUQyBzdGFuZGFyZFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiT3RoZXJcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuXCIsXCIzMVwiOlwiblwiLFwiMzJcIjpcIm5cIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcIm5cIixcIjcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJuXCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJuXCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiRm9yIE9wZXJhIHRoZSBMaW51eCB2ZXJzaW9uIG1heSBiZSBhYmxlIHRvIHBsYXkgaXQgd2hlbiB0aGUgR1N0cmVhbWVyIG1vZHVsZSBpcyB1cCB0byBkYXRlIGFuZCB0aGUgc2VydmVkIG1pbWUtdHlwZSBpcyAnYXVkaW8vb2dnJy5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NDMuOCxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJhdWRpb1wiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCI0ODkxMTg5Mjg3MzIxNjAwXCJ9LFwianBlZ3hyXCI6e1widGl0bGVcIjpcIkpQRUcgWFIgaW1hZ2UgZm9ybWF0XCIsXCJkZXNjcmlwdGlvblwiOlwiVGhlIGxhdGVzdCBKUEVHIGltYWdlIGZvcm1hdCBvZiBKb2ludCBQaG90b2dyYXBoaWMgRXhwZXJ0cyBHcm91cCB3aGljaCBib2FzdHMgYmV0dGVyIGNvbXByZXNzaW9uIGFuZCBzdXBwb3J0cyBsb3NzbGVzcyBjb21wcmVzc2lvbiwgYWxwaGEgY2hhbm5lbCwgYW5kIDQ4LWJpdCBkZWVwIGNvbG9yIG92ZXIgbm9ybWFsIGpwZyBmb3JtYXQuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3Lml0dS5pbnQvcmVjL1QtUkVDLVQuODMyXCIsXCJzdGF0dXNcIjpcIm90aGVyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS93aW5kb3dzL2Rlc2t0b3AvaGg3MDcyMjModj12cy44NSkuYXNweFwiLFwidGl0bGVcIjpcIk1pY3Jvc29mdCBKUEVHIFhSIENvZGVjIE92ZXJ2aWV3XCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJPdGhlclwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcIm5cIixcIjM1XCI6XCJuXCIsXCIzNlwiOlwiblwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJuXCIsXCIzNVwiOlwiblwiLFwiMzZcIjpcIm5cIixcIjM3XCI6XCJuXCIsXCIzOFwiOlwiblwiLFwiMzlcIjpcIm5cIixcIjQwXCI6XCJuXCIsXCI0MVwiOlwiblwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcIm5cIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcIm5cIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcIm5cIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiblwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6MTIuNDksXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImNoYW5uZWwtbWVzc2FnaW5nXCI6e1widGl0bGVcIjpcIkNoYW5uZWwgbWVzc2FnaW5nXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIGZvciBoYXZpbmcgdHdvLXdheSBjb21tdW5pY2F0aW9uIGJldHdlZW4gYnJvd3NpbmcgY29udGV4dHMgKHVzaW5nIE1lc3NhZ2VDaGFubmVsKVwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvd2VibWVzc2FnaW5nLyNjaGFubmVsLW1lc3NhZ2luZ1wiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2Rldi5vcGVyYS5jb20vYXJ0aWNsZXMvdmlldy93aW5kb3ctcG9zdG1lc3NhZ2UtbWVzc2FnZWNoYW5uZWwvI2NoYW5uZWxcIixcInRpdGxlXCI6XCJBbiBJbnRyb2R1Y3Rpb24gdG8gSFRNTDUgd2ViIG1lc3NhZ2luZ1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm4gZCAjMVwiLFwiMjdcIjpcIm4gZCAjMVwiLFwiMjhcIjpcIm4gZCAjMVwiLFwiMjlcIjpcIm4gZCAjMVwiLFwiMzBcIjpcIm4gZCAjMVwiLFwiMzFcIjpcIm4gZCAjMVwiLFwiMzJcIjpcIm4gZCAjMVwiLFwiMzNcIjpcIm4gZCAjMVwiLFwiMzRcIjpcIm4gZCAjMVwiLFwiMzVcIjpcIm4gZCAjMVwiLFwiMzZcIjpcIm4gZCAjMVwifSxcImNocm9tZVwiOntcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJ1XCIsXCIxMC4wLTEwLjFcIjpcInVcIixcIjEwLjVcIjpcInVcIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInVcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiblwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOntcIjFcIjpcIlN1cHBvcnRlZCBpbiBGaXJlZm94IGJlaGluZCB0aGUgYGRvbS5tZXNzYWdlQ2hhbm5lbC5lbmFibGVkYCBmbGFnLlwifSxcInVzYWdlX3BlcmNfeVwiOjY3Ljk2LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIngtZG9jLW1lc3NhZ2luZ1wiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIm1lc3NhZ2VjaGFubmVsc1wiLFwiY2hyb21lX2lkXCI6XCI2NzEwMDQ0NTg2NDA5OTg0XCJ9LFwiY3NzMy10YWJzaXplXCI6e1widGl0bGVcIjpcIkNTUzMgdGFiLXNpemVcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgY3VzdG9taXppbmcgdGhlIHdpZHRoIG9mIHRoZSB0YWIgY2hhcmFjdGVyLiBPbmx5IGVmZmVjdGl2ZSB1c2luZyAnd2hpdGUtc3BhY2U6IHByZScgb3IgJ3doaXRlLXNwYWNlOiBwcmUtd3JhcCcuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXRleHQvI3RhYi1zaXplMVwiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGFiLXNpemVcIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTM1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwieSB4XCIsXCI1XCI6XCJ5IHhcIixcIjZcIjpcInkgeFwiLFwiN1wiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIixcIjlcIjpcInkgeFwiLFwiMTBcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTNcIjpcInkgeFwiLFwiMTRcIjpcInkgeFwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInkgeFwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInkgeFwiLFwiMjdcIjpcInkgeFwiLFwiMjhcIjpcInkgeFwiLFwiMjlcIjpcInkgeFwiLFwiMzBcIjpcInkgeFwiLFwiMzFcIjpcInkgeFwiLFwiMzJcIjpcInkgeFwiLFwiMzNcIjpcInkgeFwiLFwiMzRcIjpcInkgeFwiLFwiMzVcIjpcInkgeFwiLFwiMzZcIjpcInkgeFwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTEuMVwiOlwieSB4XCIsXCIxMS41XCI6XCJ5IHhcIixcIjExLjZcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTIuMVwiOlwieSB4XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJ5IHhcIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJ5XCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwieSB4XCIsXCIxMS4xXCI6XCJ5IHhcIixcIjExLjVcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTIuMVwiOlwieSB4XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5IHhcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjY5LjMzLFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcInRhYi1zaXplLHRhYi13aWR0aFwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJtdXRhdGlvbm9ic2VydmVyXCI6e1widGl0bGVcIjpcIk11dGF0aW9uIE9ic2VydmVyXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIGZvciBvYnNlcnZpbmcgYW5kIHJlYWN0aW5nIHRvIGNoYW5nZXMgdG8gdGhlIERPTS4gUmVwbGFjZXMgTXV0YXRpb25FdmVudHMsIHdoaWNoIGlzIGRlcHJlY2F0ZWQuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9kb20vXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9NdXRhdGlvbk9ic2VydmVyXCIsXCJ0aXRsZVwiOlwiTXV0YXRpb25PYnNlcnZlciBmcm9tIE1ETlwifSx7XCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9Qb2x5bWVyL011dGF0aW9uT2JzZXJ2ZXJzXCIsXCJ0aXRsZVwiOlwiUG9seWZpbGxcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkRPTVwiLFwiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwicFwiLFwiMTBcIjpcInBcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwieSB4XCIsXCIxOVwiOlwieSB4XCIsXCIyMFwiOlwieSB4XCIsXCIyMVwiOlwieSB4XCIsXCIyMlwiOlwieSB4XCIsXCIyM1wiOlwieSB4XCIsXCIyNFwiOlwieSB4XCIsXCIyNVwiOlwieSB4XCIsXCIyNlwiOlwieSB4XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwieSB4XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJ5IHhcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJwXCIsXCI0LjFcIjpcInBcIixcIjQuMi00LjNcIjpcInBcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJ5IHhcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInBcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInkgeFwifX0sXCJub3Rlc1wiOlwiV2hlbiB0aGUgY29udGVudCBvZiBhIG5vZGUgd2l0aCBhIHNpbmdsZSBDaGFyYWN0ZXJEYXRhIGNoaWxkIG5vZGUgaXMgY2hhbmdlZCBieSBpbm5lckhUTUwgYXR0cmlidXRlIGFuZCB0aGUgbm9kZSBoYXZlIGEgc2luZ2xlIGRpZmZlcmVudCBvbmUgYXMgYSByZXN1bHQsIFdlYktpdCBicm93c2VycyBjb25zaWRlciBpdCBhcyBhIGNoYXJhY3RlckRhdGEgbXV0YXRpb24gb2YgdGhlIGNoaWxkIENoYXJhY3RlckRhdGEgbm9kZSwgd2hpbGUgb3RoZXIgYnJvd3NlcnMgdGhpbmsgaXQgYXMgYSBjaGlsZExpc3QgbXV0YXRpb24gb2YgdGhlIHBhcmVudCBub2RlLlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo3Ni4zOSxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJNdXRhdGlvbk9ic2VydmVyXCIsXCJpZV9pZFwiOlwibXV0YXRpb25vYnNlcnZlcnNcIixcImNocm9tZV9pZFwiOlwiNTAyMTE5NDcyNjE0NjA0OFwifSxcImNzcy1zZWxlY3Rpb25cIjp7XCJ0aXRsZVwiOlwiOjpzZWxlY3Rpb24gQ1NTIHBzZXVkby1lbGVtZW50XCIsXCJkZXNjcmlwdGlvblwiOlwiVGhlIDo6c2VsZWN0aW9uIENTUyBwc2V1ZG8tZWxlbWVudCBhcHBsaWVzIHJ1bGVzIHRvIHRoZSBwb3J0aW9uIG9mIGEgZG9jdW1lbnQgdGhhdCBoYXMgYmVlbiBoaWdobGlnaHRlZCAoZS5nLiwgc2VsZWN0ZWQgd2l0aCB0aGUgbW91c2Ugb3IgYW5vdGhlciBwb2ludGluZyBkZXZpY2UpIGJ5IHRoZSB1c2VyLlwiLFwic3BlY1wiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTLzo6c2VsZWN0aW9uXCIsXCJzdGF0dXNcIjpcInVub2ZmXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9xdWlya3Ntb2RlLm9yZy9jc3Mvc2VsZWN0b3JzL3NlbGVjdGlvbi5odG1sXCIsXCJ0aXRsZVwiOlwiOjpzZWxlY3Rpb24gdGVzdFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9zZWxlY3RvcnMvcHNldWRvLWVsZW1lbnRzLzo6c2VsZWN0aW9uXCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcInkgeFwiLFwiM1wiOlwieSB4XCIsXCIzLjVcIjpcInkgeFwiLFwiMy42XCI6XCJ5IHhcIixcIjRcIjpcInkgeFwiLFwiNVwiOlwieSB4XCIsXCI2XCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiOFwiOlwieSB4XCIsXCI5XCI6XCJ5IHhcIixcIjEwXCI6XCJ5IHhcIixcIjExXCI6XCJ5IHhcIixcIjEyXCI6XCJ5IHhcIixcIjEzXCI6XCJ5IHhcIixcIjE0XCI6XCJ5IHhcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIixcIjI3XCI6XCJ5IHhcIixcIjI4XCI6XCJ5IHhcIixcIjI5XCI6XCJ5IHhcIixcIjMwXCI6XCJ5IHhcIixcIjMxXCI6XCJ5IHhcIixcIjMyXCI6XCJ5IHhcIixcIjMzXCI6XCJ5IHhcIixcIjM0XCI6XCJ5IHhcIixcIjM1XCI6XCJ5IHhcIixcIjM2XCI6XCJ5IHhcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInlcIixcIjMuMlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwieVwiLFwiMTAuMC0xMC4xXCI6XCJ5XCIsXCIxMC41XCI6XCJ5XCIsXCIxMC42XCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTEuMVwiOlwieVwiLFwiMTEuNVwiOlwieVwiLFwiMTEuNlwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJ1XCIsXCIxMVwiOlwidVwiLFwiMTEuMVwiOlwidVwiLFwiMTEuNVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcIm5cIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjcyLjk5LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIjo6c2VsZWN0aW9uLHNlbGVjdGlvblwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJjc3MtcGxhY2Vob2xkZXJcIjp7XCJ0aXRsZVwiOlwiOnBsYWNlaG9sZGVyLXNob3duIENTUyBwc2V1ZG8tY2xhc3NcIixcImRlc2NyaXB0aW9uXCI6XCJUaGUgOnBsYWNlaG9sZGVyLXNob3duIHBzZXVkby1jbGFzcyByZXByZXNlbnRzIHRoZSBwbGFjZWhvbGRlciBjb250ZW50cyBvZiBhIGZvcm0gZmllbGQgd2l0aCBwbGFjZWhvbGRlciB0ZXh0LlwiLFwic3BlY1wiOlwiaHR0cDovL2Rldi53My5vcmcvY3Nzd2cvc2VsZWN0b3JzLyNwbGFjZWhvbGRlclwiLFwic3RhdHVzXCI6XCJ1bm9mZlwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg3NzI3NDUodj12cy44NSkuYXNweFwiLFwidGl0bGVcIjpcIk1TRE4gYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9jc3Mvc3R5bGUtcGxhY2Vob2xkZXItdGV4dC9cIixcInRpdGxlXCI6XCJDU1MtVHJpY2tzIGFydGljbGUgd2l0aCBhbGwgcHJlZml4ZXNcIn0se1widXJsXCI6XCJodHRwOi8vd2lraS5jc3N3Zy5vcmcvaWRlYXMvcGxhY2Vob2xkZXItc3R5bGluZ1wiLFwidGl0bGVcIjpcIkNTU1dHIGRpc2N1c3Npb25cIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTU1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJhIHhcIixcIjExXCI6XCJhIHhcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcImEgeFwiLFwiNVwiOlwiYSB4XCIsXCI2XCI6XCJhIHhcIixcIjdcIjpcImEgeFwiLFwiOFwiOlwiYSB4XCIsXCI5XCI6XCJhIHhcIixcIjEwXCI6XCJhIHhcIixcIjExXCI6XCJhIHhcIixcIjEyXCI6XCJhIHhcIixcIjEzXCI6XCJhIHhcIixcIjE0XCI6XCJhIHhcIixcIjE1XCI6XCJhIHhcIixcIjE2XCI6XCJhIHhcIixcIjE3XCI6XCJhIHhcIixcIjE4XCI6XCJhIHhcIixcIjE5XCI6XCJhIHhcIixcIjIwXCI6XCJhIHhcIixcIjIxXCI6XCJhIHhcIixcIjIyXCI6XCJhIHhcIixcIjIzXCI6XCJhIHhcIixcIjI0XCI6XCJhIHhcIixcIjI1XCI6XCJhIHhcIixcIjI2XCI6XCJhIHhcIixcIjI3XCI6XCJhIHhcIixcIjI4XCI6XCJhIHhcIixcIjI5XCI6XCJhIHhcIixcIjMwXCI6XCJhIHhcIixcIjMxXCI6XCJhIHhcIixcIjMyXCI6XCJhIHhcIixcIjMzXCI6XCJhIHhcIixcIjM0XCI6XCJhIHhcIixcIjM1XCI6XCJhIHhcIixcIjM2XCI6XCJhIHhcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJhIHhcIixcIjVcIjpcImEgeFwiLFwiNlwiOlwiYSB4XCIsXCI3XCI6XCJhIHhcIixcIjhcIjpcImEgeFwiLFwiOVwiOlwiYSB4XCIsXCIxMFwiOlwiYSB4XCIsXCIxMVwiOlwiYSB4XCIsXCIxMlwiOlwiYSB4XCIsXCIxM1wiOlwiYSB4XCIsXCIxNFwiOlwiYSB4XCIsXCIxNVwiOlwiYSB4XCIsXCIxNlwiOlwiYSB4XCIsXCIxN1wiOlwiYSB4XCIsXCIxOFwiOlwiYSB4XCIsXCIxOVwiOlwiYSB4XCIsXCIyMFwiOlwiYSB4XCIsXCIyMVwiOlwiYSB4XCIsXCIyMlwiOlwiYSB4XCIsXCIyM1wiOlwiYSB4XCIsXCIyNFwiOlwiYSB4XCIsXCIyNVwiOlwiYSB4XCIsXCIyNlwiOlwiYSB4XCIsXCIyN1wiOlwiYSB4XCIsXCIyOFwiOlwiYSB4XCIsXCIyOVwiOlwiYSB4XCIsXCIzMFwiOlwiYSB4XCIsXCIzMVwiOlwiYSB4XCIsXCIzMlwiOlwiYSB4XCIsXCIzM1wiOlwiYSB4XCIsXCIzNFwiOlwiYSB4XCIsXCIzNVwiOlwiYSB4XCIsXCIzNlwiOlwiYSB4XCIsXCIzN1wiOlwiYSB4XCIsXCIzOFwiOlwiYSB4XCIsXCIzOVwiOlwiYSB4XCIsXCI0MFwiOlwiYSB4XCIsXCI0MVwiOlwiYSB4XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcImEgeFwiLFwiNS4xXCI6XCJhIHhcIixcIjZcIjpcImEgeFwiLFwiNi4xXCI6XCJhIHhcIixcIjdcIjpcImEgeFwiLFwiNy4xXCI6XCJhIHhcIixcIjhcIjpcImEgeFwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJhIHhcIixcIjE2XCI6XCJhIHhcIixcIjE3XCI6XCJhIHhcIixcIjE4XCI6XCJhIHhcIixcIjE5XCI6XCJhIHhcIixcIjIwXCI6XCJhIHhcIixcIjIxXCI6XCJhIHhcIixcIjIyXCI6XCJhIHhcIixcIjIzXCI6XCJhIHhcIixcIjI0XCI6XCJhIHhcIixcIjI1XCI6XCJhIHhcIixcIjI2XCI6XCJhIHhcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJhIHhcIixcIjUuMC01LjFcIjpcImEgeFwiLFwiNi4wLTYuMVwiOlwiYSB4XCIsXCI3LjAtNy4xXCI6XCJhIHhcIixcIjhcIjpcImEgeFwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiYSB4XCIsXCIyLjJcIjpcImEgeFwiLFwiMi4zXCI6XCJhIHhcIixcIjNcIjpcImEgeFwiLFwiNFwiOlwiYSB4XCIsXCI0LjFcIjpcImEgeFwiLFwiNC4yLTQuM1wiOlwiYSB4XCIsXCI0LjRcIjpcImEgeFwiLFwiNC40LjNcIjpcImEgeFwifSxcImJiXCI6e1wiN1wiOlwidVwiLFwiMTBcIjpcImEgeFwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJhIHhcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcImEgeFwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJhIHhcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiYSB4XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJhIHhcIn19LFwibm90ZXNcIjpcIlBhcnRpYWwgc3VwcG9ydCByZWZlcnMgdG8gc3VwcG9ydCBmb3IgYWx0ZXJuYXRpdmUgc3ludGF4OiA6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIgKENocm9tZS9TYWZhcmkvT3BlcmEpLFxcclxcbjo6LW1vei1wbGFjZWhvbGRlciAoRmlyZWZveCkgYW5kIFxcclxcbjotbXMtaW5wdXQtcGxhY2Vob2xkZXIgKElFKS4gXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjAsXCJ1c2FnZV9wZXJjX2FcIjo4NS43NSxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIjo6cGxhY2Vob2xkZXIscGxhY2Vob2xkZXJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiY2FudmFzLWJsZW5kaW5nXCI6e1widGl0bGVcIjpcIkNhbnZhcyBibGVuZCBtb2Rlc1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBkZWZpbmluZyB0aGUgZWZmZWN0IHJlc3VsdGluZyBmcm9tIG92ZXJsYXlpbmcgdHdvIGxheWVycyBvbiBhIENhbnZhcyBlbGVtZW50LiBcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NvbXBvc2l0aW5nLTEvI2JsZW5kaW5nXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9ibG9ncy5hZG9iZS5jb20vd2VicGxhdGZvcm0vMjAxMy8wMS8yOC9ibGVuZGluZy1mZWF0dXJlcy1pbi1jYW52YXMvXCIsXCJ0aXRsZVwiOlwiQmxvZyBwb3N0XCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDYW52YXNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjYzLjY1LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcImNhbnZhc1wiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcImNvbXBvc2l0aW5nYW5kYmxlbmRpbmdpbmNhbnZhczJkXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImNsaXBib2FyZFwiOntcInRpdGxlXCI6XCJDbGlwYm9hcmQgQVBJXCIsXCJkZXNjcmlwdGlvblwiOlwiQVBJIHRvIHByb3ZpZGUgY29weSwgY3V0IGFuZCBwYXN0ZSBmdW5jdGlvbmFsaXR5IHVzaW5nIHRoZSBPUyBjbGlwYm9hcmQuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jbGlwYm9hcmQtYXBpcy9cIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NsaXBib2FyZEV2ZW50XCIsXCJ0aXRsZVwiOlwiTUROIHBhZ2Ugb24gQ2xpcGJvYXJkRXZlbnRcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LmRlbHV4ZWJsb2d0aXBzLmNvbS8yMDEwLzA2L2phdmFzY3JpcHQtY29weS10by1jbGlwYm9hcmQuaHRtbFwiLFwidGl0bGVcIjpcIkJsb2cgcG9zdCBvbiBjcm9zcy1icm93c2VyIHVzYWdlXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJKUyBBUElcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJhICMxXCIsXCI2XCI6XCJhICMxXCIsXCI3XCI6XCJhICMxXCIsXCI4XCI6XCJhICMxXCIsXCI5XCI6XCJhICMxXCIsXCIxMFwiOlwiYSAjMVwiLFwiMTFcIjpcImEgIzFcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiYVwiLFwiMTRcIjpcImFcIixcIjE1XCI6XCJhXCIsXCIxNlwiOlwiYVwiLFwiMTdcIjpcImFcIixcIjE4XCI6XCJhXCIsXCIxOVwiOlwiYVwiLFwiMjBcIjpcImFcIixcIjIxXCI6XCJhXCIsXCIyMlwiOlwiYVwiLFwiMjNcIjpcImFcIixcIjI0XCI6XCJhXCIsXCIyNVwiOlwiYVwiLFwiMjZcIjpcImFcIixcIjI3XCI6XCJhXCIsXCIyOFwiOlwiYVwiLFwiMjlcIjpcImFcIixcIjMwXCI6XCJhXCIsXCIzMVwiOlwiYVwiLFwiMzJcIjpcImFcIixcIjMzXCI6XCJhXCIsXCIzNFwiOlwiYVwiLFwiMzVcIjpcImFcIixcIjM2XCI6XCJhXCIsXCIzN1wiOlwiYVwiLFwiMzhcIjpcImFcIixcIjM5XCI6XCJhXCIsXCI0MFwiOlwiYVwiLFwiNDFcIjpcImFcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInVcIixcIjMuMlwiOlwidVwiLFwiNFwiOlwiYVwiLFwiNVwiOlwiYVwiLFwiNS4xXCI6XCJhXCIsXCI2XCI6XCJhXCIsXCI2LjFcIjpcImFcIixcIjdcIjpcImFcIixcIjcuMVwiOlwiYVwiLFwiOFwiOlwiYVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiYVwiLFwiMTdcIjpcImFcIixcIjE4XCI6XCJhXCIsXCIxOVwiOlwiYVwiLFwiMjBcIjpcImFcIixcIjIxXCI6XCJhXCIsXCIyMlwiOlwiYVwiLFwiMjNcIjpcImFcIixcIjI0XCI6XCJhXCIsXCIyNVwiOlwiYVwiLFwiMjZcIjpcImFcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJhXCIsXCI2LjAtNi4xXCI6XCJhXCIsXCI3LjAtNy4xXCI6XCJhXCIsXCI4XCI6XCJhXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcImFcIixcIjQuNC4zXCI6XCJhXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiYVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJhXCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJhXCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IGluIElFIHJlZmVycyB1c2luZyBbYSBub24tc3RhbmRhcmQgbWV0aG9kXShodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvbXM1MzUyMjAlMjh2PXZzLjg1JTI5LmFzcHgpIG9mIGludGVyYWN0aW5nIHdpdGggdGhlIGNsaXBib2FyZC4gRm9yIG90aGVyIGJyb3dzZXJzIGl0IHJlZmVycyB0byBub3Qgc3VwcG9ydGluZyB0aGUgQ2xpcGJvYXJkRXZlbnQgY29uc3RydWN0b3IuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjEyLjI4LFwidXNhZ2VfcGVyY19hXCI6NzAuNDQsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJjdXQsY29weSxwYXN0ZSxjbGlwYm9hcmRkYXRhXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcInJ0Y3BlZXJjb25uZWN0aW9uXCI6e1widGl0bGVcIjpcIldlYlJUQyBQZWVyLXRvLXBlZXIgY29ubmVjdGlvbnNcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgYWxsb3dpbmcgdHdvIHVzZXJzIHRvIGNvbW11bmljYXRlIGRpcmVjdGx5LCBicm93c2VyIHRvIGJyb3dzZXIgdXNpbmcgdGhlIFJUQ1BlZXJDb25uZWN0aW9uIEFQSS5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL3dlYnJ0Yy8jcGVlci10by1wZWVyLWNvbm5lY3Rpb25zXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly93d3cud2VicnRjLm9yZy9cIixcInRpdGxlXCI6XCJXZWJSVEMgUHJvamVjdCBzaXRlXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJKUyBBUElcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIixcIjI3XCI6XCJ5IHhcIixcIjI4XCI6XCJ5IHhcIixcIjI5XCI6XCJ5IHhcIixcIjMwXCI6XCJ5IHhcIixcIjMxXCI6XCJ5IHhcIixcIjMyXCI6XCJ5IHhcIixcIjMzXCI6XCJ5IHhcIixcIjM0XCI6XCJ5IHhcIixcIjM1XCI6XCJ5IHhcIixcIjM2XCI6XCJ5IHhcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInkgeFwiLFwiMjdcIjpcInkgeFwiLFwiMjhcIjpcInkgeFwiLFwiMjlcIjpcInkgeFwiLFwiMzBcIjpcInkgeFwiLFwiMzFcIjpcInkgeFwiLFwiMzJcIjpcInkgeFwiLFwiMzNcIjpcInkgeFwiLFwiMzRcIjpcInkgeFwiLFwiMzVcIjpcInkgeFwiLFwiMzZcIjpcInkgeFwiLFwiMzdcIjpcInkgeFwiLFwiMzhcIjpcInkgeFwiLFwiMzlcIjpcInkgeFwiLFwiNDBcIjpcInkgeFwiLFwiNDFcIjpcInkgeFwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInkgeFwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcIm5cIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInkgeFwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieSB4XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInkgeFwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJCbGFja0JlcnJ5IDEwIHJlY29nbml6ZXMgUlRDUGVlckNvbm5lY3Rpb24gYnV0IHJlYWwgc3VwcG9ydCBpcyB1bmNvbmZpcm1lZC5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NTMuMTIsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwid2VicnRjd2VicnRjdjEwYXBpXCIsXCJjaHJvbWVfaWRcIjpcIjY2MTI0NjI5Mjk0NDQ4NjRcIn0sXCJjc3MzLWN1cnNvcnNcIjp7XCJ0aXRsZVwiOlwiQ1NTMyBDdXJzb3JzIChvcmlnaW5hbCB2YWx1ZXMpXCIsXCJkZXNjcmlwdGlvblwiOlwiQ1NTMyBjdXJzb3IgdmFsdWVzIGFkZGVkIGluIHRoZSAyMDA0IHNwZWMsIGluY2x1ZGluZyBub25lLCBjb250ZXh0LW1lbnUsIGNlbGwsIHZlcnRpY2FsLXRleHQsIGFsaWFzLCBjb3B5LCBuby1kcm9wLCBub3QtYWxsb3dlZCwgbmVzdy1yZXNpemUsIG53c2UtcmVzaXplLCBjb2wtcmVzaXplLCByb3ctcmVzaXplIGFuZCBhbGwtc2Nyb2xsLiBcIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdWkvI2N1cnNvclwiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY3Vyc29yXCIsXCJ0aXRsZVwiOlwiTUROIERvY3VtZW50YXRpb25cIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJhXCIsXCI2XCI6XCJhXCIsXCI3XCI6XCJhXCIsXCI4XCI6XCJhXCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiYVwiLFwiM1wiOlwiYVwiLFwiMy41XCI6XCJhXCIsXCIzLjZcIjpcImFcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJhXCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcImFcIixcIjMuMlwiOlwiYVwiLFwiNFwiOlwiYVwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiYVwiLFwiOS41LTkuNlwiOlwiYVwiLFwiMTAuMC0xMC4xXCI6XCJhXCIsXCIxMC41XCI6XCJhXCIsXCIxMC42XCI6XCJhXCIsXCIxMVwiOlwiYVwiLFwiMTEuMVwiOlwiYVwiLFwiMTEuNVwiOlwiYVwiLFwiMTEuNlwiOlwiYVwiLFwiMTJcIjpcImFcIixcIjEyLjFcIjpcImFcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwidVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJuXCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJuXCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcIm5cIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IGluIElFIHJlZmVycyB0byBubyBzdXBwb3J0IGZvciB0aGUgYWxpYXMsIGNlbGwsIGNvcHksIGV3LXJlc2l6ZSwgbnMtcmVzaXplLCBuZXN3LXJlc2l6ZSwgbndzZS1yZXNpemUgb3IgY29udGV4dC1tZW51IGN1cnNvcnMuIE9wZXJhIDEyLjEwLSBkb2VzIG5vdCBzdXBwb3J0ICdub25lJyBvciBhIFVSSS5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NjIuNDYsXCJ1c2FnZV9wZXJjX2FcIjo0LjkxLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiY3Vyc29ycywgcG9pbnRlcnNcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiY3NzMy1jdXJzb3JzLW5ld2VyXCI6e1widGl0bGVcIjpcIkNTUzMgQ3Vyc29ycyAobmV3IHZhbHVlcylcIixcImRlc2NyaXB0aW9uXCI6XCJTdXBwb3J0IGZvciBgem9vbS1pbmAgYW5kIGB6b29tLW91dGAgdmFsdWVzIGZvciB0aGUgQ1NTMyBgY3Vyc29yYCBwcm9wZXJ0eS5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdWkvI2N1cnNvclwiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY3Vyc29yXCIsXCJ0aXRsZVwiOlwiTUROIERvY3VtZW50YXRpb25cIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwieSB4XCIsXCIzXCI6XCJ5IHhcIixcIjMuNVwiOlwieSB4XCIsXCIzLjZcIjpcInkgeFwiLFwiNFwiOlwieSB4XCIsXCI1XCI6XCJ5IHhcIixcIjZcIjpcInkgeFwiLFwiN1wiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIixcIjlcIjpcInkgeFwiLFwiMTBcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTNcIjpcInkgeFwiLFwiMTRcIjpcInkgeFwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInkgeFwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5IHhcIixcIjVcIjpcInkgeFwiLFwiNlwiOlwieSB4XCIsXCI3XCI6XCJ5IHhcIixcIjhcIjpcInkgeFwiLFwiOVwiOlwieSB4XCIsXCIxMFwiOlwieSB4XCIsXCIxMVwiOlwieSB4XCIsXCIxMlwiOlwieSB4XCIsXCIxM1wiOlwieSB4XCIsXCIxNFwiOlwieSB4XCIsXCIxNVwiOlwieSB4XCIsXCIxNlwiOlwieSB4XCIsXCIxN1wiOlwieSB4XCIsXCIxOFwiOlwieSB4XCIsXCIxOVwiOlwieSB4XCIsXCIyMFwiOlwieSB4XCIsXCIyMVwiOlwieSB4XCIsXCIyMlwiOlwieSB4XCIsXCIyM1wiOlwieSB4XCIsXCIyNFwiOlwieSB4XCIsXCIyNVwiOlwieSB4XCIsXCIyNlwiOlwieSB4XCIsXCIyN1wiOlwieSB4XCIsXCIyOFwiOlwieSB4XCIsXCIyOVwiOlwieSB4XCIsXCIzMFwiOlwieSB4XCIsXCIzMVwiOlwieSB4XCIsXCIzMlwiOlwieSB4XCIsXCIzM1wiOlwieSB4XCIsXCIzNFwiOlwieSB4XCIsXCIzNVwiOlwieSB4XCIsXCIzNlwiOlwieSB4XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInkgeFwiLFwiMy4yXCI6XCJ5IHhcIixcIjRcIjpcInkgeFwiLFwiNVwiOlwieSB4XCIsXCI1LjFcIjpcInkgeFwiLFwiNlwiOlwieSB4XCIsXCI2LjFcIjpcInkgeFwiLFwiN1wiOlwieSB4XCIsXCI3LjFcIjpcInkgeFwiLFwiOFwiOlwieSB4XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInkgeFwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcIm5cIn0sXCJiYlwiOntcIjdcIjpcInkgeFwiLFwiMTBcIjpcInkgeFwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJuXCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJuXCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcIm5cIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiQ2hyb21lLCBTYWZhcmkgYW5kIEZpcmVmb3ggYWxzbyBzdXBwb3J0IHRoZSB1bm9mZmljaWFsIGBncmFiYCBhbmQgYGdyYWJiaW5nYCB2YWx1ZXMgKHdpdGggcHJlZml4KVwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo1MS4wOSxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJjdXJzb3JzLCBwb2ludGVyc1wiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJ3ZWJ2dHRcIjp7XCJ0aXRsZVwiOlwiV2ViVlRUIC0gV2ViIFZpZGVvIFRleHQgVHJhY2tzXCIsXCJkZXNjcmlwdGlvblwiOlwiRm9ybWF0IGZvciBtYXJraW5nIHVwIHRleHQgY2FwdGlvbnMgZm9yIG11bHRpbWVkaWEgcmVzb3VyY2VzLlwiLFwic3BlY1wiOlwiaHR0cDovL2Rldi53My5vcmcvaHRtbDUvd2VidnR0L1wiLFwic3RhdHVzXCI6XCJ1bm9mZlwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy90cmFjay9iYXNpY3MvXCIsXCJ0aXRsZVwiOlwiR2V0dGluZyBTdGFydGVkIFdpdGggdGhlIFRyYWNrIEVsZW1lbnRcIn0se1widXJsXCI6XCJodHRwczovL2Rldi5vcGVyYS5jb20vYXJ0aWNsZXMvdmlldy9hbi1pbnRyb2R1Y3Rpb24tdG8td2VidnR0LWFuZC10cmFjay9cIixcInRpdGxlXCI6XCJBbiBJbnRyb2R1Y3Rpb24gdG8gV2ViVlRUIGFuZCB0cmFja1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiT3RoZXJcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm4gZFwiLFwiMjVcIjpcIm4gZFwiLFwiMjZcIjpcIm4gZFwiLFwiMjdcIjpcIm4gZFwiLFwiMjhcIjpcIm4gZFwiLFwiMjlcIjpcIm4gZFwiLFwiMzBcIjpcIm4gZFwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJXZWJWVFQgbXVzdCBiZSB1c2VkIHdpdGggdGhlIDx0cmFjaz4gZWxlbWVudC5cXHJcXG5cXHJcXG5GaXJlZm94IGN1cnJlbnRseSBsYWNrcyBzdXBwb3J0IGZvciB0aGUgZm9yIDo6Y3VlIHBzZXVkb2VsZW1lbnQuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjczLjQ2LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcInZpZGVvXCIsXCJrZXl3b3Jkc1wiOlwiY2FwdGlvbnMsdHJhY2tcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiNjcxOTExNTU1NzMzOTEzNlwifSxcInByb21pc2VzXCI6e1widGl0bGVcIjpcIlByb21pc2VzXCIsXCJkZXNjcmlwdGlvblwiOlwiQSBwcm9taXNlIHJlcHJlc2VudHMgdGhlIGV2ZW50dWFsIHJlc3VsdCBvZiBhbiBhc3luY2hyb25vdXMgb3BlcmF0aW9uLlwiLFwic3BlY1wiOlwiaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXByb21pc2Utb2JqZWN0c1wiLFwic3RhdHVzXCI6XCJvdGhlclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vcHJvbWlzZXMtYXBsdXMuZ2l0aHViLmlvL3Byb21pc2VzLXNwZWMvXCIsXCJ0aXRsZVwiOlwiUHJvbWlzZXMvQSsgc3BlY1wifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuY2hyb21lc3RhdHVzLmNvbS9mZWF0dXJlcy81NjgxNzI2MzM2NTMyNDgwXCIsXCJ0aXRsZVwiOlwiQ2hyb21pdW0gZGFzaGJvYXJkIC0gRVM2IFByb21pc2VzXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZXM2L3Byb21pc2VzL1wiLFwidGl0bGVcIjpcIkphdmFTY3JpcHQgUHJvbWlzZXM6IFRoZXJlIGFuZCBiYWNrIGFnYWluIC0gSFRNTDUgUm9ja3NcIn0se1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vamFrZWFyY2hpYmFsZC9FUzYtUHJvbWlzZXNcIixcInRpdGxlXCI6XCJBIHBvbHlmaWxsIGZvciBFUzYtc3R5bGUgUHJvbWlzZXNcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcInBcIixcIjZcIjpcInBcIixcIjdcIjpcInBcIixcIjhcIjpcInBcIixcIjlcIjpcInBcIixcIjEwXCI6XCJwXCIsXCIxMVwiOlwicFwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJwXCIsXCIzXCI6XCJwXCIsXCIzLjVcIjpcInBcIixcIjMuNlwiOlwicFwiLFwiNFwiOlwicFwiLFwiNVwiOlwicFwiLFwiNlwiOlwicFwiLFwiN1wiOlwicFwiLFwiOFwiOlwicFwiLFwiOVwiOlwicFwiLFwiMTBcIjpcInBcIixcIjExXCI6XCJwXCIsXCIxMlwiOlwicFwiLFwiMTNcIjpcInBcIixcIjE0XCI6XCJwXCIsXCIxNVwiOlwicFwiLFwiMTZcIjpcInBcIixcIjE3XCI6XCJwXCIsXCIxOFwiOlwicFwiLFwiMTlcIjpcInBcIixcIjIwXCI6XCJwXCIsXCIyMVwiOlwicFwiLFwiMjJcIjpcInBcIixcIjIzXCI6XCJwXCIsXCIyNFwiOlwicFwiLFwiMjVcIjpcInBcIixcIjI2XCI6XCJwXCIsXCIyN1wiOlwiYVwiLFwiMjhcIjpcImFcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInBcIixcIjVcIjpcInBcIixcIjZcIjpcInBcIixcIjdcIjpcInBcIixcIjhcIjpcInBcIixcIjlcIjpcInBcIixcIjEwXCI6XCJwXCIsXCIxMVwiOlwicFwiLFwiMTJcIjpcInBcIixcIjEzXCI6XCJwXCIsXCIxNFwiOlwicFwiLFwiMTVcIjpcInBcIixcIjE2XCI6XCJwXCIsXCIxN1wiOlwicFwiLFwiMThcIjpcInBcIixcIjE5XCI6XCJwXCIsXCIyMFwiOlwicFwiLFwiMjFcIjpcInBcIixcIjIyXCI6XCJwXCIsXCIyM1wiOlwicFwiLFwiMjRcIjpcInBcIixcIjI1XCI6XCJwXCIsXCIyNlwiOlwicFwiLFwiMjdcIjpcInBcIixcIjI4XCI6XCJwXCIsXCIyOVwiOlwicFwiLFwiMzBcIjpcInBcIixcIjMxXCI6XCJwXCIsXCIzMlwiOlwiYVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwicFwiLFwiMy4yXCI6XCJwXCIsXCI0XCI6XCJwXCIsXCI1XCI6XCJwXCIsXCI1LjFcIjpcInBcIixcIjZcIjpcInBcIixcIjYuMVwiOlwicFwiLFwiN1wiOlwicFwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJwXCIsXCI5LjUtOS42XCI6XCJwXCIsXCIxMC4wLTEwLjFcIjpcInBcIixcIjEwLjVcIjpcInBcIixcIjEwLjZcIjpcInBcIixcIjExXCI6XCJwXCIsXCIxMS4xXCI6XCJwXCIsXCIxMS41XCI6XCJwXCIsXCIxMS42XCI6XCJwXCIsXCIxMlwiOlwicFwiLFwiMTIuMVwiOlwicFwiLFwiMTVcIjpcInBcIixcIjE2XCI6XCJwXCIsXCIxN1wiOlwicFwiLFwiMThcIjpcInBcIixcIjE5XCI6XCJhXCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInBcIixcIjQuMC00LjFcIjpcInBcIixcIjQuMi00LjNcIjpcInBcIixcIjUuMC01LjFcIjpcInBcIixcIjYuMC02LjFcIjpcInBcIixcIjcuMC03LjFcIjpcInBcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwicFwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInBcIixcIjIuMlwiOlwicFwiLFwiMi4zXCI6XCJwXCIsXCIzXCI6XCJwXCIsXCI0XCI6XCJwXCIsXCI0LjFcIjpcInBcIixcIjQuMi00LjNcIjpcInBcIixcIjQuNFwiOlwicFwiLFwiNC40LjNcIjpcInBcIn0sXCJiYlwiOntcIjdcIjpcInBcIixcIjEwXCI6XCJwXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInBcIixcIjExXCI6XCJwXCIsXCIxMS4xXCI6XCJwXCIsXCIxMS41XCI6XCJwXCIsXCIxMlwiOlwicFwiLFwiMTIuMVwiOlwicFwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJwXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJwXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NTIuMTMsXCJ1c2FnZV9wZXJjX2FcIjowLjUyLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiZnV0dXJlc1wiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCI1NjgxNzI2MzM2NTMyNDgwXCJ9LFwiY3NzLXN0aWNreVwiOntcInRpdGxlXCI6XCJDU1MgcG9zaXRpb246c3RpY2t5XCIsXCJkZXNjcmlwdGlvblwiOlwiS2VlcHMgZWxlbWVudHMgcG9zaXRpb25lZCBhcyBcXFwiZml4ZWRcXFwiIG9yIFxcXCJyZWxhdGl2ZVxcXCIgZGVwZW5kaW5nIG9uIGhvdyBpdCBhcHBlYXJzIGluIHRoZSB2aWV3cG9ydC4gQXMgYSByZXN1bHQgdGhlIGVsZW1lbnQgaXMgXFxcInN0dWNrXFxcIiB3aGVuIG5lY2Vzc2FyeSB3aGlsZSBzY3JvbGxpbmcuXCIsXCJzcGVjXCI6XCJodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3MtcG9zaXRpb24vI3N0aWNreS1wb3NpdGlvbmluZ1wiLFwic3RhdHVzXCI6XCJ1bm9mZlwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vdXBkYXRlcy5odG1sNXJvY2tzLmNvbS8yMDEyLzA4L1N0aWNrLXlvdXItbGFuZGluZ3MtcG9zaXRpb24tc3RpY2t5LWxhbmRzLWluLVdlYktpdFwiLFwidGl0bGVcIjpcIkhUTUw1Um9ja3NcIn0se1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcG9zaXRpb25cIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9wcm9wZXJ0aWVzL3Bvc2l0aW9uXCIsXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wifSx7XCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9maWxhbWVudGdyb3VwL2ZpeGVkLXN0aWNreVwiLFwidGl0bGVcIjpcIlBvbHlmaWxsXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL3dpbGRkZWVyL3N0aWNreWZpbGxcIixcInRpdGxlXCI6XCJBbm90aGVyIHBvbHlmaWxsXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1NcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwibiBkICMxXCIsXCIyN1wiOlwibiBkICMxXCIsXCIyOFwiOlwibiBkICMxXCIsXCIyOVwiOlwibiBkICMxXCIsXCIzMFwiOlwibiBkICMxXCIsXCIzMVwiOlwibiBkICMxXCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm4gZCAjMlwiLFwiMjRcIjpcIm4gZCAjMlwiLFwiMjVcIjpcIm4gZCAjMlwiLFwiMjZcIjpcIm4gZCAjMlwiLFwiMjdcIjpcIm4gZCAjMlwiLFwiMjhcIjpcIm4gZCAjMlwiLFwiMjlcIjpcIm4gZCAjMlwiLFwiMzBcIjpcIm4gZCAjMlwiLFwiMzFcIjpcIm4gZCAjMlwiLFwiMzJcIjpcIm4gZCAjMlwiLFwiMzNcIjpcIm4gZCAjMlwiLFwiMzRcIjpcIm4gZCAjMlwiLFwiMzVcIjpcIm4gZCAjMlwiLFwiMzZcIjpcIm4gZCAjMlwiLFwiMzdcIjpcIm5cIixcIjM4XCI6XCJuXCIsXCIzOVwiOlwiblwiLFwiNDBcIjpcIm5cIixcIjQxXCI6XCJuXCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiNy4xXCI6XCJ5IHhcIixcIjhcIjpcInkgeFwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJ5IHhcIixcIjcuMC03LjFcIjpcInkgeFwiLFwiOFwiOlwieSB4XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJuXCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJuXCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7XCIxXCI6XCJDYW4gYmUgZW5hYmxlZCBpbiBGaXJlZm94IGJ5IHNldHRpbmcgdGhlIGFib3V0OmNvbmZpZyBwcmVmZXJlbmNlIGxheW91dC5jc3Muc3RpY2t5LmVuYWJsZWQgdG8gdHJ1ZVwiLFwiMlwiOlwiRW5hYmxlZCBpbiBDaHJvbWUgdGhyb3VnaCB0aGUgXFxcImV4cGVyaW1lbnRhbCBXZWIgUGxhdGZvcm0gZmVhdHVyZXNcXFwiIGZsYWcgaW4gY2hyb21lOi8vZmxhZ3NcIn0sXCJ1c2FnZV9wZXJjX3lcIjoxNi44MixcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJwb3NpdGlvbnN0aWNreVwiLFwiY2hyb21lX2lkXCI6XCI2MTkwMjUwNDY0Mzc4ODgwXCJ9LFwiZGlhbG9nXCI6e1widGl0bGVcIjpcIkRpYWxvZyBlbGVtZW50XCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGVhc2lseSBjcmVhdGluZyBjdXN0b20gZGlhbG9nIGJveGVzIHRvIGRpc3BsYXkgdG8gdGhlIHVzZXIgd2l0aCBtb2RhbCBvciBub24tbW9kYWwgb3B0aW9ucy4gQWxzbyBpbmNsdWRlcyBhIGA6OmJhY2tkcm9wYCBwc2V1ZG8tZWxlbWVudCBmb3IgYmVoaW5kIHRoZSBlbGVtZW50LlwiLFwic3BlY1wiOlwiaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCN0aGUtZGlhbG9nLWVsZW1lbnRcIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNocm9tZS9kaWFsb2ctcG9seWZpbGxcIixcInRpdGxlXCI6XCJQb2x5ZmlsbFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiRE9NXCIsXCJIVE1MNVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcInVcIixcIjM1XCI6XCJ1XCIsXCIzNlwiOlwidVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwibiBkICMxXCIsXCIzM1wiOlwibiBkICMxXCIsXCIzNFwiOlwibiBkICMxXCIsXCIzNVwiOlwibiBkICMxXCIsXCIzNlwiOlwibiBkICMxXCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcIm5cIixcIjcuMVwiOlwiblwiLFwiOFwiOlwidVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwibiBkICMyXCIsXCIyMFwiOlwibiBkICMyXCIsXCIyMVwiOlwibiBkICMyXCIsXCIyMlwiOlwibiBkICMyXCIsXCIyM1wiOlwibiBkICMyXCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwidVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJuXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcIm5cIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e1wiMVwiOlwiRW5hYmxlZCB0aHJvdWdoIHRoZSBcXFwiRXhwZXJpbWVudGFsIFdlYiBQbGF0Zm9ybSBmZWF0dXJlc1xcXCIgZmxhZyBpbiBgY2hyb21lOi8vZmxhZ3NgXCIsXCIyXCI6XCJFbmFibGVkIHRocm91Z2ggdGhlIFxcXCJFeHBlcmltZW50YWwgV2ViIFBsYXRmb3JtIGZlYXR1cmVzXFxcIiBmbGFnIGluIGBvcGVyYTovL2ZsYWdzYFwifSxcInVzYWdlX3BlcmNfeVwiOjMxLjc2LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIkhUTUxEaWFsb2dFbGVtZW50LHNob3dNb2RhbCxiYWNrZHJvcFwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCI1NzcwMjM3MDIyNTY4NDQ4XCJ9LFwiY3NzLXZhcmlhYmxlc1wiOntcInRpdGxlXCI6XCJDU1MgVmFyaWFibGVzXCIsXCJkZXNjcmlwdGlvblwiOlwiUGVybWl0cyB0aGUgZGVjbGFyYXRpb24gYW5kIHVzYWdlIG9mIGNhc2NhZGluZyB2YXJpYWJsZXMgaW4gc3R5bGVzaGVldHMuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MtdmFyaWFibGVzL1wiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2hhY2tzLm1vemlsbGEub3JnLzIwMTMvMTIvY3NzLXZhcmlhYmxlcy1pbi1maXJlZm94LW5pZ2h0bHkvXCIsXCJ0aXRsZVwiOlwiTW96aWxsYSBoYWNrcyBhcnRpY2xlIChvbGRlciBzeW50YXgpXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL1VzaW5nX0NTU192YXJpYWJsZXNcIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTM1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJuXCIsXCIzNVwiOlwiblwiLFwiMzZcIjpcIm5cIixcIjM3XCI6XCJuXCIsXCIzOFwiOlwiblwiLFwiMzlcIjpcInVcIixcIjQwXCI6XCJ1XCIsXCI0MVwiOlwidVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcIm5cIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcIm5cIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcIm5cIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6MTAuOTEsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiY3NzIHZhcmlhYmxlc1wiLFwiaWVfaWRcIjpcImNzc3ZhcmlhYmxlc1wiLFwiY2hyb21lX2lkXCI6XCI2NDAxMzU2Njk2OTExODcyXCJ9LFwidmlicmF0aW9uXCI6e1widGl0bGVcIjpcIlZpYnJhdGlvbiBBUElcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2QgdG8gYWNjZXNzIHRoZSB2aWJyYXRpb24gbWVjaGFuaXNtIG9mIHRoZSBob3N0aW5nIGRldmljZS5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL3ZpYnJhdGlvbi9cIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvR3VpZGUvQVBJL1ZpYnJhdGlvblwiLFwidGl0bGVcIjpcIk1ETiBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL2Rhdmlkd2Fsc2gubmFtZS92aWJyYXRpb24tYXBpXCIsXCJ0aXRsZVwiOlwiVmlicmF0aW9uIEFQSSBzYW1wbGUgY29kZSAmIGRlbW9cIn0se1widXJsXCI6XCJodHRwOi8vY29kZS50dXRzcGx1cy5jb20vdHV0b3JpYWxzL2h0bWw1LXZpYnJhdGlvbi1hcGktLW1vYmlsZS0yMjU4NVwiLFwidGl0bGVcIjpcIlR1dHMrIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vYXVyZWxpby5hdWRlcm8uaXQvZGVtby92aWJyYXRpb24tYXBpLWRlbW8uaHRtbFwiLFwidGl0bGVcIjpcIkRlbW9cIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJ5IHhcIixcIjEyXCI6XCJ5IHhcIixcIjEzXCI6XCJ5IHhcIixcIjE0XCI6XCJ5IHhcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcIm5cIixcIjcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjU3LjU3LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcInZpYnJhdGlvbixtb2JpbGUsZGV2aWNlXCIsXCJpZV9pZFwiOlwidmlicmF0aW9uYXBpXCIsXCJjaHJvbWVfaWRcIjpcIjU2OTg3Njg3NjY3NjMwMDhcIn0sXCJjc3MtYmFja2dyb3VuZGJsZW5kbW9kZVwiOntcInRpdGxlXCI6XCJDU1MgYmFja2dyb3VuZC1ibGVuZC1tb2RlXCIsXCJkZXNjcmlwdGlvblwiOlwiQWxsb3dzIGJsZW5kaW5nIGJldHdlZW4gQ1NTIGJhY2tncm91bmQgaW1hZ2VzLCBncmFkaWVudHMsIGFuZCBjb2xvcnMuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jb21wb3NpdGluZy0xLyNiYWNrZ3JvdW5kLWJsZW5kLW1vZGVcIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2NvZGVwZW4uaW8vYmVubmV0dGZlZWx5L3Blbi9yeG9BY1wiLFwidGl0bGVcIjpcImNvZGVwZW4gZXhhbXBsZVwifSx7XCJ1cmxcIjpcImh0dHBzOi8vbWVkaXVtLmNvbS93ZWItZGVzaWduLXRlY2huaXF1ZS82YjUxYmY1Mzc0M2FcIixcInRpdGxlXCI6XCJCbG9nIHBvc3RcIn0se1widXJsXCI6XCJodHRwOi8vYmVubmV0dGZlZWx5LmNvbS9ncmFkaWVudHNcIixcInRpdGxlXCI6XCJEZW1vXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1NcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuXCIsXCIzMVwiOlwiblwiLFwiMzJcIjpcIm5cIixcIjMzXCI6XCJuXCIsXCIzNFwiOlwiblwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcIm5cIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjUwLjYzLFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImNzcyBibGVuZCBtb2Rlcyxjc3MgYmxlbmRpbmcgbW9kZXMsYmxlbmRpbmcsbXVsdGlwbHksc2NyZWVuLGJhY2tncm91bmRcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiNTc2ODAzNzk5OTMxMjg5NlwifSxcImNzcy1taXhibGVuZG1vZGVcIjp7XCJ0aXRsZVwiOlwiQmxlbmRpbmcgb2YgSFRNTC9TVkcgZWxlbWVudHNcIixcImRlc2NyaXB0aW9uXCI6XCJBbGxvd3MgYmxlbmRpbmcgYmV0d2VlbiBhcmJpdHJhcnkgU1ZHIGFuZCBIVE1MIGVsZW1lbnRzXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jb21wb3NpdGluZy0xLyNtaXgtYmxlbmQtbW9kZVwiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vY29kZXBlbi5pby9iZW5uZXR0ZmVlbHkvcGVuL2NzanpkXCIsXCJ0aXRsZVwiOlwiY29kZXBlbiBleGFtcGxlXCJ9LHtcInVybFwiOlwiaHR0cDovL2Nzcy10cmlja3MuY29tL2Jhc2ljcy1jc3MtYmxlbmQtbW9kZXMvXCIsXCJ0aXRsZVwiOlwiQmxvZyBwb3N0XCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1NcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm4gZCAjMVwiLFwiMzBcIjpcIm4gZCAjMVwiLFwiMzFcIjpcIm4gZCAjMVwiLFwiMzJcIjpcIm4gZCAjMVwiLFwiMzNcIjpcIm4gZCAjMVwiLFwiMzRcIjpcIm4gZCAjMVwiLFwiMzVcIjpcIm4gZCAjMVwiLFwiMzZcIjpcIm4gZCAjMVwiLFwiMzdcIjpcIm4gZCAjMVwiLFwiMzhcIjpcIm4gZCAjMVwiLFwiMzlcIjpcIm4gZCAjMVwiLFwiNDBcIjpcIm4gZCAjMVwiLFwiNDFcIjpcIm4gZCAjMVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcIm5cIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcIm5cIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcIm5cIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOntcIjFcIjpcIkVuYWJsZWQgaW4gQ2hyb21lIHRocm91Z2ggdGhlIFxcXCJleHBlcmltZW50YWwgV2ViIFBsYXRmb3JtIGZlYXR1cmVzXFxcIiBmbGFnIGluIGNocm9tZTovL2ZsYWdzXCJ9LFwidXNhZ2VfcGVyY195XCI6OC43MixcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJjc3MgYmxlbmQgbW9kZXMsY3NzIGJsZW5kaW5nIG1vZGVzXCIsXCJpZV9pZFwiOlwibWl4YmxlbmRtb2RlXCIsXCJjaHJvbWVfaWRcIjpcIjYzNjI2MTYzNjAzMzc0MDhcIn0sXCJ3ZWItc3BlZWNoXCI6e1widGl0bGVcIjpcIldlYiBTcGVlY2ggQVBJXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIHRvIHByb3ZpZGUgc3BlZWNoIGlucHV0IGFuZCB0ZXh0LXRvLXNwZWVjaCBvdXRwdXQgZmVhdHVyZXMgaW4gYSB3ZWIgYnJvd3Nlci5cIixcInNwZWNcIjpcImh0dHBzOi8vZHZjcy53My5vcmcvaGcvc3BlZWNoLWFwaS9yYXctZmlsZS90aXAvc3BlZWNoYXBpLmh0bWxcIixcInN0YXR1c1wiOlwidW5vZmZcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL3VwZGF0ZXMuaHRtbDVyb2Nrcy5jb20vMjAxMy8wMS9Wb2ljZS1Ecml2ZW4tV2ViLUFwcHMtSW50cm9kdWN0aW9uLXRvLXRoZS1XZWItU3BlZWNoLUFQSVwiLFwidGl0bGVcIjpcIkhUTUw1Um9ja3MgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuc2l0ZXBvaW50LmNvbS9pbnRyb2R1Y2luZy13ZWItc3BlZWNoLWFwaS9cIixcInRpdGxlXCI6XCJTaXRlUG9pbnQgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9hdXJlbGlvLmF1ZGVyby5pdC9kZW1vL3dlYi1zcGVlY2gtYXBpLWRlbW8uaHRtbFwiLFwidGl0bGVcIjpcIkRlbW9cIn0se1widXJsXCI6XCJodHRwOi8vemVub3JvY2hhLmdpdGh1Yi5pby92b2ljZS1lbGVtZW50cy9cIixcInRpdGxlXCI6XCJBZHZhbmNlZCBkZW1vIGFuZCByZXNvdXJjZVwifV0sXCJjYXRlZ29yaWVzXCI6W1wiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuXCIsXCIzMVwiOlwiblwiLFwiMzJcIjpcIm5cIixcIjMzXCI6XCJuXCIsXCIzNFwiOlwiblwiLFwiMzVcIjpcIm5cIixcIjM2XCI6XCJuXCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcImEgeFwiLFwiMjZcIjpcImEgeFwiLFwiMjdcIjpcImEgeFwiLFwiMjhcIjpcImEgeFwiLFwiMjlcIjpcImEgeFwiLFwiMzBcIjpcImEgeFwiLFwiMzFcIjpcImEgeFwiLFwiMzJcIjpcImEgeFwiLFwiMzNcIjpcImEgeFwiLFwiMzRcIjpcImEgeFwiLFwiMzVcIjpcImEgeFwiLFwiMzZcIjpcImEgeFwiLFwiMzdcIjpcImEgeFwiLFwiMzhcIjpcImEgeFwiLFwiMzlcIjpcImEgeFwiLFwiNDBcIjpcImEgeFwiLFwiNDFcIjpcImEgeFwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiYSB4XCIsXCI3XCI6XCJhIHhcIixcIjcuMVwiOlwiYVwiLFwiOFwiOlwiYVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJhIHhcIixcIjhcIjpcImEgeFwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwiblwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwiblwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwiYSB4XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcIm5cIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IGluIENocm9tZSByZWZlcnMgdG8gc29tZSBhdHRyaWJ1dGVzIG1pc3NpbmcuIFBhcnRpYWwgc3VwcG9ydCBpbiBTYWZhcmkgcmVmZXJzIHRvIG9ubHkgU3BlZWNoIFN5bnRoZXNpcyBzdXBwb3J0ZWQuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjAsXCJ1c2FnZV9wZXJjX2FcIjo0OS43NCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcInNwZWVjaCxyZWNvZ25pdGlvbixBU1JcIixcImllX2lkXCI6XCJ3ZWJzcGVlY2hhcGlpbnB1dFwiLFwiY2hyb21lX2lkXCI6XCI1OTA4Nzc1NDg3NjY4MjI0XCJ9LFwiaGlnaC1yZXNvbHV0aW9uLXRpbWVcIjp7XCJ0aXRsZVwiOlwiSGlnaCBSZXNvbHV0aW9uIFRpbWUgQVBJXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIHRvIHByb3ZpZGUgdGhlIGN1cnJlbnQgdGltZSBpbiBzdWItbWlsbGlzZWNvbmQgcmVzb2x1dGlvbiBhbmQgc3VjaCB0aGF0IGl0IGlzIG5vdCBzdWJqZWN0IHRvIHN5c3RlbSBjbG9jayBza2V3IG9yIGFkanVzdG1lbnRzLiBDYWxsZWQgdXNpbmcgYHBlcmZvcm1hbmNlLm5vdygpYFwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvaHItdGltZS9cIixcInN0YXR1c1wiOlwicmVjXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9QZXJmb3JtYW5jZS5ub3coKVwiLFwidGl0bGVcIjpcIk1ETiBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL3VwZGF0ZXMuaHRtbDVyb2Nrcy5jb20vMjAxMi8wOC9XaGVuLW1pbGxpc2Vjb25kcy1hcmUtbm90LWVub3VnaC1wZXJmb3JtYW5jZS1ub3dcIixcInRpdGxlXCI6XCJIVE1MNVJvY2tzIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LnNpdGVwb2ludC5jb20vZGlzY292ZXJpbmctdGhlLWhpZ2gtcmVzb2x1dGlvbi10aW1lLWFwaS9cIixcInRpdGxlXCI6XCJTaXRlUG9pbnQgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9hdXJlbGlvLmF1ZGVyby5pdC9kZW1vL2hpZ2gtcmVzb2x1dGlvbi10aW1lLWFwaS1kZW1vLmh0bWxcIixcInRpdGxlXCI6XCJEZW1vXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJKUyBBUElcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NzAuNTgsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwicGVyZm9ybWFuY2Usbm93LHRlc3RpbmdcIixcImllX2lkXCI6XCJoaWdocmVzb2x1dGlvbnRpbWVcIixcImNocm9tZV9pZFwiOlwiNTM0OTEyNDA2OTEzMDI0MFwifSxcImJhdHRlcnktc3RhdHVzXCI6e1widGl0bGVcIjpcIkJhdHRlcnkgU3RhdHVzIEFQSVwiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBiYXR0ZXJ5IHN0YXR1cyBvZiB0aGUgaG9zdGluZyBkZXZpY2UuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9iYXR0ZXJ5LXN0YXR1cy9cIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWJBUEkvQmF0dGVyeV9TdGF0dXNcIixcInRpdGxlXCI6XCJNRE4gRG9jc1wifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuc21hcnRqYXZhLm9yZy9leGFtcGxlcy93ZWJhcGktYmF0dGVyeS9cIixcInRpdGxlXCI6XCJTaW1wbGUgZGVtb1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiYSB4ICMxXCIsXCIxMVwiOlwiYSB4ICMxXCIsXCIxMlwiOlwiYSB4ICMxXCIsXCIxM1wiOlwiYSB4ICMxXCIsXCIxNFwiOlwiYSB4ICMxXCIsXCIxNVwiOlwiYSB4ICMxXCIsXCIxNlwiOlwiYSAjMVwiLFwiMTdcIjpcImEgIzFcIixcIjE4XCI6XCJhICMxXCIsXCIxOVwiOlwiYSAjMVwiLFwiMjBcIjpcImEgIzFcIixcIjIxXCI6XCJhICMxXCIsXCIyMlwiOlwiYSAjMVwiLFwiMjNcIjpcImEgIzFcIixcIjI0XCI6XCJhICMxXCIsXCIyNVwiOlwiYSAjMVwiLFwiMjZcIjpcImEgIzFcIixcIjI3XCI6XCJhICMxXCIsXCIyOFwiOlwiYSAjMVwiLFwiMjlcIjpcImEgIzFcIixcIjMwXCI6XCJhICMxXCIsXCIzMVwiOlwiYSAjMVwiLFwiMzJcIjpcImEgIzFcIixcIjMzXCI6XCJhICMxXCIsXCIzNFwiOlwiYSAjMVwiLFwiMzVcIjpcImEgIzFcIixcIjM2XCI6XCJhICMxXCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcIm5cIixcIjM1XCI6XCJuXCIsXCIzNlwiOlwiblwiLFwiMzdcIjpcIm4gZFwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcIm5cIixcIjcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJuXCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcImEgIzFcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiYSAjMVwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7XCIxXCI6XCJQYXJ0aWFsIHN1cHBvcnQgcmVmZXJzIHRvIHN1cHBvcnQgZm9yIHRoZSBvbGRlciBzcGVjaWZpY2F0aW9uJ3MgYG5hdmlnYXRvci5iYXR0ZXJ5YCByYXRoZXIgdGhhbiBgbmF2aWdhdG9yLmdldEJhdHRlcnkoKWAgdG8gYWNjZXNzIHRoZSBgQmF0dGVyeU1hbmFnZXJgLlwifSxcInVzYWdlX3BlcmNfeVwiOjguMDEsXCJ1c2FnZV9wZXJjX2FcIjoxNi4wOSxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIm5hdmlnYXRvci5iYXR0ZXJ5LG5hdmlnYXRvci5nZXRiYXR0ZXJ5LGJhdHRlcnltYW5hZ2VyXCIsXCJpZV9pZFwiOlwiYmF0dGVyeXN0YXR1c2FwaVwiLFwiY2hyb21lX2lkXCI6XCI0NTM3MTM0NzMyMDE3NjY0XCJ9LFwidGV4dC1kZWNvcmF0aW9uXCI6e1widGl0bGVcIjpcInRleHQtZGVjb3JhdGlvbiBzdHlsaW5nXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGRlZmluaW5nIHRoZSB0eXBlLCBzdHlsZSBhbmQgY29sb3Igb2YgbGluZXMgaW4gdGhlIHRleHQtZGVjb3JhdGlvbiBwcm9wZXJ0eS5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2Nzcy10ZXh0LWRlY29yLTMvI2xpbmUtZGVjb3JhdGlvblwiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdGV4dC1kZWNvcmF0aW9uLXN0eWxlXCIsXCJ0aXRsZVwiOlwiTUROIERvY3VtZW50YXRpb24gZm9yIHRleHQtZGVjb3JhdGlvbi1zdHlsZVwifSx7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWRlY29yYXRpb24tY29sb3JcIixcInRpdGxlXCI6XCJNRE4gRG9jdW1lbnRhdGlvbiBmb3IgdGV4dC1kZWNvcmF0aW9uLWNvbG9yXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtZGVjb3JhdGlvbi1saW5lXCIsXCJ0aXRsZVwiOlwiTUROIERvY3VtZW50YXRpb24gZm9yIHRleHQtZGVjb3JhdGlvbi1saW5lXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1MzXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiOFwiOlwieSB4XCIsXCI5XCI6XCJ5IHhcIixcIjEwXCI6XCJ5IHhcIixcIjExXCI6XCJ5IHhcIixcIjEyXCI6XCJ5IHhcIixcIjEzXCI6XCJ5IHhcIixcIjE0XCI6XCJ5IHhcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIixcIjI3XCI6XCJ5IHhcIixcIjI4XCI6XCJ5IHhcIixcIjI5XCI6XCJ5IHhcIixcIjMwXCI6XCJ5IHhcIixcIjMxXCI6XCJ5IHhcIixcIjMyXCI6XCJ5IHhcIixcIjMzXCI6XCJ5IHhcIixcIjM0XCI6XCJ5IHhcIixcIjM1XCI6XCJ5IHhcIixcIjM2XCI6XCJ5IHhcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm4geCBkICMxXCIsXCIyN1wiOlwibiB4IGQgIzFcIixcIjI4XCI6XCJuIHggZCAjMVwiLFwiMjlcIjpcIm4geCBkICMxXCIsXCIzMFwiOlwibiB4IGQgIzFcIixcIjMxXCI6XCJuIHggZCAjMVwiLFwiMzJcIjpcIm4geCBkICMxXCIsXCIzM1wiOlwibiB4IGQgIzFcIixcIjM0XCI6XCJuIHggZCAjMVwiLFwiMzVcIjpcIm4geCBkICMxXCIsXCIzNlwiOlwibiB4IGQgIzFcIixcIjM3XCI6XCJuIHggZCAjMVwiLFwiMzhcIjpcIm4geCBkICMxXCIsXCIzOVwiOlwibiB4IGQgIzFcIixcIjQwXCI6XCJuIHggZCAjMVwiLFwiNDFcIjpcIm4geCBkICMxXCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI3LjFcIjpcImEgeCAjMlwiLFwiOFwiOlwiYSB4ICMyXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcImEgeCAjMlwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwiblwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwiblwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwiblwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5IHhcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7XCIxXCI6XCJFbmFibGVkIGluIENocm9tZSB0aHJvdWdoIHRoZSBcXFwiZXhwZXJpbWVudGFsIFdlYiBQbGF0Zm9ybSBmZWF0dXJlc1xcXCIgZmxhZyBpbiBjaHJvbWU6Ly9mbGFnc1wiLFwiMlwiOlwiUGFydGlhbCBzdXBwb3J0IGluIFNhZmFyaSByZWZlcnMgdG8gbm90IHN1cHBvcnRpbmcgdGhlIHRleHQtZGVjb3JhdGlvbi1zdHlsZSBwcm9wZXJ0eS5cIn0sXCJ1c2FnZV9wZXJjX3lcIjoxMy4wOCxcInVzYWdlX3BlcmNfYVwiOjEuODEsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJ0ZXh0LWRlY29yYXRpb24tbGluZSx0ZXh0LWRlY29yYXRpb24tc3R5bGUsdGV4dC1kZWNvcmF0aW9uLWNvbG9yXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcInNwZWVjaC1zeW50aGVzaXNcIjp7XCJ0aXRsZVwiOlwiU3BlZWNoIFN5bnRoZXNpcyBBUElcIixcImRlc2NyaXB0aW9uXCI6XCJBIHdlYiBBUEkgZm9yIGNvbnRyb2xsaW5nIGEgdGV4dC10by1zcGVlY2ggb3V0cHV0LlwiLFwic3BlY1wiOlwiaHR0cHM6Ly9kdmNzLnczLm9yZy9oZy9zcGVlY2gtYXBpL3Jhdy1maWxlL3RpcC9zcGVlY2hhcGkuaHRtbCN0dHMtc2VjdGlvblwiLFwic3RhdHVzXCI6XCJ1bm9mZlwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vdXBkYXRlcy5odG1sNXJvY2tzLmNvbS8yMDE0LzAxL1dlYi1hcHBzLXRoYXQtdGFsay0tLUludHJvZHVjdGlvbi10by10aGUtU3BlZWNoLVN5bnRoZXNpcy1BUElcIixcInRpdGxlXCI6XCJIVE1MNVJvY2tzIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LnNpdGVwb2ludC5jb20vdGFsa2luZy13ZWItcGFnZXMtYW5kLXRoZS1zcGVlY2gtc3ludGhlc2lzLWFwaS9cIixcInRpdGxlXCI6XCJTaXRlUG9pbnQgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9hdXJlbGlvLmF1ZGVyby5pdC9kZW1vL3NwZWVjaC1zeW50aGVzaXMtYXBpLWRlbW8uaHRtbFwiLFwidGl0bGVcIjpcIkRlbW9cIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcIm5cIixcIjM1XCI6XCJuXCIsXCIzNlwiOlwiblwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcIm5cIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcIm5cIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiblwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NDcuMjcsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwid2ViLXNwZWVjaFwiLFwia2V5d29yZHNcIjpcInNwZWVjaCxzeW50aGVzaXMsc3BlZWNoU3ludGhlc2lzLFRUUyxTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UsXCIsXCJpZV9pZFwiOlwid2Vic3BlZWNoYXBpc3ludGhlc2lzXCIsXCJjaHJvbWVfaWRcIjpcIjQ3ODI4NzU1ODA4MjU2MDBcIn0sXCJ1c2VyLXRpbWluZ1wiOntcInRpdGxlXCI6XCJVc2VyIFRpbWluZyBBUElcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2QgdG8gaGVscCB3ZWIgZGV2ZWxvcGVycyBtZWFzdXJlIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGVpciBhcHBsaWNhdGlvbnMgYnkgZ2l2aW5nIHRoZW0gYWNjZXNzIHRvIGhpZ2ggcHJlY2lzaW9uIHRpbWVzdGFtcHMuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi91c2VyLXRpbWluZy9cIixcInN0YXR1c1wiOlwicmVjXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly93d3cuc2l0ZXBvaW50LmNvbS9kaXNjb3ZlcmluZy11c2VyLXRpbWluZy1hcGkvXCIsXCJ0aXRsZVwiOlwiU2l0ZVBvaW50IGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy93ZWJwZXJmb3JtYW5jZS91c2VydGltaW5nL1wiLFwidGl0bGVcIjpcIkhUTUw1Um9ja3MgYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BtZWVuYW4vNTkwMjY3MlwiLFwidGl0bGVcIjpcIlBvbHlmaWxsXCJ9LHtcInVybFwiOlwiaHR0cDovL2F1cmVsaW8uYXVkZXJvLml0L2RlbW8vdXNlci10aW1pbmctYXBpLWRlbW8uaHRtbFwiLFwidGl0bGVcIjpcIkRlbW9cIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcIm5cIixcIjM1XCI6XCJuXCIsXCIzNlwiOlwiblwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiblwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NTIuNTIsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwicGVyZm9ybWFuY2UsdGVzdGluZyxtYXJrLG1lYXN1cmVcIixcImllX2lkXCI6XCJ1c2VydGltaW5nYXBpXCIsXCJjaHJvbWVfaWRcIjpcIjUwNjY1NDk1ODA3OTE4MDhcIn0sXCJzcmNzZXRcIjp7XCJ0aXRsZVwiOlwiU3Jjc2V0IGF0dHJpYnV0ZVwiLFwiZGVzY3JpcHRpb25cIjpcIkFsbG93cyBhdXRob3JzIHRvIHNwZWNpZnkgYWx0ZXJuYXRlIGhpZ2gtcmVzb2x1dGlvbiBzb3VyY2VzIG9uIGBpbWdgIGVsZW1lbnRzXCIsXCJzcGVjXCI6XCJodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9lbWJlZGRlZC1jb250ZW50Lmh0bWwjYXR0ci1pbWctc3Jjc2V0XCIsXCJzdGF0dXNcIjpcIm90aGVyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vd3d3LndlYmtpdC5vcmcvYmxvZy8yOTEwL2ltcHJvdmVkLXN1cHBvcnQtZm9yLWhpZ2gtcmVzb2x1dGlvbi1kaXNwbGF5cy13aXRoLXRoZS1zcmNzZXQtaW1hZ2UtYXR0cmlidXRlL1wiLFwidGl0bGVcIjpcIkltcHJvdmVkIHN1cHBvcnQgZm9yIGhpZ2gtcmVzb2x1dGlvbiBkaXNwbGF5cyB3aXRoIHRoZSBzcmNzZXQgaW1hZ2UgYXR0cmlidXRlXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJIVE1MNVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuIGQgIzFcIixcIjMzXCI6XCJuIGQgIzFcIixcIjM0XCI6XCJuIGQgIzFcIixcIjM1XCI6XCJuIGQgIzFcIixcIjM2XCI6XCJuIGQgIzFcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuXCIsXCIzMVwiOlwiblwiLFwiMzJcIjpcIm5cIixcIjMzXCI6XCJuXCIsXCIzNFwiOlwiYSAjMlwiLFwiMzVcIjpcImEgIzJcIixcIjM2XCI6XCJhICMyXCIsXCIzN1wiOlwiYSAjMlwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcIm5cIixcIjcuMVwiOlwiYSAjMlwiLFwiOFwiOlwiYSAjMlwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJhICMyXCIsXCIyMlwiOlwiYSAjMlwiLFwiMjNcIjpcImEgIzJcIixcIjI0XCI6XCJhICMyXCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJhICMyXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJhICMyXCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcIm5cIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7XCIxXCI6XCJDYW4gYmUgZW5hYmxlZCBpbiBGaXJlZm94IGJ5IHNldHRpbmcgdGhlIGFib3V0OmNvbmZpZyBwcmVmZXJlbmNlIGRvbS5pbWFnZS5zcmNzZXQuZW5hYmxlZCB0byB0cnVlXCIsXCIyXCI6XCJTdXBwb3J0cyB0aGUgc3Vic2V0IG9mIHRoZSBzeW50YXggZm9yIHJlc29sdXRpb24gc3dpdGNoaW5nICh1c2luZyB0aGUgYHhgIGRlc2NyaXB0b3IpLCBidXQgbm90IHRoZSBmdWxsIHN5bnRheCB0aGF0IGNhbiBiZSB1c2VkIHdpdGggYHNpemVzYCAodXNpbmcgdGhlIGB3YCBkZXNjcmlwdG9yKS5cIn0sXCJ1c2FnZV9wZXJjX3lcIjo4LjAyLFwidXNhZ2VfcGVyY19hXCI6MzEuOCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcImltZ3NyY3NldFwiLFwiY2hyb21lX2lkXCI6XCI0NjQ0MzM3MTE1NzI1ODI0XCJ9LFwiYW1iaWVudC1saWdodFwiOntcInRpdGxlXCI6XCJBbWJpZW50IExpZ2h0IEFQSVwiLFwiZGVzY3JpcHRpb25cIjpcIkRlZmluZXMgZXZlbnRzIHRoYXQgcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgYW1iaWVudCBsaWdodCBsZXZlbCwgYXMgbWVhc3VyZWQgYnkgYSBkZXZpY2UncyBsaWdodCBzZW5zb3IuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9hbWJpZW50LWxpZ2h0L1wiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vYXVyZWxpby5hdWRlcm8uaXQvZGVtby9hbWJpZW50LWxpZ2h0LWFwaS1kZW1vLmh0bWxcIixcInRpdGxlXCI6XCJEZW1vXCJ9LHtcInVybFwiOlwiaHR0cDovL21vZGVybndlYi5jb20vMjAxNC8wNS8yNy9pbnRyb2R1Y3Rpb24tdG8tdGhlLWFtYmllbnQtbGlnaHQtYXBpL1wiLFwidGl0bGVcIjpcIkFydGljbGVcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJuXCIsXCIzNVwiOlwiblwiLFwiMzZcIjpcIm5cIixcIjM3XCI6XCJuXCIsXCIzOFwiOlwiblwiLFwiMzlcIjpcIm5cIixcIjQwXCI6XCJuXCIsXCI0MVwiOlwiblwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcIm5cIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcIm5cIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcIm5cIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJGaXJlZm94IGRlc2t0b3Agc3VwcG9ydHMgdGhpcyBBUEkgb25seSBvbiBNYWMgT1MgWC4gW1N1cHBvcnQgZm9yIFdpbmRvd3MgNyBpcyBpbiBwcm9ncmVzc10oaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzU0MTk5KVwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjoxMi4yOCxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJhbWJpZW50bGlnaHRldmVudHNcIixcImNocm9tZV9pZFwiOlwiNTI5ODM1NzAxODgyMDYwOFwifSxcIndpbGwtY2hhbmdlXCI6e1widGl0bGVcIjpcIkNTUyB3aWxsLWNoYW5nZSBwcm9wZXJ0eVwiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBvcHRpbWl6aW5nIGFuaW1hdGlvbnMgYnkgaW5mb3JtaW5nIHRoZSBicm93c2VyIHdoaWNoIGVsZW1lbnRzIHdpbGwgY2hhbmdlIGFuZCB3aGF0IHByb3BlcnRpZXMgd2lsbCBjaGFuZ2UuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3Mtd2lsbC1jaGFuZ2UtMS9cIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXYub3BlcmEuY29tL2FydGljbGVzL2Nzcy13aWxsLWNoYW5nZS1wcm9wZXJ0eS9cIixcInRpdGxlXCI6XCJEZXRhaWxlZCBhcnRpY2xlXCJ9LHtcInVybFwiOlwiaHR0cDovL2Flcm90d2lzdC5jb20vYmxvZy9ieWUtYnllLWxheWVyLWhhY2tzL1wiLFwidGl0bGVcIjpcIkJsb2cgcG9zdFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm4gZCAjMVwiLFwiMzBcIjpcIm4gZCAjMVwiLFwiMzFcIjpcIm4gZCAjMVwiLFwiMzJcIjpcIm4gZCAjMVwiLFwiMzNcIjpcIm4gZCAjMVwiLFwiMzRcIjpcIm4gZCAjMVwiLFwiMzVcIjpcIm4gZCAjMVwiLFwiMzZcIjpcIm4gZCAjMVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJuXCIsXCIzNVwiOlwiblwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJ1XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcInVcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiblwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOntcIjFcIjpcIlN1cHBvcnRlZCBpbiBGaXJlZm94IGJlaGluZCB0aGUgYGxheW91dC5jc3Mud2lsbC1jaGFuZ2UuZW5hYmxlZGAgZmxhZ1wifSxcInVzYWdlX3BlcmNfeVwiOjM2LjE3LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcInNjcm9sbC1wb3NpdGlvblwiLFwiaWVfaWRcIjpcImNzc3dpbGxjaGFuZ2VcIixcImNocm9tZV9pZFwiOlwiNTk1NDE5OTMzMDIyNjE3NlwifSxcImNzcy1zaGFwZXNcIjp7XCJ0aXRsZVwiOlwiQ1NTIFNoYXBlcyBMZXZlbCAxXCIsXCJkZXNjcmlwdGlvblwiOlwiQWxsb3dzIGdlb21ldHJpYyBzaGFwZXMgdG8gYmUgc2V0IGluIENTUyB0byBkZWZpbmUgYW4gYXJlYSBmb3IgdGV4dCB0byBmbG93IGFyb3VuZC5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2Nzcy1zaGFwZXMvXCIsXCJzdGF0dXNcIjpcImNyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9odG1sLmFkb2JlLmNvbS93ZWJwbGF0Zm9ybS9sYXlvdXQvc2hhcGVzL1wiLFwidGl0bGVcIjpcIkFkb2JlIGRlbW9zIGFuZCBzYW1wbGVzXCJ9LHtcInVybFwiOlwiaHR0cDovL2h0bWwuYWRvYmUuY29tL3dlYnBsYXRmb3JtL2xheW91dC9zaGFwZXMvYnJvd3Nlci1zdXBwb3J0L1wiLFwidGl0bGVcIjpcIkNTUyBzaGFwZXMgc3VwcG9ydCB0ZXN0IGJ5IEFkb2JlXCJ9LHtcInVybFwiOlwiaHR0cDovL2FsaXN0YXBhcnQuY29tL2FydGljbGUvY3NzLXNoYXBlcy0xMDFcIixcInRpdGxlXCI6XCJBIExpc3QgQXBhcnQgYXJ0aWNsZVwifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTM1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcIm5cIixcIjM1XCI6XCJuXCIsXCIzNlwiOlwiblwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJuIGQgIzFcIixcIjM1XCI6XCJuIGQgIzFcIixcIjM2XCI6XCJuIGQgIzFcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJ5IHhcIixcIjhcIjpcInkgeFwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJ5IHhcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcIm5cIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiblwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOntcIjFcIjpcIkVuYWJsZWQgaW4gQ2hyb21lIHRocm91Z2ggdGhlIFxcXCJleHBlcmltZW50YWwgV2ViIFBsYXRmb3JtIGZlYXR1cmVzXFxcIiBmbGFnIGluIGNocm9tZTovL2ZsYWdzXCJ9LFwidXNhZ2VfcGVyY195XCI6MzMuNTgsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiY2lyY2xlLGVsbGlwc2UscG9seWdvbixpbnNldCxzaGFwZS1vdXRzaWRlLHNoYXBlLWluc2lkZVwiLFwiaWVfaWRcIjpcInNoYXBlc1wiLFwiY2hyb21lX2lkXCI6XCI1MTYzODkwNzE5NTg4MzUyXCJ9LFwiZG9tY29udGVudGxvYWRlZFwiOntcInRpdGxlXCI6XCJET01Db250ZW50TG9hZGVkXCIsXCJkZXNjcmlwdGlvblwiOlwiSmF2YVNjcmlwdCBldmVudCB0aGF0IGZpcmVzIHdoZW4gdGhlIERPTSBpcyBsb2FkZWQsIGJ1dCBiZWZvcmUgYWxsIHBhZ2UgYXNzZXRzIGFyZSBsb2FkZWQgKENTUywgaW1hZ2VzLCBldGMuKS5cIixcInNwZWNcIjpcImh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3N0b3AtcGFyc2luZ1wiLFwic3RhdHVzXCI6XCJvdGhlclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9SZWZlcmVuY2UvRXZlbnRzL0RPTUNvbnRlbnRMb2FkZWRcIixcInRpdGxlXCI6XCJNRE46IERPTUNvbnRlbnRMb2FkZWRcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkRPTVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJ5XCIsXCIzXCI6XCJ5XCIsXCIzLjVcIjpcInlcIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwieVwiLFwiMy4yXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJ5XCIsXCI5LjUtOS42XCI6XCJ5XCIsXCIxMC4wLTEwLjFcIjpcInlcIixcIjEwLjVcIjpcInlcIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInlcIixcIjQuMC00LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjUuMC01LjFcIjpcInlcIixcIjYuMC02LjFcIjpcInlcIixcIjcuMC03LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwieVwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInlcIixcIjIuMlwiOlwieVwiLFwiMi4zXCI6XCJ5XCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ5XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6OTIuMDgsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiZG9tLGRvbXJlYWR5LG9ubG9hZCxjb250ZW50bG9hZGVkLGRvY3VtZW50XCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcInByb3hpbWl0eVwiOntcInRpdGxlXCI6XCJQcm94aW1pdHkgQVBJXCIsXCJkZXNjcmlwdGlvblwiOlwiRGVmaW5lcyBldmVudHMgdGhhdCBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkaXN0YW5jZSBiZXR3ZWVuIGEgZGV2aWNlIGFuZCBhbiBvYmplY3QsIGFzIG1lYXN1cmVkIGJ5IGEgcHJveGltaXR5IHNlbnNvci5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL3Byb3hpbWl0eS9cIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2F1cmVsaW8uYXVkZXJvLml0L2RlbW8vcHJveGltaXR5LWFwaS1kZW1vLmh0bWxcIixcInRpdGxlXCI6XCJEZW1vXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy5zaXRlcG9pbnQuY29tL2ludHJvZHVjaW5nLXByb3hpbWl0eS1hcGkvXCIsXCJ0aXRsZVwiOlwiU2l0ZVBvaW50IGFydGljbGVcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJuXCIsXCIzNVwiOlwiblwiLFwiMzZcIjpcIm5cIixcIjM3XCI6XCJuXCIsXCIzOFwiOlwiblwiLFwiMzlcIjpcIm5cIixcIjQwXCI6XCJuXCIsXCI0MVwiOlwiblwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcIm5cIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcIm5cIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcIm5cIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6MTIuNzQsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImtlcm5pbmctcGFpcnMtbGlnYXR1cmVzXCI6e1widGl0bGVcIjpcIkltcHJvdmVkIGtlcm5pbmcgcGFpcnMgJiBsaWdhdHVyZXNcIixcImRlc2NyaXB0aW9uXCI6XCJDdXJyZW50bHkgbm9uLXN0YW5kYXJkIG1ldGhvZCBvZiBpbXByb3Zpbmcga2VybmluZyBwYWlycyAmIGxpZ2F0dXJlcyB1c2luZyB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5LlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHMTEvcGFpbnRpbmcuaHRtbCNUZXh0UmVuZGVyaW5nUHJvcGVydHlcIixcInN0YXR1c1wiOlwidW5vZmZcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtcmVuZGVyaW5nXCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vY3NzLXRyaWNrcy5jb20vYWxtYW5hYy9wcm9wZXJ0aWVzL3QvdGV4dC1yZW5kZXJpbmcvXCIsXCJ0aXRsZVwiOlwiQ1NTIFRyaWNrcyBhcnRpY2xlXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1NcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwieVwiLFwiMy41XCI6XCJ5XCIsXCIzLjZcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwieVwiLFwiNS4xXCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI2LjFcIjpcInlcIixcIjdcIjpcInlcIixcIjcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJ1XCIsXCI0LjAtNC4xXCI6XCJ1XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI1LjAtNS4xXCI6XCJ5XCIsXCI2LjAtNi4xXCI6XCJ5XCIsXCI3LjAtNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwieVwiLFwiNFwiOlwieVwiLFwiNC4xXCI6XCJ5XCIsXCI0LjItNC4zXCI6XCJ5XCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwieVwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwieVwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjc1LjAyLFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIm9wdGltaXplTGVnaWJpbGl0eSxvcHRpbWl6ZVNwZWVkLGdlb21ldHJpY1ByZWNpc2lvblwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJpZnJhbWUtc2VhbWxlc3NcIjp7XCJ0aXRsZVwiOlwic2VhbWxlc3MgYXR0cmlidXRlIGZvciBpZnJhbWVzXCIsXCJkZXNjcmlwdGlvblwiOlwiVGhlIHNlYW1sZXNzIGF0dHJpYnV0ZSBtYWtlcyBhbiBpZnJhbWUncyBjb250ZW50cyBhY3R1YWxseSBwYXJ0IG9mIGEgcGFnZSwgYW5kIGFkb3B0cyB0aGUgc3R5bGVzIGZyb20gaXRzIGhvc3RpbmcgcGFnZS4gXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9odG1sL3dnL2RyYWZ0cy9odG1sL21hc3Rlci9zaW5nbGUtcGFnZS5odG1sI2F0dHItaWZyYW1lLXNlYW1sZXNzXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9vcm5qL3NlYW1sZXNzLXBvbHlmaWxsXCIsXCJ0aXRsZVwiOlwiRXhwZXJpbWVudGFsIHBvbHlmaWxsXCJ9LHtcInVybFwiOlwiaHR0cDovL2xhYnMuZnQuY29tLzIwMTMvMDEvc2VhbWxlc3MtaWZyYW1lcy1ub3QtcXVpdGUtc2VhbWxlc3MvXCIsXCJ0aXRsZVwiOlwiQXJ0aWNsZVwifV0sXCJjYXRlZ29yaWVzXCI6W1wiSFRNTDVcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJ1XCIsXCIzNVwiOlwidVwiLFwiMzZcIjpcInVcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm4gZFwiLFwiMjFcIjpcIm4gZFwiLFwiMjJcIjpcIm4gZFwiLFwiMjNcIjpcIm4gZFwiLFwiMjRcIjpcIm4gZFwiLFwiMjVcIjpcIm4gZFwiLFwiMjZcIjpcIm4gZFwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJuXCIsXCIzNVwiOlwiblwiLFwiMzZcIjpcIm5cIixcIjM3XCI6XCJuXCIsXCIzOFwiOlwiblwiLFwiMzlcIjpcInVcIixcIjQwXCI6XCJ1XCIsXCI0MVwiOlwidVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJ1XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJ1XCIsXCIyNlwiOlwidVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcInVcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcIm5cIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcIm5cIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiblwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5XCJ9fSxcIm5vdGVzXCI6XCJDaHJvbWUgMjAtMjYgaGFkIHBhcnRpYWwgc3VwcG9ydCBiZWhpbmQgYSBmbGFnLCB0aG91Z2ggdGhpcyB3YXMgW2xhdGVyIHJlbW92ZWRdKGh0dHA6Ly9jcmJ1Zy5jb20vMjI5NDIxKS4gXFxyXFxuXFxyXFxuU2FmYXJpIDcgKCYgaU9TIDcgU2FmYXJpKSBoaWRlcyB0aGUgYm9yZGVyIG9mIHNlYW1sZXNzIGlmcmFtZXMgYW5kIHJlY29nbml6ZXMgdGhlICdzZWFtbGVzcycgRE9NIHByb3BlcnR5LCBidXQgZG9lcyBub3QgcHJvdmlkZSBhY3R1YWwgc3VwcG9ydC5cIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6My4xMSxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJpZnJhbWVzZWFtbGVzc2F0dHJpYnV0ZVwiLFwiY2hyb21lX2lkXCI6XCI2NjMwMzI5OTkzMzk2MjI0XCJ9LFwiY3NzLWltYWdlLW9yaWVudGF0aW9uXCI6e1widGl0bGVcIjpcIkNTUzMgaW1hZ2Utb3JpZW50YXRpb25cIixcImRlc2NyaXB0aW9uXCI6XCJDU1MgcHJvcGVydHkgdXNlZCBnZW5lcmFsbHkgdG8gZml4IHRoZSBpbnRlbmRlZCBvcmllbnRhdGlvbiBvZiBhbiBpbWFnZS4gVGhpcyBjYW4gYmUgZG9uZSB1c2luZyA5MCBkZWdyZWUgaW5jcmVtZW50cyBvciBiYXNlZCBvbiB0aGUgaW1hZ2UncyBFWElGIGRhdGEgdXNpbmcgdGhlIFxcXCJmcm9tLWltYWdlXFxcIiB2YWx1ZS5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtaW1hZ2VzLyNpbWFnZS1vcmllbnRhdGlvblwiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvaW1hZ2Utb3JpZW50YXRpb25cIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly9zZXRoZm93bGVyLm9yZy9ibG9nLzIwMTMvMDkvMTMvbmV3LWluLWZpcmVmb3gtMjYtY3NzLWltYWdlLW9yaWVudGF0aW9uL1wiLFwidGl0bGVcIjpcIkJsb2cgcG9zdFwifSx7XCJ1cmxcIjpcImh0dHA6Ly9qc2Jpbi5jb20vRVhVVG9sby80XCIsXCJ0aXRsZVwiOlwiRGVtbyAoQ2hpbmVzZSlcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuXCIsXCIzMVwiOlwiblwiLFwiMzJcIjpcIm5cIixcIjMzXCI6XCJuXCIsXCIzNFwiOlwiblwiLFwiMzVcIjpcIm5cIixcIjM2XCI6XCJuXCIsXCIzN1wiOlwiblwiLFwiMzhcIjpcIm5cIixcIjM5XCI6XCJuXCIsXCI0MFwiOlwiblwiLFwiNDFcIjpcIm5cIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcIm5cIixcIjcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJhXCIsXCI0LjAtNC4xXCI6XCJhXCIsXCI0LjItNC4zXCI6XCJhXCIsXCI1LjAtNS4xXCI6XCJhXCIsXCI2LjAtNi4xXCI6XCJhXCIsXCI3LjAtNy4xXCI6XCJhXCIsXCI4XCI6XCJhXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJuXCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJuXCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IGluIGlPUyByZWZlcnMgdG8gdGhlIGJyb3dzZXIgdXNpbmcgRVhJRiBkYXRhIGJ5IGRlZmF1bHQsIHRob3VnaCBpdCBkb2VzIG5vdCBhY3R1YWxseSBzdXBwb3J0IHRoZSBwcm9wZXJ0eS4gT3BlbmluZyB0aGUgaW1hZ2UgaW4gYSBuZXcgdGFiIGluIENocm9tZSByZXN1bHRzIGluIHRoZSBpbWFnZSBzaG93biBpbiB0aGUgb3JpZW50YXRpb24gYWNjb3JkaW5nIHRvIHRoZSBFWElGIGRhdGEuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjExLjg5LFwidXNhZ2VfcGVyY19hXCI6Ny40OSxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImltYWdlLW9yaWVudGF0aW9uLGZyb20taW1hZ2UsZmxpcFwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJwaWN0dXJlXCI6e1widGl0bGVcIjpcIlBpY3R1cmUgZWxlbWVudFwiLFwiZGVzY3JpcHRpb25cIjpcIkEgcmVzcG9uc2l2ZSBpbWFnZXMgbWV0aG9kIHRvIGNvbnRyb2wgd2hpY2ggaW1hZ2UgcmVzb3VyY2UgYSB1c2VyIGFnZW50IHByZXNlbnRzIHRvIGEgdXNlciwgYmFzZWQgb24gcmVzb2x1dGlvbiwgbWVkaWEgcXVlcnkgYW5kL29yIHN1cHBvcnQgZm9yIGEgcGFydGljdWxhciBpbWFnZSBmb3JtYXRcIixcInNwZWNcIjpcImh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCN0aGUtcGljdHVyZS1lbGVtZW50XCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly9yZXNwb25zaXZlaW1hZ2VzLm9yZy9kZW1vcy9cIixcInRpdGxlXCI6XCJEZW1vXCJ9LHtcInVybFwiOlwiaHR0cDovL2NvZGUudHV0c3BsdXMuY29tL3R1dG9yaWFscy9iZXR0ZXItcmVzcG9uc2l2ZS1pbWFnZXMtd2l0aC10aGUtcGljdHVyZS1lbGVtZW50LS1uZXQtMzY1ODNcIixcInRpdGxlXCI6XCJUdXRvcmlhbFwifSx7XCJ1cmxcIjpcImh0dHA6Ly91c2VjYXNlcy5yZXNwb25zaXZlaW1hZ2VzLm9yZy9cIixcInRpdGxlXCI6XCJSZWFkIGFib3V0IHRoZSB1c2UgY2FzZXNcIn0se1widXJsXCI6XCJodHRwOi8vcmVzcG9uc2l2ZWltYWdlcy5vcmcvXCIsXCJ0aXRsZVwiOlwiR2VuZXJhbCBpbmZvcm1hdGlvbiBhYm91dCBSZXNwb25zaXZlIEltYWdlc1wifSx7XCJ1cmxcIjpcImh0dHBzOi8vZGV2Lm9wZXJhLmNvbS9hcnRpY2xlcy9yZXNwb25zaXZlLWltYWdlcy9cIixcInRpdGxlXCI6XCJCbG9nIHBvc3Qgb24gdXNhZ2VcIn0se1widXJsXCI6XCJodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL3R1dG9yaWFscy9yZXNwb25zaXZlL3BpY3R1cmUtZWxlbWVudC9cIixcInRpdGxlXCI6XCJIVE1MNSBSb2NrcyB0dXRvcmlhbFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiRE9NXCIsXCJIVE1MNVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcIm4gZCAjM1wiLFwiMzVcIjpcIm4gZCAjM1wiLFwiMzZcIjpcIm4gZCAjM1wifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJuXCIsXCIzNVwiOlwiblwiLFwiMzZcIjpcIm5cIixcIjM3XCI6XCJuIGQgIzFcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI3LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwibiBkICMyXCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJuXCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcIm5cIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7XCIxXCI6XCJFbmFibGVkIGluIENocm9tZSB0aHJvdWdoIHRoZSBcXFwiZXhwZXJpbWVudGFsIFdlYiBQbGF0Zm9ybSBmZWF0dXJlc1xcXCIgZmxhZyBpbiBjaHJvbWU6Ly9mbGFnc1wiLFwiMlwiOlwiRW5hYmxlZCBpbiBPcGVyYSB0aHJvdWdoIHRoZSBcXFwiZXhwZXJpbWVudGFsIFdlYiBQbGF0Zm9ybSBmZWF0dXJlc1xcXCIgZmxhZyBpbiBvcGVyYTovL2ZsYWdzXCIsXCIzXCI6XCJFbmFibGVkIGluIEZpcmVmb3ggYnkgc2V0dGluZyB0aGUgYWJvdXQ6Y29uZmlnIHByZWZlcmVuY2UgZG9tLmltYWdlLnBpY3R1cmUuZW5hYmxlIHRvIHRydWVcIn0sXCJ1c2FnZV9wZXJjX3lcIjo4LjAyLFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcInBpY3R1cmVlbGVtZW50XCIsXCJjaHJvbWVfaWRcIjpcIjU5MTA5NzQ1MTA5MjM3NzZcIn0sXCJ3b2ZmMlwiOntcInRpdGxlXCI6XCJXT0ZGIDIuMCAtIEEgYmV0dGVyIHdlYiBmb250IGNvbXByZXNzaW9uIGZvcm1hdFwiLFwiZGVzY3JpcHRpb25cIjpcIlRydWVUeXBlL09wZW5UeXBlIGZvbnQgdGhhdCBwcm92aWRlcyBiZXR0ZXIgY29tcHJlc3Npb24gdGhhbiBXT0ZGIDEuMC5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL1dPRkYyL1wiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2dpc3QuZ2l0aHViLmNvbS9zZXJnZWptdWVsbGVyL2NmNmI0ZjIxMzNiY2IzZTJmNjRhXCIsXCJ0aXRsZVwiOlwiQmFzaWNzIGFib3V0IFdPRkYgMi4wXCJ9LHtcInVybFwiOlwiaHR0cDovL2V2ZXJ5dGhpbmdmb250cy5jb20vdHRmLXRvLXdvZmYyXCIsXCJ0aXRsZVwiOlwiV09GRiAyLjAgY29udmVydGVyXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJPdGhlclwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcIm5cIixcIjM1XCI6XCJuXCIsXCIzNlwiOlwiblwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJuXCIsXCIzNVwiOlwiblwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcIm5cIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiblwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6MzYuMjMsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiZm9udGZhY2VcIixcImtleXdvcmRzXCI6XCJ3b2ZmLCBmb250ZmFjZSwgd2ViZm9udHNcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiNjcxODY0NDcyMTU0OTMxMlwifSxcInRleHQtc2l6ZS1hZGp1c3RcIjp7XCJ0aXRsZVwiOlwiQ1NTIHRleHQtc2l6ZS1hZGp1c3RcIixcImRlc2NyaXB0aW9uXCI6XCJPbiBtb2JpbGUgZGV2aWNlcywgdGhlIHRleHQtc2l6ZS1hZGp1c3QgQ1NTIHByb3BlcnR5IGFsbG93cyBXZWIgYXV0aG9ycyB0byBjb250cm9sIGlmIGFuZCBob3cgdGhlIHRleHQtaW5mbGF0aW5nIGFsZ29yaXRobSBpcyBhcHBsaWVkIHRvIHRoZSB0ZXh0dWFsIGNvbnRlbnQgb2YgdGhlIGVsZW1lbnQgaXQgaXMgYXBwbGllZCB0by5cIixcInNwZWNcIjpcImh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzcy1zaXplLWFkanVzdC9cIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RleHQtc2l6ZS1hZGp1c3RcIixcInRpdGxlXCI6XCJNRE4gRG9jc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTM1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcIm5cIixcIjM1XCI6XCJuXCIsXCIzNlwiOlwiblwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJuXCIsXCIzNVwiOlwiblwiLFwiMzZcIjpcIm5cIixcIjM3XCI6XCJuXCIsXCIzOFwiOlwiblwiLFwiMzlcIjpcIm5cIixcIjQwXCI6XCJuXCIsXCI0MVwiOlwiblwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcInkgeFwiLFwiNi4wLTYuMVwiOlwieSB4XCIsXCI3LjAtNy4xXCI6XCJ5IHhcIixcIjhcIjpcInkgeFwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwiblwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwiblwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwiblwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5IHhcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieSB4XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5IHhcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjoxMS4xNyxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwid2ViLWFuaW1hdGlvblwiOntcInRpdGxlXCI6XCJXZWIgQW5pbWF0aW9ucyBBUElcIixcImRlc2NyaXB0aW9uXCI6XCJUaGlzIGZ1bmN0aW9uIGxldHMgeW91IGNyZWF0ZSBhbiBhbmltYXRpb24gcHVyZWx5IGluIEphdmFTY3JpcHQgYW5kIGhhdmUgaXQgcnVuIGFzIGVmZmljaWVudGx5IGFzIGFueSBDU1MgQW5pbWF0aW9uIG9yIFRyYW5zaXRpb24uXCIsXCJzcGVjXCI6XCJodHRwOi8vZGV2LnczLm9yZy9meHRmL3dlYi1hbmltYXRpb25zL1wiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vdXBkYXRlcy5odG1sNXJvY2tzLmNvbS8yMDE0LzA1L1dlYi1BbmltYXRpb25zLS0tZWxlbWVudC1hbmltYXRlLWlzLW5vdy1pbi1DaHJvbWUtMzZcIixcInRpdGxlXCI6XCJIVE1MNSBSb2Nrc1wifSx7XCJ1cmxcIjpcImh0dHA6Ly91cGRhdGVzLmh0bWw1cm9ja3MuY29tLzIwMTMvMTIvTmV3LVdlYi1BbmltYXRpb25zLWVuZ2luZS1pbi1CbGluay1kcml2ZXMtQ1NTLUFuaW1hdGlvbnMtVHJhbnNpdGlvbnNcIixcInRpdGxlXCI6XCJIVE1MNSBSb2Nrc1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiRE9NXCIsXCJKUyBBUElcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJuXCIsXCIzNVwiOlwiblwiLFwiMzZcIjpcIm5cIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuXCIsXCIzMVwiOlwiblwiLFwiMzJcIjpcIm5cIixcIjMzXCI6XCJuXCIsXCIzNFwiOlwiblwiLFwiMzVcIjpcIm5cIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcIm5cIixcIjcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcIm5cIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjM2LjIzLFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImpzLGFuaW1hdGlvbixhbmltYXRlXCIsXCJpZV9pZFwiOlwid2ViYW5pbWF0aW9uc2phdmFzY3JpcHRhcGlcIixcImNocm9tZV9pZFwiOlwiNDg1NDM0MzgzNjYzMTA0MFwifSxcInJlc291cmNlLXRpbWluZ1wiOntcInRpdGxlXCI6XCJSZXNvdXJjZSBUaW1pbmdcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2QgdG8gaGVscCB3ZWIgZGV2ZWxvcGVycyB0byBjb2xsZWN0IGNvbXBsZXRlIHRpbWluZyBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIHJlc291cmNlcyBvbiBhIGRvY3VtZW50LlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvcmVzb3VyY2UtdGltaW5nL1wiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vYXVyZWxpby5hdWRlcm8uaXQvZGVtby9yZXNvdXJjZS10aW1pbmctYXBpLWRlbW8uaHRtbFwiLFwidGl0bGVcIjpcIkRlbW9cIn0se1widXJsXCI6XCJodHRwOi8vZ29vZ2xlZGV2ZWxvcGVycy5ibG9nc3BvdC5jb20vMjAxMy8xMi9tZWFzdXJpbmctbmV0d29yay1wZXJmb3JtYW5jZS13aXRoLmh0bWxcIixcInRpdGxlXCI6XCJCbG9nIHBvc3RcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LnNpdGVwb2ludC5jb20vaW50cm9kdWN0aW9uLXJlc291cmNlLXRpbWluZy1hcGkvXCIsXCJ0aXRsZVwiOlwiU2l0ZVBvaW50IGFydGljbGVcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm4gZCAjMVwiLFwiMzJcIjpcIm4gZCAjMVwiLFwiMzNcIjpcIm4gZCAjMVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiblwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOntcIjFcIjpcIkNhbiBiZSBlbmFibGVkIGluIEZpcmVmb3ggdXNpbmcgdGhlIGRvbS5lbmFibGVfcmVzb3VyY2VfdGltaW5nIGZsYWdcIn0sXCJ1c2FnZV9wZXJjX3lcIjo1Mi41NCxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJwZXJmb3JtYW5jZSx0ZXN0aW5nLHJlc291cmNlXCIsXCJpZV9pZFwiOlwicmVzb3VyY2V0aW1pbmdhcGlcIixcImNocm9tZV9pZFwiOlwiNTc5NjM1MDQyMzcyODEyOFwifSxcImN1c3RvbS1lbGVtZW50c1wiOntcInRpdGxlXCI6XCJDdXN0b20gRWxlbWVudHNcIixcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgZGVmaW5pbmcgYW5kIHVzaW5nIG5ldyB0eXBlcyBvZiBET00gZWxlbWVudHMgaW4gYSBkb2N1bWVudC5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2N1c3RvbS1lbGVtZW50cy9cIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL3czYy5naXRodWIuaW8vd2ViY29tcG9uZW50cy9zcGVjL2N1c3RvbS9cIixcInRpdGxlXCI6XCJXM0MgRWRpdG9yJ3MgRHJhZnQgc3BlYyAoY2xvc2VyIHRvIGN1cnJlbnQgaW1wbGVtZW50YXRpb25zKVwifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cucG9seW1lci1wcm9qZWN0Lm9yZy9wbGF0Zm9ybS9jdXN0b20tZWxlbWVudHMuaHRtbFwiLFwidGl0bGVcIjpcIlBvbHltZXIgcHJvamVjdCAocG9seWZpbGwgJiB3ZWIgY29tcG9uZW50cyBmcmFtZXdvcmspXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS90dXRvcmlhbHMvd2ViY29tcG9uZW50cy9jdXN0b21lbGVtZW50cy9cIixcInRpdGxlXCI6XCJIVE1MNVJvY2tzIC0gQ3VzdG9tIEVsZW1lbnRzOiBkZWZpbmluZyBuZXcgZWxlbWVudHMgaW4gSFRNTFwifSx7XCJ1cmxcIjpcImh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yMzQ1MDlcIixcInRpdGxlXCI6XCJDaHJvbWl1bSB0cmFja2luZyBidWc6IEltcGxlbWVudCBDdXN0b20gRWxlbWVudHNcIn0se1widXJsXCI6XCJodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04ODkyMzBcIixcInRpdGxlXCI6XCJGaXJlZm94IHRyYWNraW5nIGJ1ZzogSW1wbGVtZW50IEN1c3RvbSBFbGVtZW50cyAoZnJvbSBXZWIgQ29tcG9uZW50cylcIn0se1widXJsXCI6XCJodHRwOi8vc3RhdHVzLm1vZGVybi5pZS9jdXN0b21lbGVtZW50c1wiLFwidGl0bGVcIjpcIklFIFdlYiBQbGF0Zm9ybSBTdGF0dXMgYW5kIFJvYWRtYXA6IEN1c3RvbSBFbGVtZW50c1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiRE9NXCIsXCJIVE1MNVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJwXCIsXCIxMVwiOlwicFwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuIGQgIzFcIixcIjI0XCI6XCJuIGQgIzFcIixcIjI1XCI6XCJuIGQgIzFcIixcIjI2XCI6XCJuIGQgIzFcIixcIjI3XCI6XCJuIGQgIzFcIixcIjI4XCI6XCJuIGQgIzFcIixcIjI5XCI6XCJuIGQgIzFcIixcIjMwXCI6XCJwIGQgIzFcIixcIjMxXCI6XCJwIGQgIzFcIixcIjMyXCI6XCJwIGQgIzFcIixcIjMzXCI6XCJwIGQgIzFcIixcIjM0XCI6XCJwIGQgIzFcIixcIjM1XCI6XCJwIGQgIzFcIixcIjM2XCI6XCJwIGQgIzFcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuIGRcIixcIjI4XCI6XCJuIGRcIixcIjI5XCI6XCJuIGRcIixcIjMwXCI6XCJuIGRcIixcIjMxXCI6XCJuIGRcIixcIjMyXCI6XCJuIGRcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJwXCIsXCI2LjFcIjpcInBcIixcIjdcIjpcInBcIixcIjcuMVwiOlwicFwiLFwiOFwiOlwicFwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuIGRcIixcIjE2XCI6XCJuIGRcIixcIjE3XCI6XCJuIGRcIixcIjE4XCI6XCJuIGRcIixcIjE5XCI6XCJuIGRcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwicFwiLFwiOFwiOlwicFwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwidVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcIm5cIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e1wiMVwiOlwiRW5hYmxlZCB0aHJvdWdoIHRoZSBcXFwiZG9tLndlYmNvbXBvbmVudHMuZW5hYmxlZFxcXCIgcHJlZmVyZW5jZSBpbiBhYm91dDpjb25maWdcIn0sXCJ1c2FnZV9wZXJjX3lcIjozOC45MSxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJ3ZWIgY29tcG9uZW50c1wiLFwiaWVfaWRcIjpcImN1c3RvbWVsZW1lbnRzXCIsXCJjaHJvbWVfaWRcIjpcIjQ2NDIxMzgwOTI0NzAyNzJcIn0sXCJpbXBvcnRzXCI6e1widGl0bGVcIjpcIkhUTUwgSW1wb3J0c1wiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBpbmNsdWRpbmcgYW5kIHJldXNpbmcgSFRNTCBkb2N1bWVudHMgaW4gb3RoZXIgSFRNTCBkb2N1bWVudHMuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sLWltcG9ydHMvXCIsXCJzdGF0dXNcIjpcIndkXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly93d3cucG9seW1lci1wcm9qZWN0Lm9yZy9wbGF0Zm9ybS9odG1sLWltcG9ydHMuaHRtbFwiLFwidGl0bGVcIjpcIlBvbHltZXIgcHJvamVjdCAocG9seWZpbGwgJiB3ZWIgY29tcG9uZW50cyBmcmFtZXdvcmspXCJ9LHtcInVybFwiOlwiaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS90dXRvcmlhbHMvd2ViY29tcG9uZW50cy9pbXBvcnRzL1wiLFwidGl0bGVcIjpcIkhUTUw1Um9ja3MgLSBIVE1MIEltcG9ydHM6ICNpbmNsdWRlIGZvciB0aGUgd2ViXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI0MDU5MlwiLFwidGl0bGVcIjpcIkNocm9taXVtIHRyYWNraW5nIGJ1ZzogSW1wbGVtZW50IEhUTUwgSW1wb3J0c1wifSx7XCJ1cmxcIjpcImh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTg3NzA3MlwiLFwidGl0bGVcIjpcIkZpcmVmb3ggdHJhY2tpbmcgYnVnOiBJbXBsZW1lbnQgSFRNTCBJbXBvcnRzXCJ9LHtcInVybFwiOlwiaHR0cDovL3N0YXR1cy5tb2Rlcm4uaWUvaHRtbGltcG9ydHNcIixcInRpdGxlXCI6XCJJRSBXZWIgUGxhdGZvcm0gU3RhdHVzIGFuZCBSb2FkbWFwOiBIVE1MIEltcG9ydHNcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkRPTVwiLFwiSFRNTDVcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwicFwiLFwiMTFcIjpcInBcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcInBcIixcIjMxXCI6XCJwXCIsXCIzMlwiOlwicCBkICMxXCIsXCIzM1wiOlwicCBkICMxXCIsXCIzNFwiOlwicCBkICMxXCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuIGQgIzJcIixcIjMxXCI6XCJuIGQgIzJcIixcIjMyXCI6XCJuIGQgIzJcIixcIjMzXCI6XCJuIGQgIzJcIixcIjM0XCI6XCJuIGQgIzJcIixcIjM1XCI6XCJwIGQgIzNcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJwXCIsXCI2LjFcIjpcInBcIixcIjdcIjpcInBcIixcIjcuMVwiOlwicFwiLFwiOFwiOlwicFwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm4gZCAjNFwiLFwiMThcIjpcIm4gZCAjNFwiLFwiMTlcIjpcIm4gZCAjNFwiLFwiMjBcIjpcIm4gZCAjNFwiLFwiMjFcIjpcIm4gZCAjNFwiLFwiMjJcIjpcInAgZCAjNVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJwXCIsXCI4XCI6XCJwXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJ1XCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInBcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7XCIxXCI6XCJFbmFibGVkIHRocm91Z2ggdGhlIFxcXCJkb20ud2ViY29tcG9uZW50cy5lbmFibGVkXFxcIiBwcmVmZXJlbmNlIGluIGFib3V0OmNvbmZpZ1wiLFwiMlwiOlwiRW5hYmxlZCB0aHJvdWdoIHRoZSBcXFwiRW5hYmxlIEhUTUwgSW1wb3J0c1xcXCIgZmxhZyBpbiBjaHJvbWU6Ly9mbGFnc1wiLFwiM1wiOlwiRW5hYmxlZCB0aHJvdWdoIHRoZSBcXFwiRXhwZXJpbWVudGFsIFdlYiBQbGF0Zm9ybSBmZWF0dXJlc1xcXCIgZmxhZyBpbiBjaHJvbWU6Ly9mbGFnc1wiLFwiNFwiOlwiRW5hYmxlZCB0aHJvdWdoIHRoZSBcXFwiRW5hYmxlIEhUTUwgSW1wb3J0c1xcXCIgZmxhZyBpbiBvcGVyYTovL2ZsYWdzXCIsXCI1XCI6XCJFbmFibGVkIHRocm91Z2ggdGhlIFxcXCJFeHBlcmltZW50YWwgV2ViIFBsYXRmb3JtIGZlYXR1cmVzXFxcIiBmbGFnIGluIG9wZXJhOi8vZmxhZ3NcIn0sXCJ1c2FnZV9wZXJjX3lcIjozNi4yNCxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJ3ZWIgY29tcG9uZW50c1wiLFwiaWVfaWRcIjpcImh0bWxpbXBvcnRzXCIsXCJjaHJvbWVfaWRcIjpcIjUxNDQ3NTIzNDUzMTczNzZcIn0sXCJpbnB1dC1maWxlLW11bHRpcGxlXCI6e1widGl0bGVcIjpcIk11bHRpcGxlIGZpbGUgc2VsZWN0aW9uXCIsXCJkZXNjcmlwdGlvblwiOlwiQWxsb3dzIHVzZXJzIHRvIHNlbGVjdCBtdWx0aXBsZSBmaWxlcyBpbiB0aGUgZmlsZSBwaWNrZXIuXCIsXCJzcGVjXCI6XCJodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2F0dHItaW5wdXQtbXVsdGlwbGVcIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM0ODkxMlwiLFwidGl0bGVcIjpcIkNocm9tZSBidWcgKGZvciBBbmRyb2lkKVwifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cucmF5bW9uZGNhbWRlbi5jb20vMjAxMi8yLzI4L1dvcmtpbmctd2l0aC1IVE1MNXMtbXVsdGlwbGUtZmlsZS11cGxvYWQtc3VwcG9ydFwiLFwidGl0bGVcIjpcIkFydGljbGVcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkhUTUw1XCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuICMxXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwibiAjMVwiLFwiMi4yXCI6XCJuICMxXCIsXCIyLjNcIjpcIm4gIzFcIixcIjNcIjpcIm4gIzFcIixcIjRcIjpcIm4gIzFcIixcIjQuMVwiOlwibiAjMVwiLFwiNC4yLTQuM1wiOlwibiAjMVwiLFwiNC40XCI6XCJuICMxXCIsXCI0LjQuM1wiOlwibiAjMVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwibiAjMVwiLFwiMTFcIjpcIm4gIzFcIixcIjExLjFcIjpcIm4gIzFcIixcIjExLjVcIjpcIm4gIzFcIixcIjEyXCI6XCJuICMxXCIsXCIxMi4xXCI6XCJuICMxXCIsXCIyNFwiOlwibiAjMVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwibiAjMVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJuICMxXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcIm4gIzFcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e1wiMVwiOlwiTm90IHN1cHBvcnRlZCB3aGVuIHRlc3RlZCBvbiBBbmRyb2lkLCBwcmVzdW1hYmx5IGFuIE9TIGxpbWl0YXRpb24uIFwifSxcInVzYWdlX3BlcmNfeVwiOjY4LjAxLFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcImZvcm1zXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImF0b2ItYnRvYVwiOntcInRpdGxlXCI6XCJCYXNlNjQgZW5jb2RpbmcgYW5kIGRlY29kaW5nXCIsXCJkZXNjcmlwdGlvblwiOlwiVXRpbGl0eSBmdW5jdGlvbnMgZm9yIG9mIGVuY29kaW5nIGFuZCBkZWNvZGluZyBzdHJpbmdzIHRvIGFuZCBmcm9tIGJhc2UgNjQ6IHdpbmRvdy5hdG9iKCkgYW5kIHdpbmRvdy5idG9hKCkuXCIsXCJzcGVjXCI6XCJodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS93ZWJhcHBhcGlzLmh0bWwjYXRvYlwiLFwic3RhdHVzXCI6XCJvdGhlclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93LmJ0b2FcIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZSBvbiBidG9hKClcIn0se1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93LmF0b2JcIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZSBvbiBhdG9iKClcIn0se1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vZGF2aWRjaGFtYmVycy9CYXNlNjQuanNcIixcInRpdGxlXCI6XCJQb2x5ZmlsbFwifV0sXCJjYXRlZ29yaWVzXCI6W1wiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcInlcIixcIjNcIjpcInlcIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJ5XCIsXCIzLjJcIjpcInlcIixcIjRcIjpcInlcIixcIjVcIjpcInlcIixcIjUuMVwiOlwieVwiLFwiNlwiOlwieVwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcInVcIixcIjEwLjAtMTAuMVwiOlwidVwiLFwiMTAuNVwiOlwidVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwieVwiLFwiNC4wLTQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNS4wLTUuMVwiOlwieVwiLFwiNi4wLTYuMVwiOlwieVwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJ5XCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieVwiLFwiMi4yXCI6XCJ5XCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwidVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo4OS42NSxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJhdG9iLGJ0b2FcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwiY3NzLWFwcGVhcmFuY2VcIjp7XCJ0aXRsZVwiOlwiQ1NTIEFwcGVhcmFuY2VcIixcImRlc2NyaXB0aW9uXCI6XCJUaGUgYGFwcGVhcmFuY2VgIHByb3BlcnR5IGRlZmluZXMgaG93IGVsZW1lbnRzIChwYXJ0aWN1bGFybHkgZm9ybSBjb250cm9scykgYXBwZWFyIGJ5IGRlZmF1bHQuIEJ5IHNldHRpbmcgdGhlIHZhbHVlIHRvIGBub25lYCB0aGUgZGVmYXVsdCBhcHBlYXJhbmNlIGNhbiBiZSBlbnRpcmVseSByZWRlZmluZWQgdXNpbmcgb3RoZXIgQ1NTIHByb3BlcnRpZXMuXCIsXCJzcGVjXCI6XCJodHRwOi8vd2lraS5jc3N3Zy5vcmcvc3BlYy9jc3M0LXVpI2FwcGVhcmFuY2VcIixcInN0YXR1c1wiOlwidW5vZmZcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2Nzcy10cmlja3MuY29tL2FsbWFuYWMvcHJvcGVydGllcy9hL2FwcGVhcmFuY2UvXCIsXCJ0aXRsZVwiOlwiQ1NTIFRyaWNrcyBhcnRpY2xlXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1NcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwieSB4XCIsXCIzXCI6XCJ5IHhcIixcIjMuNVwiOlwieSB4XCIsXCIzLjZcIjpcInkgeFwiLFwiNFwiOlwieSB4XCIsXCI1XCI6XCJ5IHhcIixcIjZcIjpcInkgeFwiLFwiN1wiOlwieSB4XCIsXCI4XCI6XCJ5IHhcIixcIjlcIjpcInkgeFwiLFwiMTBcIjpcInkgeFwiLFwiMTFcIjpcInkgeFwiLFwiMTJcIjpcInkgeFwiLFwiMTNcIjpcInkgeFwiLFwiMTRcIjpcInkgeFwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInkgeFwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInkgeFwiLFwiMjdcIjpcInkgeFwiLFwiMjhcIjpcInkgeFwiLFwiMjlcIjpcInkgeFwiLFwiMzBcIjpcInkgeFwiLFwiMzFcIjpcInkgeFwiLFwiMzJcIjpcInkgeFwiLFwiMzNcIjpcInkgeFwiLFwiMzRcIjpcInkgeFwiLFwiMzVcIjpcInkgeFwiLFwiMzZcIjpcInkgeFwifSxcImNocm9tZVwiOntcIjRcIjpcInkgeFwiLFwiNVwiOlwieSB4XCIsXCI2XCI6XCJ5IHhcIixcIjdcIjpcInkgeFwiLFwiOFwiOlwieSB4XCIsXCI5XCI6XCJ5IHhcIixcIjEwXCI6XCJ5IHhcIixcIjExXCI6XCJ5IHhcIixcIjEyXCI6XCJ5IHhcIixcIjEzXCI6XCJ5IHhcIixcIjE0XCI6XCJ5IHhcIixcIjE1XCI6XCJ5IHhcIixcIjE2XCI6XCJ5IHhcIixcIjE3XCI6XCJ5IHhcIixcIjE4XCI6XCJ5IHhcIixcIjE5XCI6XCJ5IHhcIixcIjIwXCI6XCJ5IHhcIixcIjIxXCI6XCJ5IHhcIixcIjIyXCI6XCJ5IHhcIixcIjIzXCI6XCJ5IHhcIixcIjI0XCI6XCJ5IHhcIixcIjI1XCI6XCJ5IHhcIixcIjI2XCI6XCJ5IHhcIixcIjI3XCI6XCJ5IHhcIixcIjI4XCI6XCJ5IHhcIixcIjI5XCI6XCJ5IHhcIixcIjMwXCI6XCJ5IHhcIixcIjMxXCI6XCJ5IHhcIixcIjMyXCI6XCJ5IHhcIixcIjMzXCI6XCJ5IHhcIixcIjM0XCI6XCJ5IHhcIixcIjM1XCI6XCJ5IHhcIixcIjM2XCI6XCJ5IHhcIixcIjM3XCI6XCJ5IHhcIixcIjM4XCI6XCJ5IHhcIixcIjM5XCI6XCJ5IHhcIixcIjQwXCI6XCJ5IHhcIixcIjQxXCI6XCJ5IHhcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcInkgeFwiLFwiMy4yXCI6XCJ5IHhcIixcIjRcIjpcInkgeFwiLFwiNVwiOlwieSB4XCIsXCI1LjFcIjpcInkgeFwiLFwiNlwiOlwieSB4XCIsXCI2LjFcIjpcInkgeFwiLFwiN1wiOlwieSB4XCIsXCI3LjFcIjpcInkgeFwiLFwiOFwiOlwieSB4XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcInkgeFwiLFwiMTZcIjpcInkgeFwiLFwiMTdcIjpcInkgeFwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInkgeFwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInkgeFwiLFwiNC4wLTQuMVwiOlwieSB4XCIsXCI0LjItNC4zXCI6XCJ5IHhcIixcIjUuMC01LjFcIjpcInkgeFwiLFwiNi4wLTYuMVwiOlwieSB4XCIsXCI3LjAtNy4xXCI6XCJ5IHhcIixcIjhcIjpcInkgeFwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieSB4XCIsXCIyLjJcIjpcInkgeFwiLFwiMi4zXCI6XCJ5IHhcIixcIjNcIjpcInkgeFwiLFwiNFwiOlwieSB4XCIsXCI0LjFcIjpcInkgeFwiLFwiNC4yLTQuM1wiOlwieSB4XCIsXCI0LjRcIjpcInkgeFwiLFwiNC40LjNcIjpcInkgeFwifSxcImJiXCI6e1wiN1wiOlwieSB4XCIsXCIxMFwiOlwieSB4XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInkgeFwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieSB4XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInkgeFwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJ5IHhcIn19LFwibm90ZXNcIjpcIlRoZSBgYXBwZWFyYW5jZWAgcHJvcGVydHkgY3VycmVudGx5IGRvZXMgbm90IGFwcGVhciBpbiBhbnkgQ1NTIHNwZWNpZmljYXRpb24gc28gdGhlcmUgaXMgbm8gc3BlY2lmaWNhbGx5IGNvcnJlY3QgdXNhZ2UuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjc2LjA2LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJjc3MtYmFja2dyb3VuZC1vZmZzZXRzXCI6e1widGl0bGVcIjpcIkNTUyBiYWNrZ3JvdW5kLXBvc2l0aW9uIGVkZ2Ugb2Zmc2V0c1wiLFwiZGVzY3JpcHRpb25cIjpcIkFsbG93cyBDU1MgYmFja2dyb3VuZCBpbWFnZXMgdG8gYmUgcG9zaXRpb25lZCByZWxhdGl2ZSB0byB0aGUgc3BlY2lmaWVkIGVkZ2UgdXNpbmcgdGhlIDMgdG8gNCB2YWx1ZSBzeW50YXguIEZvciBleGFtcGxlOiBgYmFja2dyb3VuZC1wb3NpdGlvbjogcmlnaHQgNXB4IGJvdHRvbSA1cHg7YCBmb3IgcG9zaXRpb25pbmcgNXB4IGZyb20gdGhlIGJvdHRvbS1yaWdodCBjb3JuZXIuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWJhY2tncm91bmQvI2JhY2tncm91bmQtcG9zaXRpb25cIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JhY2tncm91bmQtcG9zaXRpb25cIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZSBvbiBiYWNrZ3JvdW5kLXBvc2l0aW9uXCJ9LHtcInVybFwiOlwiaHR0cDovL2JyaWFudHJlZS5zZS9xdWljay10aXAtMDYtdXNlLWZvdXItdmFsdWUtc3ludGF4LXByb3Blcmx5LXBvc2l0aW9uLWJhY2tncm91bmQtaW1hZ2VzL1wiLFwidGl0bGVcIjpcIkJhc2ljIGluZm9ybWF0aW9uXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1MzXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwieVwiLFwiMTAuNlwiOlwieVwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjExLjZcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJ5XCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcInlcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcInlcIixcIjExLjFcIjpcInlcIixcIjExLjVcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxMi4xXCI6XCJ5XCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcIm5cIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo4MC4zNixcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCI0IHZhbHVlIHN5bnRheFwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJjc3Mtc3VwcG9ydHMtYXBpXCI6e1widGl0bGVcIjpcIkNTUy5zdXBwb3J0cygpIERPTSBBUElcIixcImRlc2NyaXB0aW9uXCI6XCJUaGUgQ1NTLnN1cHBvcnRzKCkgc3RhdGljIG1ldGhvZHMgcmV0dXJucyBhIEJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBhIGdpdmVuIENTUyBmZWF0dXJlLCBvciBub3QuXCIsXCJzcGVjXCI6XCJodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3MtY29uZGl0aW9uYWwvI3RoZS1jc3MtaW50ZXJmYWNlXCIsXCJzdGF0dXNcIjpcImNyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DU1Muc3VwcG9ydHNcIixcInRpdGxlXCI6XCJNRE4gRG9jc1wifSx7XCJ1cmxcIjpcImh0dHA6Ly9qc2Jpbi5jb20vcmltZXZpbG90YXJpLzEvZWRpdFwiLFwidGl0bGVcIjpcIkRlbW8gKENoaW5lc2UpXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9kZXYub3BlcmEuY29tL2FydGljbGVzL25hdGl2ZS1jc3MtZmVhdHVyZS1kZXRlY3Rpb24vXCIsXCJ0aXRsZVwiOlwiTmF0aXZlIENTUyBGZWF0dXJlIERldGVjdGlvbiB2aWEgdGhlIEBzdXBwb3J0cyBSdWxlXCJ9LHtcInVybFwiOlwiaHR0cDovL2Rhdmlkd2Fsc2gubmFtZS9jc3Mtc3VwcG9ydHNcIixcInRpdGxlXCI6XCJDU1MgQHN1cHBvcnRzXCJ9LHtcInVybFwiOlwiaHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGZhaGUvYXJ0aWNsZS9kZXRhaWxzLzg2MTk0ODBcIixcInRpdGxlXCI6XCJBcnRpY2xlIChDaGluZXNlKVwifV0sXCJjYXRlZ29yaWVzXCI6W1wiRE9NXCIsXCJKUyBBUElcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwibiBkXCIsXCIyMVwiOlwibiBkXCIsXCIyMlwiOlwibiBkXCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcIm5cIixcIjcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcInkgIzFcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcInlcIixcIjQuNC4zXCI6XCJ5XCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiU2VlIGFsc28gW0BzdXBwb3J0cyBpbiBDU1NdKCNmZWF0PWNzcy1mZWF0dXJlcXVlcmllcylcXHJcXG5cXHJcXG5TZWUgdGhlIFtXZWJLaXQgQnVnXShodHRwOi8vdHJhYy53ZWJraXQub3JnL2NoYW5nZXNldC8xNDI3MzkpIGZvciBzdGF0dXMgaW4gU2FmYXJpXCIsXCJub3Rlc19ieV9udW1cIjp7XCIxXCI6XCJPcGVyYSAxMiB1c2VzIGEgZGlmZmVyZW50IG1ldGhvZCBuYW1lKCd3aW5kb3cuc3VwcG9ydHNDU1MnKVwifSxcInVzYWdlX3BlcmNfeVwiOjU0LjU4LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImNvbmRpdGlvbmFsXCIsXCJpZV9pZFwiOlwiY29uZGl0aW9uYWxydWxlc1wiLFwiY2hyb21lX2lkXCI6XCI0OTkzOTgxODEzMzU4NTkyXCJ9LFwiY3NzLXRvdWNoLWFjdGlvblwiOntcInRpdGxlXCI6XCJDU1MgdG91Y2gtYWN0aW9uIHByb3BlcnR5XCIsXCJkZXNjcmlwdGlvblwiOlwidG91Y2gtYWN0aW9uIGlzIGEgQ1NTIHByb3BlcnR5IHRoYXQgY29udHJvbHMgZmlsdGVyaW5nIG9mIGdlc3R1cmUgZXZlbnRzLCBwcm92aWRpbmcgZGV2ZWxvcGVycyB3aXRoIGEgZGVjbGFyYXRpdmUgbWVjaGFuaXNtIHRvIHNlbGVjdGl2ZWx5IGRpc2FibGUgdG91Y2ggc2Nyb2xsaW5nIChpbiBvbmUgb3IgYm90aCBheGVzKSwgcGluY2gtem9vbWluZyBvciBkb3VibGUtdGFwLXpvb21pbmcuXCIsXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9wb2ludGVyZXZlbnRzLyN0aGUtdG91Y2gtYWN0aW9uLWNzcy1wcm9wZXJ0eVwiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvcHJvcGVydGllcy90b3VjaC1hY3Rpb25cIixcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJ9LHtcInVybFwiOlwiaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvYXBwcy9oaDc2NzMxMy5hc3B4XCIsXCJ0aXRsZVwiOlwiTVNETiBEb2NzXCJ9LHtcInVybFwiOlwiaHR0cDovL3VwZGF0ZXMuaHRtbDVyb2Nrcy5jb20vMjAxMy8xMi8zMDBtcy10YXAtZGVsYXktZ29uZS1hd2F5XCIsXCJ0aXRsZVwiOlwiMzAwbXMgdGFwIGRlbGF5LCBnb25lIGF3YXlcIn0se1widXJsXCI6XCJodHRwOi8vYmxvZ3MudGVsZXJpay5jb20vYXBwYnVpbGRlci9wb3N0cy8xMy0xMS0yMS93aGF0LWV4YWN0bHktaXMuLi4uLi10aGUtMzAwbXMtY2xpY2stZGVsYXlcIixcInRpdGxlXCI6XCJXaGF0IEV4YWN0bHkgSXMuLi4uLiBUaGUgMzAwbXMgQ2xpY2sgRGVsYXlcIn0se1widXJsXCI6XCJodHRwOi8vdGh4LmdpdGh1Yi5pby9tb2JpbGUvMzAwbXMtY2xpY2stZGVsYXkvXCIsXCJ0aXRsZVwiOlwiV2hhdCBFeGFjdGx5IElzLi4uLi4gVGhlIDMwMG1zIENsaWNrIERlbGF5KENoaW5lc2UpXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1NcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwieSB4ICMyXCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuIGQgIzFcIixcIjMwXCI6XCJuIGQgIzFcIixcIjMxXCI6XCJuIGQgIzFcIixcIjMyXCI6XCJuIGQgIzFcIixcIjMzXCI6XCJuIGQgIzFcIixcIjM0XCI6XCJuIGQgIzFcIixcIjM1XCI6XCJuIGQgIzFcIixcIjM2XCI6XCJuIGQgIzFcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuXCIsXCIzMVwiOlwiblwiLFwiMzJcIjpcIm5cIixcIjMzXCI6XCJuXCIsXCIzNFwiOlwiblwiLFwiMzVcIjpcIm5cIixcIjM2XCI6XCJ5XCIsXCIzN1wiOlwieVwiLFwiMzhcIjpcInlcIixcIjM5XCI6XCJ5XCIsXCI0MFwiOlwieVwiLFwiNDFcIjpcInlcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcIm5cIixcIjcuMVwiOlwiblwiLFwiOFwiOlwidVwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BfbWluaVwiOntcIjUuMC04LjBcIjpcIm5cIn0sXCJhbmRyb2lkXCI6e1wiMi4xXCI6XCJuXCIsXCIyLjJcIjpcIm5cIixcIjIuM1wiOlwiblwiLFwiM1wiOlwiblwiLFwiNFwiOlwiblwiLFwiNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI0LjRcIjpcIm5cIixcIjQuNC4zXCI6XCJuXCJ9LFwiYmJcIjp7XCI3XCI6XCJuXCIsXCIxMFwiOlwiblwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcIm5cIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieSB4ICMyXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOntcIjFcIjpcIlN1cHBvcnRlZCBpbiBGaXJlZm94IGJlaGluZCB0aGUgYGxheW91dC5jc3MudG91Y2hfYWN0aW9uLmVuYWJsZWRgIGZsYWcsIEZpcmVmb3ggZm9yIFdpbmRvd3MgOCBUb3VjaCAoJ01ldHJvJykgZW5hYmxlZCBieSBkZWZhdWx0LlwiLFwiMlwiOlwiSUUxMCsgaGFzIGFscmVhZHkgc3VwcG9ydGVkIHRoZXNlIHByb3BlcnR5IHdoaWNoIGFyZSBub3QgaW4gc3RhbmRhcmQgYXQgcHJlc2VudCBzdWNoIGFzJ3BpbmNoLXpvb20nLCdkb3VibGUtdGFwLXpvb20nLCdjcm9zcy1zbGlkZS14JywnY3Jvc3Mtc2xpZGUteScuXCJ9LFwidXNhZ2VfcGVyY195XCI6NDYuMzMsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwidG91Y2ggYWN0aW9uXCIsXCJpZV9pZFwiOlwiY3NzdG91Y2hhY3Rpb25cIixcImNocm9tZV9pZFwiOlwiNTkxMjA3NDAyMjU1MTU1MlwifSxcImF1dG9mb2N1c1wiOntcInRpdGxlXCI6XCJBdXRvZm9jdXMgYXR0cmlidXRlXCIsXCJkZXNjcmlwdGlvblwiOlwiQWxsb3dzIGEgZm9ybSBmaWVsZCB0byBiZSBpbW1lZGlhdGVseSBmb2N1c2VkIG9uIHBhZ2UgbG9hZC5cIixcInNwZWNcIjpcImh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjYXV0b2ZvY3VzaW5nLWEtZm9ybS1jb250cm9sOi10aGUtYXV0b2ZvY3VzLWF0dHJpYnV0ZVwiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vZGF2aWR3YWxzaC5uYW1lL2F1dG9mb2N1c1wiLFwidGl0bGVcIjpcIkFydGljbGUgb24gYXV0b2ZvY3VzXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJIVE1MNVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcInlcIixcIjZcIjpcInlcIixcIjdcIjpcInlcIixcIjhcIjpcInlcIixcIjlcIjpcInlcIixcIjEwXCI6XCJ5XCIsXCIxMVwiOlwieVwiLFwiMTJcIjpcInlcIixcIjEzXCI6XCJ5XCIsXCIxNFwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwiLFwiMjdcIjpcInlcIixcIjI4XCI6XCJ5XCIsXCIyOVwiOlwieVwiLFwiMzBcIjpcInlcIixcIjMxXCI6XCJ5XCIsXCIzMlwiOlwieVwiLFwiMzNcIjpcInlcIixcIjM0XCI6XCJ5XCIsXCIzNVwiOlwieVwiLFwiMzZcIjpcInlcIixcIjM3XCI6XCJ5XCIsXCIzOFwiOlwieVwiLFwiMzlcIjpcInlcIixcIjQwXCI6XCJ5XCIsXCI0MVwiOlwieVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJ5XCIsXCI1LjFcIjpcInlcIixcIjZcIjpcInlcIixcIjYuMVwiOlwieVwiLFwiN1wiOlwieVwiLFwiNy4xXCI6XCJ5XCIsXCI4XCI6XCJ5XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJ5XCIsXCIxMC4wLTEwLjFcIjpcInlcIixcIjEwLjVcIjpcInlcIixcIjEwLjZcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMS4xXCI6XCJ5XCIsXCIxMS41XCI6XCJ5XCIsXCIxMS42XCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI0LjFcIjpcInlcIixcIjQuMi00LjNcIjpcInlcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcInlcIixcIjEwXCI6XCJ1XCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcInlcIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcInlcIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieVwifSxcImllX21vYlwiOntcIjEwXCI6XCJ5XCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOnt9LFwidXNhZ2VfcGVyY195XCI6NzQuNzQsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImNzcy1jbGlwLXBhdGhcIjp7XCJ0aXRsZVwiOlwiQ1NTIGNsaXAtcGF0aCBwcm9wZXJ0eVwiLFwiZGVzY3JpcHRpb25cIjpcIk1ldGhvZCBvZiBkZWZpbmluZyB0aGUgdmlzaWJsZSByZWdpb24gb2YgYW4gZWxlbWVudCB1c2luZyBTVkcgb3IgYSBzaGFwZSBkZWZpbml0aW9uLlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzLW1hc2tpbmctMS8jdGhlLWNsaXAtcGF0aFwiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vY3NzLXRyaWNrcy5jb20vYWxtYW5hYy9wcm9wZXJ0aWVzL2MvY2xpcC9cIixcInRpdGxlXCI6XCJDU1MgVHJpY2tzIGFydGljbGVcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTUzNcIl0sXCJzdGF0c1wiOntcImllXCI6e1wiNS41XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJhICMxXCIsXCIzLjZcIjpcImEgIzFcIixcIjRcIjpcImEgIzFcIixcIjVcIjpcImEgIzFcIixcIjZcIjpcImEgIzFcIixcIjdcIjpcImEgIzFcIixcIjhcIjpcImEgIzFcIixcIjlcIjpcImEgIzFcIixcIjEwXCI6XCJhICMxXCIsXCIxMVwiOlwiYSAjMVwiLFwiMTJcIjpcImEgIzFcIixcIjEzXCI6XCJhICMxXCIsXCIxNFwiOlwiYSAjMVwiLFwiMTVcIjpcImEgIzFcIixcIjE2XCI6XCJhICMxXCIsXCIxN1wiOlwiYSAjMVwiLFwiMThcIjpcImEgIzFcIixcIjE5XCI6XCJhICMxXCIsXCIyMFwiOlwiYSAjMVwiLFwiMjFcIjpcImEgIzFcIixcIjIyXCI6XCJhICMxXCIsXCIyM1wiOlwiYSAjMVwiLFwiMjRcIjpcImEgIzFcIixcIjI1XCI6XCJhICMxXCIsXCIyNlwiOlwiYSAjMVwiLFwiMjdcIjpcImEgIzFcIixcIjI4XCI6XCJhICMxXCIsXCIyOVwiOlwiYSAjMVwiLFwiMzBcIjpcImEgIzFcIixcIjMxXCI6XCJhICMxXCIsXCIzMlwiOlwiYSAjMVwiLFwiMzNcIjpcImEgIzFcIixcIjM0XCI6XCJhICMxXCIsXCIzNVwiOlwiYSAjMVwiLFwiMzZcIjpcImEgIzFcIn0sXCJjaHJvbWVcIjp7XCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJhIHggIzJcIixcIjI1XCI6XCJhIHggIzJcIixcIjI2XCI6XCJhIHggIzJcIixcIjI3XCI6XCJhIHggIzJcIixcIjI4XCI6XCJhIHggIzJcIixcIjI5XCI6XCJhIHggIzJcIixcIjMwXCI6XCJhIHggIzJcIixcIjMxXCI6XCJhIHggIzJcIixcIjMyXCI6XCJhIHggIzJcIixcIjMzXCI6XCJhIHggIzJcIixcIjM0XCI6XCJhIHggIzJcIixcIjM1XCI6XCJhIHggIzJcIixcIjM2XCI6XCJhIHggIzJcIixcIjM3XCI6XCJhIHggIzJcIixcIjM4XCI6XCJhIHggIzJcIixcIjM5XCI6XCJhIHggIzJcIixcIjQwXCI6XCJhIHggIzJcIixcIjQxXCI6XCJhIHggIzJcIn0sXCJzYWZhcmlcIjp7XCIzLjFcIjpcIm5cIixcIjMuMlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNS4xXCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI2LjFcIjpcIm5cIixcIjdcIjpcImEgeCAjMlwiLFwiNy4xXCI6XCJhIHggIzJcIixcIjhcIjpcImEgeCAjMlwifSxcIm9wZXJhXCI6e1wiOVwiOlwiblwiLFwiOS41LTkuNlwiOlwiblwiLFwiMTAuMC0xMC4xXCI6XCJuXCIsXCIxMC41XCI6XCJuXCIsXCIxMC42XCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTEuMVwiOlwiblwiLFwiMTEuNVwiOlwiblwiLFwiMTEuNlwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEyLjFcIjpcIm5cIixcIjE1XCI6XCJhIHggIzJcIixcIjE2XCI6XCJhIHggIzJcIixcIjE3XCI6XCJhIHggIzJcIixcIjE4XCI6XCJhIHggIzJcIixcIjE5XCI6XCJhIHggIzJcIixcIjIwXCI6XCJhIHggIzJcIixcIjIxXCI6XCJhIHggIzJcIixcIjIyXCI6XCJhIHggIzJcIixcIjIzXCI6XCJhIHggIzJcIixcIjI0XCI6XCJhIHggIzJcIixcIjI1XCI6XCJhIHggIzJcIixcIjI2XCI6XCJhIHggIzJcIn0sXCJpb3Nfc2FmXCI6e1wiMy4yXCI6XCJuXCIsXCI0LjAtNC4xXCI6XCJuXCIsXCI0LjItNC4zXCI6XCJuXCIsXCI1LjAtNS4xXCI6XCJuXCIsXCI2LjAtNi4xXCI6XCJuXCIsXCI3LjAtNy4xXCI6XCJhIHggIzJcIixcIjhcIjpcImEgeCAjMlwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJhIHggIzJcIixcIjQuNC4zXCI6XCJhIHggIzJcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcImEgeCAjMlwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwiYSB4ICMyXCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcImEgIzFcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwiblwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiblwifX0sXCJub3Rlc1wiOlwiXCIsXCJub3Rlc19ieV9udW1cIjp7XCIxXCI6XCJQYXJ0aWFsIHN1cHBvcnQgcmVmZXJzIHRvIG9ubHkgc3VwcG9ydGluZyB0aGUgYHVybCgpYCBzeW50YXguXCIsXCIyXCI6XCJQYXJ0aWFsIHN1cHBvcnQgcmVmZXJzIHRvIHN1cHBvcnRpbmcgc2hhcGVzIGFuZCB0aGUgYHVybCgjZm9vKWAgc3ludGF4IGZvciBpbmxpbmUgU1ZHLCBidXQgbm90IHNoYXBlcyBpbiBleHRlcm5hbCBTVkdzLlwifSxcInVzYWdlX3BlcmNfeVwiOjAsXCJ1c2FnZV9wZXJjX2FcIjo2NC44OCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJnZXRyYW5kb212YWx1ZXNcIjp7XCJ0aXRsZVwiOlwiY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpXCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGdlbmVyYXRpbmcgY3J5cHRvZ3JhcGhpY2FsbHkgcmFuZG9tIHZhbHVlcy5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL1dlYkNyeXB0b0FQSS8jUmFuZG9tU291cmNlLW1ldGhvZC1nZXRSYW5kb21WYWx1ZXNcIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL3dpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzXCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwieSB4XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI3LjFcIjpcInlcIixcIjhcIjpcInlcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwieVwiLFwiOFwiOlwieVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJ5XCIsXCI0LjQuM1wiOlwieVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcIm5cIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo3Mi43MyxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiXCJ9LFwic2NyZWVuLW9yaWVudGF0aW9uXCI6e1widGl0bGVcIjpcIlNjcmVlbiBPcmllbnRhdGlvblwiLFwiZGVzY3JpcHRpb25cIjpcIlByb3ZpZGVzIHRoZSBhYmlsaXR5IHRvIHJlYWQgdGhlIHNjcmVlbiBvcmllbnRhdGlvbiBzdGF0ZSwgdG8gYmUgaW5mb3JtZWQgd2hlbiB0aGlzIHN0YXRlIGNoYW5nZXMsIGFuZCB0byBiZSBhYmxlIHRvIGxvY2sgdGhlIHNjcmVlbiBvcmllbnRhdGlvbiB0byBhIHNwZWNpZmljIHN0YXRlLlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvc2NyZWVuLW9yaWVudGF0aW9uL1wiLFwic3RhdHVzXCI6XCJ3ZFwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwOi8vYXVyZWxpby5hdWRlcm8uaXQvZGVtby9zY3JlZW4tb3JpZW50YXRpb24tYXBpLWRlbW8uaHRtbFwiLFwidGl0bGVcIjpcIkRlbW9cIn0se1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU2NyZWVuLm9yaWVudGF0aW9uXCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vd3d3LnNpdGVwb2ludC5jb20vaW50cm9kdWNpbmctc2NyZWVuLW9yaWVudGF0aW9uLWFwaS9cIixcInRpdGxlXCI6XCJTaXRlUG9pbnQgYXJ0aWNsZVwifV0sXCJjYXRlZ29yaWVzXCI6W1wiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJ5IHhcIn0sXCJmaXJlZm94XCI6e1wiMlwiOlwiblwiLFwiM1wiOlwiblwiLFwiMy41XCI6XCJuXCIsXCIzLjZcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcInkgeFwiLFwiMTlcIjpcInkgeFwiLFwiMjBcIjpcInkgeFwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInkgeFwiLFwiMjZcIjpcInkgeFwiLFwiMjdcIjpcInkgeFwiLFwiMjhcIjpcInkgeFwiLFwiMjlcIjpcInkgeFwiLFwiMzBcIjpcInkgeFwiLFwiMzFcIjpcInkgeFwiLFwiMzJcIjpcInkgeFwiLFwiMzNcIjpcInkgeFwiLFwiMzRcIjpcInkgeFwiLFwiMzVcIjpcInkgeFwiLFwiMzZcIjpcInkgeFwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJuXCIsXCIzNVwiOlwiblwiLFwiMzZcIjpcIm5cIixcIjM3XCI6XCJuXCIsXCIzOFwiOlwiblwiLFwiMzlcIjpcInVcIixcIjQwXCI6XCJ1XCIsXCI0MVwiOlwidVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJuXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcIm5cIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcIm5cIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcIm5cIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwieSB4XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInlcIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjoyMy4wMyxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJzY3JlZW5vcmllbnRhdGlvbmFwaVwiLFwiY2hyb21lX2lkXCI6XCI2MTkxMjg1MjgzMDYxNzYwXCJ9LFwiZm9udC1sb2FkaW5nXCI6e1widGl0bGVcIjpcIkNTUyBGb250IExvYWRpbmdcIixcImRlc2NyaXB0aW9uXCI6XCJUaGlzIENTUyBtb2R1bGUgZGVmaW5lcyBhIHNjcmlwdGluZyBpbnRlcmZhY2UgdG8gZm9udCBmYWNlcyBpbiBDU1MsIGFsbG93aW5nIGZvbnQgZmFjZXMgdG8gYmUgZWFzaWx5IGNyZWF0ZWQgYW5kIGxvYWRlZCBmcm9tIHNjcmlwdC4gSXQgYWxzbyBwcm92aWRlcyBtZXRob2RzIHRvIHRyYWNrIHRoZSBsb2FkaW5nIHN0YXR1cyBvZiBhbiBpbmRpdmlkdWFsIGZvbnQsIG9yIG9mIGFsbCB0aGUgZm9udHMgb24gYW4gZW50aXJlIHBhZ2UuXCIsXCJzcGVjXCI6XCJodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3MtZm9udC1sb2FkaW5nL1wiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL3d3dy5pZ3ZpdGEuY29tLzIwMTQvMDEvMzEvb3B0aW1pemluZy13ZWItZm9udC1yZW5kZXJpbmctcGVyZm9ybWFuY2UvI2ZvbnQtbG9hZC1ldmVudHNcIixcInRpdGxlXCI6XCJPcHRpbWl6aW5nIHdpdGggZm9udCBsb2FkIGV2ZW50c1wifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTM1wiLFwiSlMgQVBJXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuXCIsXCIzMVwiOlwiblwiLFwiMzJcIjpcIm5cIixcIjMzXCI6XCJuXCIsXCIzNFwiOlwiblwiLFwiMzVcIjpcIm5cIixcIjM2XCI6XCJuXCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcIm5cIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI3LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwiblwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwieVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJuXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcIm5cIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjozNy40NSxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJcIixcImNocm9tZV9pZFwiOlwiNjI0NDY3NjI4OTk1Mzc5MlwifSxcImZvbnQtdW5pY29kZS1yYW5nZVwiOntcInRpdGxlXCI6XCJGb250IHVuaWNvZGUtcmFuZ2Ugc3Vic2V0dGluZ1wiLFwiZGVzY3JpcHRpb25cIjpcIlRoaXMgQGZvbnQtZmFjZSBkZXNjcmlwdG9yIGRlZmluZXMgdGhlIHNldCBvZiBVbmljb2RlIGNvZGVwb2ludHMgdGhhdCBtYXkgYmUgc3VwcG9ydGVkIGJ5IHRoZSBmb250IGZhY2UgZm9yIHdoaWNoIGl0IGlzIGRlY2xhcmVkLiBUaGUgZGVzY3JpcHRvciB2YWx1ZSBpcyBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIFVuaWNvZGUgcmFuZ2UgKDx1cmFuZ2U+KSB2YWx1ZXMuIFRoZSB1bmlvbiBvZiB0aGVzZSByYW5nZXMgZGVmaW5lcyB0aGUgc2V0IG9mIGNvZGVwb2ludHMgdGhhdCBzZXJ2ZXMgYXMgYSBoaW50IGZvciB1c2VyIGFnZW50cyB3aGVuIGRlY2lkaW5nIHdoZXRoZXIgb3Igbm90IHRvIGRvd25sb2FkIGEgZm9udCByZXNvdXJjZSBmb3IgYSBnaXZlbiB0ZXh0IHJ1bi5cIixcInNwZWNcIjpcImh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzcy1mb250cy8jZGVzY2RlZi11bmljb2RlLXJhbmdlXCIsXCJzdGF0dXNcIjpcImNyXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy91bmljb2RlLXJhbmdlXCIsXCJ0aXRsZVwiOlwiTUROOiB1bmljb2RlLXJhbmdlXCJ9LHtcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvc2FmYXJpL2RvY3VtZW50YXRpb24vQXBwbGVBcHBsaWNhdGlvbnMvUmVmZXJlbmNlL1NhZmFyaUNTU1JlZi9BcnRpY2xlcy9TdGFuZGFyZENTU1Byb3BlcnRpZXMuaHRtbCMvL2FwcGxlX3JlZi9jc3MvcHJvcGVydHkvdW5pY29kZS1yYW5nZVwiLFwidGl0bGVcIjpcIlNhZmFyaSBDU1MgUmVmZXJlbmNlOiB1bmljb2RlLXJhbmdlXCJ9LHtcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvY3NzL3Byb3BlcnRpZXMvdW5pY29kZS1yYW5nZVwiLFwidGl0bGVcIjpcIldlYiBQbGF0Zm9ybSBEb2NzOiB1bmljb2RlLXJhbmdlXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJDU1MzXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiYVwiLFwiMTBcIjpcImFcIixcIjExXCI6XCJhXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJuXCIsXCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxM1wiOlwiblwiLFwiMTRcIjpcIm5cIixcIjE1XCI6XCJuXCIsXCIxNlwiOlwiblwiLFwiMTdcIjpcIm5cIixcIjE4XCI6XCJuXCIsXCIxOVwiOlwiblwiLFwiMjBcIjpcIm5cIixcIjIxXCI6XCJuXCIsXCIyMlwiOlwiblwiLFwiMjNcIjpcIm5cIixcIjI0XCI6XCJuXCIsXCIyNVwiOlwiblwiLFwiMjZcIjpcIm5cIixcIjI3XCI6XCJuXCIsXCIyOFwiOlwiblwiLFwiMjlcIjpcIm5cIixcIjMwXCI6XCJuXCIsXCIzMVwiOlwiblwiLFwiMzJcIjpcIm5cIixcIjMzXCI6XCJuXCIsXCIzNFwiOlwiblwiLFwiMzVcIjpcIm5cIixcIjM2XCI6XCJuXCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiYVwiLFwiNVwiOlwiYVwiLFwiNlwiOlwiYVwiLFwiN1wiOlwiYVwiLFwiOFwiOlwiYVwiLFwiOVwiOlwiYVwiLFwiMTBcIjpcImFcIixcIjExXCI6XCJhXCIsXCIxMlwiOlwiYVwiLFwiMTNcIjpcImFcIixcIjE0XCI6XCJhXCIsXCIxNVwiOlwiYVwiLFwiMTZcIjpcImFcIixcIjE3XCI6XCJhXCIsXCIxOFwiOlwiYVwiLFwiMTlcIjpcImFcIixcIjIwXCI6XCJhXCIsXCIyMVwiOlwiYVwiLFwiMjJcIjpcImFcIixcIjIzXCI6XCJhXCIsXCIyNFwiOlwiYVwiLFwiMjVcIjpcImFcIixcIjI2XCI6XCJhXCIsXCIyN1wiOlwiYVwiLFwiMjhcIjpcImFcIixcIjI5XCI6XCJhXCIsXCIzMFwiOlwiYVwiLFwiMzFcIjpcImFcIixcIjMyXCI6XCJhXCIsXCIzM1wiOlwiYVwiLFwiMzRcIjpcImFcIixcIjM1XCI6XCJhXCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJhXCIsXCIzLjJcIjpcImFcIixcIjRcIjpcImFcIixcIjVcIjpcImFcIixcIjUuMVwiOlwiYVwiLFwiNlwiOlwiYVwiLFwiNi4xXCI6XCJhXCIsXCI3XCI6XCJhXCIsXCI3LjFcIjpcImFcIixcIjhcIjpcImFcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwiYVwiLFwiMTZcIjpcImFcIixcIjE3XCI6XCJhXCIsXCIxOFwiOlwiYVwiLFwiMTlcIjpcImFcIixcIjIwXCI6XCJhXCIsXCIyMVwiOlwiYVwiLFwiMjJcIjpcImFcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiYVwiLFwiNC4wLTQuMVwiOlwiYVwiLFwiNC4yLTQuM1wiOlwiYVwiLFwiNS4wLTUuMVwiOlwiYVwiLFwiNi4wLTYuMVwiOlwiYVwiLFwiNy4wLTcuMVwiOlwiYVwiLFwiOFwiOlwiYVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiYVwiLFwiMi4yXCI6XCJhXCIsXCIyLjNcIjpcImFcIixcIjNcIjpcImFcIixcIjRcIjpcImFcIixcIjQuMVwiOlwiYVwiLFwiNC4yLTQuM1wiOlwiYVwiLFwiNC40XCI6XCJhXCIsXCI0LjQuM1wiOlwiYVwifSxcImJiXCI6e1wiN1wiOlwidVwiLFwiMTBcIjpcInVcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwiYVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJhXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcImFcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcImFcIn19LFwibm90ZXNcIjpcIlBhcnRpYWwgc3VwcG9ydCBpbmRpY2F0ZXMgdGhhdCB1bm5lY2Vzc2FyeSBjb2RlLXJhbmdlcyBhcmUgZG93bmxvYWRlZCBieSB0aGUgYnJvd3NlciAtIHNlZSBbYnJvd3NlciB0ZXN0IG1hdHJpeF0oaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vYS9jaHJvbWl1bS5vcmcvc3ByZWFkc2hlZXRzL2QvMThoLTFnYW9zdTQtS1l4SDhKVU5MNlpEdU9zT0ttV2ZhdW9haTNDUzNoUFkvZWRpdD9wbGk9MSNnaWQ9MCkuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjM2LjIzLFwidXNhZ2VfcGVyY19hXCI6MzkuMDMsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJmb250IGZhY2UsdW5pY29kZSx1bmljb2RlLXJhbmdlXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImdhbWVwYWRcIjp7XCJ0aXRsZVwiOlwiR2FtZXBhZCBBUElcIixcImRlc2NyaXB0aW9uXCI6XCJBUEkgdG8gc3VwcG9ydCBpbnB1dCBmcm9tIFVTQiBnYW1lcGFkIGNvbnRyb2xsZXJzIHRob3VnaCBKYXZhU2NyaXB0LlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvZ2FtZXBhZC9cIixcInN0YXR1c1wiOlwid2RcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2x1c2VyLmdpdGh1Yi5pby9nYW1lcGFkdGVzdC9cIixcInRpdGxlXCI6XCJDb250cm9sbGVyIGRlbW9cIn0se1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvR2FtZXBhZF9BUElcIixcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwifSx7XCJ1cmxcIjpcImh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2Rvb2RsZXMvZ2FtZXBhZC9cIixcInRpdGxlXCI6XCJIVE1MNVJvY2tzIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vZ2FtZWRldmVsb3BtZW50LnR1dHNwbHVzLmNvbS90dXRvcmlhbHMvdXNpbmctdGhlLWh0bWw1LWdhbWVwYWQtYXBpLXRvLWFkZC1jb250cm9sbGVyLXN1cHBvcnQtdG8tYnJvd3Nlci1nYW1lcy0tY21zLTIxMzQ1XCIsXCJ0aXRsZVwiOlwiRGV0YWlsZWQgdHV0b3JpYWxcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkpTIEFQSVwiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiblwiLFwiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcInkgeFwiLFwiMjJcIjpcInkgeFwiLFwiMjNcIjpcInkgeFwiLFwiMjRcIjpcInkgeFwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI3LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwiblwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwiblwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwiblwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJuXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm5cIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcIm5cIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjo0NC44MSxcInVzYWdlX3BlcmNfYVwiOjAsXCJ1Y3ByZWZpeFwiOmZhbHNlLFwicGFyZW50XCI6XCJcIixcImtleXdvcmRzXCI6XCJcIixcImllX2lkXCI6XCJnYW1lcGFkYXBpXCIsXCJjaHJvbWVfaWRcIjpcIjUxMTg3NzYzODMxMTExNjhcIn0sXCJjc3MtZm9udC1zdHJldGNoXCI6e1widGl0bGVcIjpcIkNTUyBmb250LXN0cmV0Y2hcIixcImRlc2NyaXB0aW9uXCI6XCJJZiBhIGZvbnQgaGFzIG11bHRpcGxlIHR5cGVzIG9mIHZhcmlhdGlvbnMgYmFzZWQgb24gdGhlIHdpZHRoIG9mIGNoYXJhY3RlcnMsIHRoZSBgZm9udC1zdHJldGNoYCBwcm9wZXJ0eSBhbGxvd3MgdGhlIGFwcHJvcHJpYXRlIG9uZSB0byBiZSBzZWxlY3RlZC4gVGhlIHByb3BlcnR5IGluIGl0c2VsZiBkb2VzIG5vdCBjYXVzZSB0aGUgYnJvd3NlciB0byBzdHJldGNoIHRvIGEgZm9udC5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2Nzcy1mb250cy0zLyNmb250LXN0cmV0Y2gtcHJvcFwiLFwic3RhdHVzXCI6XCJjclwiLFwibGlua3NcIjpbe1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udC1zdHJldGNoXCIsXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIn0se1widXJsXCI6XCJodHRwOi8vY3NzLXRyaWNrcy5jb20vYWxtYW5hYy9wcm9wZXJ0aWVzL2YvZm9udC1zdHJldGNoL1wiLFwidGl0bGVcIjpcIkNTUyBUcmlja3MgYXJ0aWNsZVwifV0sXCJjYXRlZ29yaWVzXCI6W1wiQ1NTXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI2XCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI4XCI6XCJuXCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcIm5cIixcIjM1XCI6XCJuXCIsXCIzNlwiOlwiblwiLFwiMzdcIjpcIm5cIixcIjM4XCI6XCJuXCIsXCIzOVwiOlwidVwiLFwiNDBcIjpcInVcIixcIjQxXCI6XCJ1XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI3LjFcIjpcIm5cIixcIjhcIjpcInVcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcInVcIixcIjI2XCI6XCJ1XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwiblwiLFwiNC4wLTQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNS4wLTUuMVwiOlwiblwiLFwiNi4wLTYuMVwiOlwiblwiLFwiNy4wLTcuMVwiOlwiblwiLFwiOFwiOlwiblwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwidVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm5cIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIyNFwiOlwiblwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwiblwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcInlcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcIm5cIn19LFwibm90ZXNcIjpcIlwiLFwibm90ZXNfYnlfbnVtXCI6e30sXCJ1c2FnZV9wZXJjX3lcIjoyNS41LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcImZvbnQgc3RyZXRjaFwiLFwiaWVfaWRcIjpcImNzc2ZvbnRzdHJldGNoXCIsXCJjaHJvbWVfaWRcIjpcIjQ1OTg4MzAwNTgxNzY1MTJcIn0sXCJmb250LXNpemUtYWRqdXN0XCI6e1widGl0bGVcIjpcIkNTUyBmb250LXNpemUtYWRqdXN0XCIsXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGFkanVzdGluZyB0aGUgZm9udCBzaXplIGluIGEgbWF0dGVyIHRoYXQgcmVsYXRlcyB0byB0aGUgaGVpZ2h0IG9mIGxvd2VyY2FzZSB2cy4gdXBwZXJjYXNlIGxldHRlcnMuIFRoaXMgbWFrZXMgaXQgZWFzaWVyIHRvIHNldCB0aGUgc2l6ZSBvZiBmYWxsYmFjayBmb250cy5cIixcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2Nzcy1mb250cy0zLyNmb250LXNpemUtYWRqdXN0LXByb3BcIixcInN0YXR1c1wiOlwiY3JcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL3dlYmRlc2lnbmVybm90ZWJvb2suY29tL2Nzcy90aGUtbGl0dGxlLWtub3duLWZvbnQtc2l6ZS1hZGp1c3QtY3NzMy1wcm9wZXJ0eS9cIixcInRpdGxlXCI6XCJBcnRpY2xlIG9uIGZvbnQtc2l6ZS1hZGp1c3RcIn0se1widXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udC1zaXplLWFkanVzdFwiLFwidGl0bGVcIjpcIk1ETiBhcnRpY2xlIG9uIGZvbnQtc2l6ZS1hZGp1c3RcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTU1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJ5XCIsXCIzLjVcIjpcInlcIixcIjMuNlwiOlwieVwiLFwiNFwiOlwieVwiLFwiNVwiOlwieVwiLFwiNlwiOlwieVwiLFwiN1wiOlwieVwiLFwiOFwiOlwieVwiLFwiOVwiOlwieVwiLFwiMTBcIjpcInlcIixcIjExXCI6XCJ5XCIsXCIxMlwiOlwieVwiLFwiMTNcIjpcInlcIixcIjE0XCI6XCJ5XCIsXCIxNVwiOlwieVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcIm5cIixcIjEwXCI6XCJuXCIsXCIxMVwiOlwiblwiLFwiMTJcIjpcIm5cIixcIjEzXCI6XCJuXCIsXCIxNFwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJuXCIsXCIyNlwiOlwiblwiLFwiMjdcIjpcIm5cIixcIjI4XCI6XCJuXCIsXCIyOVwiOlwiblwiLFwiMzBcIjpcIm5cIixcIjMxXCI6XCJuXCIsXCIzMlwiOlwiblwiLFwiMzNcIjpcIm5cIixcIjM0XCI6XCJuXCIsXCIzNVwiOlwiblwiLFwiMzZcIjpcIm5cIixcIjM3XCI6XCJuXCIsXCIzOFwiOlwiblwiLFwiMzlcIjpcInVcIixcIjQwXCI6XCJ1XCIsXCI0MVwiOlwidVwifSxcInNhZmFyaVwiOntcIjMuMVwiOlwiblwiLFwiMy4yXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI1XCI6XCJuXCIsXCI1LjFcIjpcIm5cIixcIjZcIjpcIm5cIixcIjYuMVwiOlwiblwiLFwiN1wiOlwiblwiLFwiNy4xXCI6XCJuXCIsXCI4XCI6XCJ1XCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJuXCIsXCI5LjUtOS42XCI6XCJuXCIsXCIxMC4wLTEwLjFcIjpcIm5cIixcIjEwLjVcIjpcIm5cIixcIjEwLjZcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMS42XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMTVcIjpcIm5cIixcIjE2XCI6XCJuXCIsXCIxN1wiOlwiblwiLFwiMThcIjpcIm5cIixcIjE5XCI6XCJuXCIsXCIyMFwiOlwiblwiLFwiMjFcIjpcIm5cIixcIjIyXCI6XCJuXCIsXCIyM1wiOlwiblwiLFwiMjRcIjpcIm5cIixcIjI1XCI6XCJ1XCIsXCIyNlwiOlwidVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcIm5cIixcIjQuMC00LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjUuMC01LjFcIjpcIm5cIixcIjYuMC02LjFcIjpcIm5cIixcIjcuMC03LjFcIjpcIm5cIixcIjhcIjpcIm5cIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiblwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcIm5cIixcIjIuMlwiOlwiblwiLFwiMi4zXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCI0XCI6XCJuXCIsXCI0LjFcIjpcIm5cIixcIjQuMi00LjNcIjpcIm5cIixcIjQuNFwiOlwiblwiLFwiNC40LjNcIjpcInVcIn0sXCJiYlwiOntcIjdcIjpcIm5cIixcIjEwXCI6XCJuXCJ9LFwib3BfbW9iXCI6e1wiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMS4xXCI6XCJuXCIsXCIxMS41XCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTIuMVwiOlwiblwiLFwiMjRcIjpcIm5cIn0sXCJhbmRfY2hyXCI6e1wiMzhcIjpcIm5cIn0sXCJhbmRfZmZcIjp7XCIzMlwiOlwiblwifSxcImllX21vYlwiOntcIjEwXCI6XCJuXCJ9LFwiYW5kX3VjXCI6e1wiOS45XCI6XCJuXCJ9fSxcIm5vdGVzXCI6XCJEb2VzIG5vdCBhcHBlYXIgdG8gd29yayBvbiBGaXJlZm94IG1vYmlsZSwgZGVzcGl0ZSByZWNvZ25pdGlvbiBvZiB0aGUgcHJvcGVydHkuXCIsXCJub3Rlc19ieV9udW1cIjp7fSxcInVzYWdlX3BlcmNfeVwiOjEzLjE4LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJsaW5rLWljb24tcG5nXCI6e1widGl0bGVcIjpcIlBORyBmYXZpY29uc1wiLFwiZGVzY3JpcHRpb25cIjpcIkljb24gdXNlZCBieSBicm93c2VycyB0byBpZGVudGlmeSBhIHdlYnBhZ2Ugb3Igc2l0ZS4gV2hpbGUgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdGhlIGAuaWNvYCBmb3JtYXQsIHRoZSBQTkcgZm9ybWF0IGNhbiBiZSBwcmVmZXJhYmxlLlwiLFwic3BlY1wiOlwiaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2VtYW50aWNzLmh0bWwjcmVsLWljb25cIixcInN0YXR1c1wiOlwicHJcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2Nzcy10cmlja3MuY29tL2Zhdmljb24tcXVpei9cIixcInRpdGxlXCI6XCJEZXRhaWxlZCBpbmZvIG9uIGZhdmljb25zIGZvciB2YXJpb3VzIHVzZXNcIn1dLFwiY2F0ZWdvcmllc1wiOltcIkhUTUw1XCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJ5XCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcInlcIixcIjNcIjpcInlcIixcIjMuNVwiOlwieVwiLFwiMy42XCI6XCJ5XCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwieSAjMVwiLFwiNVwiOlwieSAjMVwiLFwiNlwiOlwieSAjMVwiLFwiN1wiOlwieSAjMVwiLFwiOFwiOlwieSAjMVwiLFwiOVwiOlwieSAjMVwiLFwiMTBcIjpcInkgIzFcIixcIjExXCI6XCJ5ICMxXCIsXCIxMlwiOlwieSAjMVwiLFwiMTNcIjpcInkgIzFcIixcIjE0XCI6XCJ5ICMxXCIsXCIxNVwiOlwieSAjMVwiLFwiMTZcIjpcInkgIzFcIixcIjE3XCI6XCJ5ICMxXCIsXCIxOFwiOlwieSAjMVwiLFwiMTlcIjpcInkgIzFcIixcIjIwXCI6XCJ5ICMxXCIsXCIyMVwiOlwieSAjMVwiLFwiMjJcIjpcInkgIzFcIixcIjIzXCI6XCJ5ICMxXCIsXCIyNFwiOlwieSAjMVwiLFwiMjVcIjpcInkgIzFcIixcIjI2XCI6XCJ5ICMxXCIsXCIyN1wiOlwieSAjMVwiLFwiMjhcIjpcInkgIzFcIixcIjI5XCI6XCJ5ICMxXCIsXCIzMFwiOlwieSAjMVwiLFwiMzFcIjpcInkgIzFcIixcIjMyXCI6XCJ5ICMxXCIsXCIzM1wiOlwieSAjMVwiLFwiMzRcIjpcInkgIzFcIixcIjM1XCI6XCJ5ICMxXCIsXCIzNlwiOlwieSAjMVwiLFwiMzdcIjpcInkgIzFcIixcIjM4XCI6XCJ5ICMxXCIsXCIzOVwiOlwieSAjMVwiLFwiNDBcIjpcInkgIzFcIixcIjQxXCI6XCJ5ICMxXCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJ5ICMyXCIsXCIzLjJcIjpcInkgIzJcIixcIjRcIjpcInkgIzJcIixcIjVcIjpcInkgIzJcIixcIjUuMVwiOlwieSAjMlwiLFwiNlwiOlwieSAjMlwiLFwiNi4xXCI6XCJ5ICMyXCIsXCI3XCI6XCJ5ICMyXCIsXCI3LjFcIjpcInkgIzJcIixcIjhcIjpcInkgIzJcIn0sXCJvcGVyYVwiOntcIjlcIjpcInkgIzNcIixcIjkuNS05LjZcIjpcInkgIzNcIixcIjEwLjAtMTAuMVwiOlwieSAjM1wiLFwiMTAuNVwiOlwieSAjM1wiLFwiMTAuNlwiOlwieSAjM1wiLFwiMTFcIjpcInkgIzNcIixcIjExLjFcIjpcInkgIzNcIixcIjExLjVcIjpcInkgIzNcIixcIjExLjZcIjpcInkgIzNcIixcIjEyXCI6XCJ5ICMzXCIsXCIxMi4xXCI6XCJ5ICMzXCIsXCIxNVwiOlwieSAjMVwiLFwiMTZcIjpcInkgIzFcIixcIjE3XCI6XCJ5ICMxXCIsXCIxOFwiOlwieSAjMVwiLFwiMTlcIjpcInkgIzFcIixcIjIwXCI6XCJ5ICMxXCIsXCIyMVwiOlwieSAjMVwiLFwiMjJcIjpcInkgIzFcIixcIjIzXCI6XCJ5ICMxXCIsXCIyNFwiOlwieSAjMVwiLFwiMjVcIjpcInkgIzFcIixcIjI2XCI6XCJ5ICMxXCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwibiAjNFwiLFwiNC4wLTQuMVwiOlwibiAjNFwiLFwiNC4yLTQuM1wiOlwibiAjNFwiLFwiNS4wLTUuMVwiOlwibiAjNFwiLFwiNi4wLTYuMVwiOlwibiAjNFwiLFwiNy4wLTcuMVwiOlwibiAjNFwiLFwiOFwiOlwibiAjNFwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuICM0XCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwieVwiLFwiMi4yXCI6XCJ5XCIsXCIyLjNcIjpcInlcIixcIjNcIjpcInlcIixcIjRcIjpcInlcIixcIjQuMVwiOlwieVwiLFwiNC4yLTQuM1wiOlwieVwiLFwiNC40XCI6XCJ5ICMzXCIsXCI0LjQuM1wiOlwieSAjM1wifSxcImJiXCI6e1wiN1wiOlwieVwiLFwiMTBcIjpcIm4gIzRcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwibiAjNFwiLFwiMTFcIjpcIm4gIzRcIixcIjExLjFcIjpcIm4gIzRcIixcIjExLjVcIjpcIm4gIzRcIixcIjEyXCI6XCJuICM0XCIsXCIxMi4xXCI6XCJuICM0XCIsXCIyNFwiOlwibiAjNFwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwieVwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJ5XCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm4gIzRcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcInkgIzJcIn19LFwibm90ZXNcIjpcIldpbjgvSUUxMCsgYW5kIGlPUyBTYWZhcmkgc3VwcG9ydCBvdGhlciB0eXBlcyBvZiBpY29ucyBmb3Igd2VicGFnZXMgdG9vLCB1c2luZyBhbHRlcm5hdGUgdGFncy5cXHJcXG5cXHJcXG5TZWUgYWxzbyBbU1ZHIGZhdmljb25zXSgjZmVhdD1saW5rLWljb24tc3ZnKS5cIixcIm5vdGVzX2J5X251bVwiOntcIjFcIjpcIklmIGJvdGggSUNPIGFuZCBQTkcgYXJlIGF2YWlsYWJsZSwgd2lsbCB1c2UgSUNPIG92ZXIgUE5HIGlmIElDTyBoYXMgYmV0dGVyIG1hdGNoaW5nIHNpemVzIHNldC5cIixcIjJcIjpcIklmIGJvdGggSUNPIGFuZCBQTkcgYXJlIGF2YWlsYWJsZSwgd2lsbCBBTFdBWVMgdXNlIElDTyBmaWxlLCByZWdhcmRsZXNzIG9mIHNpemVzIHNldC5cIixcIjNcIjpcIklmIG11bHRpcGxlIGZvcm1hdHMgYXJlIGF2YWlsYWJsZSwgd2lsbCB1c2UgdGhlIGxhc3Qgb25lIGxvYWRlZCwgcmVnYXJkbGVzcyBvZiBzaXplcyAoZWZmZWN0aXZlbHkgcGlja3MgYXQgcmFuZG9tKS5cIixcIjRcIjpcIkRvZXMgbm90IHVzZSBmYXZpY29ucyBhdCBhbGwgKGJ1dCBtYXkgaGF2ZSBhbHRlcm5hdGl2ZSBmb3IgYm9va21hcmtzLCBldGMpXCJ9LFwidXNhZ2VfcGVyY195XCI6NzYuMjgsXCJ1c2FnZV9wZXJjX2FcIjowLFwidWNwcmVmaXhcIjpmYWxzZSxcInBhcmVudFwiOlwiXCIsXCJrZXl3b3Jkc1wiOlwiXCIsXCJpZV9pZFwiOlwiXCIsXCJjaHJvbWVfaWRcIjpcIlwifSxcImxpbmstaWNvbi1zdmdcIjp7XCJ0aXRsZVwiOlwiU1ZHIGZhdmljb25zXCIsXCJkZXNjcmlwdGlvblwiOlwiSWNvbiB1c2VkIGJ5IGJyb3dzZXJzIHRvIGlkZW50aWZ5IGEgd2VicGFnZSBvciBzaXRlLiBXaGlsZSBhbGwgYnJvd3NlcnMgc3VwcG9ydCB0aGUgYC5pY29gIGZvcm1hdCwgdGhlIFNWRyBmb3JtYXQgY2FuIGJlIHByZWZlcmFibGUgdG8gbW9yZSBlYXNpbHkgc3VwcG9ydCBoaWdoZXIgcmVzb2x1dGlvbnMgb3IgbGFyZ2VyIGljb25zLlwiLFwic3BlY1wiOlwiaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2VtYW50aWNzLmh0bWwjcmVsLWljb25cIixcInN0YXR1c1wiOlwicHJcIixcImxpbmtzXCI6W3tcInVybFwiOlwiaHR0cDovL2NyYnVnLmNvbS8yOTQxNzlcIixcInRpdGxlXCI6XCJDaHJvbWUgYnVnXCJ9XSxcImNhdGVnb3JpZXNcIjpbXCJIVE1MNVwiLFwiU1ZHXCJdLFwic3RhdHNcIjp7XCJpZVwiOntcIjUuNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCJ9LFwiZmlyZWZveFwiOntcIjJcIjpcIm5cIixcIjNcIjpcIm5cIixcIjMuNVwiOlwiblwiLFwiMy42XCI6XCJuXCIsXCI0XCI6XCJ5XCIsXCI1XCI6XCJ5XCIsXCI2XCI6XCJ5XCIsXCI3XCI6XCJ5XCIsXCI4XCI6XCJ5XCIsXCI5XCI6XCJ5XCIsXCIxMFwiOlwieVwiLFwiMTFcIjpcInlcIixcIjEyXCI6XCJ5XCIsXCIxM1wiOlwieVwiLFwiMTRcIjpcInlcIixcIjE1XCI6XCJ5XCIsXCIxNlwiOlwieVwiLFwiMTdcIjpcInlcIixcIjE4XCI6XCJ5XCIsXCIxOVwiOlwieVwiLFwiMjBcIjpcInlcIixcIjIxXCI6XCJ5XCIsXCIyMlwiOlwieVwiLFwiMjNcIjpcInlcIixcIjI0XCI6XCJ5XCIsXCIyNVwiOlwieVwiLFwiMjZcIjpcInlcIixcIjI3XCI6XCJ5XCIsXCIyOFwiOlwieVwiLFwiMjlcIjpcInlcIixcIjMwXCI6XCJ5XCIsXCIzMVwiOlwieVwiLFwiMzJcIjpcInlcIixcIjMzXCI6XCJ5XCIsXCIzNFwiOlwieVwiLFwiMzVcIjpcInlcIixcIjM2XCI6XCJ5XCJ9LFwiY2hyb21lXCI6e1wiNFwiOlwiblwiLFwiNVwiOlwiblwiLFwiNlwiOlwiblwiLFwiN1wiOlwiblwiLFwiOFwiOlwiblwiLFwiOVwiOlwiblwiLFwiMTBcIjpcIm5cIixcIjExXCI6XCJuXCIsXCIxMlwiOlwiblwiLFwiMTNcIjpcIm5cIixcIjE0XCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcIm5cIixcIjI2XCI6XCJuXCIsXCIyN1wiOlwiblwiLFwiMjhcIjpcIm5cIixcIjI5XCI6XCJuXCIsXCIzMFwiOlwiblwiLFwiMzFcIjpcIm5cIixcIjMyXCI6XCJuXCIsXCIzM1wiOlwiblwiLFwiMzRcIjpcIm5cIixcIjM1XCI6XCJuXCIsXCIzNlwiOlwiblwiLFwiMzdcIjpcIm5cIixcIjM4XCI6XCJuXCIsXCIzOVwiOlwidVwiLFwiNDBcIjpcInVcIixcIjQxXCI6XCJ1XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcIm5cIixcIjVcIjpcIm5cIixcIjUuMVwiOlwiblwiLFwiNlwiOlwiblwiLFwiNi4xXCI6XCJuXCIsXCI3XCI6XCJuXCIsXCI3LjFcIjpcIm5cIixcIjhcIjpcInVcIn0sXCJvcGVyYVwiOntcIjlcIjpcIm5cIixcIjkuNS05LjZcIjpcIm5cIixcIjEwLjAtMTAuMVwiOlwiblwiLFwiMTAuNVwiOlwiblwiLFwiMTAuNlwiOlwiblwiLFwiMTFcIjpcIm5cIixcIjExLjFcIjpcIm5cIixcIjExLjVcIjpcIm5cIixcIjExLjZcIjpcIm5cIixcIjEyXCI6XCJuXCIsXCIxMi4xXCI6XCJuXCIsXCIxNVwiOlwiblwiLFwiMTZcIjpcIm5cIixcIjE3XCI6XCJuXCIsXCIxOFwiOlwiblwiLFwiMTlcIjpcIm5cIixcIjIwXCI6XCJuXCIsXCIyMVwiOlwiblwiLFwiMjJcIjpcIm5cIixcIjIzXCI6XCJuXCIsXCIyNFwiOlwiblwiLFwiMjVcIjpcInVcIixcIjI2XCI6XCJ1XCJ9LFwiaW9zX3NhZlwiOntcIjMuMlwiOlwibiAjMVwiLFwiNC4wLTQuMVwiOlwibiAjMVwiLFwiNC4yLTQuM1wiOlwibiAjMVwiLFwiNS4wLTUuMVwiOlwibiAjMVwiLFwiNi4wLTYuMVwiOlwibiAjMVwiLFwiNy4wLTcuMVwiOlwibiAjMVwiLFwiOFwiOlwibiAjMVwifSxcIm9wX21pbmlcIjp7XCI1LjAtOC4wXCI6XCJuICMxXCJ9LFwiYW5kcm9pZFwiOntcIjIuMVwiOlwiblwiLFwiMi4yXCI6XCJuXCIsXCIyLjNcIjpcIm5cIixcIjNcIjpcIm5cIixcIjRcIjpcIm5cIixcIjQuMVwiOlwiblwiLFwiNC4yLTQuM1wiOlwiblwiLFwiNC40XCI6XCJuXCIsXCI0LjQuM1wiOlwidVwifSxcImJiXCI6e1wiN1wiOlwiblwiLFwiMTBcIjpcIm4gIzFcIn0sXCJvcF9tb2JcIjp7XCIxMFwiOlwibiAjMVwiLFwiMTFcIjpcIm4gIzFcIixcIjExLjFcIjpcIm4gIzFcIixcIjExLjVcIjpcIm4gIzFcIixcIjEyXCI6XCJuICMxXCIsXCIxMi4xXCI6XCJuICMxXCIsXCIyNFwiOlwibiAjMVwifSxcImFuZF9jaHJcIjp7XCIzOFwiOlwiblwifSxcImFuZF9mZlwiOntcIjMyXCI6XCJuXCJ9LFwiaWVfbW9iXCI6e1wiMTBcIjpcIm4gIzFcIn0sXCJhbmRfdWNcIjp7XCI5LjlcIjpcIm5cIn19LFwibm90ZXNcIjpcIlNlZSBhbHNvIFtQTkcgZmF2aWNvbnNdKCNmZWF0PWxpbmstaWNvbi1wbmcpLlwiLFwibm90ZXNfYnlfbnVtXCI6e1wiMVwiOlwiRG9lcyBub3QgdXNlIGZhdmljb25zIGF0IGFsbFwifSxcInVzYWdlX3BlcmNfeVwiOjEyLjk5LFwidXNhZ2VfcGVyY19hXCI6MCxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcIlwiLFwia2V5d29yZHNcIjpcIlwiLFwiaWVfaWRcIjpcIlwiLFwiY2hyb21lX2lkXCI6XCJcIn0sXCJjc3MtbWVkaWEtcmVzb2x1dGlvblwiOntcInRpdGxlXCI6XCJNZWRpYSBRdWVyaWVzOiByZXNvbHV0aW9uIGZlYXR1cmVcIixcImRlc2NyaXB0aW9uXCI6XCJBbGxvd3MgYSBtZWRpYSBxdWVyeSB0byBiZSBzZXQgYmFzZWQgb24gdGhlIGRldmljZSBwaXhlbHMgdXNlZCBwZXIgQ1NTIHVuaXQuIFdoaWxlIHRoZSBzdGFuZGFyZCB1c2VzIGBtaW5gL2BtYXgtcmVzb2x1dGlvbmAgZm9yIHRoaXMsIHNvbWUgYnJvd3NlcnMgc3VwcG9ydCB0aGUgb2xkZXIgbm9uLXN0YW5kYXJkIGBkZXZpY2UtcGl4ZWwtcmF0aW9gIG1lZGlhIHF1ZXJ5LlwiLFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1tZWRpYXF1ZXJpZXMvI3Jlc29sdXRpb25cIixcInN0YXR1c1wiOlwicmVjXCIsXCJsaW5rc1wiOlt7XCJ1cmxcIjpcImh0dHA6Ly93d3cudzMub3JnL2Jsb2cvQ1NTLzIwMTIvMDYvMTQvdW5wcmVmaXgtd2Via2l0LWRldmljZS1waXhlbC1yYXRpby9cIixcInRpdGxlXCI6XCJIb3cgdG8gdW5wcmVmaXggLXdlYmtpdC1kZXZpY2UtcGl4ZWwtcmF0aW9cIn1dLFwiY2F0ZWdvcmllc1wiOltcIkNTU1wiLFwiQ1NTM1wiXSxcInN0YXRzXCI6e1wiaWVcIjp7XCI1LjVcIjpcIm5cIixcIjZcIjpcIm5cIixcIjdcIjpcIm5cIixcIjhcIjpcIm5cIixcIjlcIjpcImEgIzFcIixcIjEwXCI6XCJhICMxXCIsXCIxMVwiOlwiYSAjMVwifSxcImZpcmVmb3hcIjp7XCIyXCI6XCJuXCIsXCIzXCI6XCJuXCIsXCIzLjVcIjpcIm5cIixcIjMuNlwiOlwiYSAjMVwiLFwiNFwiOlwiYSAjMVwiLFwiNVwiOlwiYSAjMVwiLFwiNlwiOlwiYSAjMVwiLFwiN1wiOlwiYSAjMVwiLFwiOFwiOlwiYSAjMVwiLFwiOVwiOlwiYSAjMVwiLFwiMTBcIjpcImEgIzFcIixcIjExXCI6XCJhICMxXCIsXCIxMlwiOlwiYSAjMVwiLFwiMTNcIjpcImEgIzFcIixcIjE0XCI6XCJhICMxXCIsXCIxNVwiOlwiYSAjMVwiLFwiMTZcIjpcInlcIixcIjE3XCI6XCJ5XCIsXCIxOFwiOlwieVwiLFwiMTlcIjpcInlcIixcIjIwXCI6XCJ5XCIsXCIyMVwiOlwieVwiLFwiMjJcIjpcInlcIixcIjIzXCI6XCJ5XCIsXCIyNFwiOlwieVwiLFwiMjVcIjpcInlcIixcIjI2XCI6XCJ5XCIsXCIyN1wiOlwieVwiLFwiMjhcIjpcInlcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwifSxcImNocm9tZVwiOntcIjRcIjpcImEgeCAjMlwiLFwiNVwiOlwiYSB4ICMyXCIsXCI2XCI6XCJhIHggIzJcIixcIjdcIjpcImEgeCAjMlwiLFwiOFwiOlwiYSB4ICMyXCIsXCI5XCI6XCJhIHggIzJcIixcIjEwXCI6XCJhIHggIzJcIixcIjExXCI6XCJhIHggIzJcIixcIjEyXCI6XCJhIHggIzJcIixcIjEzXCI6XCJhIHggIzJcIixcIjE0XCI6XCJhIHggIzJcIixcIjE1XCI6XCJhIHggIzJcIixcIjE2XCI6XCJhIHggIzJcIixcIjE3XCI6XCJhIHggIzJcIixcIjE4XCI6XCJhIHggIzJcIixcIjE5XCI6XCJhIHggIzJcIixcIjIwXCI6XCJhIHggIzJcIixcIjIxXCI6XCJhIHggIzJcIixcIjIyXCI6XCJhIHggIzJcIixcIjIzXCI6XCJhIHggIzJcIixcIjI0XCI6XCJhIHggIzJcIixcIjI1XCI6XCJhIHggIzJcIixcIjI2XCI6XCJhIHggIzJcIixcIjI3XCI6XCJhIHggIzJcIixcIjI4XCI6XCJhIHggIzJcIixcIjI5XCI6XCJ5XCIsXCIzMFwiOlwieVwiLFwiMzFcIjpcInlcIixcIjMyXCI6XCJ5XCIsXCIzM1wiOlwieVwiLFwiMzRcIjpcInlcIixcIjM1XCI6XCJ5XCIsXCIzNlwiOlwieVwiLFwiMzdcIjpcInlcIixcIjM4XCI6XCJ5XCIsXCIzOVwiOlwieVwiLFwiNDBcIjpcInlcIixcIjQxXCI6XCJ5XCJ9LFwic2FmYXJpXCI6e1wiMy4xXCI6XCJuXCIsXCIzLjJcIjpcIm5cIixcIjRcIjpcImEgeCAjMlwiLFwiNVwiOlwiYSB4ICMyXCIsXCI1LjFcIjpcImEgeCAjMlwiLFwiNlwiOlwiYSB4ICMyXCIsXCI2LjFcIjpcImEgeCAjMlwiLFwiN1wiOlwiYSB4ICMyXCIsXCI3LjFcIjpcImEgeCAjMlwiLFwiOFwiOlwiYSB4ICMyXCJ9LFwib3BlcmFcIjp7XCI5XCI6XCJ1XCIsXCI5LjUtOS42XCI6XCJ1XCIsXCIxMC4wLTEwLjFcIjpcInVcIixcIjEwLjVcIjpcInVcIixcIjEwLjZcIjpcInVcIixcIjExXCI6XCJ1XCIsXCIxMS4xXCI6XCJ1XCIsXCIxMS41XCI6XCJ1XCIsXCIxMS42XCI6XCJ1XCIsXCIxMlwiOlwidVwiLFwiMTIuMVwiOlwieVwiLFwiMTVcIjpcInlcIixcIjE2XCI6XCJ5XCIsXCIxN1wiOlwieVwiLFwiMThcIjpcInlcIixcIjE5XCI6XCJ5XCIsXCIyMFwiOlwieVwiLFwiMjFcIjpcInlcIixcIjIyXCI6XCJ5XCIsXCIyM1wiOlwieVwiLFwiMjRcIjpcInlcIixcIjI1XCI6XCJ5XCIsXCIyNlwiOlwieVwifSxcImlvc19zYWZcIjp7XCIzLjJcIjpcInVcIixcIjQuMC00LjFcIjpcImEgeCAjMlwiLFwiNC4yLTQuM1wiOlwiYSB4ICMyXCIsXCI1LjAtNS4xXCI6XCJhIHggIzJcIixcIjYuMC02LjFcIjpcImEgeCAjMlwiLFwiNy4wLTcuMVwiOlwiYSB4ICMyXCIsXCI4XCI6XCJhIHggIzJcIn0sXCJvcF9taW5pXCI6e1wiNS4wLTguMFwiOlwiYSAjMVwifSxcImFuZHJvaWRcIjp7XCIyLjFcIjpcInVcIixcIjIuMlwiOlwidVwiLFwiMi4zXCI6XCJ1XCIsXCIzXCI6XCJ1XCIsXCI0XCI6XCJhIHggIzJcIixcIjQuMVwiOlwiYSB4ICMyXCIsXCI0LjItNC4zXCI6XCJhIHggIzJcIixcIjQuNFwiOlwieVwiLFwiNC40LjNcIjpcInlcIn0sXCJiYlwiOntcIjdcIjpcImEgeCAjMlwiLFwiMTBcIjpcImEgeCAjMlwifSxcIm9wX21vYlwiOntcIjEwXCI6XCJ1XCIsXCIxMVwiOlwidVwiLFwiMTEuMVwiOlwidVwiLFwiMTEuNVwiOlwidVwiLFwiMTJcIjpcInVcIixcIjEyLjFcIjpcInlcIixcIjI0XCI6XCJ5XCJ9LFwiYW5kX2NoclwiOntcIjM4XCI6XCJ5XCJ9LFwiYW5kX2ZmXCI6e1wiMzJcIjpcInlcIn0sXCJpZV9tb2JcIjp7XCIxMFwiOlwieVwifSxcImFuZF91Y1wiOntcIjkuOVwiOlwiYSB4ICMyXCJ9fSxcIm5vdGVzXCI6XCJcIixcIm5vdGVzX2J5X251bVwiOntcIjFcIjpcIlN1cHBvcnRzIHRoZSBgZHBpIHVuaXRgLCBidXQgZG9lcyBub3Qgc3VwcG9ydCBgZHBweGAgb3IgYGRwY21gIHVuaXRzLlwiLFwiMlwiOlwiU3VwcG9ydGVkIHVzaW5nIHRoZSBub24tc3RhbmRhcmQgYG1pbmAvYG1heC1kZXZpY2UtcGl4ZWwtcmF0aW9gXCJ9LFwidXNhZ2VfcGVyY195XCI6NTUuMzgsXCJ1c2FnZV9wZXJjX2FcIjozNS42NSxcInVjcHJlZml4XCI6ZmFsc2UsXCJwYXJlbnRcIjpcImNzcy1tZWRpYXF1ZXJpZXNcIixcImtleXdvcmRzXCI6XCJAbWVkaWEsZGV2aWNlLXBpeGVsLXJhdGlvLHJlc29sdXRpb25cIixcImllX2lkXCI6XCJtZWRpYXF1ZXJpZXNyZXNvbHV0aW9uZmVhdHVyZSxkcHB4dW5pdGZvcnRoZXJlc29sdXRpb25tZWRpYXF1ZXJ5XCIsXCJjaHJvbWVfaWRcIjpcIjU5NDQ1MDk2MTU1NzA5NDRcIn19fSIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJ0aXRsZVwiOlwiQ1NTMyBCYWNrZ3JvdW5kLWltYWdlIG9wdGlvbnNcIixcbiAgXCJkZXNjcmlwdGlvblwiOlwiTmV3IHByb3BlcnRpZXMgdG8gYWZmZWN0IGJhY2tncm91bmQgaW1hZ2VzLCBpbmNsdWRpbmcgYmFja2dyb3VuZC1jbGlwLCBiYWNrZ3JvdW5kLW9yaWdpbiBhbmQgYmFja2dyb3VuZC1zaXplXCIsXG4gIFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1iYWNrZ3JvdW5kLyNiYWNrZ3JvdW5kc1wiLFxuICBcInN0YXR1c1wiOlwiY3JcIixcbiAgXCJsaW5rc1wiOltcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL3d3dy5zdGFuZGFyZGlzdGEuY29tL2NzczMvY3NzMy1iYWNrZ3JvdW5kLXByb3BlcnRpZXNcIixcbiAgICAgIFwidGl0bGVcIjpcIkRldGFpbGVkIGNvbXBhdGliaWxpdHkgdGFibGVzIGFuZCBkZW1vc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL3d3dy5jc3MzZmlsZXMuY29tL2JhY2tncm91bmQvXCIsXG4gICAgICBcInRpdGxlXCI6XCJJbmZvcm1hdGlvbiBwYWdlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vbG91aXNyZW1pL2JhY2tncm91bmQtc2l6ZS1wb2x5ZmlsbFwiLFxuICAgICAgXCJ0aXRsZVwiOlwiUG9seWZpbGwgZm9yIElFNy04XCJcbiAgICB9XG4gIF0sXG4gIFwiYnVnc1wiOltcbiAgICB7XG4gICAgICBcImRlc2NyaXB0aW9uXCI6XCJpT1MgU2FmYXJpIGhhcyBidWdneSBiZWhhdmlvciB3aXRoIGBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO2Agb24gYSBwYWdlJ3MgYm9keS5cIlxuICAgIH1cbiAgXSxcbiAgXCJjYXRlZ29yaWVzXCI6W1xuICAgIFwiQ1NTM1wiXG4gIF0sXG4gIFwic3RhdHNcIjp7XG4gICAgXCJpZVwiOntcbiAgICAgIFwiNS41XCI6XCJuXCIsXG4gICAgICBcIjZcIjpcIm5cIixcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCIsXG4gICAgICBcIjlcIjpcInlcIixcbiAgICAgIFwiMTBcIjpcInlcIixcbiAgICAgIFwiMTFcIjpcInlcIlxuICAgIH0sXG4gICAgXCJmaXJlZm94XCI6e1xuICAgICAgXCIyXCI6XCJuXCIsXG4gICAgICBcIjNcIjpcIm5cIixcbiAgICAgIFwiMy41XCI6XCJuXCIsXG4gICAgICBcIjMuNlwiOlwiYSB4XCIsXG4gICAgICBcIjRcIjpcInlcIixcbiAgICAgIFwiNVwiOlwieVwiLFxuICAgICAgXCI2XCI6XCJ5XCIsXG4gICAgICBcIjdcIjpcInlcIixcbiAgICAgIFwiOFwiOlwieVwiLFxuICAgICAgXCI5XCI6XCJ5XCIsXG4gICAgICBcIjEwXCI6XCJ5XCIsXG4gICAgICBcIjExXCI6XCJ5XCIsXG4gICAgICBcIjEyXCI6XCJ5XCIsXG4gICAgICBcIjEzXCI6XCJ5XCIsXG4gICAgICBcIjE0XCI6XCJ5XCIsXG4gICAgICBcIjE1XCI6XCJ5XCIsXG4gICAgICBcIjE2XCI6XCJ5XCIsXG4gICAgICBcIjE3XCI6XCJ5XCIsXG4gICAgICBcIjE4XCI6XCJ5XCIsXG4gICAgICBcIjE5XCI6XCJ5XCIsXG4gICAgICBcIjIwXCI6XCJ5XCIsXG4gICAgICBcIjIxXCI6XCJ5XCIsXG4gICAgICBcIjIyXCI6XCJ5XCIsXG4gICAgICBcIjIzXCI6XCJ5XCIsXG4gICAgICBcIjI0XCI6XCJ5XCIsXG4gICAgICBcIjI1XCI6XCJ5XCIsXG4gICAgICBcIjI2XCI6XCJ5XCIsXG4gICAgICBcIjI3XCI6XCJ5XCIsXG4gICAgICBcIjI4XCI6XCJ5XCIsXG4gICAgICBcIjI5XCI6XCJ5XCIsXG4gICAgICBcIjMwXCI6XCJ5XCIsXG4gICAgICBcIjMxXCI6XCJ5XCIsXG4gICAgICBcIjMyXCI6XCJ5XCIsXG4gICAgICBcIjMzXCI6XCJ5XCIsXG4gICAgICBcIjM0XCI6XCJ5XCIsXG4gICAgICBcIjM1XCI6XCJ5XCIsXG4gICAgICBcIjM2XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiY2hyb21lXCI6e1xuICAgICAgXCI0XCI6XCJ5XCIsXG4gICAgICBcIjVcIjpcInlcIixcbiAgICAgIFwiNlwiOlwieVwiLFxuICAgICAgXCI3XCI6XCJ5XCIsXG4gICAgICBcIjhcIjpcInlcIixcbiAgICAgIFwiOVwiOlwieVwiLFxuICAgICAgXCIxMFwiOlwieVwiLFxuICAgICAgXCIxMVwiOlwieVwiLFxuICAgICAgXCIxMlwiOlwieVwiLFxuICAgICAgXCIxM1wiOlwieVwiLFxuICAgICAgXCIxNFwiOlwieVwiLFxuICAgICAgXCIxNVwiOlwieVwiLFxuICAgICAgXCIxNlwiOlwieVwiLFxuICAgICAgXCIxN1wiOlwieVwiLFxuICAgICAgXCIxOFwiOlwieVwiLFxuICAgICAgXCIxOVwiOlwieVwiLFxuICAgICAgXCIyMFwiOlwieVwiLFxuICAgICAgXCIyMVwiOlwieVwiLFxuICAgICAgXCIyMlwiOlwieVwiLFxuICAgICAgXCIyM1wiOlwieVwiLFxuICAgICAgXCIyNFwiOlwieVwiLFxuICAgICAgXCIyNVwiOlwieVwiLFxuICAgICAgXCIyNlwiOlwieVwiLFxuICAgICAgXCIyN1wiOlwieVwiLFxuICAgICAgXCIyOFwiOlwieVwiLFxuICAgICAgXCIyOVwiOlwieVwiLFxuICAgICAgXCIzMFwiOlwieVwiLFxuICAgICAgXCIzMVwiOlwieVwiLFxuICAgICAgXCIzMlwiOlwieVwiLFxuICAgICAgXCIzM1wiOlwieVwiLFxuICAgICAgXCIzNFwiOlwieVwiLFxuICAgICAgXCIzNVwiOlwieVwiLFxuICAgICAgXCIzNlwiOlwieVwiLFxuICAgICAgXCIzN1wiOlwieVwiLFxuICAgICAgXCIzOFwiOlwieVwiLFxuICAgICAgXCIzOVwiOlwieVwiLFxuICAgICAgXCI0MFwiOlwieVwiLFxuICAgICAgXCI0MVwiOlwieVwiXG4gICAgfSxcbiAgICBcInNhZmFyaVwiOntcbiAgICAgIFwiMy4xXCI6XCJhXCIsXG4gICAgICBcIjMuMlwiOlwiYVwiLFxuICAgICAgXCI0XCI6XCJhXCIsXG4gICAgICBcIjVcIjpcImFcIixcbiAgICAgIFwiNS4xXCI6XCJhXCIsXG4gICAgICBcIjZcIjpcImFcIixcbiAgICAgIFwiNi4xXCI6XCJhXCIsXG4gICAgICBcIjdcIjpcInlcIixcbiAgICAgIFwiNy4xXCI6XCJ5XCIsXG4gICAgICBcIjhcIjpcInlcIlxuICAgIH0sXG4gICAgXCJvcGVyYVwiOntcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCI5LjUtOS42XCI6XCJuXCIsXG4gICAgICBcIjEwLjAtMTAuMVwiOlwiYSB4XCIsXG4gICAgICBcIjEwLjVcIjpcInlcIixcbiAgICAgIFwiMTAuNlwiOlwieVwiLFxuICAgICAgXCIxMVwiOlwieVwiLFxuICAgICAgXCIxMS4xXCI6XCJ5XCIsXG4gICAgICBcIjExLjVcIjpcInlcIixcbiAgICAgIFwiMTEuNlwiOlwieVwiLFxuICAgICAgXCIxMlwiOlwieVwiLFxuICAgICAgXCIxMi4xXCI6XCJ5XCIsXG4gICAgICBcIjE1XCI6XCJ5XCIsXG4gICAgICBcIjE2XCI6XCJ5XCIsXG4gICAgICBcIjE3XCI6XCJ5XCIsXG4gICAgICBcIjE4XCI6XCJ5XCIsXG4gICAgICBcIjE5XCI6XCJ5XCIsXG4gICAgICBcIjIwXCI6XCJ5XCIsXG4gICAgICBcIjIxXCI6XCJ5XCIsXG4gICAgICBcIjIyXCI6XCJ5XCIsXG4gICAgICBcIjIzXCI6XCJ5XCIsXG4gICAgICBcIjI0XCI6XCJ5XCIsXG4gICAgICBcIjI1XCI6XCJ5XCIsXG4gICAgICBcIjI2XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiaW9zX3NhZlwiOntcbiAgICAgIFwiMy4yXCI6XCJhXCIsXG4gICAgICBcIjQuMC00LjFcIjpcImFcIixcbiAgICAgIFwiNC4yLTQuM1wiOlwiYVwiLFxuICAgICAgXCI1LjAtNS4xXCI6XCJhXCIsXG4gICAgICBcIjYuMC02LjFcIjpcImFcIixcbiAgICAgIFwiNy4wLTcuMVwiOlwieVwiLFxuICAgICAgXCI4XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwib3BfbWluaVwiOntcbiAgICAgIFwiNS4wLTguMFwiOlwiYVwiXG4gICAgfSxcbiAgICBcImFuZHJvaWRcIjp7XG4gICAgICBcIjIuMVwiOlwiYSB4XCIsXG4gICAgICBcIjIuMlwiOlwieSB4XCIsXG4gICAgICBcIjIuM1wiOlwieSB4XCIsXG4gICAgICBcIjNcIjpcInlcIixcbiAgICAgIFwiNFwiOlwieVwiLFxuICAgICAgXCI0LjFcIjpcInlcIixcbiAgICAgIFwiNC4yLTQuM1wiOlwieVwiLFxuICAgICAgXCI0LjRcIjpcInlcIixcbiAgICAgIFwiNC40LjNcIjpcInlcIlxuICAgIH0sXG4gICAgXCJiYlwiOntcbiAgICAgIFwiN1wiOlwieVwiLFxuICAgICAgXCIxMFwiOlwieVwiXG4gICAgfSxcbiAgICBcIm9wX21vYlwiOntcbiAgICAgIFwiMTBcIjpcInlcIixcbiAgICAgIFwiMTFcIjpcInlcIixcbiAgICAgIFwiMTEuMVwiOlwieVwiLFxuICAgICAgXCIxMS41XCI6XCJ5XCIsXG4gICAgICBcIjEyXCI6XCJ5XCIsXG4gICAgICBcIjEyLjFcIjpcInlcIixcbiAgICAgIFwiMjRcIjpcInlcIlxuICAgIH0sXG4gICAgXCJhbmRfY2hyXCI6e1xuICAgICAgXCIzOFwiOlwieVwiXG4gICAgfSxcbiAgICBcImFuZF9mZlwiOntcbiAgICAgIFwiMzJcIjpcInlcIlxuICAgIH0sXG4gICAgXCJpZV9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiYW5kX3VjXCI6e1xuICAgICAgXCI5LjlcIjpcInlcIlxuICAgIH1cbiAgfSxcbiAgXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IGluIE9wZXJhIE1pbmkgcmVmZXJzIHRvIG5vdCBzdXBwb3J0aW5nIGJhY2tncm91bmQgc2l6aW5nIG9yIGJhY2tncm91bmQgYXR0YWNobWVudHMuIEhvd2V2ZXIgT3BlcmEgTWluaSA3LjUgc3VwcG9ydHMgYmFja2dyb3VuZCBzaXppbmcgKGluY2x1ZGluZyBjb3ZlciBhbmQgY29udGFpbiB2YWx1ZXMpLlxcclxcblxcclxcblBhcnRpYWwgc3VwcG9ydCBpbiBTYWZhcmkgNiByZWZlcnMgdG8gbm90IHN1cHBvcnRpbmcgYmFja2dyb3VuZCBzaXppbmcgb2Zmc2V0IGZyb20gZWRnZXMgc3ludGF4LlwiLFxuICBcIm5vdGVzX2J5X251bVwiOntcbiAgICBcbiAgfSxcbiAgXCJ1c2FnZV9wZXJjX3lcIjo4Ni44NSxcbiAgXCJ1c2FnZV9wZXJjX2FcIjo1LjEzLFxuICBcInVjcHJlZml4XCI6ZmFsc2UsXG4gIFwicGFyZW50XCI6XCJcIixcbiAgXCJrZXl3b3Jkc1wiOlwiXCIsXG4gIFwiaWVfaWRcIjpcIlwiLFxuICBcImNocm9tZV9pZFwiOlwiXCIsXG4gIFwic2hvd25cIjp0cnVlXG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcInRpdGxlXCI6XCJDU1MzIEJvcmRlciBpbWFnZXNcIixcbiAgXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHVzaW5nIGltYWdlcyBmb3IgYm9yZGVyc1wiLFxuICBcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtYmFja2dyb3VuZC8jdGhlLWJvcmRlci1pbWFnZVwiLFxuICBcInN0YXR1c1wiOlwiY3JcIixcbiAgXCJsaW5rc1wiOltcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL3d3dy5jc3MzZmlsZXMuY29tL2JvcmRlci9cIixcbiAgICAgIFwidGl0bGVcIjpcIkluZm9ybWF0aW9uIHBhZ2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9wcm9wZXJ0aWVzL2JvcmRlci1pbWFnZVwiLFxuICAgICAgXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wiXG4gICAgfVxuICBdLFxuICBcImJ1Z3NcIjpbXG4gICAgXG4gIF0sXG4gIFwiY2F0ZWdvcmllc1wiOltcbiAgICBcIkNTUzNcIlxuICBdLFxuICBcInN0YXRzXCI6e1xuICAgIFwiaWVcIjp7XG4gICAgICBcIjUuNVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiLFxuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjEwXCI6XCJuXCIsXG4gICAgICBcIjExXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiZmlyZWZveFwiOntcbiAgICAgIFwiMlwiOlwiblwiLFxuICAgICAgXCIzXCI6XCJuXCIsXG4gICAgICBcIjMuNVwiOlwiYSB4XCIsXG4gICAgICBcIjMuNlwiOlwiYSB4XCIsXG4gICAgICBcIjRcIjpcImEgeFwiLFxuICAgICAgXCI1XCI6XCJhIHhcIixcbiAgICAgIFwiNlwiOlwiYSB4XCIsXG4gICAgICBcIjdcIjpcImEgeFwiLFxuICAgICAgXCI4XCI6XCJhIHhcIixcbiAgICAgIFwiOVwiOlwiYSB4XCIsXG4gICAgICBcIjEwXCI6XCJhIHhcIixcbiAgICAgIFwiMTFcIjpcImEgeFwiLFxuICAgICAgXCIxMlwiOlwiYSB4XCIsXG4gICAgICBcIjEzXCI6XCJhIHhcIixcbiAgICAgIFwiMTRcIjpcImEgeFwiLFxuICAgICAgXCIxNVwiOlwieVwiLFxuICAgICAgXCIxNlwiOlwieVwiLFxuICAgICAgXCIxN1wiOlwieVwiLFxuICAgICAgXCIxOFwiOlwieVwiLFxuICAgICAgXCIxOVwiOlwieVwiLFxuICAgICAgXCIyMFwiOlwieVwiLFxuICAgICAgXCIyMVwiOlwieVwiLFxuICAgICAgXCIyMlwiOlwieVwiLFxuICAgICAgXCIyM1wiOlwieVwiLFxuICAgICAgXCIyNFwiOlwieVwiLFxuICAgICAgXCIyNVwiOlwieVwiLFxuICAgICAgXCIyNlwiOlwieVwiLFxuICAgICAgXCIyN1wiOlwieVwiLFxuICAgICAgXCIyOFwiOlwieVwiLFxuICAgICAgXCIyOVwiOlwieVwiLFxuICAgICAgXCIzMFwiOlwieVwiLFxuICAgICAgXCIzMVwiOlwieVwiLFxuICAgICAgXCIzMlwiOlwieVwiLFxuICAgICAgXCIzM1wiOlwieVwiLFxuICAgICAgXCIzNFwiOlwieVwiLFxuICAgICAgXCIzNVwiOlwieVwiLFxuICAgICAgXCIzNlwiOlwieVwiXG4gICAgfSxcbiAgICBcImNocm9tZVwiOntcbiAgICAgIFwiNFwiOlwiYSB4XCIsXG4gICAgICBcIjVcIjpcImEgeFwiLFxuICAgICAgXCI2XCI6XCJhIHhcIixcbiAgICAgIFwiN1wiOlwiYSB4XCIsXG4gICAgICBcIjhcIjpcImEgeFwiLFxuICAgICAgXCI5XCI6XCJhIHhcIixcbiAgICAgIFwiMTBcIjpcImEgeFwiLFxuICAgICAgXCIxMVwiOlwiYSB4XCIsXG4gICAgICBcIjEyXCI6XCJhIHhcIixcbiAgICAgIFwiMTNcIjpcImEgeFwiLFxuICAgICAgXCIxNFwiOlwiYSB4XCIsXG4gICAgICBcIjE1XCI6XCJ5IHhcIixcbiAgICAgIFwiMTZcIjpcInlcIixcbiAgICAgIFwiMTdcIjpcInlcIixcbiAgICAgIFwiMThcIjpcInlcIixcbiAgICAgIFwiMTlcIjpcInlcIixcbiAgICAgIFwiMjBcIjpcInlcIixcbiAgICAgIFwiMjFcIjpcInlcIixcbiAgICAgIFwiMjJcIjpcInlcIixcbiAgICAgIFwiMjNcIjpcInlcIixcbiAgICAgIFwiMjRcIjpcInlcIixcbiAgICAgIFwiMjVcIjpcInlcIixcbiAgICAgIFwiMjZcIjpcInlcIixcbiAgICAgIFwiMjdcIjpcInlcIixcbiAgICAgIFwiMjhcIjpcInlcIixcbiAgICAgIFwiMjlcIjpcInlcIixcbiAgICAgIFwiMzBcIjpcInlcIixcbiAgICAgIFwiMzFcIjpcInlcIixcbiAgICAgIFwiMzJcIjpcInlcIixcbiAgICAgIFwiMzNcIjpcInlcIixcbiAgICAgIFwiMzRcIjpcInlcIixcbiAgICAgIFwiMzVcIjpcInlcIixcbiAgICAgIFwiMzZcIjpcInlcIixcbiAgICAgIFwiMzdcIjpcInlcIixcbiAgICAgIFwiMzhcIjpcInlcIixcbiAgICAgIFwiMzlcIjpcInlcIixcbiAgICAgIFwiNDBcIjpcInlcIixcbiAgICAgIFwiNDFcIjpcInlcIlxuICAgIH0sXG4gICAgXCJzYWZhcmlcIjp7XG4gICAgICBcIjMuMVwiOlwiYSB4XCIsXG4gICAgICBcIjMuMlwiOlwiYSB4XCIsXG4gICAgICBcIjRcIjpcImEgeFwiLFxuICAgICAgXCI1XCI6XCJhIHhcIixcbiAgICAgIFwiNS4xXCI6XCJhIHhcIixcbiAgICAgIFwiNlwiOlwieVwiLFxuICAgICAgXCI2LjFcIjpcInlcIixcbiAgICAgIFwiN1wiOlwieVwiLFxuICAgICAgXCI3LjFcIjpcInlcIixcbiAgICAgIFwiOFwiOlwieVwiXG4gICAgfSxcbiAgICBcIm9wZXJhXCI6e1xuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjkuNS05LjZcIjpcIm5cIixcbiAgICAgIFwiMTAuMC0xMC4xXCI6XCJuXCIsXG4gICAgICBcIjEwLjVcIjpcImFcIixcbiAgICAgIFwiMTAuNlwiOlwiYVwiLFxuICAgICAgXCIxMVwiOlwiYSB4XCIsXG4gICAgICBcIjExLjFcIjpcImEgeFwiLFxuICAgICAgXCIxMS41XCI6XCJhIHhcIixcbiAgICAgIFwiMTEuNlwiOlwiYSB4XCIsXG4gICAgICBcIjEyXCI6XCJhIHhcIixcbiAgICAgIFwiMTIuMVwiOlwiYSB4XCIsXG4gICAgICBcIjE1XCI6XCJ5XCIsXG4gICAgICBcIjE2XCI6XCJ5XCIsXG4gICAgICBcIjE3XCI6XCJ5XCIsXG4gICAgICBcIjE4XCI6XCJ5XCIsXG4gICAgICBcIjE5XCI6XCJ5XCIsXG4gICAgICBcIjIwXCI6XCJ5XCIsXG4gICAgICBcIjIxXCI6XCJ5XCIsXG4gICAgICBcIjIyXCI6XCJ5XCIsXG4gICAgICBcIjIzXCI6XCJ5XCIsXG4gICAgICBcIjI0XCI6XCJ5XCIsXG4gICAgICBcIjI1XCI6XCJ5XCIsXG4gICAgICBcIjI2XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiaW9zX3NhZlwiOntcbiAgICAgIFwiMy4yXCI6XCJhIHhcIixcbiAgICAgIFwiNC4wLTQuMVwiOlwiYSB4XCIsXG4gICAgICBcIjQuMi00LjNcIjpcImEgeFwiLFxuICAgICAgXCI1LjAtNS4xXCI6XCJhIHhcIixcbiAgICAgIFwiNi4wLTYuMVwiOlwieVwiLFxuICAgICAgXCI3LjAtNy4xXCI6XCJ5XCIsXG4gICAgICBcIjhcIjpcInlcIlxuICAgIH0sXG4gICAgXCJvcF9taW5pXCI6e1xuICAgICAgXCI1LjAtOC4wXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kcm9pZFwiOntcbiAgICAgIFwiMi4xXCI6XCJhIHhcIixcbiAgICAgIFwiMi4yXCI6XCJhIHhcIixcbiAgICAgIFwiMi4zXCI6XCJhIHhcIixcbiAgICAgIFwiM1wiOlwiYSB4XCIsXG4gICAgICBcIjRcIjpcImEgeFwiLFxuICAgICAgXCI0LjFcIjpcImEgeFwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJhIHhcIixcbiAgICAgIFwiNC40XCI6XCJ5XCIsXG4gICAgICBcIjQuNC4zXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiYmJcIjp7XG4gICAgICBcIjdcIjpcImEgeFwiLFxuICAgICAgXCIxMFwiOlwieVwiXG4gICAgfSxcbiAgICBcIm9wX21vYlwiOntcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcImEgeFwiLFxuICAgICAgXCIxMS4xXCI6XCJhIHhcIixcbiAgICAgIFwiMTEuNVwiOlwiYSB4XCIsXG4gICAgICBcIjEyXCI6XCJhIHhcIixcbiAgICAgIFwiMTIuMVwiOlwiYSB4XCIsXG4gICAgICBcIjI0XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiYW5kX2NoclwiOntcbiAgICAgIFwiMzhcIjpcInlcIlxuICAgIH0sXG4gICAgXCJhbmRfZmZcIjp7XG4gICAgICBcIjMyXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiaWVfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwiblwiXG4gICAgfSxcbiAgICBcImFuZF91Y1wiOntcbiAgICAgIFwiOS45XCI6XCJ5XCJcbiAgICB9XG4gIH0sXG4gIFwibm90ZXNcIjpcIk5vdGUgdGhhdCBib3RoIHRoZSBib3JkZXItc3R5bGUgYW5kIGJvcmRlci13aWR0aCBtdXN0IGJlIHNwZWNpZmllZCBmb3IgYm9yZGVyLWltYWdlcyB0byB3b3JrIGFjY29yZGluZyB0byBzcGVjLCB0aG91Z2ggb2xkZXIgaW1wbGVtZW50YXRpb25zIG1heSBub3QgaGF2ZSB0aGlzIHJlcXVpcmVtZW50LiBQYXJ0aWFsIHN1cHBvcnQgcmVmZXJzIHRvIHN1cHBvcnRpbmcgdGhlIHNob3J0aGFuZCBzeW50YXgsIGJ1dCBub3QgdGhlIGluZGl2aWR1YWwgcHJvcGVydGllcyAoYm9yZGVyLWltYWdlLXNvdXJjZSwgYm9yZGVyLWltYWdlLXNsaWNlLCBldGMpLiBcIixcbiAgXCJub3Rlc19ieV9udW1cIjp7XG4gICAgXG4gIH0sXG4gIFwidXNhZ2VfcGVyY195XCI6NzYuNDIsXG4gIFwidXNhZ2VfcGVyY19hXCI6Ny4zLFxuICBcInVjcHJlZml4XCI6ZmFsc2UsXG4gIFwicGFyZW50XCI6XCJcIixcbiAgXCJrZXl3b3Jkc1wiOlwiXCIsXG4gIFwiaWVfaWRcIjpcIlwiLFxuICBcImNocm9tZV9pZFwiOlwiXCIsXG4gIFwic2hvd25cIjp0cnVlXG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcInRpdGxlXCI6XCJDU1MzIEJvcmRlci1yYWRpdXMgKHJvdW5kZWQgY29ybmVycylcIixcbiAgXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIG1ha2luZyB0aGUgYm9yZGVyIGNvcm5lcnMgcm91bmRcIixcbiAgXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWJhY2tncm91bmQvI3RoZS1ib3JkZXItcmFkaXVzXCIsXG4gIFwic3RhdHVzXCI6XCJjclwiLFxuICBcImxpbmtzXCI6W1xuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vYm9yZGVyLXJhZGl1cy5jb21cIixcbiAgICAgIFwidGl0bGVcIjpcIkJvcmRlci1yYWRpdXMgQ1NTIEdlbmVyYXRvclwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL211ZGRsZWRyYW1ibGluZ3MuY29tL3RhYmxlLW9mLWNzczMtYm9yZGVyLXJhZGl1cy1jb21wbGlhbmNlXCIsXG4gICAgICBcInRpdGxlXCI6XCJEZXRhaWxlZCBjb21wbGlhbmNlIHRhYmxlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vd3d3LmNzczNmaWxlcy5jb20vYm9yZGVyLyNib3JkZXJyYWRpdXNcIixcbiAgICAgIFwidGl0bGVcIjpcIkluZm9ybWF0aW9uIHBhZ2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9jc3MzcGllLmNvbS9cIixcbiAgICAgIFwidGl0bGVcIjpcIlBvbHlmaWxsIHdoaWNoIGluY2x1ZGVzIGJvcmRlci1yYWRpdXNcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9wcm9wZXJ0aWVzL2JvcmRlci1yYWRpdXNcIixcbiAgICAgIFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIlxuICAgIH1cbiAgXSxcbiAgXCJidWdzXCI6W1xuICAgIHtcbiAgICAgIFwiZGVzY3JpcHRpb25cIjpcIlNhZmFyaSBkb2VzIG5vdCBhcHBseSBgYm9yZGVyLXJhZGl1c2AgY29ycmVjdGx5IHRvIGltYWdlIGJvcmRlcnM6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xLzE3MjAyMTI4XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZGVzY3JpcHRpb25cIjpcIkFuZHJvaWQgQnJvd3NlciAyLjMgZG9lcyBub3Qgc3VwcG9ydCAlIHZhbHVlIGZvciBgYm9yZGVyLXJhZGl1c2AuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZGVzY3JpcHRpb25cIjpcIkJvcmRlci1yYWRpdXMgZG9lcyBub3Qgd29yayBvbiBmaWVsZHNldCBlbGVtZW50cyBpbiBJRTkuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZGVzY3JpcHRpb25cIjpcIlRoZSBzdG9jayBicm93c2VyIG9uIHRoZSBTYW1zdW5nIEdhbGF4eSBTNCB3aXRoIEFuZHJvaWQgNC4yIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBib3JkZXItcmFkaXVzYCBzaG9ydGhhbmQgcHJvcGVydHkgYnV0IGRvZXMgc3VwcG9ydCB0aGUgbG9uZy1oYW5kIHByb3BlcnRpZXMgZm9yIGVhY2ggY29ybmVyIGxpa2UgYGJvcmRlci10b3AtbGVmdC1yYWRpdXNgLlwiXG4gICAgfVxuICBdLFxuICBcImNhdGVnb3JpZXNcIjpbXG4gICAgXCJDU1MzXCJcbiAgXSxcbiAgXCJzdGF0c1wiOntcbiAgICBcImllXCI6e1xuICAgICAgXCI1LjVcIjpcIm5cIixcbiAgICAgIFwiNlwiOlwiblwiLFxuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjhcIjpcIm5cIixcbiAgICAgIFwiOVwiOlwieVwiLFxuICAgICAgXCIxMFwiOlwieVwiLFxuICAgICAgXCIxMVwiOlwieVwiXG4gICAgfSxcbiAgICBcImZpcmVmb3hcIjp7XG4gICAgICBcIjJcIjpcImEgeFwiLFxuICAgICAgXCIzXCI6XCJ5IHhcIixcbiAgICAgIFwiMy41XCI6XCJ5IHhcIixcbiAgICAgIFwiMy42XCI6XCJ5IHhcIixcbiAgICAgIFwiNFwiOlwieVwiLFxuICAgICAgXCI1XCI6XCJ5XCIsXG4gICAgICBcIjZcIjpcInlcIixcbiAgICAgIFwiN1wiOlwieVwiLFxuICAgICAgXCI4XCI6XCJ5XCIsXG4gICAgICBcIjlcIjpcInlcIixcbiAgICAgIFwiMTBcIjpcInlcIixcbiAgICAgIFwiMTFcIjpcInlcIixcbiAgICAgIFwiMTJcIjpcInlcIixcbiAgICAgIFwiMTNcIjpcInlcIixcbiAgICAgIFwiMTRcIjpcInlcIixcbiAgICAgIFwiMTVcIjpcInlcIixcbiAgICAgIFwiMTZcIjpcInlcIixcbiAgICAgIFwiMTdcIjpcInlcIixcbiAgICAgIFwiMThcIjpcInlcIixcbiAgICAgIFwiMTlcIjpcInlcIixcbiAgICAgIFwiMjBcIjpcInlcIixcbiAgICAgIFwiMjFcIjpcInlcIixcbiAgICAgIFwiMjJcIjpcInlcIixcbiAgICAgIFwiMjNcIjpcInlcIixcbiAgICAgIFwiMjRcIjpcInlcIixcbiAgICAgIFwiMjVcIjpcInlcIixcbiAgICAgIFwiMjZcIjpcInlcIixcbiAgICAgIFwiMjdcIjpcInlcIixcbiAgICAgIFwiMjhcIjpcInlcIixcbiAgICAgIFwiMjlcIjpcInlcIixcbiAgICAgIFwiMzBcIjpcInlcIixcbiAgICAgIFwiMzFcIjpcInlcIixcbiAgICAgIFwiMzJcIjpcInlcIixcbiAgICAgIFwiMzNcIjpcInlcIixcbiAgICAgIFwiMzRcIjpcInlcIixcbiAgICAgIFwiMzVcIjpcInlcIixcbiAgICAgIFwiMzZcIjpcInlcIlxuICAgIH0sXG4gICAgXCJjaHJvbWVcIjp7XG4gICAgICBcIjRcIjpcInkgeFwiLFxuICAgICAgXCI1XCI6XCJ5XCIsXG4gICAgICBcIjZcIjpcInlcIixcbiAgICAgIFwiN1wiOlwieVwiLFxuICAgICAgXCI4XCI6XCJ5XCIsXG4gICAgICBcIjlcIjpcInlcIixcbiAgICAgIFwiMTBcIjpcInlcIixcbiAgICAgIFwiMTFcIjpcInlcIixcbiAgICAgIFwiMTJcIjpcInlcIixcbiAgICAgIFwiMTNcIjpcInlcIixcbiAgICAgIFwiMTRcIjpcInlcIixcbiAgICAgIFwiMTVcIjpcInlcIixcbiAgICAgIFwiMTZcIjpcInlcIixcbiAgICAgIFwiMTdcIjpcInlcIixcbiAgICAgIFwiMThcIjpcInlcIixcbiAgICAgIFwiMTlcIjpcInlcIixcbiAgICAgIFwiMjBcIjpcInlcIixcbiAgICAgIFwiMjFcIjpcInlcIixcbiAgICAgIFwiMjJcIjpcInlcIixcbiAgICAgIFwiMjNcIjpcInlcIixcbiAgICAgIFwiMjRcIjpcInlcIixcbiAgICAgIFwiMjVcIjpcInlcIixcbiAgICAgIFwiMjZcIjpcInlcIixcbiAgICAgIFwiMjdcIjpcInlcIixcbiAgICAgIFwiMjhcIjpcInlcIixcbiAgICAgIFwiMjlcIjpcInlcIixcbiAgICAgIFwiMzBcIjpcInlcIixcbiAgICAgIFwiMzFcIjpcInlcIixcbiAgICAgIFwiMzJcIjpcInlcIixcbiAgICAgIFwiMzNcIjpcInlcIixcbiAgICAgIFwiMzRcIjpcInlcIixcbiAgICAgIFwiMzVcIjpcInlcIixcbiAgICAgIFwiMzZcIjpcInlcIixcbiAgICAgIFwiMzdcIjpcInlcIixcbiAgICAgIFwiMzhcIjpcInlcIixcbiAgICAgIFwiMzlcIjpcInlcIixcbiAgICAgIFwiNDBcIjpcInlcIixcbiAgICAgIFwiNDFcIjpcInlcIlxuICAgIH0sXG4gICAgXCJzYWZhcmlcIjp7XG4gICAgICBcIjMuMVwiOlwieSB4XCIsXG4gICAgICBcIjMuMlwiOlwieSB4XCIsXG4gICAgICBcIjRcIjpcInkgeFwiLFxuICAgICAgXCI1XCI6XCJ5XCIsXG4gICAgICBcIjUuMVwiOlwieVwiLFxuICAgICAgXCI2XCI6XCJ5XCIsXG4gICAgICBcIjYuMVwiOlwieVwiLFxuICAgICAgXCI3XCI6XCJ5XCIsXG4gICAgICBcIjcuMVwiOlwieVwiLFxuICAgICAgXCI4XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwib3BlcmFcIjp7XG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiOS41LTkuNlwiOlwiblwiLFxuICAgICAgXCIxMC4wLTEwLjFcIjpcIm5cIixcbiAgICAgIFwiMTAuNVwiOlwieVwiLFxuICAgICAgXCIxMC42XCI6XCJ5XCIsXG4gICAgICBcIjExXCI6XCJ5XCIsXG4gICAgICBcIjExLjFcIjpcInlcIixcbiAgICAgIFwiMTEuNVwiOlwieVwiLFxuICAgICAgXCIxMS42XCI6XCJ5XCIsXG4gICAgICBcIjEyXCI6XCJ5XCIsXG4gICAgICBcIjEyLjFcIjpcInlcIixcbiAgICAgIFwiMTVcIjpcInlcIixcbiAgICAgIFwiMTZcIjpcInlcIixcbiAgICAgIFwiMTdcIjpcInlcIixcbiAgICAgIFwiMThcIjpcInlcIixcbiAgICAgIFwiMTlcIjpcInlcIixcbiAgICAgIFwiMjBcIjpcInlcIixcbiAgICAgIFwiMjFcIjpcInlcIixcbiAgICAgIFwiMjJcIjpcInlcIixcbiAgICAgIFwiMjNcIjpcInlcIixcbiAgICAgIFwiMjRcIjpcInlcIixcbiAgICAgIFwiMjVcIjpcInlcIixcbiAgICAgIFwiMjZcIjpcInlcIlxuICAgIH0sXG4gICAgXCJpb3Nfc2FmXCI6e1xuICAgICAgXCIzLjJcIjpcInkgeFwiLFxuICAgICAgXCI0LjAtNC4xXCI6XCJ5XCIsXG4gICAgICBcIjQuMi00LjNcIjpcInlcIixcbiAgICAgIFwiNS4wLTUuMVwiOlwieVwiLFxuICAgICAgXCI2LjAtNi4xXCI6XCJ5XCIsXG4gICAgICBcIjcuMC03LjFcIjpcInlcIixcbiAgICAgIFwiOFwiOlwieVwiXG4gICAgfSxcbiAgICBcIm9wX21pbmlcIjp7XG4gICAgICBcIjUuMC04LjBcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJhbmRyb2lkXCI6e1xuICAgICAgXCIyLjFcIjpcInkgeFwiLFxuICAgICAgXCIyLjJcIjpcInlcIixcbiAgICAgIFwiMi4zXCI6XCJ5XCIsXG4gICAgICBcIjNcIjpcInlcIixcbiAgICAgIFwiNFwiOlwieVwiLFxuICAgICAgXCI0LjFcIjpcInlcIixcbiAgICAgIFwiNC4yLTQuM1wiOlwieVwiLFxuICAgICAgXCI0LjRcIjpcInlcIixcbiAgICAgIFwiNC40LjNcIjpcInlcIlxuICAgIH0sXG4gICAgXCJiYlwiOntcbiAgICAgIFwiN1wiOlwieVwiLFxuICAgICAgXCIxMFwiOlwieVwiXG4gICAgfSxcbiAgICBcIm9wX21vYlwiOntcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcInlcIixcbiAgICAgIFwiMTEuMVwiOlwieVwiLFxuICAgICAgXCIxMS41XCI6XCJ5XCIsXG4gICAgICBcIjEyXCI6XCJ5XCIsXG4gICAgICBcIjEyLjFcIjpcInlcIixcbiAgICAgIFwiMjRcIjpcInlcIlxuICAgIH0sXG4gICAgXCJhbmRfY2hyXCI6e1xuICAgICAgXCIzOFwiOlwieVwiXG4gICAgfSxcbiAgICBcImFuZF9mZlwiOntcbiAgICAgIFwiMzJcIjpcInlcIlxuICAgIH0sXG4gICAgXCJpZV9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiYW5kX3VjXCI6e1xuICAgICAgXCI5LjlcIjpcInlcIlxuICAgIH1cbiAgfSxcbiAgXCJub3Rlc1wiOlwiXCIsXG4gIFwibm90ZXNfYnlfbnVtXCI6e1xuICAgIFxuICB9LFxuICBcInVzYWdlX3BlcmNfeVwiOjg4LjkxLFxuICBcInVzYWdlX3BlcmNfYVwiOjAuMDEsXG4gIFwidWNwcmVmaXhcIjpmYWxzZSxcbiAgXCJwYXJlbnRcIjpcIlwiLFxuICBcImtleXdvcmRzXCI6XCJyb3VuZGVkY29ybmVycywgYm9yZGVyIHJhZGl1cywtbW96LWJvcmRlci1yYWRpdXNcIixcbiAgXCJpZV9pZFwiOlwiXCIsXG4gIFwiY2hyb21lX2lkXCI6XCJcIixcbiAgXCJzaG93blwiOnRydWVcbn0iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwidGl0bGVcIjpcImNhbGMoKSBhcyBDU1MgdW5pdCB2YWx1ZVwiLFxuICBcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgYWxsb3dpbmcgY2FsY3VsYXRlZCB2YWx1ZXMgZm9yIGxlbmd0aCB1bml0cywgaS5lLiBgd2lkdGg6IGNhbGMoMTAwJSAtIDNlbSlgXCIsXG4gIFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy12YWx1ZXMvI2NhbGNcIixcbiAgXCJzdGF0dXNcIjpcImNyXCIsXG4gIFwibGlua3NcIjpbXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9oYWNrcy5tb3ppbGxhLm9yZy8yMDEwLzA2L2NzczMtY2FsYy9cIixcbiAgICAgIFwidGl0bGVcIjpcIk1vemlsbGEgSGFja3MgYXJ0aWNsZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vQ1NTLy1tb3otY2FsY1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9mdW5jdGlvbnMvY2FsY1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wiXG4gICAgfVxuICBdLFxuICBcImJ1Z3NcIjpbXG4gICAge1xuICAgICAgXCJkZXNjcmlwdGlvblwiOlwiU2FmYXJpIDcuMCBhbmQgb2xkZXIgYW5kIENocm9tZSAyNiBhbmQgb2xkZXIgZG9uJ3Qgc3VwcG9ydCB2aWV3cG9ydCB1bml0cyBpbiBgY2FsYygpYCBleHByZXNzaW9ucyAoZml4ZWQgc2luY2UgdGhlbikuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZGVzY3JpcHRpb25cIjpcImBjYWxjKClgIGRvZXNuJ3Qgd29yayBbaW5zaWRlIGEgdHJhbnNmb3JtIGluIElFXShodHRwOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvODE0MzgwL2NzczMtdXNpbmctY2FsYy1pbnNpZGUtYS10cmFuc2Zvcm0taXMtaW52YWxpZClcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJkZXNjcmlwdGlvblwiOlwiSUU5IGFwcGVhcnMgdG8gaWdub3JlIGBjYWxjKClgIGV4cHJlc3Npb25zIHdoZW4gYGRpc3BsYXk6dGFibGVgIGlzIHVzZWQuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZGVzY3JpcHRpb25cIjpcIlNhZmFyaSA2IGhhcyBhIGJ1ZyB3aGVyZSBhbiBlbGVtZW50IHdpdGggYSB3aWR0aCBkZWZpbmVkIHVzaW5nIGBjYWxjKClgIGhhcyBpdHMgd2lkdGggcmVzZXQgd2hlbiBjaGFuZ2luZyB0aGUgaGVpZ2h0IHVzaW5nIEpTIChmaXhlZCBpbiBTYWZhcmkgNykuXCJcbiAgICB9XG4gIF0sXG4gIFwiY2F0ZWdvcmllc1wiOltcbiAgICBcIkNTUzNcIlxuICBdLFxuICBcInN0YXRzXCI6e1xuICAgIFwiaWVcIjp7XG4gICAgICBcIjUuNVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiLFxuICAgICAgXCI5XCI6XCJhXCIsXG4gICAgICBcIjEwXCI6XCJ5XCIsXG4gICAgICBcIjExXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiZmlyZWZveFwiOntcbiAgICAgIFwiMlwiOlwiblwiLFxuICAgICAgXCIzXCI6XCJuXCIsXG4gICAgICBcIjMuNVwiOlwiblwiLFxuICAgICAgXCIzLjZcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwieSB4XCIsXG4gICAgICBcIjVcIjpcInkgeFwiLFxuICAgICAgXCI2XCI6XCJ5IHhcIixcbiAgICAgIFwiN1wiOlwieSB4XCIsXG4gICAgICBcIjhcIjpcInkgeFwiLFxuICAgICAgXCI5XCI6XCJ5IHhcIixcbiAgICAgIFwiMTBcIjpcInkgeFwiLFxuICAgICAgXCIxMVwiOlwieSB4XCIsXG4gICAgICBcIjEyXCI6XCJ5IHhcIixcbiAgICAgIFwiMTNcIjpcInkgeFwiLFxuICAgICAgXCIxNFwiOlwieSB4XCIsXG4gICAgICBcIjE1XCI6XCJ5IHhcIixcbiAgICAgIFwiMTZcIjpcInlcIixcbiAgICAgIFwiMTdcIjpcInlcIixcbiAgICAgIFwiMThcIjpcInlcIixcbiAgICAgIFwiMTlcIjpcInlcIixcbiAgICAgIFwiMjBcIjpcInlcIixcbiAgICAgIFwiMjFcIjpcInlcIixcbiAgICAgIFwiMjJcIjpcInlcIixcbiAgICAgIFwiMjNcIjpcInlcIixcbiAgICAgIFwiMjRcIjpcInlcIixcbiAgICAgIFwiMjVcIjpcInlcIixcbiAgICAgIFwiMjZcIjpcInlcIixcbiAgICAgIFwiMjdcIjpcInlcIixcbiAgICAgIFwiMjhcIjpcInlcIixcbiAgICAgIFwiMjlcIjpcInlcIixcbiAgICAgIFwiMzBcIjpcInlcIixcbiAgICAgIFwiMzFcIjpcInlcIixcbiAgICAgIFwiMzJcIjpcInlcIixcbiAgICAgIFwiMzNcIjpcInlcIixcbiAgICAgIFwiMzRcIjpcInlcIixcbiAgICAgIFwiMzVcIjpcInlcIixcbiAgICAgIFwiMzZcIjpcInlcIlxuICAgIH0sXG4gICAgXCJjaHJvbWVcIjp7XG4gICAgICBcIjRcIjpcIm5cIixcbiAgICAgIFwiNVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiLFxuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjEwXCI6XCJuXCIsXG4gICAgICBcIjExXCI6XCJuXCIsXG4gICAgICBcIjEyXCI6XCJuXCIsXG4gICAgICBcIjEzXCI6XCJuXCIsXG4gICAgICBcIjE0XCI6XCJuXCIsXG4gICAgICBcIjE1XCI6XCJuXCIsXG4gICAgICBcIjE2XCI6XCJuXCIsXG4gICAgICBcIjE3XCI6XCJuXCIsXG4gICAgICBcIjE4XCI6XCJuXCIsXG4gICAgICBcIjE5XCI6XCJ5IHhcIixcbiAgICAgIFwiMjBcIjpcInkgeFwiLFxuICAgICAgXCIyMVwiOlwieSB4XCIsXG4gICAgICBcIjIyXCI6XCJ5IHhcIixcbiAgICAgIFwiMjNcIjpcInkgeFwiLFxuICAgICAgXCIyNFwiOlwieSB4XCIsXG4gICAgICBcIjI1XCI6XCJ5IHhcIixcbiAgICAgIFwiMjZcIjpcInlcIixcbiAgICAgIFwiMjdcIjpcInlcIixcbiAgICAgIFwiMjhcIjpcInlcIixcbiAgICAgIFwiMjlcIjpcInlcIixcbiAgICAgIFwiMzBcIjpcInlcIixcbiAgICAgIFwiMzFcIjpcInlcIixcbiAgICAgIFwiMzJcIjpcInlcIixcbiAgICAgIFwiMzNcIjpcInlcIixcbiAgICAgIFwiMzRcIjpcInlcIixcbiAgICAgIFwiMzVcIjpcInlcIixcbiAgICAgIFwiMzZcIjpcInlcIixcbiAgICAgIFwiMzdcIjpcInlcIixcbiAgICAgIFwiMzhcIjpcInlcIixcbiAgICAgIFwiMzlcIjpcInlcIixcbiAgICAgIFwiNDBcIjpcInlcIixcbiAgICAgIFwiNDFcIjpcInlcIlxuICAgIH0sXG4gICAgXCJzYWZhcmlcIjp7XG4gICAgICBcIjMuMVwiOlwiblwiLFxuICAgICAgXCIzLjJcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI1XCI6XCJuXCIsXG4gICAgICBcIjUuMVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJ5IHhcIixcbiAgICAgIFwiNi4xXCI6XCJ5XCIsXG4gICAgICBcIjdcIjpcInlcIixcbiAgICAgIFwiNy4xXCI6XCJ5XCIsXG4gICAgICBcIjhcIjpcInlcIlxuICAgIH0sXG4gICAgXCJvcGVyYVwiOntcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCI5LjUtOS42XCI6XCJuXCIsXG4gICAgICBcIjEwLjAtMTAuMVwiOlwiblwiLFxuICAgICAgXCIxMC41XCI6XCJuXCIsXG4gICAgICBcIjEwLjZcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTEuMVwiOlwiblwiLFxuICAgICAgXCIxMS41XCI6XCJuXCIsXG4gICAgICBcIjExLjZcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcIm5cIixcbiAgICAgIFwiMTIuMVwiOlwiblwiLFxuICAgICAgXCIxNVwiOlwieVwiLFxuICAgICAgXCIxNlwiOlwieVwiLFxuICAgICAgXCIxN1wiOlwieVwiLFxuICAgICAgXCIxOFwiOlwieVwiLFxuICAgICAgXCIxOVwiOlwieVwiLFxuICAgICAgXCIyMFwiOlwieVwiLFxuICAgICAgXCIyMVwiOlwieVwiLFxuICAgICAgXCIyMlwiOlwieVwiLFxuICAgICAgXCIyM1wiOlwieVwiLFxuICAgICAgXCIyNFwiOlwieVwiLFxuICAgICAgXCIyNVwiOlwieVwiLFxuICAgICAgXCIyNlwiOlwieVwiXG4gICAgfSxcbiAgICBcImlvc19zYWZcIjp7XG4gICAgICBcIjMuMlwiOlwiblwiLFxuICAgICAgXCI0LjAtNC4xXCI6XCJuXCIsXG4gICAgICBcIjQuMi00LjNcIjpcIm5cIixcbiAgICAgIFwiNS4wLTUuMVwiOlwiblwiLFxuICAgICAgXCI2LjAtNi4xXCI6XCJ5IHhcIixcbiAgICAgIFwiNy4wLTcuMVwiOlwieVwiLFxuICAgICAgXCI4XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwib3BfbWluaVwiOntcbiAgICAgIFwiNS4wLTguMFwiOlwiblwiXG4gICAgfSxcbiAgICBcImFuZHJvaWRcIjp7XG4gICAgICBcIjIuMVwiOlwiblwiLFxuICAgICAgXCIyLjJcIjpcIm5cIixcbiAgICAgIFwiMi4zXCI6XCJuXCIsXG4gICAgICBcIjNcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI0LjFcIjpcIm5cIixcbiAgICAgIFwiNC4yLTQuM1wiOlwiblwiLFxuICAgICAgXCI0LjRcIjpcInlcIixcbiAgICAgIFwiNC40LjNcIjpcInlcIlxuICAgIH0sXG4gICAgXCJiYlwiOntcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCIxMFwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwib3BfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMS4xXCI6XCJuXCIsXG4gICAgICBcIjExLjVcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcIm5cIixcbiAgICAgIFwiMTIuMVwiOlwiblwiLFxuICAgICAgXCIyNFwiOlwieVwiXG4gICAgfSxcbiAgICBcImFuZF9jaHJcIjp7XG4gICAgICBcIjM4XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiYW5kX2ZmXCI6e1xuICAgICAgXCIzMlwiOlwieVwiXG4gICAgfSxcbiAgICBcImllX21vYlwiOntcbiAgICAgIFwiMTBcIjpcInlcIlxuICAgIH0sXG4gICAgXCJhbmRfdWNcIjp7XG4gICAgICBcIjkuOVwiOlwiblwiXG4gICAgfVxuICB9LFxuICBcIm5vdGVzXCI6XCJTdXBwb3J0IGNhbiBiZSBzb21ld2hhdCBlbXVsYXRlZCBpbiBvbGRlciB2ZXJzaW9ucyBvZiBJRSB1c2luZyB0aGUgbm9uLXN0YW5kYXJkIGBleHByZXNzaW9uKClgIHN5bnRheC4gUGFydGlhbCBzdXBwb3J0IGluIElFOSByZWZlcnMgdG8gdGhlIGJyb3dzZXIgY3Jhc2hpbmcgd2hlbiB1c2VkIGFzIGEgYGJhY2tncm91bmQtcG9zaXRpb25gIHZhbHVlLlwiLFxuICBcIm5vdGVzX2J5X251bVwiOntcbiAgICBcbiAgfSxcbiAgXCJ1c2FnZV9wZXJjX3lcIjo3Ni4zMixcbiAgXCJ1c2FnZV9wZXJjX2FcIjoyLjM5LFxuICBcInVjcHJlZml4XCI6ZmFsc2UsXG4gIFwicGFyZW50XCI6XCJcIixcbiAgXCJrZXl3b3Jkc1wiOlwiXCIsXG4gIFwiaWVfaWRcIjpcImNzc2NhbGNcIixcbiAgXCJjaHJvbWVfaWRcIjpcIjU3NjUyNDE0Mzg3MzIyODhcIixcbiAgXCJzaG93blwiOnRydWVcbn0iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwidGl0bGVcIjpcIkNTUzMgQW5pbWF0aW9uXCIsXG4gIFwiZGVzY3JpcHRpb25cIjpcIkNvbXBsZXggbWV0aG9kIG9mIGFuaW1hdGluZyBjZXJ0YWluIHByb3BlcnRpZXMgb2YgYW4gZWxlbWVudFwiLFxuICBcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtYW5pbWF0aW9ucy9cIixcbiAgXCJzdGF0dXNcIjpcIndkXCIsXG4gIFwibGlua3NcIjpbXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9yb2JlcnRueW1hbi5jb20vMjAxMC8wNS8wNi9jc3MzLWFuaW1hdGlvbnMvXCIsXG4gICAgICBcInRpdGxlXCI6XCJCbG9nIHBvc3Qgb24gdXNhZ2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly93d3cuY3NzM2ZpbGVzLmNvbS9hbmltYXRpb24vXCIsXG4gICAgICBcInRpdGxlXCI6XCJJbmZvcm1hdGlvbiBwYWdlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvcHJvcGVydGllcy9hbmltYXRpb25zXCIsXG4gICAgICBcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJcbiAgICB9XG4gIF0sXG4gIFwiYnVnc1wiOltcbiAgICB7XG4gICAgICBcImRlc2NyaXB0aW9uXCI6XCInYW5pbWF0aW9uLWZpbGwtbW9kZScgcHJvcGVydHkgaXMgbm90IHN1cHBvcnRlZCBpbiBBbmRyb2lkIGJyb3dzZXIgYmVsb3cgMi4zLlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImRlc2NyaXB0aW9uXCI6XCJpT1MgNi4xIGFuZCBiZWxvdyBkbyBub3Qgc3VwcG9ydCBhbmltYXRpb24gb24gcHNldWRvLWVsZW1lbnRzLlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImRlc2NyaXB0aW9uXCI6XCJAa2V5ZnJhbWVzIG5vdCBzdXBwb3J0ZWQgaW4gYW4gaW5saW5lIG9yIHNjb3BlZCBzdHlsZXNoZWV0IGluIEZpcmVmb3ggKGJ1ZyA4MzAwNTYpXCJcbiAgICB9XG4gIF0sXG4gIFwiY2F0ZWdvcmllc1wiOltcbiAgICBcIkNTUzNcIlxuICBdLFxuICBcInN0YXRzXCI6e1xuICAgIFwiaWVcIjp7XG4gICAgICBcIjUuNVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiLFxuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjEwXCI6XCJ5XCIsXG4gICAgICBcIjExXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiZmlyZWZveFwiOntcbiAgICAgIFwiMlwiOlwiblwiLFxuICAgICAgXCIzXCI6XCJuXCIsXG4gICAgICBcIjMuNVwiOlwiblwiLFxuICAgICAgXCIzLjZcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI1XCI6XCJ5IHhcIixcbiAgICAgIFwiNlwiOlwieSB4XCIsXG4gICAgICBcIjdcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIixcbiAgICAgIFwiOVwiOlwieSB4XCIsXG4gICAgICBcIjEwXCI6XCJ5IHhcIixcbiAgICAgIFwiMTFcIjpcInkgeFwiLFxuICAgICAgXCIxMlwiOlwieSB4XCIsXG4gICAgICBcIjEzXCI6XCJ5IHhcIixcbiAgICAgIFwiMTRcIjpcInkgeFwiLFxuICAgICAgXCIxNVwiOlwieSB4XCIsXG4gICAgICBcIjE2XCI6XCJ5XCIsXG4gICAgICBcIjE3XCI6XCJ5XCIsXG4gICAgICBcIjE4XCI6XCJ5XCIsXG4gICAgICBcIjE5XCI6XCJ5XCIsXG4gICAgICBcIjIwXCI6XCJ5XCIsXG4gICAgICBcIjIxXCI6XCJ5XCIsXG4gICAgICBcIjIyXCI6XCJ5XCIsXG4gICAgICBcIjIzXCI6XCJ5XCIsXG4gICAgICBcIjI0XCI6XCJ5XCIsXG4gICAgICBcIjI1XCI6XCJ5XCIsXG4gICAgICBcIjI2XCI6XCJ5XCIsXG4gICAgICBcIjI3XCI6XCJ5XCIsXG4gICAgICBcIjI4XCI6XCJ5XCIsXG4gICAgICBcIjI5XCI6XCJ5XCIsXG4gICAgICBcIjMwXCI6XCJ5XCIsXG4gICAgICBcIjMxXCI6XCJ5XCIsXG4gICAgICBcIjMyXCI6XCJ5XCIsXG4gICAgICBcIjMzXCI6XCJ5XCIsXG4gICAgICBcIjM0XCI6XCJ5XCIsXG4gICAgICBcIjM1XCI6XCJ5XCIsXG4gICAgICBcIjM2XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiY2hyb21lXCI6e1xuICAgICAgXCI0XCI6XCJ5IHhcIixcbiAgICAgIFwiNVwiOlwieSB4XCIsXG4gICAgICBcIjZcIjpcInkgeFwiLFxuICAgICAgXCI3XCI6XCJ5IHhcIixcbiAgICAgIFwiOFwiOlwieSB4XCIsXG4gICAgICBcIjlcIjpcInkgeFwiLFxuICAgICAgXCIxMFwiOlwieSB4XCIsXG4gICAgICBcIjExXCI6XCJ5IHhcIixcbiAgICAgIFwiMTJcIjpcInkgeFwiLFxuICAgICAgXCIxM1wiOlwieSB4XCIsXG4gICAgICBcIjE0XCI6XCJ5IHhcIixcbiAgICAgIFwiMTVcIjpcInkgeFwiLFxuICAgICAgXCIxNlwiOlwieSB4XCIsXG4gICAgICBcIjE3XCI6XCJ5IHhcIixcbiAgICAgIFwiMThcIjpcInkgeFwiLFxuICAgICAgXCIxOVwiOlwieSB4XCIsXG4gICAgICBcIjIwXCI6XCJ5IHhcIixcbiAgICAgIFwiMjFcIjpcInkgeFwiLFxuICAgICAgXCIyMlwiOlwieSB4XCIsXG4gICAgICBcIjIzXCI6XCJ5IHhcIixcbiAgICAgIFwiMjRcIjpcInkgeFwiLFxuICAgICAgXCIyNVwiOlwieSB4XCIsXG4gICAgICBcIjI2XCI6XCJ5IHhcIixcbiAgICAgIFwiMjdcIjpcInkgeFwiLFxuICAgICAgXCIyOFwiOlwieSB4XCIsXG4gICAgICBcIjI5XCI6XCJ5IHhcIixcbiAgICAgIFwiMzBcIjpcInkgeFwiLFxuICAgICAgXCIzMVwiOlwieSB4XCIsXG4gICAgICBcIjMyXCI6XCJ5IHhcIixcbiAgICAgIFwiMzNcIjpcInkgeFwiLFxuICAgICAgXCIzNFwiOlwieSB4XCIsXG4gICAgICBcIjM1XCI6XCJ5IHhcIixcbiAgICAgIFwiMzZcIjpcInkgeFwiLFxuICAgICAgXCIzN1wiOlwieSB4XCIsXG4gICAgICBcIjM4XCI6XCJ5IHhcIixcbiAgICAgIFwiMzlcIjpcInlcIixcbiAgICAgIFwiNDBcIjpcInlcIixcbiAgICAgIFwiNDFcIjpcInlcIlxuICAgIH0sXG4gICAgXCJzYWZhcmlcIjp7XG4gICAgICBcIjMuMVwiOlwiblwiLFxuICAgICAgXCIzLjJcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwieSB4XCIsXG4gICAgICBcIjVcIjpcInkgeFwiLFxuICAgICAgXCI1LjFcIjpcInkgeFwiLFxuICAgICAgXCI2XCI6XCJ5IHhcIixcbiAgICAgIFwiNi4xXCI6XCJ5IHhcIixcbiAgICAgIFwiN1wiOlwieSB4XCIsXG4gICAgICBcIjcuMVwiOlwieSB4XCIsXG4gICAgICBcIjhcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcIm9wZXJhXCI6e1xuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjkuNS05LjZcIjpcIm5cIixcbiAgICAgIFwiMTAuMC0xMC4xXCI6XCJuXCIsXG4gICAgICBcIjEwLjVcIjpcIm5cIixcbiAgICAgIFwiMTAuNlwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMS4xXCI6XCJuXCIsXG4gICAgICBcIjExLjVcIjpcIm5cIixcbiAgICAgIFwiMTEuNlwiOlwiblwiLFxuICAgICAgXCIxMlwiOlwieSB4XCIsXG4gICAgICBcIjEyLjFcIjpcInlcIixcbiAgICAgIFwiMTVcIjpcInkgeFwiLFxuICAgICAgXCIxNlwiOlwieSB4XCIsXG4gICAgICBcIjE3XCI6XCJ5IHhcIixcbiAgICAgIFwiMThcIjpcInkgeFwiLFxuICAgICAgXCIxOVwiOlwieSB4XCIsXG4gICAgICBcIjIwXCI6XCJ5IHhcIixcbiAgICAgIFwiMjFcIjpcInkgeFwiLFxuICAgICAgXCIyMlwiOlwieSB4XCIsXG4gICAgICBcIjIzXCI6XCJ5IHhcIixcbiAgICAgIFwiMjRcIjpcInkgeFwiLFxuICAgICAgXCIyNVwiOlwieSB4XCIsXG4gICAgICBcIjI2XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiaW9zX3NhZlwiOntcbiAgICAgIFwiMy4yXCI6XCJ5IHhcIixcbiAgICAgIFwiNC4wLTQuMVwiOlwieSB4XCIsXG4gICAgICBcIjQuMi00LjNcIjpcInkgeFwiLFxuICAgICAgXCI1LjAtNS4xXCI6XCJ5IHhcIixcbiAgICAgIFwiNi4wLTYuMVwiOlwieSB4XCIsXG4gICAgICBcIjcuMC03LjFcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJvcF9taW5pXCI6e1xuICAgICAgXCI1LjAtOC4wXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kcm9pZFwiOntcbiAgICAgIFwiMi4xXCI6XCJhIHhcIixcbiAgICAgIFwiMi4yXCI6XCJhIHhcIixcbiAgICAgIFwiMi4zXCI6XCJhIHhcIixcbiAgICAgIFwiM1wiOlwiYSB4XCIsXG4gICAgICBcIjRcIjpcInkgeFwiLFxuICAgICAgXCI0LjFcIjpcInkgeFwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJ5IHhcIixcbiAgICAgIFwiNC40XCI6XCJ5IHhcIixcbiAgICAgIFwiNC40LjNcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcImJiXCI6e1xuICAgICAgXCI3XCI6XCJ5IHhcIixcbiAgICAgIFwiMTBcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcIm9wX21vYlwiOntcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTEuMVwiOlwiblwiLFxuICAgICAgXCIxMS41XCI6XCJuXCIsXG4gICAgICBcIjEyXCI6XCJuXCIsXG4gICAgICBcIjEyLjFcIjpcInlcIixcbiAgICAgIFwiMjRcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcImFuZF9jaHJcIjp7XG4gICAgICBcIjM4XCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJhbmRfZmZcIjp7XG4gICAgICBcIjMyXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiaWVfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwieVwiXG4gICAgfSxcbiAgICBcImFuZF91Y1wiOntcbiAgICAgIFwiOS45XCI6XCJ5IHhcIlxuICAgIH1cbiAgfSxcbiAgXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IGluIEFuZHJvaWQgYnJvd3NlciByZWZlcnMgdG8gYnVnZ3kgYmVoYXZpb3IgaW4gZGlmZmVyZW50IHNjZW5hcmlvcy5cIixcbiAgXCJub3Rlc19ieV9udW1cIjp7XG4gICAgXG4gIH0sXG4gIFwidXNhZ2VfcGVyY195XCI6ODUuMzksXG4gIFwidXNhZ2VfcGVyY19hXCI6MC44MyxcbiAgXCJ1Y3ByZWZpeFwiOmZhbHNlLFxuICBcInBhcmVudFwiOlwiXCIsXG4gIFwia2V5d29yZHNcIjpcImFuaW1hdGlvbnMsY3NzLWFuaW1hdGlvbnMsa2V5ZnJhbWUsa2V5ZnJhbWVzXCIsXG4gIFwiaWVfaWRcIjpcIlwiLFxuICBcImNocm9tZV9pZFwiOlwiXCIsXG4gIFwic2hvd25cIjp0cnVlXG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcInRpdGxlXCI6XCJDU1MzIEJveC1zaGFkb3dcIixcbiAgXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGRpc3BsYXlpbmcgYW4gaW5uZXIgb3Igb3V0ZXIgc2hhZG93IGVmZmVjdCB0byBlbGVtZW50c1wiLFxuICBcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtYmFja2dyb3VuZC8jYm94LXNoYWRvd1wiLFxuICBcInN0YXR1c1wiOlwiY3JcIixcbiAgXCJsaW5rc1wiOltcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvRW4vQ1NTLy1tb3otYm94LXNoYWRvd1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly93ZXN0Y2l2LmNvbS90b29scy9ib3hzaGFkb3dzL2luZGV4Lmh0bWxcIixcbiAgICAgIFwidGl0bGVcIjpcIkxpdmUgZWRpdG9yXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vdGVzdHMudGhlbWFzdGEuY29tL2Jsb2dzdHVmZi9ib3hzaGFkb3dkZW1vLmh0bWxcIixcbiAgICAgIFwidGl0bGVcIjpcIkRlbW8gb2YgdmFyaW91cyBlZmZlY3RzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vd3d3LmNzczNmaWxlcy5jb20vc2hhZG93L1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiSW5mb3JtYXRpb24gcGFnZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvY3NzL3Byb3BlcnRpZXMvYm94LXNoYWRvd1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wiXG4gICAgfVxuICBdLFxuICBcImJ1Z3NcIjpbXG4gICAge1xuICAgICAgXCJkZXNjcmlwdGlvblwiOlwiU2FmYXJpIDYsIGlPUyA2IGFuZCBBbmRyb2lkIDIuMyBkZWZhdWx0IGJyb3dzZXIgZG9uJ3Qgd29yayB3aXRoIGEgMHB4IHZhbHVlIGZvciBcXFwic3ByZWFkXFxcIi5cXHJcXG5lLmcuIC13ZWJraXQtYm94LXNoYWRvdzogNXB4IDFweCAwcHggI2YwNGUyOTtcXHJcXG5kb2Vzbid0IHdvcmssIGJ1dFxcclxcbi13ZWJraXQtYm94LXNoYWRvdzogNXB4IDFweCAxcHggI2YwNGUyOVxcclxcbmRvZXMuXCJcbiAgICB9XG4gIF0sXG4gIFwiY2F0ZWdvcmllc1wiOltcbiAgICBcIkNTUzNcIlxuICBdLFxuICBcInN0YXRzXCI6e1xuICAgIFwiaWVcIjp7XG4gICAgICBcIjUuNVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiLFxuICAgICAgXCI5XCI6XCJ5XCIsXG4gICAgICBcIjEwXCI6XCJ5XCIsXG4gICAgICBcIjExXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiZmlyZWZveFwiOntcbiAgICAgIFwiMlwiOlwiblwiLFxuICAgICAgXCIzXCI6XCJuXCIsXG4gICAgICBcIjMuNVwiOlwieSB4XCIsXG4gICAgICBcIjMuNlwiOlwieSB4XCIsXG4gICAgICBcIjRcIjpcInlcIixcbiAgICAgIFwiNVwiOlwieVwiLFxuICAgICAgXCI2XCI6XCJ5XCIsXG4gICAgICBcIjdcIjpcInlcIixcbiAgICAgIFwiOFwiOlwieVwiLFxuICAgICAgXCI5XCI6XCJ5XCIsXG4gICAgICBcIjEwXCI6XCJ5XCIsXG4gICAgICBcIjExXCI6XCJ5XCIsXG4gICAgICBcIjEyXCI6XCJ5XCIsXG4gICAgICBcIjEzXCI6XCJ5XCIsXG4gICAgICBcIjE0XCI6XCJ5XCIsXG4gICAgICBcIjE1XCI6XCJ5XCIsXG4gICAgICBcIjE2XCI6XCJ5XCIsXG4gICAgICBcIjE3XCI6XCJ5XCIsXG4gICAgICBcIjE4XCI6XCJ5XCIsXG4gICAgICBcIjE5XCI6XCJ5XCIsXG4gICAgICBcIjIwXCI6XCJ5XCIsXG4gICAgICBcIjIxXCI6XCJ5XCIsXG4gICAgICBcIjIyXCI6XCJ5XCIsXG4gICAgICBcIjIzXCI6XCJ5XCIsXG4gICAgICBcIjI0XCI6XCJ5XCIsXG4gICAgICBcIjI1XCI6XCJ5XCIsXG4gICAgICBcIjI2XCI6XCJ5XCIsXG4gICAgICBcIjI3XCI6XCJ5XCIsXG4gICAgICBcIjI4XCI6XCJ5XCIsXG4gICAgICBcIjI5XCI6XCJ5XCIsXG4gICAgICBcIjMwXCI6XCJ5XCIsXG4gICAgICBcIjMxXCI6XCJ5XCIsXG4gICAgICBcIjMyXCI6XCJ5XCIsXG4gICAgICBcIjMzXCI6XCJ5XCIsXG4gICAgICBcIjM0XCI6XCJ5XCIsXG4gICAgICBcIjM1XCI6XCJ5XCIsXG4gICAgICBcIjM2XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiY2hyb21lXCI6e1xuICAgICAgXCI0XCI6XCJ5IHhcIixcbiAgICAgIFwiNVwiOlwieSB4XCIsXG4gICAgICBcIjZcIjpcInkgeFwiLFxuICAgICAgXCI3XCI6XCJ5IHhcIixcbiAgICAgIFwiOFwiOlwieSB4XCIsXG4gICAgICBcIjlcIjpcInkgeFwiLFxuICAgICAgXCIxMFwiOlwieVwiLFxuICAgICAgXCIxMVwiOlwieVwiLFxuICAgICAgXCIxMlwiOlwieVwiLFxuICAgICAgXCIxM1wiOlwieVwiLFxuICAgICAgXCIxNFwiOlwieVwiLFxuICAgICAgXCIxNVwiOlwieVwiLFxuICAgICAgXCIxNlwiOlwieVwiLFxuICAgICAgXCIxN1wiOlwieVwiLFxuICAgICAgXCIxOFwiOlwieVwiLFxuICAgICAgXCIxOVwiOlwieVwiLFxuICAgICAgXCIyMFwiOlwieVwiLFxuICAgICAgXCIyMVwiOlwieVwiLFxuICAgICAgXCIyMlwiOlwieVwiLFxuICAgICAgXCIyM1wiOlwieVwiLFxuICAgICAgXCIyNFwiOlwieVwiLFxuICAgICAgXCIyNVwiOlwieVwiLFxuICAgICAgXCIyNlwiOlwieVwiLFxuICAgICAgXCIyN1wiOlwieVwiLFxuICAgICAgXCIyOFwiOlwieVwiLFxuICAgICAgXCIyOVwiOlwieVwiLFxuICAgICAgXCIzMFwiOlwieVwiLFxuICAgICAgXCIzMVwiOlwieVwiLFxuICAgICAgXCIzMlwiOlwieVwiLFxuICAgICAgXCIzM1wiOlwieVwiLFxuICAgICAgXCIzNFwiOlwieVwiLFxuICAgICAgXCIzNVwiOlwieVwiLFxuICAgICAgXCIzNlwiOlwieVwiLFxuICAgICAgXCIzN1wiOlwieVwiLFxuICAgICAgXCIzOFwiOlwieVwiLFxuICAgICAgXCIzOVwiOlwieVwiLFxuICAgICAgXCI0MFwiOlwieVwiLFxuICAgICAgXCI0MVwiOlwieVwiXG4gICAgfSxcbiAgICBcInNhZmFyaVwiOntcbiAgICAgIFwiMy4xXCI6XCJhIHhcIixcbiAgICAgIFwiMy4yXCI6XCJhIHhcIixcbiAgICAgIFwiNFwiOlwiYSB4XCIsXG4gICAgICBcIjVcIjpcInkgeFwiLFxuICAgICAgXCI1LjFcIjpcInlcIixcbiAgICAgIFwiNlwiOlwieVwiLFxuICAgICAgXCI2LjFcIjpcInlcIixcbiAgICAgIFwiN1wiOlwieVwiLFxuICAgICAgXCI3LjFcIjpcInlcIixcbiAgICAgIFwiOFwiOlwieVwiXG4gICAgfSxcbiAgICBcIm9wZXJhXCI6e1xuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjkuNS05LjZcIjpcIm5cIixcbiAgICAgIFwiMTAuMC0xMC4xXCI6XCJuXCIsXG4gICAgICBcIjEwLjVcIjpcInlcIixcbiAgICAgIFwiMTAuNlwiOlwieVwiLFxuICAgICAgXCIxMVwiOlwieVwiLFxuICAgICAgXCIxMS4xXCI6XCJ5XCIsXG4gICAgICBcIjExLjVcIjpcInlcIixcbiAgICAgIFwiMTEuNlwiOlwieVwiLFxuICAgICAgXCIxMlwiOlwieVwiLFxuICAgICAgXCIxMi4xXCI6XCJ5XCIsXG4gICAgICBcIjE1XCI6XCJ5XCIsXG4gICAgICBcIjE2XCI6XCJ5XCIsXG4gICAgICBcIjE3XCI6XCJ5XCIsXG4gICAgICBcIjE4XCI6XCJ5XCIsXG4gICAgICBcIjE5XCI6XCJ5XCIsXG4gICAgICBcIjIwXCI6XCJ5XCIsXG4gICAgICBcIjIxXCI6XCJ5XCIsXG4gICAgICBcIjIyXCI6XCJ5XCIsXG4gICAgICBcIjIzXCI6XCJ5XCIsXG4gICAgICBcIjI0XCI6XCJ5XCIsXG4gICAgICBcIjI1XCI6XCJ5XCIsXG4gICAgICBcIjI2XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiaW9zX3NhZlwiOntcbiAgICAgIFwiMy4yXCI6XCJhIHhcIixcbiAgICAgIFwiNC4wLTQuMVwiOlwieSB4XCIsXG4gICAgICBcIjQuMi00LjNcIjpcInkgeFwiLFxuICAgICAgXCI1LjAtNS4xXCI6XCJ5XCIsXG4gICAgICBcIjYuMC02LjFcIjpcInlcIixcbiAgICAgIFwiNy4wLTcuMVwiOlwieVwiLFxuICAgICAgXCI4XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwib3BfbWluaVwiOntcbiAgICAgIFwiNS4wLTguMFwiOlwiblwiXG4gICAgfSxcbiAgICBcImFuZHJvaWRcIjp7XG4gICAgICBcIjIuMVwiOlwiYSB4XCIsXG4gICAgICBcIjIuMlwiOlwiYSB4XCIsXG4gICAgICBcIjIuM1wiOlwiYSB4XCIsXG4gICAgICBcIjNcIjpcImEgeFwiLFxuICAgICAgXCI0XCI6XCJ5XCIsXG4gICAgICBcIjQuMVwiOlwieVwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJ5XCIsXG4gICAgICBcIjQuNFwiOlwieVwiLFxuICAgICAgXCI0LjQuM1wiOlwieVwiXG4gICAgfSxcbiAgICBcImJiXCI6e1xuICAgICAgXCI3XCI6XCJ5IHhcIixcbiAgICAgIFwiMTBcIjpcInlcIlxuICAgIH0sXG4gICAgXCJvcF9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJuXCIsXG4gICAgICBcIjExXCI6XCJ5XCIsXG4gICAgICBcIjExLjFcIjpcInlcIixcbiAgICAgIFwiMTEuNVwiOlwieVwiLFxuICAgICAgXCIxMlwiOlwieVwiLFxuICAgICAgXCIxMi4xXCI6XCJ5XCIsXG4gICAgICBcIjI0XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiYW5kX2NoclwiOntcbiAgICAgIFwiMzhcIjpcInlcIlxuICAgIH0sXG4gICAgXCJhbmRfZmZcIjp7XG4gICAgICBcIjMyXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiaWVfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwieVwiXG4gICAgfSxcbiAgICBcImFuZF91Y1wiOntcbiAgICAgIFwiOS45XCI6XCJ5XCJcbiAgICB9XG4gIH0sXG4gIFwibm90ZXNcIjpcIkNhbiBiZSBwYXJ0aWFsbHkgZW11bGF0ZWQgaW4gb2xkZXIgSUUgdmVyc2lvbnMgdXNpbmcgdGhlIG5vbi1zdGFuZGFyZCBcXFwic2hhZG93XFxcIiBmaWx0ZXIuIFBhcnRpYWwgc3VwcG9ydCBpbiBTYWZhcmksIGlPUyBTYWZhcmkgYW5kIEFuZHJvaWQgQnJvd3NlciByZWZlcnMgdG8gbWlzc2luZyBcXFwiaW5zZXRcXFwiIGFuZCBibHVyIHJhZGl1cyB2YWx1ZSBzdXBwb3J0LlwiLFxuICBcIm5vdGVzX2J5X251bVwiOntcbiAgICBcbiAgfSxcbiAgXCJ1c2FnZV9wZXJjX3lcIjo4Ny45MixcbiAgXCJ1c2FnZV9wZXJjX2FcIjowLjkzLFxuICBcInVjcHJlZml4XCI6ZmFsc2UsXG4gIFwicGFyZW50XCI6XCJcIixcbiAgXCJrZXl3b3Jkc1wiOlwiYm94LXNoYWRvd3MsYm94c2hhZG93cyxib3ggc2hhZG93LHNoYW93XCIsXG4gIFwiaWVfaWRcIjpcIlwiLFxuICBcImNocm9tZV9pZFwiOlwiXCIsXG4gIFwic2hvd25cIjp0cnVlXG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcInRpdGxlXCI6XCJDU1MgRmlsdGVyIEVmZmVjdHNcIixcbiAgXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGFwcGx5aW5nIGZpbHRlciBlZmZlY3RzIChsaWtlIGJsdXIsIGdyYXlzY2FsZSwgYnJpZ2h0bmVzcywgY29udHJhc3QgYW5kIGh1ZSkgdG8gZWxlbWVudHMsIHByZXZpb3VzbHkgb25seSBwb3NzaWJsZSBieSB1c2luZyBTVkcuXCIsXG4gIFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvZmlsdGVyLWVmZmVjdHMvXCIsXG4gIFwic3RhdHVzXCI6XCJ3ZFwiLFxuICBcImxpbmtzXCI6W1xuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vaHRtbDUtZGVtb3MuYXBwc3BvdC5jb20vc3RhdGljL2Nzcy9maWx0ZXJzL2luZGV4Lmh0bWxcIixcbiAgICAgIFwidGl0bGVcIjpcIkRlbW8gZmlsZSBmb3IgV2ViS2l0IGJyb3dzZXJzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9maWx0ZXJzL3VuZGVyc3RhbmRpbmctY3NzL1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiSFRNTDVSb2NrcyBhcnRpY2xlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vZGwuZHJvcGJveC5jb20vdS8zMjYwMzI3L2FuZ3VsYXIvQ1NTM0ltYWdlTWFuaXB1bGF0aW9uLmh0bWxcIixcbiAgICAgIFwidGl0bGVcIjpcIkZpbHRlciBlZGl0b3JcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9iZW5uZXR0ZmVlbHkuY29tL2ZpbHRlcnMvXCIsXG4gICAgICBcInRpdGxlXCI6XCJGaWx0ZXIgUGxheWdyb3VuZFwiXG4gICAgfVxuICBdLFxuICBcImJ1Z3NcIjpbXG4gICAgXG4gIF0sXG4gIFwiY2F0ZWdvcmllc1wiOltcbiAgICBcIkNTU1wiLFxuICAgIFwiQ1NTM1wiXG4gIF0sXG4gIFwic3RhdHNcIjp7XG4gICAgXCJpZVwiOntcbiAgICAgIFwiNS41XCI6XCJuXCIsXG4gICAgICBcIjZcIjpcIm5cIixcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCIsXG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJmaXJlZm94XCI6e1xuICAgICAgXCIyXCI6XCJuXCIsXG4gICAgICBcIjNcIjpcIm5cIixcbiAgICAgIFwiMy41XCI6XCJuXCIsXG4gICAgICBcIjMuNlwiOlwiYVwiLFxuICAgICAgXCI0XCI6XCJhXCIsXG4gICAgICBcIjVcIjpcImFcIixcbiAgICAgIFwiNlwiOlwiYVwiLFxuICAgICAgXCI3XCI6XCJhXCIsXG4gICAgICBcIjhcIjpcImFcIixcbiAgICAgIFwiOVwiOlwiYVwiLFxuICAgICAgXCIxMFwiOlwiYVwiLFxuICAgICAgXCIxMVwiOlwiYVwiLFxuICAgICAgXCIxMlwiOlwiYVwiLFxuICAgICAgXCIxM1wiOlwiYVwiLFxuICAgICAgXCIxNFwiOlwiYVwiLFxuICAgICAgXCIxNVwiOlwiYVwiLFxuICAgICAgXCIxNlwiOlwiYVwiLFxuICAgICAgXCIxN1wiOlwiYVwiLFxuICAgICAgXCIxOFwiOlwiYVwiLFxuICAgICAgXCIxOVwiOlwiYVwiLFxuICAgICAgXCIyMFwiOlwiYVwiLFxuICAgICAgXCIyMVwiOlwiYVwiLFxuICAgICAgXCIyMlwiOlwiYVwiLFxuICAgICAgXCIyM1wiOlwiYVwiLFxuICAgICAgXCIyNFwiOlwiYVwiLFxuICAgICAgXCIyNVwiOlwiYVwiLFxuICAgICAgXCIyNlwiOlwiYVwiLFxuICAgICAgXCIyN1wiOlwiYVwiLFxuICAgICAgXCIyOFwiOlwiYVwiLFxuICAgICAgXCIyOVwiOlwiYVwiLFxuICAgICAgXCIzMFwiOlwiYVwiLFxuICAgICAgXCIzMVwiOlwiYVwiLFxuICAgICAgXCIzMlwiOlwiYVwiLFxuICAgICAgXCIzM1wiOlwiYVwiLFxuICAgICAgXCIzNFwiOlwiYSBkXCIsXG4gICAgICBcIjM1XCI6XCJ5XCIsXG4gICAgICBcIjM2XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiY2hyb21lXCI6e1xuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjVcIjpcIm5cIixcbiAgICAgIFwiNlwiOlwiblwiLFxuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjhcIjpcIm5cIixcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMlwiOlwiblwiLFxuICAgICAgXCIxM1wiOlwiblwiLFxuICAgICAgXCIxNFwiOlwiblwiLFxuICAgICAgXCIxNVwiOlwiblwiLFxuICAgICAgXCIxNlwiOlwiblwiLFxuICAgICAgXCIxN1wiOlwiblwiLFxuICAgICAgXCIxOFwiOlwieSB4XCIsXG4gICAgICBcIjE5XCI6XCJ5IHhcIixcbiAgICAgIFwiMjBcIjpcInkgeFwiLFxuICAgICAgXCIyMVwiOlwieSB4XCIsXG4gICAgICBcIjIyXCI6XCJ5IHhcIixcbiAgICAgIFwiMjNcIjpcInkgeFwiLFxuICAgICAgXCIyNFwiOlwieSB4XCIsXG4gICAgICBcIjI1XCI6XCJ5IHhcIixcbiAgICAgIFwiMjZcIjpcInkgeFwiLFxuICAgICAgXCIyN1wiOlwieSB4XCIsXG4gICAgICBcIjI4XCI6XCJ5IHhcIixcbiAgICAgIFwiMjlcIjpcInkgeFwiLFxuICAgICAgXCIzMFwiOlwieSB4XCIsXG4gICAgICBcIjMxXCI6XCJ5IHhcIixcbiAgICAgIFwiMzJcIjpcInkgeFwiLFxuICAgICAgXCIzM1wiOlwieSB4XCIsXG4gICAgICBcIjM0XCI6XCJ5IHhcIixcbiAgICAgIFwiMzVcIjpcInkgeFwiLFxuICAgICAgXCIzNlwiOlwieSB4XCIsXG4gICAgICBcIjM3XCI6XCJ5IHhcIixcbiAgICAgIFwiMzhcIjpcInkgeFwiLFxuICAgICAgXCIzOVwiOlwieSB4XCIsXG4gICAgICBcIjQwXCI6XCJ5IHhcIixcbiAgICAgIFwiNDFcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcInNhZmFyaVwiOntcbiAgICAgIFwiMy4xXCI6XCJuXCIsXG4gICAgICBcIjMuMlwiOlwiblwiLFxuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjVcIjpcIm5cIixcbiAgICAgIFwiNS4xXCI6XCJuXCIsXG4gICAgICBcIjZcIjpcInkgeFwiLFxuICAgICAgXCI2LjFcIjpcInkgeFwiLFxuICAgICAgXCI3XCI6XCJ5IHhcIixcbiAgICAgIFwiNy4xXCI6XCJ5IHhcIixcbiAgICAgIFwiOFwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwib3BlcmFcIjp7XG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiOS41LTkuNlwiOlwiblwiLFxuICAgICAgXCIxMC4wLTEwLjFcIjpcIm5cIixcbiAgICAgIFwiMTAuNVwiOlwiblwiLFxuICAgICAgXCIxMC42XCI6XCJuXCIsXG4gICAgICBcIjExXCI6XCJuXCIsXG4gICAgICBcIjExLjFcIjpcIm5cIixcbiAgICAgIFwiMTEuNVwiOlwiblwiLFxuICAgICAgXCIxMS42XCI6XCJuXCIsXG4gICAgICBcIjEyXCI6XCJuXCIsXG4gICAgICBcIjEyLjFcIjpcIm5cIixcbiAgICAgIFwiMTVcIjpcInkgeFwiLFxuICAgICAgXCIxNlwiOlwieSB4XCIsXG4gICAgICBcIjE3XCI6XCJ5IHhcIixcbiAgICAgIFwiMThcIjpcInkgeFwiLFxuICAgICAgXCIxOVwiOlwieSB4XCIsXG4gICAgICBcIjIwXCI6XCJ5IHhcIixcbiAgICAgIFwiMjFcIjpcInkgeFwiLFxuICAgICAgXCIyMlwiOlwieSB4XCIsXG4gICAgICBcIjIzXCI6XCJ5IHhcIixcbiAgICAgIFwiMjRcIjpcInkgeFwiLFxuICAgICAgXCIyNVwiOlwieSB4XCIsXG4gICAgICBcIjI2XCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJpb3Nfc2FmXCI6e1xuICAgICAgXCIzLjJcIjpcIm5cIixcbiAgICAgIFwiNC4wLTQuMVwiOlwiblwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJuXCIsXG4gICAgICBcIjUuMC01LjFcIjpcIm5cIixcbiAgICAgIFwiNi4wLTYuMVwiOlwieSB4XCIsXG4gICAgICBcIjcuMC03LjFcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJvcF9taW5pXCI6e1xuICAgICAgXCI1LjAtOC4wXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kcm9pZFwiOntcbiAgICAgIFwiMi4xXCI6XCJuXCIsXG4gICAgICBcIjIuMlwiOlwiblwiLFxuICAgICAgXCIyLjNcIjpcIm5cIixcbiAgICAgIFwiM1wiOlwiblwiLFxuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjQuMVwiOlwiblwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJuXCIsXG4gICAgICBcIjQuNFwiOlwieSB4XCIsXG4gICAgICBcIjQuNC4zXCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJiYlwiOntcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCIxMFwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwib3BfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMS4xXCI6XCJuXCIsXG4gICAgICBcIjExLjVcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcIm5cIixcbiAgICAgIFwiMTIuMVwiOlwiblwiLFxuICAgICAgXCIyNFwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwiYW5kX2NoclwiOntcbiAgICAgIFwiMzhcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcImFuZF9mZlwiOntcbiAgICAgIFwiMzJcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJpZV9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kX3VjXCI6e1xuICAgICAgXCI5LjlcIjpcInkgeFwiXG4gICAgfVxuICB9LFxuICBcIm5vdGVzXCI6XCJOb3RlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyBzaWduaWZpY2FudGx5IGRpZmZlcmVudCBmcm9tIGFuZCBpbmNvbXBhdGlibGUgd2l0aCBNaWNyb3NvZnQncyBbb2xkZXIgXFxcImZpbHRlclxcXCIgcHJvcGVydHldKGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9tczUzMDc1MiUyOHY9dnMuODUlMjkuYXNweCkuXFxyXFxuXFxyXFxuUGFydGlhbCBzdXBwb3J0IGluIEZpcmVmb3ggMzEgW29ubHkgd2l0aCB1cmwoKSB2ZXJzaW9uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZmlsdGVyI0Jyb3dzZXJfY29tcGF0aWJpbGl0eSlcIixcbiAgXCJub3Rlc19ieV9udW1cIjp7XG4gICAgXG4gIH0sXG4gIFwidXNhZ2VfcGVyY195XCI6NTYuMjUsXG4gIFwidXNhZ2VfcGVyY19hXCI6MTMuMDgsXG4gIFwidWNwcmVmaXhcIjpmYWxzZSxcbiAgXCJwYXJlbnRcIjpcIlwiLFxuICBcImtleXdvcmRzXCI6XCJzZXBpYSxodWUtcm90YXRlLGludmVydCxzYXR1cmF0ZVwiLFxuICBcImllX2lkXCI6XCJmaWx0ZXJzXCIsXG4gIFwiY2hyb21lX2lkXCI6XCJcIixcbiAgXCJzaG93blwiOnRydWVcbn0iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwidGl0bGVcIjpcIkNTUyBHcmFkaWVudHNcIixcbiAgXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGRlZmluaW5nIGEgbGluZWFyIG9yIHJhZGlhbCBjb2xvciBncmFkaWVudCBhcyBhIENTUyBpbWFnZS5cIixcbiAgXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWltYWdlcy9cIixcbiAgXCJzdGF0dXNcIjpcImNyXCIsXG4gIFwibGlua3NcIjpbXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly93d3cuY29sb3J6aWxsYS5jb20vZ3JhZGllbnQtZWRpdG9yL1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiQ3Jvc3MtYnJvd3NlciBlZGl0b3JcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly93d3cuY3NzM2ZpbGVzLmNvbS9ncmFkaWVudC9cIixcbiAgICAgIFwidGl0bGVcIjpcIkluZm9ybWF0aW9uIHBhZ2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9jc3MzcGllLmNvbS9cIixcbiAgICAgIFwidGl0bGVcIjpcIlRvb2wgdG8gZW11bGF0ZSBzdXBwb3J0IGluIElFXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvZnVuY3Rpb25zL2xpbmVhci1ncmFkaWVudFwiLFxuICAgICAgXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wiXG4gICAgfVxuICBdLFxuICBcImJ1Z3NcIjpbXG4gICAgXG4gIF0sXG4gIFwiY2F0ZWdvcmllc1wiOltcbiAgICBcIkNTUzNcIlxuICBdLFxuICBcInN0YXRzXCI6e1xuICAgIFwiaWVcIjp7XG4gICAgICBcIjUuNVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiLFxuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjEwXCI6XCJ5XCIsXG4gICAgICBcIjExXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiZmlyZWZveFwiOntcbiAgICAgIFwiMlwiOlwiblwiLFxuICAgICAgXCIzXCI6XCJuXCIsXG4gICAgICBcIjMuNVwiOlwiblwiLFxuICAgICAgXCIzLjZcIjpcInkgeFwiLFxuICAgICAgXCI0XCI6XCJ5IHhcIixcbiAgICAgIFwiNVwiOlwieSB4XCIsXG4gICAgICBcIjZcIjpcInkgeFwiLFxuICAgICAgXCI3XCI6XCJ5IHhcIixcbiAgICAgIFwiOFwiOlwieSB4XCIsXG4gICAgICBcIjlcIjpcInkgeFwiLFxuICAgICAgXCIxMFwiOlwieSB4XCIsXG4gICAgICBcIjExXCI6XCJ5IHhcIixcbiAgICAgIFwiMTJcIjpcInkgeFwiLFxuICAgICAgXCIxM1wiOlwieSB4XCIsXG4gICAgICBcIjE0XCI6XCJ5IHhcIixcbiAgICAgIFwiMTVcIjpcInkgeFwiLFxuICAgICAgXCIxNlwiOlwieVwiLFxuICAgICAgXCIxN1wiOlwieVwiLFxuICAgICAgXCIxOFwiOlwieVwiLFxuICAgICAgXCIxOVwiOlwieVwiLFxuICAgICAgXCIyMFwiOlwieVwiLFxuICAgICAgXCIyMVwiOlwieVwiLFxuICAgICAgXCIyMlwiOlwieVwiLFxuICAgICAgXCIyM1wiOlwieVwiLFxuICAgICAgXCIyNFwiOlwieVwiLFxuICAgICAgXCIyNVwiOlwieVwiLFxuICAgICAgXCIyNlwiOlwieVwiLFxuICAgICAgXCIyN1wiOlwieVwiLFxuICAgICAgXCIyOFwiOlwieVwiLFxuICAgICAgXCIyOVwiOlwieVwiLFxuICAgICAgXCIzMFwiOlwieVwiLFxuICAgICAgXCIzMVwiOlwieVwiLFxuICAgICAgXCIzMlwiOlwieVwiLFxuICAgICAgXCIzM1wiOlwieVwiLFxuICAgICAgXCIzNFwiOlwieVwiLFxuICAgICAgXCIzNVwiOlwieVwiLFxuICAgICAgXCIzNlwiOlwieVwiXG4gICAgfSxcbiAgICBcImNocm9tZVwiOntcbiAgICAgIFwiNFwiOlwiYSB4XCIsXG4gICAgICBcIjVcIjpcImEgeFwiLFxuICAgICAgXCI2XCI6XCJhIHhcIixcbiAgICAgIFwiN1wiOlwiYSB4XCIsXG4gICAgICBcIjhcIjpcImEgeFwiLFxuICAgICAgXCI5XCI6XCJhIHhcIixcbiAgICAgIFwiMTBcIjpcInkgeFwiLFxuICAgICAgXCIxMVwiOlwieSB4XCIsXG4gICAgICBcIjEyXCI6XCJ5IHhcIixcbiAgICAgIFwiMTNcIjpcInkgeFwiLFxuICAgICAgXCIxNFwiOlwieSB4XCIsXG4gICAgICBcIjE1XCI6XCJ5IHhcIixcbiAgICAgIFwiMTZcIjpcInkgeFwiLFxuICAgICAgXCIxN1wiOlwieSB4XCIsXG4gICAgICBcIjE4XCI6XCJ5IHhcIixcbiAgICAgIFwiMTlcIjpcInkgeFwiLFxuICAgICAgXCIyMFwiOlwieSB4XCIsXG4gICAgICBcIjIxXCI6XCJ5IHhcIixcbiAgICAgIFwiMjJcIjpcInkgeFwiLFxuICAgICAgXCIyM1wiOlwieSB4XCIsXG4gICAgICBcIjI0XCI6XCJ5IHhcIixcbiAgICAgIFwiMjVcIjpcInkgeFwiLFxuICAgICAgXCIyNlwiOlwieVwiLFxuICAgICAgXCIyN1wiOlwieVwiLFxuICAgICAgXCIyOFwiOlwieVwiLFxuICAgICAgXCIyOVwiOlwieVwiLFxuICAgICAgXCIzMFwiOlwieVwiLFxuICAgICAgXCIzMVwiOlwieVwiLFxuICAgICAgXCIzMlwiOlwieVwiLFxuICAgICAgXCIzM1wiOlwieVwiLFxuICAgICAgXCIzNFwiOlwieVwiLFxuICAgICAgXCIzNVwiOlwieVwiLFxuICAgICAgXCIzNlwiOlwieVwiLFxuICAgICAgXCIzN1wiOlwieVwiLFxuICAgICAgXCIzOFwiOlwieVwiLFxuICAgICAgXCIzOVwiOlwieVwiLFxuICAgICAgXCI0MFwiOlwieVwiLFxuICAgICAgXCI0MVwiOlwieVwiXG4gICAgfSxcbiAgICBcInNhZmFyaVwiOntcbiAgICAgIFwiMy4xXCI6XCJuXCIsXG4gICAgICBcIjMuMlwiOlwiblwiLFxuICAgICAgXCI0XCI6XCJhIHhcIixcbiAgICAgIFwiNVwiOlwiYSB4XCIsXG4gICAgICBcIjUuMVwiOlwieSB4XCIsXG4gICAgICBcIjZcIjpcInkgeFwiLFxuICAgICAgXCI2LjFcIjpcInlcIixcbiAgICAgIFwiN1wiOlwieVwiLFxuICAgICAgXCI3LjFcIjpcInlcIixcbiAgICAgIFwiOFwiOlwieVwiXG4gICAgfSxcbiAgICBcIm9wZXJhXCI6e1xuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjkuNS05LjZcIjpcIm5cIixcbiAgICAgIFwiMTAuMC0xMC4xXCI6XCJuXCIsXG4gICAgICBcIjEwLjVcIjpcIm5cIixcbiAgICAgIFwiMTAuNlwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMS4xXCI6XCJhIHhcIixcbiAgICAgIFwiMTEuNVwiOlwiYSB4XCIsXG4gICAgICBcIjExLjZcIjpcInkgeFwiLFxuICAgICAgXCIxMlwiOlwieSB4XCIsXG4gICAgICBcIjEyLjFcIjpcInlcIixcbiAgICAgIFwiMTVcIjpcInlcIixcbiAgICAgIFwiMTZcIjpcInlcIixcbiAgICAgIFwiMTdcIjpcInlcIixcbiAgICAgIFwiMThcIjpcInlcIixcbiAgICAgIFwiMTlcIjpcInlcIixcbiAgICAgIFwiMjBcIjpcInlcIixcbiAgICAgIFwiMjFcIjpcInlcIixcbiAgICAgIFwiMjJcIjpcInlcIixcbiAgICAgIFwiMjNcIjpcInlcIixcbiAgICAgIFwiMjRcIjpcInlcIixcbiAgICAgIFwiMjVcIjpcInlcIixcbiAgICAgIFwiMjZcIjpcInlcIlxuICAgIH0sXG4gICAgXCJpb3Nfc2FmXCI6e1xuICAgICAgXCIzLjJcIjpcImEgeFwiLFxuICAgICAgXCI0LjAtNC4xXCI6XCJhIHhcIixcbiAgICAgIFwiNC4yLTQuM1wiOlwiYSB4XCIsXG4gICAgICBcIjUuMC01LjFcIjpcInkgeFwiLFxuICAgICAgXCI2LjAtNi4xXCI6XCJ5IHhcIixcbiAgICAgIFwiNy4wLTcuMVwiOlwieVwiLFxuICAgICAgXCI4XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwib3BfbWluaVwiOntcbiAgICAgIFwiNS4wLTguMFwiOlwiblwiXG4gICAgfSxcbiAgICBcImFuZHJvaWRcIjp7XG4gICAgICBcIjIuMVwiOlwiYSB4XCIsXG4gICAgICBcIjIuMlwiOlwiYSB4XCIsXG4gICAgICBcIjIuM1wiOlwiYSB4XCIsXG4gICAgICBcIjNcIjpcImEgeFwiLFxuICAgICAgXCI0XCI6XCJ5IHhcIixcbiAgICAgIFwiNC4xXCI6XCJ5IHhcIixcbiAgICAgIFwiNC4yLTQuM1wiOlwieSB4XCIsXG4gICAgICBcIjQuNFwiOlwieVwiLFxuICAgICAgXCI0LjQuM1wiOlwieVwiXG4gICAgfSxcbiAgICBcImJiXCI6e1xuICAgICAgXCI3XCI6XCJhIHhcIixcbiAgICAgIFwiMTBcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcIm9wX21vYlwiOntcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTEuMVwiOlwiYSB4XCIsXG4gICAgICBcIjExLjVcIjpcImEgeFwiLFxuICAgICAgXCIxMlwiOlwieSB4XCIsXG4gICAgICBcIjEyLjFcIjpcInlcIixcbiAgICAgIFwiMjRcIjpcInlcIlxuICAgIH0sXG4gICAgXCJhbmRfY2hyXCI6e1xuICAgICAgXCIzOFwiOlwieVwiXG4gICAgfSxcbiAgICBcImFuZF9mZlwiOntcbiAgICAgIFwiMzJcIjpcInlcIlxuICAgIH0sXG4gICAgXCJpZV9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiYW5kX3VjXCI6e1xuICAgICAgXCI5LjlcIjpcInkgeFwiXG4gICAgfVxuICB9LFxuICBcIm5vdGVzXCI6XCJTeW50YXggdXNlZCBieSBicm93c2VycyB3aXRoIHByZWZpeGVkIHN1cHBvcnQgbWF5IGJlIGluY29tcGF0aWJsZSB3aXRoIHRoYXQgZm9yIHByb3BlciBzdXBwb3J0LiBcXHJcXG5cXHJcXG5QYXJ0aWFsIHN1cHBvcnQgaW4gT3BlcmEgMTEuMTAgYW5kIDExLjUwIGFsc28gcmVmZXJzIHRvIG9ubHkgaGF2aW5nIHN1cHBvcnQgZm9yIGxpbmVhciBncmFkaWVudHMuXFxyXFxuXFxyXFxuU3VwcG9ydCBjYW4gYmUgc29tZXdoYXQgZW11bGF0ZWQgaW4gb2xkZXIgSUUgdmVyc2lvbnMgdXNpbmcgdGhlIG5vbi1zdGFuZGFyZCBcXFwiZ3JhZGllbnRcXFwiIGZpbHRlci4gXFxyXFxuXFxyXFxuRmlyZWZveCAxMCssIE9wZXJhIDExLjYrLCBDaHJvbWUgMjYrIGFuZCBJRTEwKyBhbHNvIHN1cHBvcnQgdGhlIG5ldyBcXFwidG8gKHNpZGUpXFxcIiBzeW50YXguXCIsXG4gIFwibm90ZXNfYnlfbnVtXCI6e1xuICAgIFxuICB9LFxuICBcInVzYWdlX3BlcmNfeVwiOjg1LjEsXG4gIFwidXNhZ2VfcGVyY19hXCI6MS4yOSxcbiAgXCJ1Y3ByZWZpeFwiOmZhbHNlLFxuICBcInBhcmVudFwiOlwiXCIsXG4gIFwia2V5d29yZHNcIjpcImxpbmVhcixsaW5lYXItZ3JhZGllbnQsZ3JhZGlhbnRcIixcbiAgXCJpZV9pZFwiOlwiZ3JhZGllbnRzXCIsXG4gIFwiY2hyb21lX2lkXCI6XCI1Nzg1OTA1MDYzMjY0MjU2XCIsXG4gIFwic2hvd25cIjp0cnVlXG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcInRpdGxlXCI6XCJDU1MgSHlwaGVuYXRpb25cIixcbiAgXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGNvbnRyb2xsaW5nIHdoZW4gd29yZHMgYXQgdGhlIGVuZCBvZiBsaW5lcyBzaG91bGQgYmUgaHlwaGVuYXRlZCB1c2luZyB0aGUgXFxcImh5cGhlbnNcXFwiIHByb3BlcnR5LlwiLFxuICBcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdGV4dC8jaHlwaGVuYXRpb25cIixcbiAgXCJzdGF0dXNcIjpcIndkXCIsXG4gIFwibGlua3NcIjpbXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0NTUy9oeXBoZW5zXCIsXG4gICAgICBcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL2Jsb2cuZm9udGRlY2suY29tL3Bvc3QvOTAzNzAyODQ5Ny9oeXBoZW5zXCIsXG4gICAgICBcInRpdGxlXCI6XCJCbG9nIHBvc3RcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9wcm9wZXJ0aWVzL2h5cGhlbnNcIixcbiAgICAgIFwidGl0bGVcIjpcIldlYlBsYXRmb3JtIERvY3NcIlxuICAgIH1cbiAgXSxcbiAgXCJidWdzXCI6W1xuICAgIFxuICBdLFxuICBcImNhdGVnb3JpZXNcIjpbXG4gICAgXCJDU1MzXCJcbiAgXSxcbiAgXCJzdGF0c1wiOntcbiAgICBcImllXCI6e1xuICAgICAgXCI1LjVcIjpcIm5cIixcbiAgICAgIFwiNlwiOlwiblwiLFxuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjhcIjpcIm5cIixcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCIxMFwiOlwieSB4XCIsXG4gICAgICBcIjExXCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJmaXJlZm94XCI6e1xuICAgICAgXCIyXCI6XCJuXCIsXG4gICAgICBcIjNcIjpcIm5cIixcbiAgICAgIFwiMy41XCI6XCJuXCIsXG4gICAgICBcIjMuNlwiOlwiblwiLFxuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjVcIjpcIm5cIixcbiAgICAgIFwiNlwiOlwieSB4XCIsXG4gICAgICBcIjdcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIixcbiAgICAgIFwiOVwiOlwieSB4XCIsXG4gICAgICBcIjEwXCI6XCJ5IHhcIixcbiAgICAgIFwiMTFcIjpcInkgeFwiLFxuICAgICAgXCIxMlwiOlwieSB4XCIsXG4gICAgICBcIjEzXCI6XCJ5IHhcIixcbiAgICAgIFwiMTRcIjpcInkgeFwiLFxuICAgICAgXCIxNVwiOlwieSB4XCIsXG4gICAgICBcIjE2XCI6XCJ5IHhcIixcbiAgICAgIFwiMTdcIjpcInkgeFwiLFxuICAgICAgXCIxOFwiOlwieSB4XCIsXG4gICAgICBcIjE5XCI6XCJ5IHhcIixcbiAgICAgIFwiMjBcIjpcInkgeFwiLFxuICAgICAgXCIyMVwiOlwieSB4XCIsXG4gICAgICBcIjIyXCI6XCJ5IHhcIixcbiAgICAgIFwiMjNcIjpcInkgeFwiLFxuICAgICAgXCIyNFwiOlwieSB4XCIsXG4gICAgICBcIjI1XCI6XCJ5IHhcIixcbiAgICAgIFwiMjZcIjpcInkgeFwiLFxuICAgICAgXCIyN1wiOlwieSB4XCIsXG4gICAgICBcIjI4XCI6XCJ5IHhcIixcbiAgICAgIFwiMjlcIjpcInkgeFwiLFxuICAgICAgXCIzMFwiOlwieSB4XCIsXG4gICAgICBcIjMxXCI6XCJ5IHhcIixcbiAgICAgIFwiMzJcIjpcInkgeFwiLFxuICAgICAgXCIzM1wiOlwieSB4XCIsXG4gICAgICBcIjM0XCI6XCJ5IHhcIixcbiAgICAgIFwiMzVcIjpcInkgeFwiLFxuICAgICAgXCIzNlwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwiY2hyb21lXCI6e1xuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjVcIjpcIm5cIixcbiAgICAgIFwiNlwiOlwiblwiLFxuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjhcIjpcIm5cIixcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMlwiOlwiblwiLFxuICAgICAgXCIxM1wiOlwiblwiLFxuICAgICAgXCIxNFwiOlwiblwiLFxuICAgICAgXCIxNVwiOlwiblwiLFxuICAgICAgXCIxNlwiOlwiblwiLFxuICAgICAgXCIxN1wiOlwiblwiLFxuICAgICAgXCIxOFwiOlwiblwiLFxuICAgICAgXCIxOVwiOlwiblwiLFxuICAgICAgXCIyMFwiOlwiblwiLFxuICAgICAgXCIyMVwiOlwiblwiLFxuICAgICAgXCIyMlwiOlwiblwiLFxuICAgICAgXCIyM1wiOlwiblwiLFxuICAgICAgXCIyNFwiOlwiblwiLFxuICAgICAgXCIyNVwiOlwiblwiLFxuICAgICAgXCIyNlwiOlwiblwiLFxuICAgICAgXCIyN1wiOlwiblwiLFxuICAgICAgXCIyOFwiOlwiblwiLFxuICAgICAgXCIyOVwiOlwiblwiLFxuICAgICAgXCIzMFwiOlwiblwiLFxuICAgICAgXCIzMVwiOlwiblwiLFxuICAgICAgXCIzMlwiOlwiblwiLFxuICAgICAgXCIzM1wiOlwiblwiLFxuICAgICAgXCIzNFwiOlwiblwiLFxuICAgICAgXCIzNVwiOlwiblwiLFxuICAgICAgXCIzNlwiOlwiblwiLFxuICAgICAgXCIzN1wiOlwiblwiLFxuICAgICAgXCIzOFwiOlwiblwiLFxuICAgICAgXCIzOVwiOlwiblwiLFxuICAgICAgXCI0MFwiOlwiblwiLFxuICAgICAgXCI0MVwiOlwiblwiXG4gICAgfSxcbiAgICBcInNhZmFyaVwiOntcbiAgICAgIFwiMy4xXCI6XCJuXCIsXG4gICAgICBcIjMuMlwiOlwiblwiLFxuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjVcIjpcIm5cIixcbiAgICAgIFwiNS4xXCI6XCJ5IHhcIixcbiAgICAgIFwiNlwiOlwieSB4XCIsXG4gICAgICBcIjYuMVwiOlwieSB4XCIsXG4gICAgICBcIjdcIjpcInkgeFwiLFxuICAgICAgXCI3LjFcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJvcGVyYVwiOntcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCI5LjUtOS42XCI6XCJuXCIsXG4gICAgICBcIjEwLjAtMTAuMVwiOlwiblwiLFxuICAgICAgXCIxMC41XCI6XCJuXCIsXG4gICAgICBcIjEwLjZcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTEuMVwiOlwiblwiLFxuICAgICAgXCIxMS41XCI6XCJuXCIsXG4gICAgICBcIjExLjZcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcIm5cIixcbiAgICAgIFwiMTIuMVwiOlwiblwiLFxuICAgICAgXCIxNVwiOlwiblwiLFxuICAgICAgXCIxNlwiOlwiblwiLFxuICAgICAgXCIxN1wiOlwiblwiLFxuICAgICAgXCIxOFwiOlwiblwiLFxuICAgICAgXCIxOVwiOlwiblwiLFxuICAgICAgXCIyMFwiOlwiblwiLFxuICAgICAgXCIyMVwiOlwiblwiLFxuICAgICAgXCIyMlwiOlwiblwiLFxuICAgICAgXCIyM1wiOlwiblwiLFxuICAgICAgXCIyNFwiOlwiblwiLFxuICAgICAgXCIyNVwiOlwiblwiLFxuICAgICAgXCIyNlwiOlwiblwiXG4gICAgfSxcbiAgICBcImlvc19zYWZcIjp7XG4gICAgICBcIjMuMlwiOlwiblwiLFxuICAgICAgXCI0LjAtNC4xXCI6XCJuXCIsXG4gICAgICBcIjQuMi00LjNcIjpcInkgeFwiLFxuICAgICAgXCI1LjAtNS4xXCI6XCJ5IHhcIixcbiAgICAgIFwiNi4wLTYuMVwiOlwieSB4XCIsXG4gICAgICBcIjcuMC03LjFcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJvcF9taW5pXCI6e1xuICAgICAgXCI1LjAtOC4wXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kcm9pZFwiOntcbiAgICAgIFwiMi4xXCI6XCJuXCIsXG4gICAgICBcIjIuMlwiOlwiblwiLFxuICAgICAgXCIyLjNcIjpcIm5cIixcbiAgICAgIFwiM1wiOlwiblwiLFxuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjQuMVwiOlwiblwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJuXCIsXG4gICAgICBcIjQuNFwiOlwiblwiLFxuICAgICAgXCI0LjQuM1wiOlwiblwiXG4gICAgfSxcbiAgICBcImJiXCI6e1xuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjEwXCI6XCJuXCJcbiAgICB9LFxuICAgIFwib3BfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMS4xXCI6XCJuXCIsXG4gICAgICBcIjExLjVcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcIm5cIixcbiAgICAgIFwiMTIuMVwiOlwiblwiLFxuICAgICAgXCIyNFwiOlwiblwiXG4gICAgfSxcbiAgICBcImFuZF9jaHJcIjp7XG4gICAgICBcIjM4XCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kX2ZmXCI6e1xuICAgICAgXCIzMlwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwiaWVfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwiblwiXG4gICAgfSxcbiAgICBcImFuZF91Y1wiOntcbiAgICAgIFwiOS45XCI6XCJhIHhcIlxuICAgIH1cbiAgfSxcbiAgXCJub3Rlc1wiOlwiQ2hyb21lIDI5LSBhbmQgQW5kcm9pZCA0LjAgQnJvd3NlciBzdXBwb3J0IFxcXCItd2Via2l0LWh5cGhlbnM6IG5vbmVcXFwiLCBidXQgbm90IHRoZSBcXFwiYXV0b1xcXCIgcHJvcGVydHkuIENocm9tZSAzMCsgZG9lc24ndCBzdXBwb3J0IGl0IGVpdGhlci5cIixcbiAgXCJub3Rlc19ieV9udW1cIjp7XG4gICAgXG4gIH0sXG4gIFwidXNhZ2VfcGVyY195XCI6MzMuNDcsXG4gIFwidXNhZ2VfcGVyY19hXCI6My4xMSxcbiAgXCJ1Y3ByZWZpeFwiOmZhbHNlLFxuICBcInBhcmVudFwiOlwiXCIsXG4gIFwia2V5d29yZHNcIjpcImh5cGhlbixzaHlcIixcbiAgXCJpZV9pZFwiOlwiXCIsXG4gIFwiY2hyb21lX2lkXCI6XCJcIixcbiAgXCJzaG93blwiOnRydWVcbn0iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwidGl0bGVcIjpcIkNTUyBNYXNrc1wiLFxuICBcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgZGlzcGxheWluZyBwYXJ0IG9mIGFuIGVsZW1lbnQsIHVzaW5nIGEgc2VsZWN0ZWQgaW1hZ2UgYXMgYSBtYXNrXCIsXG4gIFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzLW1hc2tpbmcvXCIsXG4gIFwic3RhdHVzXCI6XCJjclwiLFxuICBcImxpbmtzXCI6W1xuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvcHJvcGVydGllcy9tYXNrXCIsXG4gICAgICBcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9tYXNraW5nL2Fkb2JlL1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiSFRNTDUgUm9ja3MgYXJ0aWNsZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL3RoZW5pdHR5Z3JpdHR5LmNvL2Nzcy1tYXNraW5nXCIsXG4gICAgICBcInRpdGxlXCI6XCJEZXRhaWxlZCBibG9nIHBvc3RcIlxuICAgIH1cbiAgXSxcbiAgXCJidWdzXCI6W1xuICAgIFxuICBdLFxuICBcImNhdGVnb3JpZXNcIjpbXG4gICAgXCJDU1NcIlxuICBdLFxuICBcInN0YXRzXCI6e1xuICAgIFwiaWVcIjp7XG4gICAgICBcIjUuNVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiLFxuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjEwXCI6XCJuXCIsXG4gICAgICBcIjExXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiZmlyZWZveFwiOntcbiAgICAgIFwiMlwiOlwiblwiLFxuICAgICAgXCIzXCI6XCJuXCIsXG4gICAgICBcIjMuNVwiOlwiYVwiLFxuICAgICAgXCIzLjZcIjpcImFcIixcbiAgICAgIFwiNFwiOlwiYVwiLFxuICAgICAgXCI1XCI6XCJhXCIsXG4gICAgICBcIjZcIjpcImFcIixcbiAgICAgIFwiN1wiOlwiYVwiLFxuICAgICAgXCI4XCI6XCJhXCIsXG4gICAgICBcIjlcIjpcImFcIixcbiAgICAgIFwiMTBcIjpcImFcIixcbiAgICAgIFwiMTFcIjpcImFcIixcbiAgICAgIFwiMTJcIjpcImFcIixcbiAgICAgIFwiMTNcIjpcImFcIixcbiAgICAgIFwiMTRcIjpcImFcIixcbiAgICAgIFwiMTVcIjpcImFcIixcbiAgICAgIFwiMTZcIjpcImFcIixcbiAgICAgIFwiMTdcIjpcImFcIixcbiAgICAgIFwiMThcIjpcImFcIixcbiAgICAgIFwiMTlcIjpcImFcIixcbiAgICAgIFwiMjBcIjpcImFcIixcbiAgICAgIFwiMjFcIjpcImFcIixcbiAgICAgIFwiMjJcIjpcImFcIixcbiAgICAgIFwiMjNcIjpcImFcIixcbiAgICAgIFwiMjRcIjpcImFcIixcbiAgICAgIFwiMjVcIjpcImFcIixcbiAgICAgIFwiMjZcIjpcImFcIixcbiAgICAgIFwiMjdcIjpcImFcIixcbiAgICAgIFwiMjhcIjpcImFcIixcbiAgICAgIFwiMjlcIjpcImFcIixcbiAgICAgIFwiMzBcIjpcImFcIixcbiAgICAgIFwiMzFcIjpcImFcIixcbiAgICAgIFwiMzJcIjpcImFcIixcbiAgICAgIFwiMzNcIjpcImFcIixcbiAgICAgIFwiMzRcIjpcImFcIixcbiAgICAgIFwiMzVcIjpcImFcIixcbiAgICAgIFwiMzZcIjpcImFcIlxuICAgIH0sXG4gICAgXCJjaHJvbWVcIjp7XG4gICAgICBcIjRcIjpcImEgeFwiLFxuICAgICAgXCI1XCI6XCJhIHhcIixcbiAgICAgIFwiNlwiOlwiYSB4XCIsXG4gICAgICBcIjdcIjpcImEgeFwiLFxuICAgICAgXCI4XCI6XCJhIHhcIixcbiAgICAgIFwiOVwiOlwiYSB4XCIsXG4gICAgICBcIjEwXCI6XCJhIHhcIixcbiAgICAgIFwiMTFcIjpcImEgeFwiLFxuICAgICAgXCIxMlwiOlwiYSB4XCIsXG4gICAgICBcIjEzXCI6XCJhIHhcIixcbiAgICAgIFwiMTRcIjpcImEgeFwiLFxuICAgICAgXCIxNVwiOlwiYSB4XCIsXG4gICAgICBcIjE2XCI6XCJhIHhcIixcbiAgICAgIFwiMTdcIjpcImEgeFwiLFxuICAgICAgXCIxOFwiOlwiYSB4XCIsXG4gICAgICBcIjE5XCI6XCJhIHhcIixcbiAgICAgIFwiMjBcIjpcImEgeFwiLFxuICAgICAgXCIyMVwiOlwiYSB4XCIsXG4gICAgICBcIjIyXCI6XCJhIHhcIixcbiAgICAgIFwiMjNcIjpcImEgeFwiLFxuICAgICAgXCIyNFwiOlwiYSB4XCIsXG4gICAgICBcIjI1XCI6XCJhIHhcIixcbiAgICAgIFwiMjZcIjpcImEgeFwiLFxuICAgICAgXCIyN1wiOlwiYSB4XCIsXG4gICAgICBcIjI4XCI6XCJhIHhcIixcbiAgICAgIFwiMjlcIjpcImEgeFwiLFxuICAgICAgXCIzMFwiOlwiYSB4XCIsXG4gICAgICBcIjMxXCI6XCJhIHhcIixcbiAgICAgIFwiMzJcIjpcImEgeFwiLFxuICAgICAgXCIzM1wiOlwiYSB4XCIsXG4gICAgICBcIjM0XCI6XCJhIHhcIixcbiAgICAgIFwiMzVcIjpcImEgeFwiLFxuICAgICAgXCIzNlwiOlwiYSB4XCIsXG4gICAgICBcIjM3XCI6XCJhIHhcIixcbiAgICAgIFwiMzhcIjpcImEgeFwiLFxuICAgICAgXCIzOVwiOlwiYSB4XCIsXG4gICAgICBcIjQwXCI6XCJhIHhcIixcbiAgICAgIFwiNDFcIjpcImEgeFwiXG4gICAgfSxcbiAgICBcInNhZmFyaVwiOntcbiAgICAgIFwiMy4xXCI6XCJuXCIsXG4gICAgICBcIjMuMlwiOlwiblwiLFxuICAgICAgXCI0XCI6XCJhIHhcIixcbiAgICAgIFwiNVwiOlwiYSB4XCIsXG4gICAgICBcIjUuMVwiOlwiYSB4XCIsXG4gICAgICBcIjZcIjpcImEgeFwiLFxuICAgICAgXCI2LjFcIjpcImEgeFwiLFxuICAgICAgXCI3XCI6XCJhIHhcIixcbiAgICAgIFwiNy4xXCI6XCJhIHhcIixcbiAgICAgIFwiOFwiOlwiYSB4XCJcbiAgICB9LFxuICAgIFwib3BlcmFcIjp7XG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiOS41LTkuNlwiOlwiblwiLFxuICAgICAgXCIxMC4wLTEwLjFcIjpcIm5cIixcbiAgICAgIFwiMTAuNVwiOlwiblwiLFxuICAgICAgXCIxMC42XCI6XCJuXCIsXG4gICAgICBcIjExXCI6XCJuXCIsXG4gICAgICBcIjExLjFcIjpcIm5cIixcbiAgICAgIFwiMTEuNVwiOlwiblwiLFxuICAgICAgXCIxMS42XCI6XCJuXCIsXG4gICAgICBcIjEyXCI6XCJuXCIsXG4gICAgICBcIjEyLjFcIjpcIm5cIixcbiAgICAgIFwiMTVcIjpcImEgeFwiLFxuICAgICAgXCIxNlwiOlwiYSB4XCIsXG4gICAgICBcIjE3XCI6XCJhIHhcIixcbiAgICAgIFwiMThcIjpcImEgeFwiLFxuICAgICAgXCIxOVwiOlwiYSB4XCIsXG4gICAgICBcIjIwXCI6XCJhIHhcIixcbiAgICAgIFwiMjFcIjpcImEgeFwiLFxuICAgICAgXCIyMlwiOlwiYSB4XCIsXG4gICAgICBcIjIzXCI6XCJhIHhcIixcbiAgICAgIFwiMjRcIjpcImEgeFwiLFxuICAgICAgXCIyNVwiOlwiYSB4XCIsXG4gICAgICBcIjI2XCI6XCJhIHhcIlxuICAgIH0sXG4gICAgXCJpb3Nfc2FmXCI6e1xuICAgICAgXCIzLjJcIjpcImEgeFwiLFxuICAgICAgXCI0LjAtNC4xXCI6XCJhIHhcIixcbiAgICAgIFwiNC4yLTQuM1wiOlwiYSB4XCIsXG4gICAgICBcIjUuMC01LjFcIjpcImEgeFwiLFxuICAgICAgXCI2LjAtNi4xXCI6XCJhIHhcIixcbiAgICAgIFwiNy4wLTcuMVwiOlwiYSB4XCIsXG4gICAgICBcIjhcIjpcImEgeFwiXG4gICAgfSxcbiAgICBcIm9wX21pbmlcIjp7XG4gICAgICBcIjUuMC04LjBcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJhbmRyb2lkXCI6e1xuICAgICAgXCIyLjFcIjpcImEgeFwiLFxuICAgICAgXCIyLjJcIjpcImEgeFwiLFxuICAgICAgXCIyLjNcIjpcImEgeFwiLFxuICAgICAgXCIzXCI6XCJhIHhcIixcbiAgICAgIFwiNFwiOlwiYSB4XCIsXG4gICAgICBcIjQuMVwiOlwiYSB4XCIsXG4gICAgICBcIjQuMi00LjNcIjpcImEgeFwiLFxuICAgICAgXCI0LjRcIjpcImEgeFwiLFxuICAgICAgXCI0LjQuM1wiOlwiYSB4XCJcbiAgICB9LFxuICAgIFwiYmJcIjp7XG4gICAgICBcIjdcIjpcImEgeFwiLFxuICAgICAgXCIxMFwiOlwiYSB4XCJcbiAgICB9LFxuICAgIFwib3BfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMS4xXCI6XCJuXCIsXG4gICAgICBcIjExLjVcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcIm5cIixcbiAgICAgIFwiMTIuMVwiOlwiblwiLFxuICAgICAgXCIyNFwiOlwiYSB4XCJcbiAgICB9LFxuICAgIFwiYW5kX2NoclwiOntcbiAgICAgIFwiMzhcIjpcImEgeFwiXG4gICAgfSxcbiAgICBcImFuZF9mZlwiOntcbiAgICAgIFwiMzJcIjpcImFcIlxuICAgIH0sXG4gICAgXCJpZV9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kX3VjXCI6e1xuICAgICAgXCI5LjlcIjpcImEgeFwiXG4gICAgfVxuICB9LFxuICBcIm5vdGVzXCI6XCJQYXJ0aWFsIHN1cHBvcnQgaW4gV2ViS2l0L0JsaW5rIGJyb3dzZXJzIHJlZmVycyB0byBzdXBwb3J0aW5nIHRoZSBtYXNrLWltYWdlIGFuZCBtYXNrLWJveC1pbWFnZSBwcm9wZXJ0aWVzLCBidXQgbGFja3Mgc3VwcG9ydCBmb3Igb3RoZSBwYXJ0cyBvZiB0aGUgc3BlYy4gUGFydGlhbCBzdXBwb3J0IGluIEZpcmVmb3ggcmVmZXJzIHRvIG9ubHkgc3VwcG9ydCBmb3IgaW5saW5lIFNWRyBtYXNrIGVsZW1lbnRzIGkuZS4gbWFzazogdXJsKCNmb28pLlwiLFxuICBcIm5vdGVzX2J5X251bVwiOntcbiAgICBcbiAgfSxcbiAgXCJ1c2FnZV9wZXJjX3lcIjowLFxuICBcInVzYWdlX3BlcmNfYVwiOjc1Ljk4LFxuICBcInVjcHJlZml4XCI6ZmFsc2UsXG4gIFwicGFyZW50XCI6XCJcIixcbiAgXCJrZXl3b3Jkc1wiOlwiXCIsXG4gIFwiaWVfaWRcIjpcIm1hc2tzXCIsXG4gIFwiY2hyb21lX2lkXCI6XCI1MzgxNTU5NjYyMTQ5NjMyXCIsXG4gIFwic2hvd25cIjp0cnVlXG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcInRpdGxlXCI6XCI6cGxhY2Vob2xkZXItc2hvd24gQ1NTIHBzZXVkby1jbGFzc1wiLFxuICBcImRlc2NyaXB0aW9uXCI6XCJUaGUgOnBsYWNlaG9sZGVyLXNob3duIHBzZXVkby1jbGFzcyByZXByZXNlbnRzIHRoZSBwbGFjZWhvbGRlciBjb250ZW50cyBvZiBhIGZvcm0gZmllbGQgd2l0aCBwbGFjZWhvbGRlciB0ZXh0LlwiLFxuICBcInNwZWNcIjpcImh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL3NlbGVjdG9ycy8jcGxhY2Vob2xkZXJcIixcbiAgXCJzdGF0dXNcIjpcInVub2ZmXCIsXG4gIFwibGlua3NcIjpbXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDc3Mjc0NSh2PXZzLjg1KS5hc3B4XCIsXG4gICAgICBcInRpdGxlXCI6XCJNU0ROIGFydGljbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9jc3Mvc3R5bGUtcGxhY2Vob2xkZXItdGV4dC9cIixcbiAgICAgIFwidGl0bGVcIjpcIkNTUy1Ucmlja3MgYXJ0aWNsZSB3aXRoIGFsbCBwcmVmaXhlc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL3dpa2kuY3Nzd2cub3JnL2lkZWFzL3BsYWNlaG9sZGVyLXN0eWxpbmdcIixcbiAgICAgIFwidGl0bGVcIjpcIkNTU1dHIGRpc2N1c3Npb25cIlxuICAgIH1cbiAgXSxcbiAgXCJidWdzXCI6W1xuICAgIFxuICBdLFxuICBcImNhdGVnb3JpZXNcIjpbXG4gICAgXCJDU1NcIlxuICBdLFxuICBcInN0YXRzXCI6e1xuICAgIFwiaWVcIjp7XG4gICAgICBcIjUuNVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiLFxuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjEwXCI6XCJhIHhcIixcbiAgICAgIFwiMTFcIjpcImEgeFwiXG4gICAgfSxcbiAgICBcImZpcmVmb3hcIjp7XG4gICAgICBcIjJcIjpcIm5cIixcbiAgICAgIFwiM1wiOlwiblwiLFxuICAgICAgXCIzLjVcIjpcIm5cIixcbiAgICAgIFwiMy42XCI6XCJuXCIsXG4gICAgICBcIjRcIjpcImEgeFwiLFxuICAgICAgXCI1XCI6XCJhIHhcIixcbiAgICAgIFwiNlwiOlwiYSB4XCIsXG4gICAgICBcIjdcIjpcImEgeFwiLFxuICAgICAgXCI4XCI6XCJhIHhcIixcbiAgICAgIFwiOVwiOlwiYSB4XCIsXG4gICAgICBcIjEwXCI6XCJhIHhcIixcbiAgICAgIFwiMTFcIjpcImEgeFwiLFxuICAgICAgXCIxMlwiOlwiYSB4XCIsXG4gICAgICBcIjEzXCI6XCJhIHhcIixcbiAgICAgIFwiMTRcIjpcImEgeFwiLFxuICAgICAgXCIxNVwiOlwiYSB4XCIsXG4gICAgICBcIjE2XCI6XCJhIHhcIixcbiAgICAgIFwiMTdcIjpcImEgeFwiLFxuICAgICAgXCIxOFwiOlwiYSB4XCIsXG4gICAgICBcIjE5XCI6XCJhIHhcIixcbiAgICAgIFwiMjBcIjpcImEgeFwiLFxuICAgICAgXCIyMVwiOlwiYSB4XCIsXG4gICAgICBcIjIyXCI6XCJhIHhcIixcbiAgICAgIFwiMjNcIjpcImEgeFwiLFxuICAgICAgXCIyNFwiOlwiYSB4XCIsXG4gICAgICBcIjI1XCI6XCJhIHhcIixcbiAgICAgIFwiMjZcIjpcImEgeFwiLFxuICAgICAgXCIyN1wiOlwiYSB4XCIsXG4gICAgICBcIjI4XCI6XCJhIHhcIixcbiAgICAgIFwiMjlcIjpcImEgeFwiLFxuICAgICAgXCIzMFwiOlwiYSB4XCIsXG4gICAgICBcIjMxXCI6XCJhIHhcIixcbiAgICAgIFwiMzJcIjpcImEgeFwiLFxuICAgICAgXCIzM1wiOlwiYSB4XCIsXG4gICAgICBcIjM0XCI6XCJhIHhcIixcbiAgICAgIFwiMzVcIjpcImEgeFwiLFxuICAgICAgXCIzNlwiOlwiYSB4XCJcbiAgICB9LFxuICAgIFwiY2hyb21lXCI6e1xuICAgICAgXCI0XCI6XCJhIHhcIixcbiAgICAgIFwiNVwiOlwiYSB4XCIsXG4gICAgICBcIjZcIjpcImEgeFwiLFxuICAgICAgXCI3XCI6XCJhIHhcIixcbiAgICAgIFwiOFwiOlwiYSB4XCIsXG4gICAgICBcIjlcIjpcImEgeFwiLFxuICAgICAgXCIxMFwiOlwiYSB4XCIsXG4gICAgICBcIjExXCI6XCJhIHhcIixcbiAgICAgIFwiMTJcIjpcImEgeFwiLFxuICAgICAgXCIxM1wiOlwiYSB4XCIsXG4gICAgICBcIjE0XCI6XCJhIHhcIixcbiAgICAgIFwiMTVcIjpcImEgeFwiLFxuICAgICAgXCIxNlwiOlwiYSB4XCIsXG4gICAgICBcIjE3XCI6XCJhIHhcIixcbiAgICAgIFwiMThcIjpcImEgeFwiLFxuICAgICAgXCIxOVwiOlwiYSB4XCIsXG4gICAgICBcIjIwXCI6XCJhIHhcIixcbiAgICAgIFwiMjFcIjpcImEgeFwiLFxuICAgICAgXCIyMlwiOlwiYSB4XCIsXG4gICAgICBcIjIzXCI6XCJhIHhcIixcbiAgICAgIFwiMjRcIjpcImEgeFwiLFxuICAgICAgXCIyNVwiOlwiYSB4XCIsXG4gICAgICBcIjI2XCI6XCJhIHhcIixcbiAgICAgIFwiMjdcIjpcImEgeFwiLFxuICAgICAgXCIyOFwiOlwiYSB4XCIsXG4gICAgICBcIjI5XCI6XCJhIHhcIixcbiAgICAgIFwiMzBcIjpcImEgeFwiLFxuICAgICAgXCIzMVwiOlwiYSB4XCIsXG4gICAgICBcIjMyXCI6XCJhIHhcIixcbiAgICAgIFwiMzNcIjpcImEgeFwiLFxuICAgICAgXCIzNFwiOlwiYSB4XCIsXG4gICAgICBcIjM1XCI6XCJhIHhcIixcbiAgICAgIFwiMzZcIjpcImEgeFwiLFxuICAgICAgXCIzN1wiOlwiYSB4XCIsXG4gICAgICBcIjM4XCI6XCJhIHhcIixcbiAgICAgIFwiMzlcIjpcImEgeFwiLFxuICAgICAgXCI0MFwiOlwiYSB4XCIsXG4gICAgICBcIjQxXCI6XCJhIHhcIlxuICAgIH0sXG4gICAgXCJzYWZhcmlcIjp7XG4gICAgICBcIjMuMVwiOlwiblwiLFxuICAgICAgXCIzLjJcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI1XCI6XCJhIHhcIixcbiAgICAgIFwiNS4xXCI6XCJhIHhcIixcbiAgICAgIFwiNlwiOlwiYSB4XCIsXG4gICAgICBcIjYuMVwiOlwiYSB4XCIsXG4gICAgICBcIjdcIjpcImEgeFwiLFxuICAgICAgXCI3LjFcIjpcImEgeFwiLFxuICAgICAgXCI4XCI6XCJhIHhcIlxuICAgIH0sXG4gICAgXCJvcGVyYVwiOntcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCI5LjUtOS42XCI6XCJuXCIsXG4gICAgICBcIjEwLjAtMTAuMVwiOlwiblwiLFxuICAgICAgXCIxMC41XCI6XCJuXCIsXG4gICAgICBcIjEwLjZcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTEuMVwiOlwiblwiLFxuICAgICAgXCIxMS41XCI6XCJuXCIsXG4gICAgICBcIjExLjZcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcIm5cIixcbiAgICAgIFwiMTIuMVwiOlwiblwiLFxuICAgICAgXCIxNVwiOlwiYSB4XCIsXG4gICAgICBcIjE2XCI6XCJhIHhcIixcbiAgICAgIFwiMTdcIjpcImEgeFwiLFxuICAgICAgXCIxOFwiOlwiYSB4XCIsXG4gICAgICBcIjE5XCI6XCJhIHhcIixcbiAgICAgIFwiMjBcIjpcImEgeFwiLFxuICAgICAgXCIyMVwiOlwiYSB4XCIsXG4gICAgICBcIjIyXCI6XCJhIHhcIixcbiAgICAgIFwiMjNcIjpcImEgeFwiLFxuICAgICAgXCIyNFwiOlwiYSB4XCIsXG4gICAgICBcIjI1XCI6XCJhIHhcIixcbiAgICAgIFwiMjZcIjpcImEgeFwiXG4gICAgfSxcbiAgICBcImlvc19zYWZcIjp7XG4gICAgICBcIjMuMlwiOlwiblwiLFxuICAgICAgXCI0LjAtNC4xXCI6XCJuXCIsXG4gICAgICBcIjQuMi00LjNcIjpcImEgeFwiLFxuICAgICAgXCI1LjAtNS4xXCI6XCJhIHhcIixcbiAgICAgIFwiNi4wLTYuMVwiOlwiYSB4XCIsXG4gICAgICBcIjcuMC03LjFcIjpcImEgeFwiLFxuICAgICAgXCI4XCI6XCJhIHhcIlxuICAgIH0sXG4gICAgXCJvcF9taW5pXCI6e1xuICAgICAgXCI1LjAtOC4wXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kcm9pZFwiOntcbiAgICAgIFwiMi4xXCI6XCJhIHhcIixcbiAgICAgIFwiMi4yXCI6XCJhIHhcIixcbiAgICAgIFwiMi4zXCI6XCJhIHhcIixcbiAgICAgIFwiM1wiOlwiYSB4XCIsXG4gICAgICBcIjRcIjpcImEgeFwiLFxuICAgICAgXCI0LjFcIjpcImEgeFwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJhIHhcIixcbiAgICAgIFwiNC40XCI6XCJhIHhcIixcbiAgICAgIFwiNC40LjNcIjpcImEgeFwiXG4gICAgfSxcbiAgICBcImJiXCI6e1xuICAgICAgXCI3XCI6XCJ1XCIsXG4gICAgICBcIjEwXCI6XCJhIHhcIlxuICAgIH0sXG4gICAgXCJvcF9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJuXCIsXG4gICAgICBcIjExXCI6XCJuXCIsXG4gICAgICBcIjExLjFcIjpcIm5cIixcbiAgICAgIFwiMTEuNVwiOlwiblwiLFxuICAgICAgXCIxMlwiOlwiblwiLFxuICAgICAgXCIxMi4xXCI6XCJuXCIsXG4gICAgICBcIjI0XCI6XCJhIHhcIlxuICAgIH0sXG4gICAgXCJhbmRfY2hyXCI6e1xuICAgICAgXCIzOFwiOlwiYSB4XCJcbiAgICB9LFxuICAgIFwiYW5kX2ZmXCI6e1xuICAgICAgXCIzMlwiOlwiYSB4XCJcbiAgICB9LFxuICAgIFwiaWVfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwiYSB4XCJcbiAgICB9LFxuICAgIFwiYW5kX3VjXCI6e1xuICAgICAgXCI5LjlcIjpcImEgeFwiXG4gICAgfVxuICB9LFxuICBcIm5vdGVzXCI6XCJQYXJ0aWFsIHN1cHBvcnQgcmVmZXJzIHRvIHN1cHBvcnQgZm9yIGFsdGVybmF0aXZlIHN5bnRheDogOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIChDaHJvbWUvU2FmYXJpL09wZXJhKSxcXHJcXG46Oi1tb3otcGxhY2Vob2xkZXIgKEZpcmVmb3gpIGFuZCBcXHJcXG46LW1zLWlucHV0LXBsYWNlaG9sZGVyIChJRSkuIFwiLFxuICBcIm5vdGVzX2J5X251bVwiOntcbiAgICBcbiAgfSxcbiAgXCJ1c2FnZV9wZXJjX3lcIjowLFxuICBcInVzYWdlX3BlcmNfYVwiOjg1Ljc1LFxuICBcInVjcHJlZml4XCI6ZmFsc2UsXG4gIFwicGFyZW50XCI6XCJcIixcbiAgXCJrZXl3b3Jkc1wiOlwiOjpwbGFjZWhvbGRlcixwbGFjZWhvbGRlclwiLFxuICBcImllX2lkXCI6XCJcIixcbiAgXCJjaHJvbWVfaWRcIjpcIlwiLFxuICBcInNob3duXCI6dHJ1ZVxufSIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJ0aXRsZVwiOlwiOjpzZWxlY3Rpb24gQ1NTIHBzZXVkby1lbGVtZW50XCIsXG4gIFwiZGVzY3JpcHRpb25cIjpcIlRoZSA6OnNlbGVjdGlvbiBDU1MgcHNldWRvLWVsZW1lbnQgYXBwbGllcyBydWxlcyB0byB0aGUgcG9ydGlvbiBvZiBhIGRvY3VtZW50IHRoYXQgaGFzIGJlZW4gaGlnaGxpZ2h0ZWQgKGUuZy4sIHNlbGVjdGVkIHdpdGggdGhlIG1vdXNlIG9yIGFub3RoZXIgcG9pbnRpbmcgZGV2aWNlKSBieSB0aGUgdXNlci5cIixcbiAgXCJzcGVjXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvOjpzZWxlY3Rpb25cIixcbiAgXCJzdGF0dXNcIjpcInVub2ZmXCIsXG4gIFwibGlua3NcIjpbXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9xdWlya3Ntb2RlLm9yZy9jc3Mvc2VsZWN0b3JzL3NlbGVjdGlvbi5odG1sXCIsXG4gICAgICBcInRpdGxlXCI6XCI6OnNlbGVjdGlvbiB0ZXN0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3Mvc2VsZWN0b3JzL3BzZXVkby1lbGVtZW50cy86OnNlbGVjdGlvblwiLFxuICAgICAgXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wiXG4gICAgfVxuICBdLFxuICBcImJ1Z3NcIjpbXG4gICAge1xuICAgICAgXCJkZXNjcmlwdGlvblwiOlwiOjpzZWxlY3Rpb24gZG9lcyBub3Qgd29yayBvbiBpbnB1dCBlbGVtZW50cyBpbiBDaHJvbWUgKHRlc3RlZCBvbiBPUyBYIGFuZCBXaW5kb3dzIFhQKVwiXG4gICAgfVxuICBdLFxuICBcImNhdGVnb3JpZXNcIjpbXG4gICAgXCJDU1NcIlxuICBdLFxuICBcInN0YXRzXCI6e1xuICAgIFwiaWVcIjp7XG4gICAgICBcIjUuNVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiLFxuICAgICAgXCI5XCI6XCJ5XCIsXG4gICAgICBcIjEwXCI6XCJ5XCIsXG4gICAgICBcIjExXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiZmlyZWZveFwiOntcbiAgICAgIFwiMlwiOlwieSB4XCIsXG4gICAgICBcIjNcIjpcInkgeFwiLFxuICAgICAgXCIzLjVcIjpcInkgeFwiLFxuICAgICAgXCIzLjZcIjpcInkgeFwiLFxuICAgICAgXCI0XCI6XCJ5IHhcIixcbiAgICAgIFwiNVwiOlwieSB4XCIsXG4gICAgICBcIjZcIjpcInkgeFwiLFxuICAgICAgXCI3XCI6XCJ5IHhcIixcbiAgICAgIFwiOFwiOlwieSB4XCIsXG4gICAgICBcIjlcIjpcInkgeFwiLFxuICAgICAgXCIxMFwiOlwieSB4XCIsXG4gICAgICBcIjExXCI6XCJ5IHhcIixcbiAgICAgIFwiMTJcIjpcInkgeFwiLFxuICAgICAgXCIxM1wiOlwieSB4XCIsXG4gICAgICBcIjE0XCI6XCJ5IHhcIixcbiAgICAgIFwiMTVcIjpcInkgeFwiLFxuICAgICAgXCIxNlwiOlwieSB4XCIsXG4gICAgICBcIjE3XCI6XCJ5IHhcIixcbiAgICAgIFwiMThcIjpcInkgeFwiLFxuICAgICAgXCIxOVwiOlwieSB4XCIsXG4gICAgICBcIjIwXCI6XCJ5IHhcIixcbiAgICAgIFwiMjFcIjpcInkgeFwiLFxuICAgICAgXCIyMlwiOlwieSB4XCIsXG4gICAgICBcIjIzXCI6XCJ5IHhcIixcbiAgICAgIFwiMjRcIjpcInkgeFwiLFxuICAgICAgXCIyNVwiOlwieSB4XCIsXG4gICAgICBcIjI2XCI6XCJ5IHhcIixcbiAgICAgIFwiMjdcIjpcInkgeFwiLFxuICAgICAgXCIyOFwiOlwieSB4XCIsXG4gICAgICBcIjI5XCI6XCJ5IHhcIixcbiAgICAgIFwiMzBcIjpcInkgeFwiLFxuICAgICAgXCIzMVwiOlwieSB4XCIsXG4gICAgICBcIjMyXCI6XCJ5IHhcIixcbiAgICAgIFwiMzNcIjpcInkgeFwiLFxuICAgICAgXCIzNFwiOlwieSB4XCIsXG4gICAgICBcIjM1XCI6XCJ5IHhcIixcbiAgICAgIFwiMzZcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcImNocm9tZVwiOntcbiAgICAgIFwiNFwiOlwieVwiLFxuICAgICAgXCI1XCI6XCJ5XCIsXG4gICAgICBcIjZcIjpcInlcIixcbiAgICAgIFwiN1wiOlwieVwiLFxuICAgICAgXCI4XCI6XCJ5XCIsXG4gICAgICBcIjlcIjpcInlcIixcbiAgICAgIFwiMTBcIjpcInlcIixcbiAgICAgIFwiMTFcIjpcInlcIixcbiAgICAgIFwiMTJcIjpcInlcIixcbiAgICAgIFwiMTNcIjpcInlcIixcbiAgICAgIFwiMTRcIjpcInlcIixcbiAgICAgIFwiMTVcIjpcInlcIixcbiAgICAgIFwiMTZcIjpcInlcIixcbiAgICAgIFwiMTdcIjpcInlcIixcbiAgICAgIFwiMThcIjpcInlcIixcbiAgICAgIFwiMTlcIjpcInlcIixcbiAgICAgIFwiMjBcIjpcInlcIixcbiAgICAgIFwiMjFcIjpcInlcIixcbiAgICAgIFwiMjJcIjpcInlcIixcbiAgICAgIFwiMjNcIjpcInlcIixcbiAgICAgIFwiMjRcIjpcInlcIixcbiAgICAgIFwiMjVcIjpcInlcIixcbiAgICAgIFwiMjZcIjpcInlcIixcbiAgICAgIFwiMjdcIjpcInlcIixcbiAgICAgIFwiMjhcIjpcInlcIixcbiAgICAgIFwiMjlcIjpcInlcIixcbiAgICAgIFwiMzBcIjpcInlcIixcbiAgICAgIFwiMzFcIjpcInlcIixcbiAgICAgIFwiMzJcIjpcInlcIixcbiAgICAgIFwiMzNcIjpcInlcIixcbiAgICAgIFwiMzRcIjpcInlcIixcbiAgICAgIFwiMzVcIjpcInlcIixcbiAgICAgIFwiMzZcIjpcInlcIixcbiAgICAgIFwiMzdcIjpcInlcIixcbiAgICAgIFwiMzhcIjpcInlcIixcbiAgICAgIFwiMzlcIjpcInlcIixcbiAgICAgIFwiNDBcIjpcInlcIixcbiAgICAgIFwiNDFcIjpcInlcIlxuICAgIH0sXG4gICAgXCJzYWZhcmlcIjp7XG4gICAgICBcIjMuMVwiOlwieVwiLFxuICAgICAgXCIzLjJcIjpcInlcIixcbiAgICAgIFwiNFwiOlwieVwiLFxuICAgICAgXCI1XCI6XCJ5XCIsXG4gICAgICBcIjUuMVwiOlwieVwiLFxuICAgICAgXCI2XCI6XCJ5XCIsXG4gICAgICBcIjYuMVwiOlwieVwiLFxuICAgICAgXCI3XCI6XCJ5XCIsXG4gICAgICBcIjcuMVwiOlwieVwiLFxuICAgICAgXCI4XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwib3BlcmFcIjp7XG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiOS41LTkuNlwiOlwieVwiLFxuICAgICAgXCIxMC4wLTEwLjFcIjpcInlcIixcbiAgICAgIFwiMTAuNVwiOlwieVwiLFxuICAgICAgXCIxMC42XCI6XCJ5XCIsXG4gICAgICBcIjExXCI6XCJ5XCIsXG4gICAgICBcIjExLjFcIjpcInlcIixcbiAgICAgIFwiMTEuNVwiOlwieVwiLFxuICAgICAgXCIxMS42XCI6XCJ5XCIsXG4gICAgICBcIjEyXCI6XCJ5XCIsXG4gICAgICBcIjEyLjFcIjpcInlcIixcbiAgICAgIFwiMTVcIjpcInlcIixcbiAgICAgIFwiMTZcIjpcInlcIixcbiAgICAgIFwiMTdcIjpcInlcIixcbiAgICAgIFwiMThcIjpcInlcIixcbiAgICAgIFwiMTlcIjpcInlcIixcbiAgICAgIFwiMjBcIjpcInlcIixcbiAgICAgIFwiMjFcIjpcInlcIixcbiAgICAgIFwiMjJcIjpcInlcIixcbiAgICAgIFwiMjNcIjpcInlcIixcbiAgICAgIFwiMjRcIjpcInlcIixcbiAgICAgIFwiMjVcIjpcInlcIixcbiAgICAgIFwiMjZcIjpcInlcIlxuICAgIH0sXG4gICAgXCJpb3Nfc2FmXCI6e1xuICAgICAgXCIzLjJcIjpcIm5cIixcbiAgICAgIFwiNC4wLTQuMVwiOlwiblwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJuXCIsXG4gICAgICBcIjUuMC01LjFcIjpcIm5cIixcbiAgICAgIFwiNi4wLTYuMVwiOlwiblwiLFxuICAgICAgXCI3LjAtNy4xXCI6XCJuXCIsXG4gICAgICBcIjhcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJvcF9taW5pXCI6e1xuICAgICAgXCI1LjAtOC4wXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kcm9pZFwiOntcbiAgICAgIFwiMi4xXCI6XCJuXCIsXG4gICAgICBcIjIuMlwiOlwiblwiLFxuICAgICAgXCIyLjNcIjpcIm5cIixcbiAgICAgIFwiM1wiOlwiblwiLFxuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjQuMVwiOlwiblwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJuXCIsXG4gICAgICBcIjQuNFwiOlwieVwiLFxuICAgICAgXCI0LjQuM1wiOlwieVwiXG4gICAgfSxcbiAgICBcImJiXCI6e1xuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjEwXCI6XCJuXCJcbiAgICB9LFxuICAgIFwib3BfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwidVwiLFxuICAgICAgXCIxMVwiOlwidVwiLFxuICAgICAgXCIxMS4xXCI6XCJ1XCIsXG4gICAgICBcIjExLjVcIjpcInlcIixcbiAgICAgIFwiMTJcIjpcInlcIixcbiAgICAgIFwiMTIuMVwiOlwieVwiLFxuICAgICAgXCIyNFwiOlwieVwiXG4gICAgfSxcbiAgICBcImFuZF9jaHJcIjp7XG4gICAgICBcIjM4XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiYW5kX2ZmXCI6e1xuICAgICAgXCIzMlwiOlwiblwiXG4gICAgfSxcbiAgICBcImllX21vYlwiOntcbiAgICAgIFwiMTBcIjpcInlcIlxuICAgIH0sXG4gICAgXCJhbmRfdWNcIjp7XG4gICAgICBcIjkuOVwiOlwiblwiXG4gICAgfVxuICB9LFxuICBcIm5vdGVzXCI6XCJcIixcbiAgXCJub3Rlc19ieV9udW1cIjp7XG4gICAgXG4gIH0sXG4gIFwidXNhZ2VfcGVyY195XCI6NzIuOTksXG4gIFwidXNhZ2VfcGVyY19hXCI6MCxcbiAgXCJ1Y3ByZWZpeFwiOmZhbHNlLFxuICBcInBhcmVudFwiOlwiXCIsXG4gIFwia2V5d29yZHNcIjpcIjo6c2VsZWN0aW9uLHNlbGVjdGlvblwiLFxuICBcImllX2lkXCI6XCJcIixcbiAgXCJjaHJvbWVfaWRcIjpcIlwiLFxuICBcInNob3duXCI6dHJ1ZVxufSIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJ0aXRsZVwiOlwiQ1NTIHBvc2l0aW9uOnN0aWNreVwiLFxuICBcImRlc2NyaXB0aW9uXCI6XCJLZWVwcyBlbGVtZW50cyBwb3NpdGlvbmVkIGFzIFxcXCJmaXhlZFxcXCIgb3IgXFxcInJlbGF0aXZlXFxcIiBkZXBlbmRpbmcgb24gaG93IGl0IGFwcGVhcnMgaW4gdGhlIHZpZXdwb3J0LiBBcyBhIHJlc3VsdCB0aGUgZWxlbWVudCBpcyBcXFwic3R1Y2tcXFwiIHdoZW4gbmVjZXNzYXJ5IHdoaWxlIHNjcm9sbGluZy5cIixcbiAgXCJzcGVjXCI6XCJodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3MtcG9zaXRpb24vI3N0aWNreS1wb3NpdGlvbmluZ1wiLFxuICBcInN0YXR1c1wiOlwidW5vZmZcIixcbiAgXCJsaW5rc1wiOltcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL3VwZGF0ZXMuaHRtbDVyb2Nrcy5jb20vMjAxMi8wOC9TdGljay15b3VyLWxhbmRpbmdzLXBvc2l0aW9uLXN0aWNreS1sYW5kcy1pbi1XZWJLaXRcIixcbiAgICAgIFwidGl0bGVcIjpcIkhUTUw1Um9ja3NcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9wb3NpdGlvblwiLFxuICAgICAgXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9wcm9wZXJ0aWVzL3Bvc2l0aW9uXCIsXG4gICAgICBcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vZmlsYW1lbnRncm91cC9maXhlZC1zdGlja3lcIixcbiAgICAgIFwidGl0bGVcIjpcIlBvbHlmaWxsXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vd2lsZGRlZXIvc3RpY2t5ZmlsbFwiLFxuICAgICAgXCJ0aXRsZVwiOlwiQW5vdGhlciBwb2x5ZmlsbFwiXG4gICAgfVxuICBdLFxuICBcImJ1Z3NcIjpbXG4gICAge1xuICAgICAgXCJkZXNjcmlwdGlvblwiOlwiRmlyZWZveCBhbmQgU2FmYXJpIGRvIG5vdCBhcHBlYXIgdG8gc3VwcG9ydCBbc3RpY2t5IHRhYmxlIGhlYWRlcnNdKGh0dHA6Ly9qc2ZpZGRsZS5uZXQvTWY0WVQvMi8pLiAoc2VlIGFsc28gW0ZpcmVmb3ggYnVnXShodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD05MjUyNTkpKVwiXG4gICAgfVxuICBdLFxuICBcImNhdGVnb3JpZXNcIjpbXG4gICAgXCJDU1NcIlxuICBdLFxuICBcInN0YXRzXCI6e1xuICAgIFwiaWVcIjp7XG4gICAgICBcIjUuNVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiLFxuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjEwXCI6XCJuXCIsXG4gICAgICBcIjExXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiZmlyZWZveFwiOntcbiAgICAgIFwiMlwiOlwiblwiLFxuICAgICAgXCIzXCI6XCJuXCIsXG4gICAgICBcIjMuNVwiOlwiblwiLFxuICAgICAgXCIzLjZcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI1XCI6XCJuXCIsXG4gICAgICBcIjZcIjpcIm5cIixcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCIsXG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcIm5cIixcbiAgICAgIFwiMTNcIjpcIm5cIixcbiAgICAgIFwiMTRcIjpcIm5cIixcbiAgICAgIFwiMTVcIjpcIm5cIixcbiAgICAgIFwiMTZcIjpcIm5cIixcbiAgICAgIFwiMTdcIjpcIm5cIixcbiAgICAgIFwiMThcIjpcIm5cIixcbiAgICAgIFwiMTlcIjpcIm5cIixcbiAgICAgIFwiMjBcIjpcIm5cIixcbiAgICAgIFwiMjFcIjpcIm5cIixcbiAgICAgIFwiMjJcIjpcIm5cIixcbiAgICAgIFwiMjNcIjpcIm5cIixcbiAgICAgIFwiMjRcIjpcIm5cIixcbiAgICAgIFwiMjVcIjpcIm5cIixcbiAgICAgIFwiMjZcIjpcIm4gZCAjMVwiLFxuICAgICAgXCIyN1wiOlwibiBkICMxXCIsXG4gICAgICBcIjI4XCI6XCJuIGQgIzFcIixcbiAgICAgIFwiMjlcIjpcIm4gZCAjMVwiLFxuICAgICAgXCIzMFwiOlwibiBkICMxXCIsXG4gICAgICBcIjMxXCI6XCJuIGQgIzFcIixcbiAgICAgIFwiMzJcIjpcInlcIixcbiAgICAgIFwiMzNcIjpcInlcIixcbiAgICAgIFwiMzRcIjpcInlcIixcbiAgICAgIFwiMzVcIjpcInlcIixcbiAgICAgIFwiMzZcIjpcInlcIlxuICAgIH0sXG4gICAgXCJjaHJvbWVcIjp7XG4gICAgICBcIjRcIjpcIm5cIixcbiAgICAgIFwiNVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiLFxuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjEwXCI6XCJuXCIsXG4gICAgICBcIjExXCI6XCJuXCIsXG4gICAgICBcIjEyXCI6XCJuXCIsXG4gICAgICBcIjEzXCI6XCJuXCIsXG4gICAgICBcIjE0XCI6XCJuXCIsXG4gICAgICBcIjE1XCI6XCJuXCIsXG4gICAgICBcIjE2XCI6XCJuXCIsXG4gICAgICBcIjE3XCI6XCJuXCIsXG4gICAgICBcIjE4XCI6XCJuXCIsXG4gICAgICBcIjE5XCI6XCJuXCIsXG4gICAgICBcIjIwXCI6XCJuXCIsXG4gICAgICBcIjIxXCI6XCJuXCIsXG4gICAgICBcIjIyXCI6XCJuXCIsXG4gICAgICBcIjIzXCI6XCJuIGQgIzJcIixcbiAgICAgIFwiMjRcIjpcIm4gZCAjMlwiLFxuICAgICAgXCIyNVwiOlwibiBkICMyXCIsXG4gICAgICBcIjI2XCI6XCJuIGQgIzJcIixcbiAgICAgIFwiMjdcIjpcIm4gZCAjMlwiLFxuICAgICAgXCIyOFwiOlwibiBkICMyXCIsXG4gICAgICBcIjI5XCI6XCJuIGQgIzJcIixcbiAgICAgIFwiMzBcIjpcIm4gZCAjMlwiLFxuICAgICAgXCIzMVwiOlwibiBkICMyXCIsXG4gICAgICBcIjMyXCI6XCJuIGQgIzJcIixcbiAgICAgIFwiMzNcIjpcIm4gZCAjMlwiLFxuICAgICAgXCIzNFwiOlwibiBkICMyXCIsXG4gICAgICBcIjM1XCI6XCJuIGQgIzJcIixcbiAgICAgIFwiMzZcIjpcIm4gZCAjMlwiLFxuICAgICAgXCIzN1wiOlwiblwiLFxuICAgICAgXCIzOFwiOlwiblwiLFxuICAgICAgXCIzOVwiOlwiblwiLFxuICAgICAgXCI0MFwiOlwiblwiLFxuICAgICAgXCI0MVwiOlwiblwiXG4gICAgfSxcbiAgICBcInNhZmFyaVwiOntcbiAgICAgIFwiMy4xXCI6XCJuXCIsXG4gICAgICBcIjMuMlwiOlwiblwiLFxuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjVcIjpcIm5cIixcbiAgICAgIFwiNS4xXCI6XCJuXCIsXG4gICAgICBcIjZcIjpcIm5cIixcbiAgICAgIFwiNi4xXCI6XCJ5IHhcIixcbiAgICAgIFwiN1wiOlwieSB4XCIsXG4gICAgICBcIjcuMVwiOlwieSB4XCIsXG4gICAgICBcIjhcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcIm9wZXJhXCI6e1xuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjkuNS05LjZcIjpcIm5cIixcbiAgICAgIFwiMTAuMC0xMC4xXCI6XCJuXCIsXG4gICAgICBcIjEwLjVcIjpcIm5cIixcbiAgICAgIFwiMTAuNlwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMS4xXCI6XCJuXCIsXG4gICAgICBcIjExLjVcIjpcIm5cIixcbiAgICAgIFwiMTEuNlwiOlwiblwiLFxuICAgICAgXCIxMlwiOlwiblwiLFxuICAgICAgXCIxMi4xXCI6XCJuXCIsXG4gICAgICBcIjE1XCI6XCJuXCIsXG4gICAgICBcIjE2XCI6XCJuXCIsXG4gICAgICBcIjE3XCI6XCJuXCIsXG4gICAgICBcIjE4XCI6XCJuXCIsXG4gICAgICBcIjE5XCI6XCJuXCIsXG4gICAgICBcIjIwXCI6XCJuXCIsXG4gICAgICBcIjIxXCI6XCJuXCIsXG4gICAgICBcIjIyXCI6XCJuXCIsXG4gICAgICBcIjIzXCI6XCJuXCIsXG4gICAgICBcIjI0XCI6XCJuXCIsXG4gICAgICBcIjI1XCI6XCJuXCIsXG4gICAgICBcIjI2XCI6XCJuXCJcbiAgICB9LFxuICAgIFwiaW9zX3NhZlwiOntcbiAgICAgIFwiMy4yXCI6XCJuXCIsXG4gICAgICBcIjQuMC00LjFcIjpcIm5cIixcbiAgICAgIFwiNC4yLTQuM1wiOlwiblwiLFxuICAgICAgXCI1LjAtNS4xXCI6XCJuXCIsXG4gICAgICBcIjYuMC02LjFcIjpcInkgeFwiLFxuICAgICAgXCI3LjAtNy4xXCI6XCJ5IHhcIixcbiAgICAgIFwiOFwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwib3BfbWluaVwiOntcbiAgICAgIFwiNS4wLTguMFwiOlwiblwiXG4gICAgfSxcbiAgICBcImFuZHJvaWRcIjp7XG4gICAgICBcIjIuMVwiOlwiblwiLFxuICAgICAgXCIyLjJcIjpcIm5cIixcbiAgICAgIFwiMi4zXCI6XCJuXCIsXG4gICAgICBcIjNcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI0LjFcIjpcIm5cIixcbiAgICAgIFwiNC4yLTQuM1wiOlwiblwiLFxuICAgICAgXCI0LjRcIjpcIm5cIixcbiAgICAgIFwiNC40LjNcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJiYlwiOntcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCIxMFwiOlwiblwiXG4gICAgfSxcbiAgICBcIm9wX21vYlwiOntcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTEuMVwiOlwiblwiLFxuICAgICAgXCIxMS41XCI6XCJuXCIsXG4gICAgICBcIjEyXCI6XCJuXCIsXG4gICAgICBcIjEyLjFcIjpcIm5cIixcbiAgICAgIFwiMjRcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJhbmRfY2hyXCI6e1xuICAgICAgXCIzOFwiOlwiblwiXG4gICAgfSxcbiAgICBcImFuZF9mZlwiOntcbiAgICAgIFwiMzJcIjpcInlcIlxuICAgIH0sXG4gICAgXCJpZV9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kX3VjXCI6e1xuICAgICAgXCI5LjlcIjpcIm5cIlxuICAgIH1cbiAgfSxcbiAgXCJub3Rlc1wiOlwiXCIsXG4gIFwibm90ZXNfYnlfbnVtXCI6e1xuICAgIFwiMVwiOlwiQ2FuIGJlIGVuYWJsZWQgaW4gRmlyZWZveCBieSBzZXR0aW5nIHRoZSBhYm91dDpjb25maWcgcHJlZmVyZW5jZSBsYXlvdXQuY3NzLnN0aWNreS5lbmFibGVkIHRvIHRydWVcIixcbiAgICBcIjJcIjpcIkVuYWJsZWQgaW4gQ2hyb21lIHRocm91Z2ggdGhlIFxcXCJleHBlcmltZW50YWwgV2ViIFBsYXRmb3JtIGZlYXR1cmVzXFxcIiBmbGFnIGluIGNocm9tZTovL2ZsYWdzXCJcbiAgfSxcbiAgXCJ1c2FnZV9wZXJjX3lcIjoxNi44MixcbiAgXCJ1c2FnZV9wZXJjX2FcIjowLFxuICBcInVjcHJlZml4XCI6ZmFsc2UsXG4gIFwicGFyZW50XCI6XCJcIixcbiAgXCJrZXl3b3Jkc1wiOlwiXCIsXG4gIFwiaWVfaWRcIjpcInBvc2l0aW9uc3RpY2t5XCIsXG4gIFwiY2hyb21lX2lkXCI6XCI2MTkwMjUwNDY0Mzc4ODgwXCIsXG4gIFwic2hvd25cIjp0cnVlXG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcInRpdGxlXCI6XCJDU1MzIFRyYW5zaXRpb25zXCIsXG4gIFwiZGVzY3JpcHRpb25cIjpcIlNpbXBsZSBtZXRob2Qgb2YgYW5pbWF0aW5nIGNlcnRhaW4gcHJvcGVydGllcyBvZiBhbiBlbGVtZW50XCIsXG4gIFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy10cmFuc2l0aW9ucy9cIixcbiAgXCJzdGF0dXNcIjpcIndkXCIsXG4gIFwibGlua3NcIjpbXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly93d3cud2ViZGVzaWduZXJkZXBvdC5jb20vMjAxMC8wMS9jc3MtdHJhbnNpdGlvbnMtMTAxL1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiQXJ0aWNsZSBvbiB1c2FnZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL3d3dy5jc3MzZmlsZXMuY29tL3RyYW5zaXRpb24vXCIsXG4gICAgICBcInRpdGxlXCI6XCJJbmZvcm1hdGlvbiBwYWdlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vd3d3LnRoZS1hcnQtb2Ytd2ViLmNvbS9jc3MvdGltaW5nLWZ1bmN0aW9uL1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiRXhhbXBsZXMgb24gdGltaW5nIGZ1bmN0aW9uc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL3d3dy5vcGVyYS5jb20vZG9jcy9zcGVjcy9wcmVzdG8yLjEyL2Nzcy90cmFuc2l0aW9ucy9cIixcbiAgICAgIFwidGl0bGVcIjpcIkFuaW1hdGlvbiBvZiBwcm9wZXJ0eSB0eXBlcyBzdXBwb3J0IGluIE9wZXJhXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvcHJvcGVydGllcy90cmFuc2l0aW9uXCIsXG4gICAgICBcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJcbiAgICB9XG4gIF0sXG4gIFwiYnVnc1wiOltcbiAgICB7XG4gICAgICBcImRlc2NyaXB0aW9uXCI6XCJOb3Qgc3VwcG9ydGVkIG9uIGFueSBwc2V1ZG8tZWxlbWVudHMgYmVzaWRlcyA6OmJlZm9yZSBhbmQgOjphZnRlciBmb3IgRmlyZWZveCwgQ2hyb21lIDI2KywgT3BlcmEgMTYrIGFuZCBJRTEwKy5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJkZXNjcmlwdGlvblwiOlwiVHJhbnNpdGlvbmFibGUgcHJvcGVydGllcyB3aXRoIGNhbGMoKSBkZXJpdmVkIHZhbHVlcyBhcmUgbm90IHN1cHBvcnRlZCBiZWxvdyBhbmQgaW5jbHVkaW5nIElFMTEgKGh0dHA6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy83NjI3MTkvY3NzMy1jYWxjLWJ1Zy1pbnNpZGUtdHJhbnNpdGlvbi1vci10cmFuc2Zvcm0pXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZGVzY3JpcHRpb25cIjpcIidiYWNrZ3JvdW5kLXNpemUnIGlzIG5vdCBzdXBwb3J0ZWQgYmVsb3cgYW5kIGluY2x1ZGluZyBJRTEwXCJcbiAgICB9XG4gIF0sXG4gIFwiY2F0ZWdvcmllc1wiOltcbiAgICBcIkNTUzNcIlxuICBdLFxuICBcInN0YXRzXCI6e1xuICAgIFwiaWVcIjp7XG4gICAgICBcIjUuNVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiLFxuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjEwXCI6XCJ5XCIsXG4gICAgICBcIjExXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiZmlyZWZveFwiOntcbiAgICAgIFwiMlwiOlwiblwiLFxuICAgICAgXCIzXCI6XCJuXCIsXG4gICAgICBcIjMuNVwiOlwiblwiLFxuICAgICAgXCIzLjZcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwieSB4XCIsXG4gICAgICBcIjVcIjpcInkgeFwiLFxuICAgICAgXCI2XCI6XCJ5IHhcIixcbiAgICAgIFwiN1wiOlwieSB4XCIsXG4gICAgICBcIjhcIjpcInkgeFwiLFxuICAgICAgXCI5XCI6XCJ5IHhcIixcbiAgICAgIFwiMTBcIjpcInkgeFwiLFxuICAgICAgXCIxMVwiOlwieSB4XCIsXG4gICAgICBcIjEyXCI6XCJ5IHhcIixcbiAgICAgIFwiMTNcIjpcInkgeFwiLFxuICAgICAgXCIxNFwiOlwieSB4XCIsXG4gICAgICBcIjE1XCI6XCJ5IHhcIixcbiAgICAgIFwiMTZcIjpcInlcIixcbiAgICAgIFwiMTdcIjpcInlcIixcbiAgICAgIFwiMThcIjpcInlcIixcbiAgICAgIFwiMTlcIjpcInlcIixcbiAgICAgIFwiMjBcIjpcInlcIixcbiAgICAgIFwiMjFcIjpcInlcIixcbiAgICAgIFwiMjJcIjpcInlcIixcbiAgICAgIFwiMjNcIjpcInlcIixcbiAgICAgIFwiMjRcIjpcInlcIixcbiAgICAgIFwiMjVcIjpcInlcIixcbiAgICAgIFwiMjZcIjpcInlcIixcbiAgICAgIFwiMjdcIjpcInlcIixcbiAgICAgIFwiMjhcIjpcInlcIixcbiAgICAgIFwiMjlcIjpcInlcIixcbiAgICAgIFwiMzBcIjpcInlcIixcbiAgICAgIFwiMzFcIjpcInlcIixcbiAgICAgIFwiMzJcIjpcInlcIixcbiAgICAgIFwiMzNcIjpcInlcIixcbiAgICAgIFwiMzRcIjpcInlcIixcbiAgICAgIFwiMzVcIjpcInlcIixcbiAgICAgIFwiMzZcIjpcInlcIlxuICAgIH0sXG4gICAgXCJjaHJvbWVcIjp7XG4gICAgICBcIjRcIjpcInkgeFwiLFxuICAgICAgXCI1XCI6XCJ5IHhcIixcbiAgICAgIFwiNlwiOlwieSB4XCIsXG4gICAgICBcIjdcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIixcbiAgICAgIFwiOVwiOlwieSB4XCIsXG4gICAgICBcIjEwXCI6XCJ5IHhcIixcbiAgICAgIFwiMTFcIjpcInkgeFwiLFxuICAgICAgXCIxMlwiOlwieSB4XCIsXG4gICAgICBcIjEzXCI6XCJ5IHhcIixcbiAgICAgIFwiMTRcIjpcInkgeFwiLFxuICAgICAgXCIxNVwiOlwieSB4XCIsXG4gICAgICBcIjE2XCI6XCJ5IHhcIixcbiAgICAgIFwiMTdcIjpcInkgeFwiLFxuICAgICAgXCIxOFwiOlwieSB4XCIsXG4gICAgICBcIjE5XCI6XCJ5IHhcIixcbiAgICAgIFwiMjBcIjpcInkgeFwiLFxuICAgICAgXCIyMVwiOlwieSB4XCIsXG4gICAgICBcIjIyXCI6XCJ5IHhcIixcbiAgICAgIFwiMjNcIjpcInkgeFwiLFxuICAgICAgXCIyNFwiOlwieSB4XCIsXG4gICAgICBcIjI1XCI6XCJ5IHhcIixcbiAgICAgIFwiMjZcIjpcInlcIixcbiAgICAgIFwiMjdcIjpcInlcIixcbiAgICAgIFwiMjhcIjpcInlcIixcbiAgICAgIFwiMjlcIjpcInlcIixcbiAgICAgIFwiMzBcIjpcInlcIixcbiAgICAgIFwiMzFcIjpcInlcIixcbiAgICAgIFwiMzJcIjpcInlcIixcbiAgICAgIFwiMzNcIjpcInlcIixcbiAgICAgIFwiMzRcIjpcInlcIixcbiAgICAgIFwiMzVcIjpcInlcIixcbiAgICAgIFwiMzZcIjpcInlcIixcbiAgICAgIFwiMzdcIjpcInlcIixcbiAgICAgIFwiMzhcIjpcInlcIixcbiAgICAgIFwiMzlcIjpcInlcIixcbiAgICAgIFwiNDBcIjpcInlcIixcbiAgICAgIFwiNDFcIjpcInlcIlxuICAgIH0sXG4gICAgXCJzYWZhcmlcIjp7XG4gICAgICBcIjMuMVwiOlwieSB4XCIsXG4gICAgICBcIjMuMlwiOlwieSB4XCIsXG4gICAgICBcIjRcIjpcInkgeFwiLFxuICAgICAgXCI1XCI6XCJ5IHhcIixcbiAgICAgIFwiNS4xXCI6XCJ5IHhcIixcbiAgICAgIFwiNlwiOlwieSB4XCIsXG4gICAgICBcIjYuMVwiOlwieVwiLFxuICAgICAgXCI3XCI6XCJ5XCIsXG4gICAgICBcIjcuMVwiOlwieVwiLFxuICAgICAgXCI4XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwib3BlcmFcIjp7XG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiOS41LTkuNlwiOlwiblwiLFxuICAgICAgXCIxMC4wLTEwLjFcIjpcIm5cIixcbiAgICAgIFwiMTAuNVwiOlwieSB4XCIsXG4gICAgICBcIjEwLjZcIjpcInkgeFwiLFxuICAgICAgXCIxMVwiOlwieSB4XCIsXG4gICAgICBcIjExLjFcIjpcInkgeFwiLFxuICAgICAgXCIxMS41XCI6XCJ5IHhcIixcbiAgICAgIFwiMTEuNlwiOlwieSB4XCIsXG4gICAgICBcIjEyXCI6XCJ5IHhcIixcbiAgICAgIFwiMTIuMVwiOlwieVwiLFxuICAgICAgXCIxNVwiOlwieVwiLFxuICAgICAgXCIxNlwiOlwieVwiLFxuICAgICAgXCIxN1wiOlwieVwiLFxuICAgICAgXCIxOFwiOlwieVwiLFxuICAgICAgXCIxOVwiOlwieVwiLFxuICAgICAgXCIyMFwiOlwieVwiLFxuICAgICAgXCIyMVwiOlwieVwiLFxuICAgICAgXCIyMlwiOlwieVwiLFxuICAgICAgXCIyM1wiOlwieVwiLFxuICAgICAgXCIyNFwiOlwieVwiLFxuICAgICAgXCIyNVwiOlwieVwiLFxuICAgICAgXCIyNlwiOlwieVwiXG4gICAgfSxcbiAgICBcImlvc19zYWZcIjp7XG4gICAgICBcIjMuMlwiOlwieSB4XCIsXG4gICAgICBcIjQuMC00LjFcIjpcInkgeFwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJ5IHhcIixcbiAgICAgIFwiNS4wLTUuMVwiOlwieSB4XCIsXG4gICAgICBcIjYuMC02LjFcIjpcInkgeFwiLFxuICAgICAgXCI3LjAtNy4xXCI6XCJ5XCIsXG4gICAgICBcIjhcIjpcInlcIlxuICAgIH0sXG4gICAgXCJvcF9taW5pXCI6e1xuICAgICAgXCI1LjAtOC4wXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kcm9pZFwiOntcbiAgICAgIFwiMi4xXCI6XCJ5IHhcIixcbiAgICAgIFwiMi4yXCI6XCJ5IHhcIixcbiAgICAgIFwiMi4zXCI6XCJ5IHhcIixcbiAgICAgIFwiM1wiOlwieSB4XCIsXG4gICAgICBcIjRcIjpcInkgeFwiLFxuICAgICAgXCI0LjFcIjpcInkgeFwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJ5IHhcIixcbiAgICAgIFwiNC40XCI6XCJ5XCIsXG4gICAgICBcIjQuNC4zXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiYmJcIjp7XG4gICAgICBcIjdcIjpcInkgeFwiLFxuICAgICAgXCIxMFwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwib3BfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwieSB4XCIsXG4gICAgICBcIjExXCI6XCJ5IHhcIixcbiAgICAgIFwiMTEuMVwiOlwieSB4XCIsXG4gICAgICBcIjExLjVcIjpcInkgeFwiLFxuICAgICAgXCIxMlwiOlwieSB4XCIsXG4gICAgICBcIjEyLjFcIjpcInlcIixcbiAgICAgIFwiMjRcIjpcInlcIlxuICAgIH0sXG4gICAgXCJhbmRfY2hyXCI6e1xuICAgICAgXCIzOFwiOlwieVwiXG4gICAgfSxcbiAgICBcImFuZF9mZlwiOntcbiAgICAgIFwiMzJcIjpcInlcIlxuICAgIH0sXG4gICAgXCJpZV9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiYW5kX3VjXCI6e1xuICAgICAgXCI5LjlcIjpcInkgeFwiXG4gICAgfVxuICB9LFxuICBcIm5vdGVzXCI6XCJcIixcbiAgXCJub3Rlc19ieV9udW1cIjp7XG4gICAgXG4gIH0sXG4gIFwidXNhZ2VfcGVyY195XCI6ODYuMzIsXG4gIFwidXNhZ2VfcGVyY19hXCI6MCxcbiAgXCJ1Y3ByZWZpeFwiOmZhbHNlLFxuICBcInBhcmVudFwiOlwiXCIsXG4gIFwia2V5d29yZHNcIjpcImNzcyB0cmFuc2l0aW9uXCIsXG4gIFwiaWVfaWRcIjpcIlwiLFxuICBcImNocm9tZV9pZFwiOlwiXCIsXG4gIFwic2hvd25cIjp0cnVlXG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcInRpdGxlXCI6XCJDU1MzIEJveC1zaXppbmdcIixcbiAgXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHNwZWNpZnlpbmcgd2hldGhlciBvciBub3QgYW4gZWxlbWVudCdzIGJvcmRlcnMgYW5kIHBhZGRpbmcgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHNpemUgdW5pdHNcIixcbiAgXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXVpLyNib3gtc2l6aW5nXCIsXG4gIFwic3RhdHVzXCI6XCJ3ZFwiLFxuICBcImxpbmtzXCI6W1xuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9Fbi9DU1MvQm94LXNpemluZ1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly93d3cuNDU2YmVyZWFzdHJlZXQuY29tL2FyY2hpdmUvMjAxMTA0L2NvbnRyb2xsaW5nX3dpZHRoX3dpdGhfY3NzM19ib3gtc2l6aW5nL1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiQmxvZyBwb3N0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vU2NoZXBwL2JveC1zaXppbmctcG9seWZpbGxcIixcbiAgICAgIFwidGl0bGVcIjpcIlBvbHlmaWxsIGZvciBJRVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL2Nzcy10cmlja3MuY29tL2JveC1zaXppbmcvXCIsXG4gICAgICBcInRpdGxlXCI6XCJDU1MgVHJpY2tzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vZG9jcy53ZWJwbGF0Zm9ybS5vcmcvd2lraS9jc3MvcHJvcGVydGllcy9ib3gtc2l6aW5nXCIsXG4gICAgICBcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJcbiAgICB9XG4gIF0sXG4gIFwiYnVnc1wiOltcbiAgICB7XG4gICAgICBcImRlc2NyaXB0aW9uXCI6XCJBbmRyb2lkIGJyb3dzZXJzIGRvIG5vdCBjYWxjdWxhdGUgY29ycmVjdGx5IHRoZSBkaW1lbnNpb25zICh3aWR0aCBhbmQgaGVpZ2h0KSBvZiB0aGUgSFRNTCBzZWxlY3QgZWxlbWVudC5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJkZXNjcmlwdGlvblwiOlwiU2FmYXJpIDYuMC54IGRvZXMgbm90IHVzZSBib3gtc2l6aW5nIG9uIGVsZW1lbnRzIHdpdGggZGlzcGxheTogdGFibGU7XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZGVzY3JpcHRpb25cIjpcIklFOSB3aWxsIHN1YnRyYWN0IHRoZSB3aWR0aCBvZiB0aGUgc2Nyb2xsYmFyIHRvIHRoZSB3aWR0aCBvZiB0aGUgZWxlbWVudCB3aGVuIHNldCB0byBwb3NpdGlvbjogYWJzb2x1dGUsIG92ZXJmbG93OiBhdXRvIC8gb3ZlcmZsb3cteTogc2Nyb2xsXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZGVzY3JpcHRpb25cIjpcIklFIDggaWdub3JlcyBgYm94LXNpemluZzogYm9yZGVyLWJveGAgaWYgbWluL21heC13aWR0aC9oZWlnaHQgaXMgdXNlZC5cIlxuICAgIH1cbiAgXSxcbiAgXCJjYXRlZ29yaWVzXCI6W1xuICAgIFwiQ1NTM1wiXG4gIF0sXG4gIFwic3RhdHNcIjp7XG4gICAgXCJpZVwiOntcbiAgICAgIFwiNS41XCI6XCJwXCIsXG4gICAgICBcIjZcIjpcInBcIixcbiAgICAgIFwiN1wiOlwicFwiLFxuICAgICAgXCI4XCI6XCJhXCIsXG4gICAgICBcIjlcIjpcImFcIixcbiAgICAgIFwiMTBcIjpcImFcIixcbiAgICAgIFwiMTFcIjpcImFcIlxuICAgIH0sXG4gICAgXCJmaXJlZm94XCI6e1xuICAgICAgXCIyXCI6XCJ5IHhcIixcbiAgICAgIFwiM1wiOlwieSB4XCIsXG4gICAgICBcIjMuNVwiOlwieSB4XCIsXG4gICAgICBcIjMuNlwiOlwieSB4XCIsXG4gICAgICBcIjRcIjpcInkgeFwiLFxuICAgICAgXCI1XCI6XCJ5IHhcIixcbiAgICAgIFwiNlwiOlwieSB4XCIsXG4gICAgICBcIjdcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIixcbiAgICAgIFwiOVwiOlwieSB4XCIsXG4gICAgICBcIjEwXCI6XCJ5IHhcIixcbiAgICAgIFwiMTFcIjpcInkgeFwiLFxuICAgICAgXCIxMlwiOlwieSB4XCIsXG4gICAgICBcIjEzXCI6XCJ5IHhcIixcbiAgICAgIFwiMTRcIjpcInkgeFwiLFxuICAgICAgXCIxNVwiOlwieSB4XCIsXG4gICAgICBcIjE2XCI6XCJ5IHhcIixcbiAgICAgIFwiMTdcIjpcInkgeFwiLFxuICAgICAgXCIxOFwiOlwieSB4XCIsXG4gICAgICBcIjE5XCI6XCJ5IHhcIixcbiAgICAgIFwiMjBcIjpcInkgeFwiLFxuICAgICAgXCIyMVwiOlwieSB4XCIsXG4gICAgICBcIjIyXCI6XCJ5IHhcIixcbiAgICAgIFwiMjNcIjpcInkgeFwiLFxuICAgICAgXCIyNFwiOlwieSB4XCIsXG4gICAgICBcIjI1XCI6XCJ5IHhcIixcbiAgICAgIFwiMjZcIjpcInkgeFwiLFxuICAgICAgXCIyN1wiOlwieSB4XCIsXG4gICAgICBcIjI4XCI6XCJ5IHhcIixcbiAgICAgIFwiMjlcIjpcInlcIixcbiAgICAgIFwiMzBcIjpcInlcIixcbiAgICAgIFwiMzFcIjpcInlcIixcbiAgICAgIFwiMzJcIjpcInlcIixcbiAgICAgIFwiMzNcIjpcInlcIixcbiAgICAgIFwiMzRcIjpcInlcIixcbiAgICAgIFwiMzVcIjpcInlcIixcbiAgICAgIFwiMzZcIjpcInlcIlxuICAgIH0sXG4gICAgXCJjaHJvbWVcIjp7XG4gICAgICBcIjRcIjpcImEgeFwiLFxuICAgICAgXCI1XCI6XCJhIHhcIixcbiAgICAgIFwiNlwiOlwiYSB4XCIsXG4gICAgICBcIjdcIjpcImEgeFwiLFxuICAgICAgXCI4XCI6XCJhIHhcIixcbiAgICAgIFwiOVwiOlwiYSB4XCIsXG4gICAgICBcIjEwXCI6XCJhXCIsXG4gICAgICBcIjExXCI6XCJhXCIsXG4gICAgICBcIjEyXCI6XCJhXCIsXG4gICAgICBcIjEzXCI6XCJhXCIsXG4gICAgICBcIjE0XCI6XCJhXCIsXG4gICAgICBcIjE1XCI6XCJhXCIsXG4gICAgICBcIjE2XCI6XCJhXCIsXG4gICAgICBcIjE3XCI6XCJhXCIsXG4gICAgICBcIjE4XCI6XCJhXCIsXG4gICAgICBcIjE5XCI6XCJhXCIsXG4gICAgICBcIjIwXCI6XCJhXCIsXG4gICAgICBcIjIxXCI6XCJhXCIsXG4gICAgICBcIjIyXCI6XCJhXCIsXG4gICAgICBcIjIzXCI6XCJhXCIsXG4gICAgICBcIjI0XCI6XCJhXCIsXG4gICAgICBcIjI1XCI6XCJhXCIsXG4gICAgICBcIjI2XCI6XCJhXCIsXG4gICAgICBcIjI3XCI6XCJhXCIsXG4gICAgICBcIjI4XCI6XCJhXCIsXG4gICAgICBcIjI5XCI6XCJhXCIsXG4gICAgICBcIjMwXCI6XCJhXCIsXG4gICAgICBcIjMxXCI6XCJhXCIsXG4gICAgICBcIjMyXCI6XCJhXCIsXG4gICAgICBcIjMzXCI6XCJhXCIsXG4gICAgICBcIjM0XCI6XCJhXCIsXG4gICAgICBcIjM1XCI6XCJhXCIsXG4gICAgICBcIjM2XCI6XCJhXCIsXG4gICAgICBcIjM3XCI6XCJhXCIsXG4gICAgICBcIjM4XCI6XCJhXCIsXG4gICAgICBcIjM5XCI6XCJhXCIsXG4gICAgICBcIjQwXCI6XCJhXCIsXG4gICAgICBcIjQxXCI6XCJhXCJcbiAgICB9LFxuICAgIFwic2FmYXJpXCI6e1xuICAgICAgXCIzLjFcIjpcImEgeFwiLFxuICAgICAgXCIzLjJcIjpcImEgeFwiLFxuICAgICAgXCI0XCI6XCJhIHhcIixcbiAgICAgIFwiNVwiOlwiYSB4XCIsXG4gICAgICBcIjUuMVwiOlwiYVwiLFxuICAgICAgXCI2XCI6XCJhXCIsXG4gICAgICBcIjYuMVwiOlwiYVwiLFxuICAgICAgXCI3XCI6XCJhXCIsXG4gICAgICBcIjcuMVwiOlwiYVwiLFxuICAgICAgXCI4XCI6XCJhXCJcbiAgICB9LFxuICAgIFwib3BlcmFcIjp7XG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiOS41LTkuNlwiOlwiYVwiLFxuICAgICAgXCIxMC4wLTEwLjFcIjpcImFcIixcbiAgICAgIFwiMTAuNVwiOlwiYVwiLFxuICAgICAgXCIxMC42XCI6XCJhXCIsXG4gICAgICBcIjExXCI6XCJhXCIsXG4gICAgICBcIjExLjFcIjpcImFcIixcbiAgICAgIFwiMTEuNVwiOlwiYVwiLFxuICAgICAgXCIxMS42XCI6XCJhXCIsXG4gICAgICBcIjEyXCI6XCJhXCIsXG4gICAgICBcIjEyLjFcIjpcImFcIixcbiAgICAgIFwiMTVcIjpcImFcIixcbiAgICAgIFwiMTZcIjpcImFcIixcbiAgICAgIFwiMTdcIjpcImFcIixcbiAgICAgIFwiMThcIjpcImFcIixcbiAgICAgIFwiMTlcIjpcImFcIixcbiAgICAgIFwiMjBcIjpcImFcIixcbiAgICAgIFwiMjFcIjpcImFcIixcbiAgICAgIFwiMjJcIjpcImFcIixcbiAgICAgIFwiMjNcIjpcImFcIixcbiAgICAgIFwiMjRcIjpcImFcIixcbiAgICAgIFwiMjVcIjpcImFcIixcbiAgICAgIFwiMjZcIjpcImFcIlxuICAgIH0sXG4gICAgXCJpb3Nfc2FmXCI6e1xuICAgICAgXCIzLjJcIjpcImEgeFwiLFxuICAgICAgXCI0LjAtNC4xXCI6XCJhIHhcIixcbiAgICAgIFwiNC4yLTQuM1wiOlwiYSB4XCIsXG4gICAgICBcIjUuMC01LjFcIjpcImFcIixcbiAgICAgIFwiNi4wLTYuMVwiOlwiYVwiLFxuICAgICAgXCI3LjAtNy4xXCI6XCJhXCIsXG4gICAgICBcIjhcIjpcImFcIlxuICAgIH0sXG4gICAgXCJvcF9taW5pXCI6e1xuICAgICAgXCI1LjAtOC4wXCI6XCJhXCJcbiAgICB9LFxuICAgIFwiYW5kcm9pZFwiOntcbiAgICAgIFwiMi4xXCI6XCJhIHhcIixcbiAgICAgIFwiMi4yXCI6XCJhIHhcIixcbiAgICAgIFwiMi4zXCI6XCJhIHhcIixcbiAgICAgIFwiM1wiOlwiYSB4XCIsXG4gICAgICBcIjRcIjpcImFcIixcbiAgICAgIFwiNC4xXCI6XCJhXCIsXG4gICAgICBcIjQuMi00LjNcIjpcImFcIixcbiAgICAgIFwiNC40XCI6XCJhXCIsXG4gICAgICBcIjQuNC4zXCI6XCJhXCJcbiAgICB9LFxuICAgIFwiYmJcIjp7XG4gICAgICBcIjdcIjpcImEgeFwiLFxuICAgICAgXCIxMFwiOlwiYVwiXG4gICAgfSxcbiAgICBcIm9wX21vYlwiOntcbiAgICAgIFwiMTBcIjpcImFcIixcbiAgICAgIFwiMTFcIjpcImFcIixcbiAgICAgIFwiMTEuMVwiOlwiYVwiLFxuICAgICAgXCIxMS41XCI6XCJhXCIsXG4gICAgICBcIjEyXCI6XCJhXCIsXG4gICAgICBcIjEyLjFcIjpcImFcIixcbiAgICAgIFwiMjRcIjpcImFcIlxuICAgIH0sXG4gICAgXCJhbmRfY2hyXCI6e1xuICAgICAgXCIzOFwiOlwiYVwiXG4gICAgfSxcbiAgICBcImFuZF9mZlwiOntcbiAgICAgIFwiMzJcIjpcInlcIlxuICAgIH0sXG4gICAgXCJpZV9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJhXCJcbiAgICB9LFxuICAgIFwiYW5kX3VjXCI6e1xuICAgICAgXCI5LjlcIjpcImFcIlxuICAgIH1cbiAgfSxcbiAgXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IHJlZmVycyB0byBzdXBwb3J0aW5nIG9ubHkgdGhlIGBjb250ZW50LWJveGAgYW5kIGBib3JkZXItYm94YCB2YWx1ZXMsIG5vdCBgcGFkZGluZy1ib3hgICh3aGljaCB3YXMgYWRkZWQgdG8gdGhlIHNwZWMgbGF0ZXIpLlwiLFxuICBcIm5vdGVzX2J5X251bVwiOntcbiAgICBcbiAgfSxcbiAgXCJ1c2FnZV9wZXJjX3lcIjoxMy4zMyxcbiAgXCJ1c2FnZV9wZXJjX2FcIjo4Mi43LFxuICBcInVjcHJlZml4XCI6ZmFsc2UsXG4gIFwicGFyZW50XCI6XCJcIixcbiAgXCJrZXl3b3Jkc1wiOlwiYm9yZGVyLWJveCxjb250ZW50LWJveCxwYWRkaW5nLWJveFwiLFxuICBcImllX2lkXCI6XCJcIixcbiAgXCJjaHJvbWVfaWRcIjpcIlwiLFxuICBcInNob3duXCI6dHJ1ZVxufSIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJ0aXRsZVwiOlwiQ1NTMyBDdXJzb3JzIChuZXcgdmFsdWVzKVwiLFxuICBcImRlc2NyaXB0aW9uXCI6XCJTdXBwb3J0IGZvciBgem9vbS1pbmAgYW5kIGB6b29tLW91dGAgdmFsdWVzIGZvciB0aGUgQ1NTMyBgY3Vyc29yYCBwcm9wZXJ0eS5cIixcbiAgXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXVpLyNjdXJzb3JcIixcbiAgXCJzdGF0dXNcIjpcIndkXCIsXG4gIFwibGlua3NcIjpbXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9jdXJzb3JcIixcbiAgICAgIFwidGl0bGVcIjpcIk1ETiBEb2N1bWVudGF0aW9uXCJcbiAgICB9XG4gIF0sXG4gIFwiYnVnc1wiOltcbiAgICBcbiAgXSxcbiAgXCJjYXRlZ29yaWVzXCI6W1xuICAgIFwiQ1NTM1wiXG4gIF0sXG4gIFwic3RhdHNcIjp7XG4gICAgXCJpZVwiOntcbiAgICAgIFwiNS41XCI6XCJuXCIsXG4gICAgICBcIjZcIjpcIm5cIixcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCIsXG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJmaXJlZm94XCI6e1xuICAgICAgXCIyXCI6XCJ5IHhcIixcbiAgICAgIFwiM1wiOlwieSB4XCIsXG4gICAgICBcIjMuNVwiOlwieSB4XCIsXG4gICAgICBcIjMuNlwiOlwieSB4XCIsXG4gICAgICBcIjRcIjpcInkgeFwiLFxuICAgICAgXCI1XCI6XCJ5IHhcIixcbiAgICAgIFwiNlwiOlwieSB4XCIsXG4gICAgICBcIjdcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIixcbiAgICAgIFwiOVwiOlwieSB4XCIsXG4gICAgICBcIjEwXCI6XCJ5IHhcIixcbiAgICAgIFwiMTFcIjpcInkgeFwiLFxuICAgICAgXCIxMlwiOlwieSB4XCIsXG4gICAgICBcIjEzXCI6XCJ5IHhcIixcbiAgICAgIFwiMTRcIjpcInkgeFwiLFxuICAgICAgXCIxNVwiOlwieSB4XCIsXG4gICAgICBcIjE2XCI6XCJ5IHhcIixcbiAgICAgIFwiMTdcIjpcInkgeFwiLFxuICAgICAgXCIxOFwiOlwieSB4XCIsXG4gICAgICBcIjE5XCI6XCJ5IHhcIixcbiAgICAgIFwiMjBcIjpcInkgeFwiLFxuICAgICAgXCIyMVwiOlwieSB4XCIsXG4gICAgICBcIjIyXCI6XCJ5IHhcIixcbiAgICAgIFwiMjNcIjpcInkgeFwiLFxuICAgICAgXCIyNFwiOlwieVwiLFxuICAgICAgXCIyNVwiOlwieVwiLFxuICAgICAgXCIyNlwiOlwieVwiLFxuICAgICAgXCIyN1wiOlwieVwiLFxuICAgICAgXCIyOFwiOlwieVwiLFxuICAgICAgXCIyOVwiOlwieVwiLFxuICAgICAgXCIzMFwiOlwieVwiLFxuICAgICAgXCIzMVwiOlwieVwiLFxuICAgICAgXCIzMlwiOlwieVwiLFxuICAgICAgXCIzM1wiOlwieVwiLFxuICAgICAgXCIzNFwiOlwieVwiLFxuICAgICAgXCIzNVwiOlwieVwiLFxuICAgICAgXCIzNlwiOlwieVwiXG4gICAgfSxcbiAgICBcImNocm9tZVwiOntcbiAgICAgIFwiNFwiOlwieSB4XCIsXG4gICAgICBcIjVcIjpcInkgeFwiLFxuICAgICAgXCI2XCI6XCJ5IHhcIixcbiAgICAgIFwiN1wiOlwieSB4XCIsXG4gICAgICBcIjhcIjpcInkgeFwiLFxuICAgICAgXCI5XCI6XCJ5IHhcIixcbiAgICAgIFwiMTBcIjpcInkgeFwiLFxuICAgICAgXCIxMVwiOlwieSB4XCIsXG4gICAgICBcIjEyXCI6XCJ5IHhcIixcbiAgICAgIFwiMTNcIjpcInkgeFwiLFxuICAgICAgXCIxNFwiOlwieSB4XCIsXG4gICAgICBcIjE1XCI6XCJ5IHhcIixcbiAgICAgIFwiMTZcIjpcInkgeFwiLFxuICAgICAgXCIxN1wiOlwieSB4XCIsXG4gICAgICBcIjE4XCI6XCJ5IHhcIixcbiAgICAgIFwiMTlcIjpcInkgeFwiLFxuICAgICAgXCIyMFwiOlwieSB4XCIsXG4gICAgICBcIjIxXCI6XCJ5IHhcIixcbiAgICAgIFwiMjJcIjpcInkgeFwiLFxuICAgICAgXCIyM1wiOlwieSB4XCIsXG4gICAgICBcIjI0XCI6XCJ5IHhcIixcbiAgICAgIFwiMjVcIjpcInkgeFwiLFxuICAgICAgXCIyNlwiOlwieSB4XCIsXG4gICAgICBcIjI3XCI6XCJ5IHhcIixcbiAgICAgIFwiMjhcIjpcInkgeFwiLFxuICAgICAgXCIyOVwiOlwieSB4XCIsXG4gICAgICBcIjMwXCI6XCJ5IHhcIixcbiAgICAgIFwiMzFcIjpcInkgeFwiLFxuICAgICAgXCIzMlwiOlwieSB4XCIsXG4gICAgICBcIjMzXCI6XCJ5IHhcIixcbiAgICAgIFwiMzRcIjpcInkgeFwiLFxuICAgICAgXCIzNVwiOlwieSB4XCIsXG4gICAgICBcIjM2XCI6XCJ5IHhcIixcbiAgICAgIFwiMzdcIjpcInlcIixcbiAgICAgIFwiMzhcIjpcInlcIixcbiAgICAgIFwiMzlcIjpcInlcIixcbiAgICAgIFwiNDBcIjpcInlcIixcbiAgICAgIFwiNDFcIjpcInlcIlxuICAgIH0sXG4gICAgXCJzYWZhcmlcIjp7XG4gICAgICBcIjMuMVwiOlwieSB4XCIsXG4gICAgICBcIjMuMlwiOlwieSB4XCIsXG4gICAgICBcIjRcIjpcInkgeFwiLFxuICAgICAgXCI1XCI6XCJ5IHhcIixcbiAgICAgIFwiNS4xXCI6XCJ5IHhcIixcbiAgICAgIFwiNlwiOlwieSB4XCIsXG4gICAgICBcIjYuMVwiOlwieSB4XCIsXG4gICAgICBcIjdcIjpcInkgeFwiLFxuICAgICAgXCI3LjFcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJvcGVyYVwiOntcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCI5LjUtOS42XCI6XCJuXCIsXG4gICAgICBcIjEwLjAtMTAuMVwiOlwiblwiLFxuICAgICAgXCIxMC41XCI6XCJuXCIsXG4gICAgICBcIjEwLjZcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTEuMVwiOlwiblwiLFxuICAgICAgXCIxMS41XCI6XCJuXCIsXG4gICAgICBcIjExLjZcIjpcInlcIixcbiAgICAgIFwiMTJcIjpcInlcIixcbiAgICAgIFwiMTIuMVwiOlwieVwiLFxuICAgICAgXCIxNVwiOlwieSB4XCIsXG4gICAgICBcIjE2XCI6XCJ5IHhcIixcbiAgICAgIFwiMTdcIjpcInkgeFwiLFxuICAgICAgXCIxOFwiOlwieSB4XCIsXG4gICAgICBcIjE5XCI6XCJ5IHhcIixcbiAgICAgIFwiMjBcIjpcInkgeFwiLFxuICAgICAgXCIyMVwiOlwieSB4XCIsXG4gICAgICBcIjIyXCI6XCJ5IHhcIixcbiAgICAgIFwiMjNcIjpcInkgeFwiLFxuICAgICAgXCIyNFwiOlwieVwiLFxuICAgICAgXCIyNVwiOlwieVwiLFxuICAgICAgXCIyNlwiOlwieVwiXG4gICAgfSxcbiAgICBcImlvc19zYWZcIjp7XG4gICAgICBcIjMuMlwiOlwiblwiLFxuICAgICAgXCI0LjAtNC4xXCI6XCJuXCIsXG4gICAgICBcIjQuMi00LjNcIjpcIm5cIixcbiAgICAgIFwiNS4wLTUuMVwiOlwiblwiLFxuICAgICAgXCI2LjAtNi4xXCI6XCJuXCIsXG4gICAgICBcIjcuMC03LjFcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiXG4gICAgfSxcbiAgICBcIm9wX21pbmlcIjp7XG4gICAgICBcIjUuMC04LjBcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJhbmRyb2lkXCI6e1xuICAgICAgXCIyLjFcIjpcIm5cIixcbiAgICAgIFwiMi4yXCI6XCJuXCIsXG4gICAgICBcIjIuM1wiOlwiblwiLFxuICAgICAgXCIzXCI6XCJuXCIsXG4gICAgICBcIjRcIjpcIm5cIixcbiAgICAgIFwiNC4xXCI6XCJuXCIsXG4gICAgICBcIjQuMi00LjNcIjpcIm5cIixcbiAgICAgIFwiNC40XCI6XCJuXCIsXG4gICAgICBcIjQuNC4zXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYmJcIjp7XG4gICAgICBcIjdcIjpcInkgeFwiLFxuICAgICAgXCIxMFwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwib3BfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMS4xXCI6XCJuXCIsXG4gICAgICBcIjExLjVcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcIm5cIixcbiAgICAgIFwiMTIuMVwiOlwiblwiLFxuICAgICAgXCIyNFwiOlwiblwiXG4gICAgfSxcbiAgICBcImFuZF9jaHJcIjp7XG4gICAgICBcIjM4XCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kX2ZmXCI6e1xuICAgICAgXCIzMlwiOlwiblwiXG4gICAgfSxcbiAgICBcImllX21vYlwiOntcbiAgICAgIFwiMTBcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJhbmRfdWNcIjp7XG4gICAgICBcIjkuOVwiOlwiblwiXG4gICAgfVxuICB9LFxuICBcIm5vdGVzXCI6XCJDaHJvbWUsIFNhZmFyaSBhbmQgRmlyZWZveCBhbHNvIHN1cHBvcnQgdGhlIHVub2ZmaWNpYWwgYGdyYWJgIGFuZCBgZ3JhYmJpbmdgIHZhbHVlcyAod2l0aCBwcmVmaXgpXCIsXG4gIFwibm90ZXNfYnlfbnVtXCI6e1xuICAgIFxuICB9LFxuICBcInVzYWdlX3BlcmNfeVwiOjUxLjA5LFxuICBcInVzYWdlX3BlcmNfYVwiOjAsXG4gIFwidWNwcmVmaXhcIjpmYWxzZSxcbiAgXCJwYXJlbnRcIjpcIlwiLFxuICBcImtleXdvcmRzXCI6XCJjdXJzb3JzLCBwb2ludGVyc1wiLFxuICBcImllX2lkXCI6XCJcIixcbiAgXCJjaHJvbWVfaWRcIjpcIlwiLFxuICBcInNob3duXCI6dHJ1ZVxufSIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJ0aXRsZVwiOlwiQ1NTMyB0YWItc2l6ZVwiLFxuICBcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgY3VzdG9taXppbmcgdGhlIHdpZHRoIG9mIHRoZSB0YWIgY2hhcmFjdGVyLiBPbmx5IGVmZmVjdGl2ZSB1c2luZyAnd2hpdGUtc3BhY2U6IHByZScgb3IgJ3doaXRlLXNwYWNlOiBwcmUtd3JhcCcuXCIsXG4gIFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy10ZXh0LyN0YWItc2l6ZTFcIixcbiAgXCJzdGF0dXNcIjpcIndkXCIsXG4gIFwibGlua3NcIjpbXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90YWItc2l6ZVwiLFxuICAgICAgXCJ0aXRsZVwiOlwiTUROIGFydGljbGVcIlxuICAgIH1cbiAgXSxcbiAgXCJidWdzXCI6W1xuICAgIFxuICBdLFxuICBcImNhdGVnb3JpZXNcIjpbXG4gICAgXCJDU1MzXCJcbiAgXSxcbiAgXCJzdGF0c1wiOntcbiAgICBcImllXCI6e1xuICAgICAgXCI1LjVcIjpcIm5cIixcbiAgICAgIFwiNlwiOlwiblwiLFxuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjhcIjpcIm5cIixcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiXG4gICAgfSxcbiAgICBcImZpcmVmb3hcIjp7XG4gICAgICBcIjJcIjpcIm5cIixcbiAgICAgIFwiM1wiOlwiblwiLFxuICAgICAgXCIzLjVcIjpcIm5cIixcbiAgICAgIFwiMy42XCI6XCJuXCIsXG4gICAgICBcIjRcIjpcInkgeFwiLFxuICAgICAgXCI1XCI6XCJ5IHhcIixcbiAgICAgIFwiNlwiOlwieSB4XCIsXG4gICAgICBcIjdcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIixcbiAgICAgIFwiOVwiOlwieSB4XCIsXG4gICAgICBcIjEwXCI6XCJ5IHhcIixcbiAgICAgIFwiMTFcIjpcInkgeFwiLFxuICAgICAgXCIxMlwiOlwieSB4XCIsXG4gICAgICBcIjEzXCI6XCJ5IHhcIixcbiAgICAgIFwiMTRcIjpcInkgeFwiLFxuICAgICAgXCIxNVwiOlwieSB4XCIsXG4gICAgICBcIjE2XCI6XCJ5IHhcIixcbiAgICAgIFwiMTdcIjpcInkgeFwiLFxuICAgICAgXCIxOFwiOlwieSB4XCIsXG4gICAgICBcIjE5XCI6XCJ5IHhcIixcbiAgICAgIFwiMjBcIjpcInkgeFwiLFxuICAgICAgXCIyMVwiOlwieSB4XCIsXG4gICAgICBcIjIyXCI6XCJ5IHhcIixcbiAgICAgIFwiMjNcIjpcInkgeFwiLFxuICAgICAgXCIyNFwiOlwieSB4XCIsXG4gICAgICBcIjI1XCI6XCJ5IHhcIixcbiAgICAgIFwiMjZcIjpcInkgeFwiLFxuICAgICAgXCIyN1wiOlwieSB4XCIsXG4gICAgICBcIjI4XCI6XCJ5IHhcIixcbiAgICAgIFwiMjlcIjpcInkgeFwiLFxuICAgICAgXCIzMFwiOlwieSB4XCIsXG4gICAgICBcIjMxXCI6XCJ5IHhcIixcbiAgICAgIFwiMzJcIjpcInkgeFwiLFxuICAgICAgXCIzM1wiOlwieSB4XCIsXG4gICAgICBcIjM0XCI6XCJ5IHhcIixcbiAgICAgIFwiMzVcIjpcInkgeFwiLFxuICAgICAgXCIzNlwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwiY2hyb21lXCI6e1xuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjVcIjpcIm5cIixcbiAgICAgIFwiNlwiOlwiblwiLFxuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjhcIjpcIm5cIixcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMlwiOlwiblwiLFxuICAgICAgXCIxM1wiOlwiblwiLFxuICAgICAgXCIxNFwiOlwiblwiLFxuICAgICAgXCIxNVwiOlwiblwiLFxuICAgICAgXCIxNlwiOlwiblwiLFxuICAgICAgXCIxN1wiOlwiblwiLFxuICAgICAgXCIxOFwiOlwiblwiLFxuICAgICAgXCIxOVwiOlwiblwiLFxuICAgICAgXCIyMFwiOlwiblwiLFxuICAgICAgXCIyMVwiOlwieVwiLFxuICAgICAgXCIyMlwiOlwieVwiLFxuICAgICAgXCIyM1wiOlwieVwiLFxuICAgICAgXCIyNFwiOlwieVwiLFxuICAgICAgXCIyNVwiOlwieVwiLFxuICAgICAgXCIyNlwiOlwieVwiLFxuICAgICAgXCIyN1wiOlwieVwiLFxuICAgICAgXCIyOFwiOlwieVwiLFxuICAgICAgXCIyOVwiOlwieVwiLFxuICAgICAgXCIzMFwiOlwieVwiLFxuICAgICAgXCIzMVwiOlwieVwiLFxuICAgICAgXCIzMlwiOlwieVwiLFxuICAgICAgXCIzM1wiOlwieVwiLFxuICAgICAgXCIzNFwiOlwieVwiLFxuICAgICAgXCIzNVwiOlwieVwiLFxuICAgICAgXCIzNlwiOlwieVwiLFxuICAgICAgXCIzN1wiOlwieVwiLFxuICAgICAgXCIzOFwiOlwieVwiLFxuICAgICAgXCIzOVwiOlwieVwiLFxuICAgICAgXCI0MFwiOlwieVwiLFxuICAgICAgXCI0MVwiOlwieVwiXG4gICAgfSxcbiAgICBcInNhZmFyaVwiOntcbiAgICAgIFwiMy4xXCI6XCJuXCIsXG4gICAgICBcIjMuMlwiOlwiblwiLFxuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjVcIjpcIm5cIixcbiAgICAgIFwiNS4xXCI6XCJuXCIsXG4gICAgICBcIjZcIjpcIm5cIixcbiAgICAgIFwiNi4xXCI6XCJ5XCIsXG4gICAgICBcIjdcIjpcInlcIixcbiAgICAgIFwiNy4xXCI6XCJ5XCIsXG4gICAgICBcIjhcIjpcInlcIlxuICAgIH0sXG4gICAgXCJvcGVyYVwiOntcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCI5LjUtOS42XCI6XCJuXCIsXG4gICAgICBcIjEwLjAtMTAuMVwiOlwiblwiLFxuICAgICAgXCIxMC41XCI6XCJuXCIsXG4gICAgICBcIjEwLjZcIjpcInkgeFwiLFxuICAgICAgXCIxMVwiOlwieSB4XCIsXG4gICAgICBcIjExLjFcIjpcInkgeFwiLFxuICAgICAgXCIxMS41XCI6XCJ5IHhcIixcbiAgICAgIFwiMTEuNlwiOlwieSB4XCIsXG4gICAgICBcIjEyXCI6XCJ5IHhcIixcbiAgICAgIFwiMTIuMVwiOlwieSB4XCIsXG4gICAgICBcIjE1XCI6XCJ5XCIsXG4gICAgICBcIjE2XCI6XCJ5XCIsXG4gICAgICBcIjE3XCI6XCJ5XCIsXG4gICAgICBcIjE4XCI6XCJ5XCIsXG4gICAgICBcIjE5XCI6XCJ5XCIsXG4gICAgICBcIjIwXCI6XCJ5XCIsXG4gICAgICBcIjIxXCI6XCJ5XCIsXG4gICAgICBcIjIyXCI6XCJ5XCIsXG4gICAgICBcIjIzXCI6XCJ5XCIsXG4gICAgICBcIjI0XCI6XCJ5XCIsXG4gICAgICBcIjI1XCI6XCJ5XCIsXG4gICAgICBcIjI2XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiaW9zX3NhZlwiOntcbiAgICAgIFwiMy4yXCI6XCJuXCIsXG4gICAgICBcIjQuMC00LjFcIjpcIm5cIixcbiAgICAgIFwiNC4yLTQuM1wiOlwiblwiLFxuICAgICAgXCI1LjAtNS4xXCI6XCJuXCIsXG4gICAgICBcIjYuMC02LjFcIjpcIm5cIixcbiAgICAgIFwiNy4wLTcuMVwiOlwieVwiLFxuICAgICAgXCI4XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwib3BfbWluaVwiOntcbiAgICAgIFwiNS4wLTguMFwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwiYW5kcm9pZFwiOntcbiAgICAgIFwiMi4xXCI6XCJuXCIsXG4gICAgICBcIjIuMlwiOlwiblwiLFxuICAgICAgXCIyLjNcIjpcIm5cIixcbiAgICAgIFwiM1wiOlwiblwiLFxuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjQuMVwiOlwiblwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJuXCIsXG4gICAgICBcIjQuNFwiOlwieVwiLFxuICAgICAgXCI0LjQuM1wiOlwieVwiXG4gICAgfSxcbiAgICBcImJiXCI6e1xuICAgICAgXCI3XCI6XCJ5XCIsXG4gICAgICBcIjEwXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwib3BfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwieSB4XCIsXG4gICAgICBcIjExLjFcIjpcInkgeFwiLFxuICAgICAgXCIxMS41XCI6XCJ5IHhcIixcbiAgICAgIFwiMTJcIjpcInkgeFwiLFxuICAgICAgXCIxMi4xXCI6XCJ5IHhcIixcbiAgICAgIFwiMjRcIjpcInlcIlxuICAgIH0sXG4gICAgXCJhbmRfY2hyXCI6e1xuICAgICAgXCIzOFwiOlwieVwiXG4gICAgfSxcbiAgICBcImFuZF9mZlwiOntcbiAgICAgIFwiMzJcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcImllX21vYlwiOntcbiAgICAgIFwiMTBcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJhbmRfdWNcIjp7XG4gICAgICBcIjkuOVwiOlwiblwiXG4gICAgfVxuICB9LFxuICBcIm5vdGVzXCI6XCJcIixcbiAgXCJub3Rlc19ieV9udW1cIjp7XG4gICAgXG4gIH0sXG4gIFwidXNhZ2VfcGVyY195XCI6NjkuMzMsXG4gIFwidXNhZ2VfcGVyY19hXCI6MCxcbiAgXCJ1Y3ByZWZpeFwiOmZhbHNlLFxuICBcInBhcmVudFwiOlwiXCIsXG4gIFwia2V5d29yZHNcIjpcInRhYi1zaXplLHRhYi13aWR0aFwiLFxuICBcImllX2lkXCI6XCJcIixcbiAgXCJjaHJvbWVfaWRcIjpcIlwiLFxuICBcInNob3duXCI6dHJ1ZVxufSIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJ0aXRsZVwiOlwiRmxleGlibGUgQm94IExheW91dCBNb2R1bGVcIixcbiAgXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHBvc2l0aW9uaW5nIGVsZW1lbnRzIGluIGhvcml6b250YWwgb3IgdmVydGljYWwgc3RhY2tzLlwiLFxuICBcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtZmxleGJveC9cIixcbiAgXCJzdGF0dXNcIjpcImNyXCIsXG4gIFwibGlua3NcIjpbXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9iZW5uZXR0ZmVlbHkuY29tL2ZsZXhwbG9yZXIvXCIsXG4gICAgICBcInRpdGxlXCI6XCJGbGV4Ym94IENTUyBnZW5lcmF0b3JcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly93d3cuYWRvYmUuY29tL2Rldm5ldC9odG1sNS9hcnRpY2xlcy93b3JraW5nLXdpdGgtZmxleGJveC10aGUtbmV3LXNwZWMuaHRtbFwiLFxuICAgICAgXCJ0aXRsZVwiOlwiQXJ0aWNsZSBvbiB1c2luZyB0aGUgbGF0ZXN0IHNwZWNcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHBzOi8vZGV2Lm9wZXJhLmNvbS9hcnRpY2xlcy92aWV3L2FkdmFuY2VkLWNyb3NzLWJyb3dzZXItZmxleGJveC9cIixcbiAgICAgIFwidGl0bGVcIjpcIlR1dG9yaWFsIG9uIGNyb3NzLWJyb3dzZXIgc3VwcG9ydFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL3BoaWxpcHdhbHRvbi5naXRodWIuaW8vc29sdmVkLWJ5LWZsZXhib3gvXCIsXG4gICAgICBcInRpdGxlXCI6XCJFeGFtcGxlcyBvbiBob3cgdG8gc29sdmUgY29tbW9uIGxheW91dCBwcm9ibGVtcyB3aXRoIGZsZXhib3hcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9jc3MvYS1ndWlkZS10by1mbGV4Ym94L1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiQSBDb21wbGV0ZSBHdWlkZSB0byBGbGV4Ym94XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vdGhlLWVjaG9wbGV4Lm5ldC9mbGV4eWJveGVzL1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiRmxleGJveCBwbGF5Z3JvdW5kIGFuZCBjb2RlIGdlbmVyYXRvclwiXG4gICAgfVxuICBdLFxuICBcImJ1Z3NcIjpbXG4gICAge1xuICAgICAgXCJkZXNjcmlwdGlvblwiOlwiSUUxMCBhbmQgSUUxMSBkZWZhdWx0IHZhbHVlcyBmb3IgYGZsZXhgIGFyZSBgMCAwIGF1dG9gIHJhdGhlciB0aGFuIGAwIDEgYXV0b2AsIGFzIHBlciB0aGUgZHJhZnQgc3BlYywgYXMgb2YgU2VwdGVtYmVyIDIwMTMuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZGVzY3JpcHRpb25cIjpcIkluIElFMTAgYW5kIElFMTEsIGNvbnRhaW5lcnMgd2l0aCBgZGlzcGxheTogZmxleGAgYW5kIGBmbGV4LWRpcmVjdGlvbjogY29sdW1uYCB3aWxsIG5vdCBwcm9wZXJseSBjYWxjdWxhdGUgdGhlaXIgZmxleGVkIGNoaWxkcmVucycgc2l6ZXMgaWYgdGhlIGNvbnRhaW5lciBoYXMgYG1pbi1oZWlnaHRgIGJ1dCBubyBleHBsaWNpdCBgaGVpZ2h0YCBwcm9wZXJ0eS4gW1NlZSBidWddKGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvODAyNjI1L21pbi1oZWlnaHQtYW5kLWZsZXhib3gtZmxleC1kaXJlY3Rpb24tY29sdW1uLWRvbnQtd29yay10b2dldGhlci1pbi1pZS0xMC0xMS1wcmV2aWV3KS5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJkZXNjcmlwdGlvblwiOlwiSW4gQ2hyb21lIGFuZCBTYWZhcmksIHRoZSBoZWlnaHQgb2YgKG5vbiBmbGV4KSBjaGlsZHJlbiBhcmUgbm90IHJlY29nbml6ZWQgaW4gcGVyY2VudGFnZXMuIEhvd2V2ZXIgRmlyZWZveCBhbmQgSUUgcmVjb2duaXplIGFuZCBzY2FsZSB0aGUgY2hpbGRyZW4gYmFzZWQgb24gcGVyY2VudGFnZSBoZWlnaHRzLiBbQ2hyb21lIGJ1Z10oaHR0cDovL2NyYnVnLmNvbS8zNDEzMTApXCJcbiAgICB9XG4gIF0sXG4gIFwiY2F0ZWdvcmllc1wiOltcbiAgICBcIkNTUzNcIlxuICBdLFxuICBcInN0YXRzXCI6e1xuICAgIFwiaWVcIjp7XG4gICAgICBcIjUuNVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiLFxuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjEwXCI6XCJhIHggIzJcIixcbiAgICAgIFwiMTFcIjpcInlcIlxuICAgIH0sXG4gICAgXCJmaXJlZm94XCI6e1xuICAgICAgXCIyXCI6XCJhIHggIzFcIixcbiAgICAgIFwiM1wiOlwiYSB4ICMxXCIsXG4gICAgICBcIjMuNVwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjMuNlwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjRcIjpcImEgeCAjMVwiLFxuICAgICAgXCI1XCI6XCJhIHggIzFcIixcbiAgICAgIFwiNlwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjdcIjpcImEgeCAjMVwiLFxuICAgICAgXCI4XCI6XCJhIHggIzFcIixcbiAgICAgIFwiOVwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjEwXCI6XCJhIHggIzFcIixcbiAgICAgIFwiMTFcIjpcImEgeCAjMVwiLFxuICAgICAgXCIxMlwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjEzXCI6XCJhIHggIzFcIixcbiAgICAgIFwiMTRcIjpcImEgeCAjMVwiLFxuICAgICAgXCIxNVwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjE2XCI6XCJhIHggIzFcIixcbiAgICAgIFwiMTdcIjpcImEgeCAjMVwiLFxuICAgICAgXCIxOFwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjE5XCI6XCJhIHggIzFcIixcbiAgICAgIFwiMjBcIjpcImEgeCAjMVwiLFxuICAgICAgXCIyMVwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjIyXCI6XCJhICMzXCIsXG4gICAgICBcIjIzXCI6XCJhICMzXCIsXG4gICAgICBcIjI0XCI6XCJhICMzXCIsXG4gICAgICBcIjI1XCI6XCJhICMzXCIsXG4gICAgICBcIjI2XCI6XCJhICMzXCIsXG4gICAgICBcIjI3XCI6XCJhICMzXCIsXG4gICAgICBcIjI4XCI6XCJ5XCIsXG4gICAgICBcIjI5XCI6XCJ5XCIsXG4gICAgICBcIjMwXCI6XCJ5XCIsXG4gICAgICBcIjMxXCI6XCJ5XCIsXG4gICAgICBcIjMyXCI6XCJ5XCIsXG4gICAgICBcIjMzXCI6XCJ5XCIsXG4gICAgICBcIjM0XCI6XCJ5XCIsXG4gICAgICBcIjM1XCI6XCJ5XCIsXG4gICAgICBcIjM2XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiY2hyb21lXCI6e1xuICAgICAgXCI0XCI6XCJhIHggIzFcIixcbiAgICAgIFwiNVwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjZcIjpcImEgeCAjMVwiLFxuICAgICAgXCI3XCI6XCJhIHggIzFcIixcbiAgICAgIFwiOFwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjlcIjpcImEgeCAjMVwiLFxuICAgICAgXCIxMFwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjExXCI6XCJhIHggIzFcIixcbiAgICAgIFwiMTJcIjpcImEgeCAjMVwiLFxuICAgICAgXCIxM1wiOlwiYSB4ICMxXCIsXG4gICAgICBcIjE0XCI6XCJhIHggIzFcIixcbiAgICAgIFwiMTVcIjpcImEgeCAjMVwiLFxuICAgICAgXCIxNlwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjE3XCI6XCJhIHggIzFcIixcbiAgICAgIFwiMThcIjpcImEgeCAjMVwiLFxuICAgICAgXCIxOVwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjIwXCI6XCJhIHggIzFcIixcbiAgICAgIFwiMjFcIjpcInkgeFwiLFxuICAgICAgXCIyMlwiOlwieSB4XCIsXG4gICAgICBcIjIzXCI6XCJ5IHhcIixcbiAgICAgIFwiMjRcIjpcInkgeFwiLFxuICAgICAgXCIyNVwiOlwieSB4XCIsXG4gICAgICBcIjI2XCI6XCJ5IHhcIixcbiAgICAgIFwiMjdcIjpcInkgeFwiLFxuICAgICAgXCIyOFwiOlwieSB4XCIsXG4gICAgICBcIjI5XCI6XCJ5XCIsXG4gICAgICBcIjMwXCI6XCJ5XCIsXG4gICAgICBcIjMxXCI6XCJ5XCIsXG4gICAgICBcIjMyXCI6XCJ5XCIsXG4gICAgICBcIjMzXCI6XCJ5XCIsXG4gICAgICBcIjM0XCI6XCJ5XCIsXG4gICAgICBcIjM1XCI6XCJ5XCIsXG4gICAgICBcIjM2XCI6XCJ5XCIsXG4gICAgICBcIjM3XCI6XCJ5XCIsXG4gICAgICBcIjM4XCI6XCJ5XCIsXG4gICAgICBcIjM5XCI6XCJ5XCIsXG4gICAgICBcIjQwXCI6XCJ5XCIsXG4gICAgICBcIjQxXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwic2FmYXJpXCI6e1xuICAgICAgXCIzLjFcIjpcImEgeCAjMVwiLFxuICAgICAgXCIzLjJcIjpcImEgeCAjMVwiLFxuICAgICAgXCI0XCI6XCJhIHggIzFcIixcbiAgICAgIFwiNVwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjUuMVwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjZcIjpcImEgeCAjMVwiLFxuICAgICAgXCI2LjFcIjpcInkgeFwiLFxuICAgICAgXCI3XCI6XCJ5IHhcIixcbiAgICAgIFwiNy4xXCI6XCJ5IHhcIixcbiAgICAgIFwiOFwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwib3BlcmFcIjp7XG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiOS41LTkuNlwiOlwiblwiLFxuICAgICAgXCIxMC4wLTEwLjFcIjpcIm5cIixcbiAgICAgIFwiMTAuNVwiOlwiblwiLFxuICAgICAgXCIxMC42XCI6XCJuXCIsXG4gICAgICBcIjExXCI6XCJuXCIsXG4gICAgICBcIjExLjFcIjpcIm5cIixcbiAgICAgIFwiMTEuNVwiOlwiblwiLFxuICAgICAgXCIxMS42XCI6XCJuXCIsXG4gICAgICBcIjEyXCI6XCJuXCIsXG4gICAgICBcIjEyLjFcIjpcInlcIixcbiAgICAgIFwiMTVcIjpcInkgeFwiLFxuICAgICAgXCIxNlwiOlwieSB4XCIsXG4gICAgICBcIjE3XCI6XCJ5XCIsXG4gICAgICBcIjE4XCI6XCJ5XCIsXG4gICAgICBcIjE5XCI6XCJ5XCIsXG4gICAgICBcIjIwXCI6XCJ5XCIsXG4gICAgICBcIjIxXCI6XCJ5XCIsXG4gICAgICBcIjIyXCI6XCJ5XCIsXG4gICAgICBcIjIzXCI6XCJ5XCIsXG4gICAgICBcIjI0XCI6XCJ5XCIsXG4gICAgICBcIjI1XCI6XCJ5XCIsXG4gICAgICBcIjI2XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiaW9zX3NhZlwiOntcbiAgICAgIFwiMy4yXCI6XCJhIHggIzFcIixcbiAgICAgIFwiNC4wLTQuMVwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjQuMi00LjNcIjpcImEgeCAjMVwiLFxuICAgICAgXCI1LjAtNS4xXCI6XCJhIHggIzFcIixcbiAgICAgIFwiNi4wLTYuMVwiOlwiYSB4ICMxXCIsXG4gICAgICBcIjcuMC03LjFcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJvcF9taW5pXCI6e1xuICAgICAgXCI1LjAtOC4wXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kcm9pZFwiOntcbiAgICAgIFwiMi4xXCI6XCJhIHggIzFcIixcbiAgICAgIFwiMi4yXCI6XCJhIHggIzFcIixcbiAgICAgIFwiMi4zXCI6XCJhIHggIzFcIixcbiAgICAgIFwiM1wiOlwiYSB4ICMxXCIsXG4gICAgICBcIjRcIjpcImEgeCAjMVwiLFxuICAgICAgXCI0LjFcIjpcImEgeCAjMVwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJhIHggIzFcIixcbiAgICAgIFwiNC40XCI6XCJ5XCIsXG4gICAgICBcIjQuNC4zXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiYmJcIjp7XG4gICAgICBcIjdcIjpcImEgeCAjMVwiLFxuICAgICAgXCIxMFwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwib3BfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMS4xXCI6XCJuXCIsXG4gICAgICBcIjExLjVcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcIm5cIixcbiAgICAgIFwiMTIuMVwiOlwieVwiLFxuICAgICAgXCIyNFwiOlwieVwiXG4gICAgfSxcbiAgICBcImFuZF9jaHJcIjp7XG4gICAgICBcIjM4XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiYW5kX2ZmXCI6e1xuICAgICAgXCIzMlwiOlwieVwiXG4gICAgfSxcbiAgICBcImllX21vYlwiOntcbiAgICAgIFwiMTBcIjpcImEgeCAjMlwiXG4gICAgfSxcbiAgICBcImFuZF91Y1wiOntcbiAgICAgIFwiOS45XCI6XCJhIHggIzFcIlxuICAgIH1cbiAgfSxcbiAgXCJub3Rlc1wiOlwiTW9zdCBwYXJ0aWFsIHN1cHBvcnQgcmVmZXJzIHRvIHN1cHBvcnRpbmcgYW4gW29sZGVyIHZlcnNpb25dKGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDkvV0QtY3NzMy1mbGV4Ym94LTIwMDkwNzIzLykgb2YgdGhlIHNwZWNpZmljYXRpb24gb3IgYW4gW29sZGVyIHN5bnRheF0oaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMi9XRC1jc3MzLWZsZXhib3gtMjAxMjAzMjIvKS5cIixcbiAgXCJub3Rlc19ieV9udW1cIjp7XG4gICAgXCIxXCI6XCJPbmx5IHN1cHBvcnRzIHRoZSBbb2xkIGZsZXhib3hdKGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDkvV0QtY3NzMy1mbGV4Ym94LTIwMDkwNzIzKSBzcGVjaWZpY2F0aW9uIGFuZCBkb2VzIG5vdCBzdXBwb3J0IHdyYXBwaW5nLlwiLFxuICAgIFwiMlwiOlwiT25seSBzdXBwb3J0cyB0aGUgWzIwMTIgc3ludGF4XShodHRwOi8vd3d3LnczLm9yZy9UUi8yMDEyL1dELWNzczMtZmxleGJveC0yMDEyMDMyMi8pXCIsXG4gICAgXCIzXCI6XCJEb2VzIG5vdCBzdXBwb3J0IGZsZXgtd3JhcCBvciBmbGV4LWZsb3cgcHJvcGVydGllc1wiXG4gIH0sXG4gIFwidXNhZ2VfcGVyY195XCI6NzEuOTEsXG4gIFwidXNhZ2VfcGVyY19hXCI6MTQuNTMsXG4gIFwidWNwcmVmaXhcIjpmYWxzZSxcbiAgXCJwYXJlbnRcIjpcIlwiLFxuICBcImtleXdvcmRzXCI6XCJmbGV4LWJveCxmbGV4LWRpcmVjdGlvbixmbGV4LXdyYXAsZmxleC1mbG93LGZsZXgtZ3JvdyxmbGV4LWJhc2lzXCIsXG4gIFwiaWVfaWRcIjpcImZsZXhib3hcIixcbiAgXCJjaHJvbWVfaWRcIjpcIjQ4MzczMDE0MDY0MDA1MTJcIixcbiAgXCJzaG93blwiOnRydWVcbn0iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwidGl0bGVcIjpcIkZvbnQgZmVhdHVyZSBzZXR0aW5nc1wiLFxuICBcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgYXBwbHlpbmcgYWR2YW5jZWQgdHlwb2dyYXBoaWMgYW5kIGxhbmd1YWdlLXNwZWNpZmljIGZvbnQgZmVhdHVyZXMgdG8gc3VwcG9ydGVkIE9wZW5UeXBlIGZvbnRzLlwiLFxuICBcInNwZWNcIjpcImh0dHA6Ly93My5vcmcvVFIvY3NzMy1mb250cy8jZm9udC1yZW5kLXByb3BzXCIsXG4gIFwic3RhdHVzXCI6XCJ3ZFwiLFxuICBcImxpbmtzXCI6W1xuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vaWUubWljcm9zb2Z0LmNvbS90ZXN0ZHJpdmUvR3JhcGhpY3Mvb3BlbnR5cGUvXCIsXG4gICAgICBcInRpdGxlXCI6XCJEZW1vIHBhZ2VzIChJRS9GaXJlZm94IG9ubHkpXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vaGFja3MubW96aWxsYS5vcmcvMjAxMC8xMS9maXJlZm94LTQtZm9udC1mZWF0dXJlLXN1cHBvcnQvXCIsXG4gICAgICBcInRpdGxlXCI6XCJNb3ppbGxhIGhhY2tzIGFydGljbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9odG1sNWFjY2Vzc2liaWxpdHkuY29tL1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiRGV0YWlsZWQgdGFibGVzIG9uIGFjY2Vzc2FiaWxpdHkgc3VwcG9ydFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvY3NzL3Byb3BlcnRpZXMvZm9udC1mZWF0dXJlLXNldHRpbmdzXCIsXG4gICAgICBcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJcbiAgICB9XG4gIF0sXG4gIFwiYnVnc1wiOltcbiAgICBcbiAgXSxcbiAgXCJjYXRlZ29yaWVzXCI6W1xuICAgIFwiQ1NTM1wiXG4gIF0sXG4gIFwic3RhdHNcIjp7XG4gICAgXCJpZVwiOntcbiAgICAgIFwiNS41XCI6XCJuXCIsXG4gICAgICBcIjZcIjpcIm5cIixcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCIsXG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiMTBcIjpcInlcIixcbiAgICAgIFwiMTFcIjpcInlcIlxuICAgIH0sXG4gICAgXCJmaXJlZm94XCI6e1xuICAgICAgXCIyXCI6XCJuXCIsXG4gICAgICBcIjNcIjpcIm5cIixcbiAgICAgIFwiMy41XCI6XCJuXCIsXG4gICAgICBcIjMuNlwiOlwiblwiLFxuICAgICAgXCI0XCI6XCJhIHhcIixcbiAgICAgIFwiNVwiOlwiYSB4XCIsXG4gICAgICBcIjZcIjpcImEgeFwiLFxuICAgICAgXCI3XCI6XCJhIHhcIixcbiAgICAgIFwiOFwiOlwiYSB4XCIsXG4gICAgICBcIjlcIjpcImEgeFwiLFxuICAgICAgXCIxMFwiOlwiYSB4XCIsXG4gICAgICBcIjExXCI6XCJhIHhcIixcbiAgICAgIFwiMTJcIjpcImEgeFwiLFxuICAgICAgXCIxM1wiOlwiYSB4XCIsXG4gICAgICBcIjE0XCI6XCJhIHhcIixcbiAgICAgIFwiMTVcIjpcInkgeFwiLFxuICAgICAgXCIxNlwiOlwieSB4XCIsXG4gICAgICBcIjE3XCI6XCJ5IHhcIixcbiAgICAgIFwiMThcIjpcInkgeFwiLFxuICAgICAgXCIxOVwiOlwieSB4XCIsXG4gICAgICBcIjIwXCI6XCJ5IHhcIixcbiAgICAgIFwiMjFcIjpcInkgeFwiLFxuICAgICAgXCIyMlwiOlwieSB4XCIsXG4gICAgICBcIjIzXCI6XCJ5IHhcIixcbiAgICAgIFwiMjRcIjpcInkgeFwiLFxuICAgICAgXCIyNVwiOlwieSB4XCIsXG4gICAgICBcIjI2XCI6XCJ5IHhcIixcbiAgICAgIFwiMjdcIjpcInkgeFwiLFxuICAgICAgXCIyOFwiOlwieSB4XCIsXG4gICAgICBcIjI5XCI6XCJ5IHhcIixcbiAgICAgIFwiMzBcIjpcInkgeFwiLFxuICAgICAgXCIzMVwiOlwieSB4XCIsXG4gICAgICBcIjMyXCI6XCJ5IHhcIixcbiAgICAgIFwiMzNcIjpcInkgeFwiLFxuICAgICAgXCIzNFwiOlwieVwiLFxuICAgICAgXCIzNVwiOlwieVwiLFxuICAgICAgXCIzNlwiOlwieVwiXG4gICAgfSxcbiAgICBcImNocm9tZVwiOntcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI1XCI6XCJuXCIsXG4gICAgICBcIjZcIjpcIm5cIixcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCIsXG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcIm5cIixcbiAgICAgIFwiMTNcIjpcIm5cIixcbiAgICAgIFwiMTRcIjpcIm5cIixcbiAgICAgIFwiMTVcIjpcIm5cIixcbiAgICAgIFwiMTZcIjpcImEgeFwiLFxuICAgICAgXCIxN1wiOlwiYSB4XCIsXG4gICAgICBcIjE4XCI6XCJhIHhcIixcbiAgICAgIFwiMTlcIjpcImEgeFwiLFxuICAgICAgXCIyMFwiOlwiYSB4XCIsXG4gICAgICBcIjIxXCI6XCJ5IHhcIixcbiAgICAgIFwiMjJcIjpcInkgeFwiLFxuICAgICAgXCIyM1wiOlwieSB4XCIsXG4gICAgICBcIjI0XCI6XCJ5IHhcIixcbiAgICAgIFwiMjVcIjpcInkgeFwiLFxuICAgICAgXCIyNlwiOlwieSB4XCIsXG4gICAgICBcIjI3XCI6XCJ5IHhcIixcbiAgICAgIFwiMjhcIjpcInkgeFwiLFxuICAgICAgXCIyOVwiOlwieSB4XCIsXG4gICAgICBcIjMwXCI6XCJ5IHhcIixcbiAgICAgIFwiMzFcIjpcInkgeFwiLFxuICAgICAgXCIzMlwiOlwieSB4XCIsXG4gICAgICBcIjMzXCI6XCJ5IHhcIixcbiAgICAgIFwiMzRcIjpcInkgeFwiLFxuICAgICAgXCIzNVwiOlwieSB4XCIsXG4gICAgICBcIjM2XCI6XCJ5IHhcIixcbiAgICAgIFwiMzdcIjpcInkgeFwiLFxuICAgICAgXCIzOFwiOlwieSB4XCIsXG4gICAgICBcIjM5XCI6XCJ5IHhcIixcbiAgICAgIFwiNDBcIjpcInkgeFwiLFxuICAgICAgXCI0MVwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwic2FmYXJpXCI6e1xuICAgICAgXCIzLjFcIjpcIm5cIixcbiAgICAgIFwiMy4yXCI6XCJuXCIsXG4gICAgICBcIjRcIjpcImFcIixcbiAgICAgIFwiNVwiOlwiYVwiLFxuICAgICAgXCI1LjFcIjpcImFcIixcbiAgICAgIFwiNlwiOlwiYVwiLFxuICAgICAgXCI2LjFcIjpcIm5cIixcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCI3LjFcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiXG4gICAgfSxcbiAgICBcIm9wZXJhXCI6e1xuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjkuNS05LjZcIjpcIm5cIixcbiAgICAgIFwiMTAuMC0xMC4xXCI6XCJuXCIsXG4gICAgICBcIjEwLjVcIjpcIm5cIixcbiAgICAgIFwiMTAuNlwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMS4xXCI6XCJuXCIsXG4gICAgICBcIjExLjVcIjpcIm5cIixcbiAgICAgIFwiMTEuNlwiOlwiblwiLFxuICAgICAgXCIxMlwiOlwiblwiLFxuICAgICAgXCIxMi4xXCI6XCJuXCIsXG4gICAgICBcIjE1XCI6XCJ5IHhcIixcbiAgICAgIFwiMTZcIjpcInkgeFwiLFxuICAgICAgXCIxN1wiOlwieSB4XCIsXG4gICAgICBcIjE4XCI6XCJ5IHhcIixcbiAgICAgIFwiMTlcIjpcInkgeFwiLFxuICAgICAgXCIyMFwiOlwieSB4XCIsXG4gICAgICBcIjIxXCI6XCJ5IHhcIixcbiAgICAgIFwiMjJcIjpcInkgeFwiLFxuICAgICAgXCIyM1wiOlwieSB4XCIsXG4gICAgICBcIjI0XCI6XCJ5IHhcIixcbiAgICAgIFwiMjVcIjpcInkgeFwiLFxuICAgICAgXCIyNlwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwiaW9zX3NhZlwiOntcbiAgICAgIFwiMy4yXCI6XCJhXCIsXG4gICAgICBcIjQuMC00LjFcIjpcImFcIixcbiAgICAgIFwiNC4yLTQuM1wiOlwiYVwiLFxuICAgICAgXCI1LjAtNS4xXCI6XCJhXCIsXG4gICAgICBcIjYuMC02LjFcIjpcImFcIixcbiAgICAgIFwiNy4wLTcuMVwiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCJcbiAgICB9LFxuICAgIFwib3BfbWluaVwiOntcbiAgICAgIFwiNS4wLTguMFwiOlwiblwiXG4gICAgfSxcbiAgICBcImFuZHJvaWRcIjp7XG4gICAgICBcIjIuMVwiOlwiblwiLFxuICAgICAgXCIyLjJcIjpcIm5cIixcbiAgICAgIFwiMi4zXCI6XCJuXCIsXG4gICAgICBcIjNcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI0LjFcIjpcIm5cIixcbiAgICAgIFwiNC4yLTQuM1wiOlwiblwiLFxuICAgICAgXCI0LjRcIjpcInkgeFwiLFxuICAgICAgXCI0LjQuM1wiOlwieSB4XCJcbiAgICB9LFxuICAgIFwiYmJcIjp7XG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiMTBcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcIm9wX21vYlwiOntcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTEuMVwiOlwiblwiLFxuICAgICAgXCIxMS41XCI6XCJuXCIsXG4gICAgICBcIjEyXCI6XCJuXCIsXG4gICAgICBcIjEyLjFcIjpcIm5cIixcbiAgICAgIFwiMjRcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcImFuZF9jaHJcIjp7XG4gICAgICBcIjM4XCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJhbmRfZmZcIjp7XG4gICAgICBcIjMyXCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJpZV9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kX3VjXCI6e1xuICAgICAgXCI5LjlcIjpcInkgeFwiXG4gICAgfVxuICB9LFxuICBcIm5vdGVzXCI6XCJQYXJ0aWFsIHN1cHBvcnQgaW4gb2xkZXIgRmlyZWZveCB2ZXJzaW9ucyByZWZlcnMgdG8gdXNpbmcgYW4gb2xkZXIgc3ludGF4LiBQYXJ0aWFsIHN1cHBvcnQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIHJlZmVycyB0byBsYWNraW5nIHN1cHBvcnQgaW4gTWFjIE9TIFguIFwiLFxuICBcIm5vdGVzX2J5X251bVwiOntcbiAgICBcbiAgfSxcbiAgXCJ1c2FnZV9wZXJjX3lcIjo2OC40NixcbiAgXCJ1c2FnZV9wZXJjX2FcIjoxLjg0LFxuICBcInVjcHJlZml4XCI6ZmFsc2UsXG4gIFwicGFyZW50XCI6XCJcIixcbiAgXCJrZXl3b3Jkc1wiOlwiZm9udC1mZWF0dXJlLGZvbnQtZmVhdHVyZS1zZXR0aW5ncyxrZXJuLGtlcm5pbmcsZm9udC12YXJpYW50LWFsdGVybmF0ZXMsbGlnYXR1cmVzLGZvbnQtdmFyaWFudC1saWdhdHVyZXNcIixcbiAgXCJpZV9pZFwiOlwiXCIsXG4gIFwiY2hyb21lX2lkXCI6XCJcIixcbiAgXCJzaG93blwiOnRydWVcbn0iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwidGl0bGVcIjpcIkZ1bGwgU2NyZWVuIEFQSVwiLFxuICBcImRlc2NyaXB0aW9uXCI6XCJBUEkgZm9yIGFsbG93aW5nIGNvbnRlbnQgKGxpa2UgYSB2aWRlbyBvciBjYW52YXMgZWxlbWVudCkgdG8gdGFrZSB1cCB0aGUgZW50aXJlIHNjcmVlbi5cIixcbiAgXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9mdWxsc2NyZWVuL1wiLFxuICBcInN0YXR1c1wiOlwid2RcIixcbiAgXCJsaW5rc1wiOltcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL1VzaW5nX2Z1bGwtc2NyZWVuX21vZGVcIixcbiAgICAgIFwidGl0bGVcIjpcIk1ETiBhcnRpY2xlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vamxvbmdzdGVyLmNvbS8yMDExLzExLzIxL2NhbnZhcy5odG1sXCIsXG4gICAgICBcInRpdGxlXCI6XCJCbG9nIHBvc3RcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9oYWNrcy5tb3ppbGxhLm9yZy8yMDEyLzAxL3VzaW5nLXRoZS1mdWxsc2NyZWVuLWFwaS1pbi13ZWItYnJvd3NlcnMvXCIsXG4gICAgICBcInRpdGxlXCI6XCJNb3ppbGxhIGhhY2tzIGFydGljbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2RvbS9FbGVtZW50L3JlcXVlc3RGdWxsc2NyZWVuXCIsXG4gICAgICBcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJcbiAgICB9XG4gIF0sXG4gIFwiYnVnc1wiOltcbiAgICB7XG4gICAgICBcImRlc2NyaXB0aW9uXCI6XCJTYWZhcmkgYmxvY2tzIGFjY2VzcyB0byBrZXlib2FyZCBldmVudHMgaW4gZnVsbHNjcmVlbiBtb2RlIChhcyBhIHNlY3VyaXR5IG1lYXN1cmUpLlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImRlc2NyaXB0aW9uXCI6XCJJRSAxMSBkb2VzIG5vdCBhbGxvdyBzY3JvbGxpbmcgd2hlbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgaXMgc2V0IHRvIGZ1bGwgc2NyZWVuLlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImRlc2NyaXB0aW9uXCI6XCJJRSAxMSBkb2VzIG5vdCBwcm9wZXJseSBzdXBwb3J0IGZ1bGxzY3JlZW4gd2hlbiBvcGVuaW5nIGZyb20gYW4gaWZyYW1lLlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImRlc2NyaXB0aW9uXCI6XCJJRSAxMSBkb2Vzbid0IGFsbG93IGdvaW5nIHRvIGZ1bGxzY3JlZW4gbW9kZSB3aGVuIHRoZSBldmVudCB0aGF0IHRyaWdnZXJzIGBtc1JlcXVlc3RGdWxsc2NyZWVuKClgIGlzIGEgYGtleWRvd25gIGV2ZW50IChga2V5cHJlc3NgIGRvZXMgd29yaylcIlxuICAgIH1cbiAgXSxcbiAgXCJjYXRlZ29yaWVzXCI6W1xuICAgIFwiSlMgQVBJXCJcbiAgXSxcbiAgXCJzdGF0c1wiOntcbiAgICBcImllXCI6e1xuICAgICAgXCI1LjVcIjpcIm5cIixcbiAgICAgIFwiNlwiOlwiblwiLFxuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjhcIjpcIm5cIixcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwiZmlyZWZveFwiOntcbiAgICAgIFwiMlwiOlwiblwiLFxuICAgICAgXCIzXCI6XCJuXCIsXG4gICAgICBcIjMuNVwiOlwiblwiLFxuICAgICAgXCIzLjZcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI1XCI6XCJuXCIsXG4gICAgICBcIjZcIjpcIm5cIixcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCIsXG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiMTBcIjpcImEgeFwiLFxuICAgICAgXCIxMVwiOlwiYSB4XCIsXG4gICAgICBcIjEyXCI6XCJhIHhcIixcbiAgICAgIFwiMTNcIjpcImEgeFwiLFxuICAgICAgXCIxNFwiOlwiYSB4XCIsXG4gICAgICBcIjE1XCI6XCJhIHhcIixcbiAgICAgIFwiMTZcIjpcImEgeFwiLFxuICAgICAgXCIxN1wiOlwiYSB4XCIsXG4gICAgICBcIjE4XCI6XCJhIHhcIixcbiAgICAgIFwiMTlcIjpcImEgeFwiLFxuICAgICAgXCIyMFwiOlwiYSB4XCIsXG4gICAgICBcIjIxXCI6XCJhIHhcIixcbiAgICAgIFwiMjJcIjpcImEgeFwiLFxuICAgICAgXCIyM1wiOlwiYSB4XCIsXG4gICAgICBcIjI0XCI6XCJhIHhcIixcbiAgICAgIFwiMjVcIjpcImEgeFwiLFxuICAgICAgXCIyNlwiOlwiYSB4XCIsXG4gICAgICBcIjI3XCI6XCJhIHhcIixcbiAgICAgIFwiMjhcIjpcImEgeFwiLFxuICAgICAgXCIyOVwiOlwiYSB4XCIsXG4gICAgICBcIjMwXCI6XCJhIHhcIixcbiAgICAgIFwiMzFcIjpcImEgeFwiLFxuICAgICAgXCIzMlwiOlwiYSB4XCIsXG4gICAgICBcIjMzXCI6XCJhIHhcIixcbiAgICAgIFwiMzRcIjpcImEgeFwiLFxuICAgICAgXCIzNVwiOlwiYSB4XCIsXG4gICAgICBcIjM2XCI6XCJhIHhcIlxuICAgIH0sXG4gICAgXCJjaHJvbWVcIjp7XG4gICAgICBcIjRcIjpcIm5cIixcbiAgICAgIFwiNVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiLFxuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjEwXCI6XCJuXCIsXG4gICAgICBcIjExXCI6XCJuXCIsXG4gICAgICBcIjEyXCI6XCJuXCIsXG4gICAgICBcIjEzXCI6XCJuXCIsXG4gICAgICBcIjE0XCI6XCJuXCIsXG4gICAgICBcIjE1XCI6XCJhIHhcIixcbiAgICAgIFwiMTZcIjpcImEgeFwiLFxuICAgICAgXCIxN1wiOlwiYSB4XCIsXG4gICAgICBcIjE4XCI6XCJhIHhcIixcbiAgICAgIFwiMTlcIjpcImEgeFwiLFxuICAgICAgXCIyMFwiOlwieSB4XCIsXG4gICAgICBcIjIxXCI6XCJ5IHhcIixcbiAgICAgIFwiMjJcIjpcInkgeFwiLFxuICAgICAgXCIyM1wiOlwieSB4XCIsXG4gICAgICBcIjI0XCI6XCJ5IHhcIixcbiAgICAgIFwiMjVcIjpcInkgeFwiLFxuICAgICAgXCIyNlwiOlwieSB4XCIsXG4gICAgICBcIjI3XCI6XCJ5IHhcIixcbiAgICAgIFwiMjhcIjpcInkgeFwiLFxuICAgICAgXCIyOVwiOlwieSB4XCIsXG4gICAgICBcIjMwXCI6XCJ5IHhcIixcbiAgICAgIFwiMzFcIjpcInkgeFwiLFxuICAgICAgXCIzMlwiOlwieSB4XCIsXG4gICAgICBcIjMzXCI6XCJ5IHhcIixcbiAgICAgIFwiMzRcIjpcInkgeFwiLFxuICAgICAgXCIzNVwiOlwieSB4XCIsXG4gICAgICBcIjM2XCI6XCJ5IHhcIixcbiAgICAgIFwiMzdcIjpcInkgeFwiLFxuICAgICAgXCIzOFwiOlwieSB4XCIsXG4gICAgICBcIjM5XCI6XCJ5IHhcIixcbiAgICAgIFwiNDBcIjpcInkgeFwiLFxuICAgICAgXCI0MVwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwic2FmYXJpXCI6e1xuICAgICAgXCIzLjFcIjpcIm5cIixcbiAgICAgIFwiMy4yXCI6XCJuXCIsXG4gICAgICBcIjRcIjpcIm5cIixcbiAgICAgIFwiNVwiOlwiblwiLFxuICAgICAgXCI1LjFcIjpcImEgeFwiLFxuICAgICAgXCI2XCI6XCJ5IHhcIixcbiAgICAgIFwiNi4xXCI6XCJ5IHhcIixcbiAgICAgIFwiN1wiOlwieSB4XCIsXG4gICAgICBcIjcuMVwiOlwieSB4XCIsXG4gICAgICBcIjhcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcIm9wZXJhXCI6e1xuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjkuNS05LjZcIjpcIm5cIixcbiAgICAgIFwiMTAuMC0xMC4xXCI6XCJuXCIsXG4gICAgICBcIjEwLjVcIjpcIm5cIixcbiAgICAgIFwiMTAuNlwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMS4xXCI6XCJuXCIsXG4gICAgICBcIjExLjVcIjpcIm5cIixcbiAgICAgIFwiMTEuNlwiOlwiblwiLFxuICAgICAgXCIxMlwiOlwiblwiLFxuICAgICAgXCIxMi4xXCI6XCJ5XCIsXG4gICAgICBcIjE1XCI6XCJ5IHhcIixcbiAgICAgIFwiMTZcIjpcInkgeFwiLFxuICAgICAgXCIxN1wiOlwieSB4XCIsXG4gICAgICBcIjE4XCI6XCJ5IHhcIixcbiAgICAgIFwiMTlcIjpcInkgeFwiLFxuICAgICAgXCIyMFwiOlwieSB4XCIsXG4gICAgICBcIjIxXCI6XCJ5IHhcIixcbiAgICAgIFwiMjJcIjpcInkgeFwiLFxuICAgICAgXCIyM1wiOlwieSB4XCIsXG4gICAgICBcIjI0XCI6XCJ5IHhcIixcbiAgICAgIFwiMjVcIjpcInkgeFwiLFxuICAgICAgXCIyNlwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwiaW9zX3NhZlwiOntcbiAgICAgIFwiMy4yXCI6XCJuXCIsXG4gICAgICBcIjQuMC00LjFcIjpcIm5cIixcbiAgICAgIFwiNC4yLTQuM1wiOlwiblwiLFxuICAgICAgXCI1LjAtNS4xXCI6XCJuXCIsXG4gICAgICBcIjYuMC02LjFcIjpcIm5cIixcbiAgICAgIFwiNy4wLTcuMVwiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCJcbiAgICB9LFxuICAgIFwib3BfbWluaVwiOntcbiAgICAgIFwiNS4wLTguMFwiOlwiblwiXG4gICAgfSxcbiAgICBcImFuZHJvaWRcIjp7XG4gICAgICBcIjIuMVwiOlwiblwiLFxuICAgICAgXCIyLjJcIjpcIm5cIixcbiAgICAgIFwiMi4zXCI6XCJuXCIsXG4gICAgICBcIjNcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI0LjFcIjpcIm5cIixcbiAgICAgIFwiNC4yLTQuM1wiOlwiblwiLFxuICAgICAgXCI0LjRcIjpcIm5cIixcbiAgICAgIFwiNC40LjNcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJiYlwiOntcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCIxMFwiOlwiYVwiXG4gICAgfSxcbiAgICBcIm9wX21vYlwiOntcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTEuMVwiOlwiblwiLFxuICAgICAgXCIxMS41XCI6XCJuXCIsXG4gICAgICBcIjEyXCI6XCJuXCIsXG4gICAgICBcIjEyLjFcIjpcIm5cIixcbiAgICAgIFwiMjRcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcImFuZF9jaHJcIjp7XG4gICAgICBcIjM4XCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJhbmRfZmZcIjp7XG4gICAgICBcIjMyXCI6XCJhIHhcIlxuICAgIH0sXG4gICAgXCJpZV9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kX3VjXCI6e1xuICAgICAgXCI5LjlcIjpcIm5cIlxuICAgIH1cbiAgfSxcbiAgXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IHJlZmVycyB0byBzdXBwb3J0aW5nIGFuIGVhcmxpZXIgZHJhZnQgb2YgdGhlIHNwZWMuXCIsXG4gIFwibm90ZXNfYnlfbnVtXCI6e1xuICAgIFxuICB9LFxuICBcInVzYWdlX3BlcmNfeVwiOjUxLjU3LFxuICBcInVzYWdlX3BlcmNfYVwiOjEzLjY5LFxuICBcInVjcHJlZml4XCI6ZmFsc2UsXG4gIFwicGFyZW50XCI6XCJcIixcbiAgXCJrZXl3b3Jkc1wiOlwiZnVsbC1zY3JlZW5cIixcbiAgXCJpZV9pZFwiOlwiZnVsbHNjcmVlbmFwaVwiLFxuICBcImNocm9tZV9pZFwiOlwiNTI1OTUxMzg3MTQ2NjQ5NlwiLFxuICBcInNob3duXCI6dHJ1ZVxufSIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJ0aXRsZVwiOlwiSW50cmluc2ljICYgRXh0cmluc2ljIFNpemluZ1wiLFxuICBcImRlc2NyaXB0aW9uXCI6XCJBbGxvd3MgZm9yIHRoZSBoZWlnaHRzIGFuZCB3aWR0aHMgdG8gYmUgc3BlY2lmaWVkIGluIGludHJpbnNpYyB2YWx1ZXMgdXNpbmcgdGhlIGZpbGwtYXZhaWxhYmxlLCBtYXgtY29udGVudCwgbWluLWNvbnRlbnQsIGFuZCBmaXQtY29udGVudCBwcm9wZXJ0aWVzLlwiLFxuICBcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2l6aW5nL1wiLFxuICBcInN0YXR1c1wiOlwid2RcIixcbiAgXCJsaW5rc1wiOltcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL2RlbW9zdGhlbmVzLmluZm8vYmxvZy82NjIvRGVzaWduLUZyb20tdGhlLUluc2lkZS1PdXQtV2l0aC1DU1MtTWluQ29udGVudFwiLFxuICAgICAgXCJ0aXRsZVwiOlwiTWluLUNvbnRlbnQgdHV0b3JpYWxcIlxuICAgIH1cbiAgXSxcbiAgXCJidWdzXCI6W1xuICAgIFxuICBdLFxuICBcImNhdGVnb3JpZXNcIjpbXG4gICAgXCJDU1MzXCJcbiAgXSxcbiAgXCJzdGF0c1wiOntcbiAgICBcImllXCI6e1xuICAgICAgXCI1LjVcIjpcIm5cIixcbiAgICAgIFwiNlwiOlwiblwiLFxuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjhcIjpcIm5cIixcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiXG4gICAgfSxcbiAgICBcImZpcmVmb3hcIjp7XG4gICAgICBcIjJcIjpcIm5cIixcbiAgICAgIFwiM1wiOlwiblwiLFxuICAgICAgXCIzLjVcIjpcIm5cIixcbiAgICAgIFwiMy42XCI6XCJuXCIsXG4gICAgICBcIjRcIjpcInkgeFwiLFxuICAgICAgXCI1XCI6XCJ5IHhcIixcbiAgICAgIFwiNlwiOlwieSB4XCIsXG4gICAgICBcIjdcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIixcbiAgICAgIFwiOVwiOlwieSB4XCIsXG4gICAgICBcIjEwXCI6XCJ5IHhcIixcbiAgICAgIFwiMTFcIjpcInkgeFwiLFxuICAgICAgXCIxMlwiOlwieSB4XCIsXG4gICAgICBcIjEzXCI6XCJ5IHhcIixcbiAgICAgIFwiMTRcIjpcInkgeFwiLFxuICAgICAgXCIxNVwiOlwieSB4XCIsXG4gICAgICBcIjE2XCI6XCJ5IHhcIixcbiAgICAgIFwiMTdcIjpcInkgeFwiLFxuICAgICAgXCIxOFwiOlwieSB4XCIsXG4gICAgICBcIjE5XCI6XCJ5IHhcIixcbiAgICAgIFwiMjBcIjpcInkgeFwiLFxuICAgICAgXCIyMVwiOlwieSB4XCIsXG4gICAgICBcIjIyXCI6XCJ5IHhcIixcbiAgICAgIFwiMjNcIjpcInkgeFwiLFxuICAgICAgXCIyNFwiOlwieSB4XCIsXG4gICAgICBcIjI1XCI6XCJ5IHhcIixcbiAgICAgIFwiMjZcIjpcInkgeFwiLFxuICAgICAgXCIyN1wiOlwieSB4XCIsXG4gICAgICBcIjI4XCI6XCJ5IHhcIixcbiAgICAgIFwiMjlcIjpcInkgeFwiLFxuICAgICAgXCIzMFwiOlwieSB4XCIsXG4gICAgICBcIjMxXCI6XCJ5IHhcIixcbiAgICAgIFwiMzJcIjpcInkgeFwiLFxuICAgICAgXCIzM1wiOlwieSB4XCIsXG4gICAgICBcIjM0XCI6XCJ5IHhcIixcbiAgICAgIFwiMzVcIjpcInkgeFwiLFxuICAgICAgXCIzNlwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwiY2hyb21lXCI6e1xuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjVcIjpcIm5cIixcbiAgICAgIFwiNlwiOlwiblwiLFxuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjhcIjpcIm5cIixcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMlwiOlwiblwiLFxuICAgICAgXCIxM1wiOlwiblwiLFxuICAgICAgXCIxNFwiOlwiblwiLFxuICAgICAgXCIxNVwiOlwiblwiLFxuICAgICAgXCIxNlwiOlwiblwiLFxuICAgICAgXCIxN1wiOlwiblwiLFxuICAgICAgXCIxOFwiOlwiblwiLFxuICAgICAgXCIxOVwiOlwiblwiLFxuICAgICAgXCIyMFwiOlwiblwiLFxuICAgICAgXCIyMVwiOlwiblwiLFxuICAgICAgXCIyMlwiOlwieSB4XCIsXG4gICAgICBcIjIzXCI6XCJ5IHhcIixcbiAgICAgIFwiMjRcIjpcInkgeFwiLFxuICAgICAgXCIyNVwiOlwieSB4XCIsXG4gICAgICBcIjI2XCI6XCJ5IHhcIixcbiAgICAgIFwiMjdcIjpcInkgeFwiLFxuICAgICAgXCIyOFwiOlwieSB4XCIsXG4gICAgICBcIjI5XCI6XCJ5IHhcIixcbiAgICAgIFwiMzBcIjpcInkgeFwiLFxuICAgICAgXCIzMVwiOlwieSB4XCIsXG4gICAgICBcIjMyXCI6XCJ5IHhcIixcbiAgICAgIFwiMzNcIjpcInkgeFwiLFxuICAgICAgXCIzNFwiOlwieSB4XCIsXG4gICAgICBcIjM1XCI6XCJ5IHhcIixcbiAgICAgIFwiMzZcIjpcInkgeFwiLFxuICAgICAgXCIzN1wiOlwieSB4XCIsXG4gICAgICBcIjM4XCI6XCJ5IHhcIixcbiAgICAgIFwiMzlcIjpcInkgeFwiLFxuICAgICAgXCI0MFwiOlwieSB4XCIsXG4gICAgICBcIjQxXCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJzYWZhcmlcIjp7XG4gICAgICBcIjMuMVwiOlwiblwiLFxuICAgICAgXCIzLjJcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI1XCI6XCJuXCIsXG4gICAgICBcIjUuMVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjYuMVwiOlwieSB4XCIsXG4gICAgICBcIjdcIjpcInkgeFwiLFxuICAgICAgXCI3LjFcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJvcGVyYVwiOntcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCI5LjUtOS42XCI6XCJuXCIsXG4gICAgICBcIjEwLjAtMTAuMVwiOlwiblwiLFxuICAgICAgXCIxMC41XCI6XCJuXCIsXG4gICAgICBcIjEwLjZcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTEuMVwiOlwiblwiLFxuICAgICAgXCIxMS41XCI6XCJuXCIsXG4gICAgICBcIjExLjZcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcIm5cIixcbiAgICAgIFwiMTIuMVwiOlwiblwiLFxuICAgICAgXCIxNVwiOlwieSB4XCIsXG4gICAgICBcIjE2XCI6XCJ5IHhcIixcbiAgICAgIFwiMTdcIjpcInkgeFwiLFxuICAgICAgXCIxOFwiOlwieSB4XCIsXG4gICAgICBcIjE5XCI6XCJ5IHhcIixcbiAgICAgIFwiMjBcIjpcInkgeFwiLFxuICAgICAgXCIyMVwiOlwieSB4XCIsXG4gICAgICBcIjIyXCI6XCJ5IHhcIixcbiAgICAgIFwiMjNcIjpcInkgeFwiLFxuICAgICAgXCIyNFwiOlwieSB4XCIsXG4gICAgICBcIjI1XCI6XCJ5IHhcIixcbiAgICAgIFwiMjZcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcImlvc19zYWZcIjp7XG4gICAgICBcIjMuMlwiOlwiblwiLFxuICAgICAgXCI0LjAtNC4xXCI6XCJuXCIsXG4gICAgICBcIjQuMi00LjNcIjpcIm5cIixcbiAgICAgIFwiNS4wLTUuMVwiOlwiblwiLFxuICAgICAgXCI2LjAtNi4xXCI6XCJuXCIsXG4gICAgICBcIjcuMC03LjFcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJvcF9taW5pXCI6e1xuICAgICAgXCI1LjAtOC4wXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kcm9pZFwiOntcbiAgICAgIFwiMi4xXCI6XCJuXCIsXG4gICAgICBcIjIuMlwiOlwiblwiLFxuICAgICAgXCIyLjNcIjpcIm5cIixcbiAgICAgIFwiM1wiOlwiblwiLFxuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjQuMVwiOlwiblwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJuXCIsXG4gICAgICBcIjQuNFwiOlwieSB4XCIsXG4gICAgICBcIjQuNC4zXCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJiYlwiOntcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCIxMFwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwib3BfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMS4xXCI6XCJuXCIsXG4gICAgICBcIjExLjVcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcIm5cIixcbiAgICAgIFwiMTIuMVwiOlwiblwiLFxuICAgICAgXCIyNFwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwiYW5kX2NoclwiOntcbiAgICAgIFwiMzhcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcImFuZF9mZlwiOntcbiAgICAgIFwiMzJcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcImllX21vYlwiOntcbiAgICAgIFwiMTBcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJhbmRfdWNcIjp7XG4gICAgICBcIjkuOVwiOlwiblwiXG4gICAgfVxuICB9LFxuICBcIm5vdGVzXCI6XCJQcmVmaXhlcyBhcmUgb24gdGhlIHZhbHVlcywgbm90IHRoZSBwcm9wZXJ0eSBuYW1lcyAoZS5nLiAtd2Via2l0LW1pbi1jb250ZW50KSBGaXJlZm94IGN1cnJlbnRseSBzdXBwb3J0cyB0aGUgXFxcIi1tb3otYXZhaWxhYmxlXFxcIiBwcm9wZXJ0eSByYXRoZXIgdGhhbiBcXFwiLW1vei1maWxsLWF2YWlsYWJsZVxcXCIuXCIsXG4gIFwibm90ZXNfYnlfbnVtXCI6e1xuICAgIFxuICB9LFxuICBcInVzYWdlX3BlcmNfeVwiOjY1LjQyLFxuICBcInVzYWdlX3BlcmNfYVwiOjAsXG4gIFwidWNwcmVmaXhcIjpmYWxzZSxcbiAgXCJwYXJlbnRcIjpcIlwiLFxuICBcImtleXdvcmRzXCI6XCJmaWxsLWF2YWlsYWJsZSxtYXgtY29udGVudCxtaW4tY29udGVudCxmaXQtY29udGVudCxjb250YWluLWZsb2F0c1wiLFxuICBcImllX2lkXCI6XCJjc3NpbnRyaW5zaWNzaXppbmdcIixcbiAgXCJjaHJvbWVfaWRcIjpcIjU5MDEzNTM3ODQxODA3MzZcIixcbiAgXCJzaG93blwiOnRydWVcbn0iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwidGl0bGVcIjpcIkNTUzMgTXVsdGlwbGUgY29sdW1uIGxheW91dFwiLFxuICBcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgZmxvd2luZyBpbmZvcm1hdGlvbiBpbiBtdWx0aXBsZSBjb2x1bW5zXCIsXG4gIFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1tdWx0aWNvbC9cIixcbiAgXCJzdGF0dXNcIjpcImNyXCIsXG4gIFwibGlua3NcIjpbXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHBzOi8vZGV2Lm9wZXJhLmNvbS9hcnRpY2xlcy92aWV3L2NzczMtbXVsdGktY29sdW1uLWxheW91dC9cIixcbiAgICAgIFwidGl0bGVcIjpcIkRldi5PcGVyYSBhcnRpY2xlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vd2ViZGVzaWduLnR1dHNwbHVzLmNvbS90dXRvcmlhbHMvaHRtbGNzcy10dXRvcmlhbHMvYW4taW50cm9kdWN0aW9uLXRvLXRoZS1jc3MzLW11bHRpcGxlLWNvbHVtbi1sYXlvdXQtbW9kdWxlL1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiSW50cm9kdWN0aW9uIHBhZ2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy9wcm9wZXJ0aWVzL2NvbHVtbi13aWR0aFwiLFxuICAgICAgXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL0JldGxleVdoaXRlaG9ybmUvQ1NTM011bHRpQ29sdW1uXCIsXG4gICAgICBcInRpdGxlXCI6XCJQb2x5ZmlsbFwiXG4gICAgfVxuICBdLFxuICBcImJ1Z3NcIjpbXG4gICAge1xuICAgICAgXCJkZXNjcmlwdGlvblwiOlwiSW4gRmlyZWZveCwgdGhlIHByb3BlcnR5IGBjb2x1bW4tc3BhbmAgKG9yIGAtbW96LWNvbHVtbi1zcGFuYCkgZG9lcyBub3QgeWV0IHdvcmsuIFNlZSBbdGhlIGJ1Z10oaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjE2NDM2KS5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJkZXNjcmlwdGlvblwiOlwiSW4gQ2hyb21lLCB0aGUgYC13ZWJraXQtY29sdW1uLWNvdW50YCBkaXJlY3RpdmUgZG9lcyBub3QgeWV0IHdvcmsgd2l0aCBwcmludCBzdHlsZXNoZWV0cy4gU2VlIHRoZSBbZm9sbG93aW5nIGJ1ZyBpbiBDaHJvbWl1bV0oaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTk5MzU4KS5cIlxuICAgIH1cbiAgXSxcbiAgXCJjYXRlZ29yaWVzXCI6W1xuICAgIFwiQ1NTM1wiXG4gIF0sXG4gIFwic3RhdHNcIjp7XG4gICAgXCJpZVwiOntcbiAgICAgIFwiNS41XCI6XCJuXCIsXG4gICAgICBcIjZcIjpcIm5cIixcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCIsXG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiMTBcIjpcInlcIixcbiAgICAgIFwiMTFcIjpcInlcIlxuICAgIH0sXG4gICAgXCJmaXJlZm94XCI6e1xuICAgICAgXCIyXCI6XCJhIHhcIixcbiAgICAgIFwiM1wiOlwiYSB4XCIsXG4gICAgICBcIjMuNVwiOlwiYSB4XCIsXG4gICAgICBcIjMuNlwiOlwiYSB4XCIsXG4gICAgICBcIjRcIjpcImEgeFwiLFxuICAgICAgXCI1XCI6XCJhIHhcIixcbiAgICAgIFwiNlwiOlwiYSB4XCIsXG4gICAgICBcIjdcIjpcImEgeFwiLFxuICAgICAgXCI4XCI6XCJhIHhcIixcbiAgICAgIFwiOVwiOlwiYSB4XCIsXG4gICAgICBcIjEwXCI6XCJhIHhcIixcbiAgICAgIFwiMTFcIjpcImEgeFwiLFxuICAgICAgXCIxMlwiOlwiYSB4XCIsXG4gICAgICBcIjEzXCI6XCJhIHhcIixcbiAgICAgIFwiMTRcIjpcImEgeFwiLFxuICAgICAgXCIxNVwiOlwiYSB4XCIsXG4gICAgICBcIjE2XCI6XCJhIHhcIixcbiAgICAgIFwiMTdcIjpcImEgeFwiLFxuICAgICAgXCIxOFwiOlwiYSB4XCIsXG4gICAgICBcIjE5XCI6XCJhIHhcIixcbiAgICAgIFwiMjBcIjpcImEgeFwiLFxuICAgICAgXCIyMVwiOlwiYSB4XCIsXG4gICAgICBcIjIyXCI6XCJhIHhcIixcbiAgICAgIFwiMjNcIjpcImEgeFwiLFxuICAgICAgXCIyNFwiOlwiYSB4XCIsXG4gICAgICBcIjI1XCI6XCJhIHhcIixcbiAgICAgIFwiMjZcIjpcImEgeFwiLFxuICAgICAgXCIyN1wiOlwiYSB4XCIsXG4gICAgICBcIjI4XCI6XCJhIHhcIixcbiAgICAgIFwiMjlcIjpcImEgeFwiLFxuICAgICAgXCIzMFwiOlwiYSB4XCIsXG4gICAgICBcIjMxXCI6XCJhIHhcIixcbiAgICAgIFwiMzJcIjpcImEgeFwiLFxuICAgICAgXCIzM1wiOlwiYSB4XCIsXG4gICAgICBcIjM0XCI6XCJhIHhcIixcbiAgICAgIFwiMzVcIjpcImEgeFwiLFxuICAgICAgXCIzNlwiOlwiYSB4XCJcbiAgICB9LFxuICAgIFwiY2hyb21lXCI6e1xuICAgICAgXCI0XCI6XCJhIHhcIixcbiAgICAgIFwiNVwiOlwiYSB4XCIsXG4gICAgICBcIjZcIjpcImEgeFwiLFxuICAgICAgXCI3XCI6XCJhIHhcIixcbiAgICAgIFwiOFwiOlwiYSB4XCIsXG4gICAgICBcIjlcIjpcImEgeFwiLFxuICAgICAgXCIxMFwiOlwiYSB4XCIsXG4gICAgICBcIjExXCI6XCJhIHhcIixcbiAgICAgIFwiMTJcIjpcImEgeFwiLFxuICAgICAgXCIxM1wiOlwiYSB4XCIsXG4gICAgICBcIjE0XCI6XCJhIHhcIixcbiAgICAgIFwiMTVcIjpcImEgeFwiLFxuICAgICAgXCIxNlwiOlwiYSB4XCIsXG4gICAgICBcIjE3XCI6XCJhIHhcIixcbiAgICAgIFwiMThcIjpcImEgeFwiLFxuICAgICAgXCIxOVwiOlwiYSB4XCIsXG4gICAgICBcIjIwXCI6XCJhIHhcIixcbiAgICAgIFwiMjFcIjpcImEgeFwiLFxuICAgICAgXCIyMlwiOlwiYSB4XCIsXG4gICAgICBcIjIzXCI6XCJhIHhcIixcbiAgICAgIFwiMjRcIjpcImEgeFwiLFxuICAgICAgXCIyNVwiOlwiYSB4XCIsXG4gICAgICBcIjI2XCI6XCJhIHhcIixcbiAgICAgIFwiMjdcIjpcImEgeFwiLFxuICAgICAgXCIyOFwiOlwiYSB4XCIsXG4gICAgICBcIjI5XCI6XCJhIHhcIixcbiAgICAgIFwiMzBcIjpcImEgeFwiLFxuICAgICAgXCIzMVwiOlwiYSB4XCIsXG4gICAgICBcIjMyXCI6XCJhIHhcIixcbiAgICAgIFwiMzNcIjpcImEgeFwiLFxuICAgICAgXCIzNFwiOlwiYSB4XCIsXG4gICAgICBcIjM1XCI6XCJhIHhcIixcbiAgICAgIFwiMzZcIjpcImEgeFwiLFxuICAgICAgXCIzN1wiOlwiYSB4XCIsXG4gICAgICBcIjM4XCI6XCJhIHhcIixcbiAgICAgIFwiMzlcIjpcImEgeFwiLFxuICAgICAgXCI0MFwiOlwiYSB4XCIsXG4gICAgICBcIjQxXCI6XCJhIHhcIlxuICAgIH0sXG4gICAgXCJzYWZhcmlcIjp7XG4gICAgICBcIjMuMVwiOlwiYSB4XCIsXG4gICAgICBcIjMuMlwiOlwiYSB4XCIsXG4gICAgICBcIjRcIjpcImEgeFwiLFxuICAgICAgXCI1XCI6XCJhIHhcIixcbiAgICAgIFwiNS4xXCI6XCJhIHhcIixcbiAgICAgIFwiNlwiOlwiYSB4XCIsXG4gICAgICBcIjYuMVwiOlwiYSB4XCIsXG4gICAgICBcIjdcIjpcImEgeFwiLFxuICAgICAgXCI3LjFcIjpcImEgeFwiLFxuICAgICAgXCI4XCI6XCJhIHhcIlxuICAgIH0sXG4gICAgXCJvcGVyYVwiOntcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCI5LjUtOS42XCI6XCJuXCIsXG4gICAgICBcIjEwLjAtMTAuMVwiOlwiblwiLFxuICAgICAgXCIxMC41XCI6XCJuXCIsXG4gICAgICBcIjEwLjZcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTEuMVwiOlwieVwiLFxuICAgICAgXCIxMS41XCI6XCJ5XCIsXG4gICAgICBcIjExLjZcIjpcInlcIixcbiAgICAgIFwiMTJcIjpcInlcIixcbiAgICAgIFwiMTIuMVwiOlwieVwiLFxuICAgICAgXCIxNVwiOlwiYSB4XCIsXG4gICAgICBcIjE2XCI6XCJhIHhcIixcbiAgICAgIFwiMTdcIjpcImEgeFwiLFxuICAgICAgXCIxOFwiOlwiYSB4XCIsXG4gICAgICBcIjE5XCI6XCJhIHhcIixcbiAgICAgIFwiMjBcIjpcImEgeFwiLFxuICAgICAgXCIyMVwiOlwiYSB4XCIsXG4gICAgICBcIjIyXCI6XCJhIHhcIixcbiAgICAgIFwiMjNcIjpcImEgeFwiLFxuICAgICAgXCIyNFwiOlwiYSB4XCIsXG4gICAgICBcIjI1XCI6XCJhIHhcIixcbiAgICAgIFwiMjZcIjpcImEgeFwiXG4gICAgfSxcbiAgICBcImlvc19zYWZcIjp7XG4gICAgICBcIjMuMlwiOlwiYSB4XCIsXG4gICAgICBcIjQuMC00LjFcIjpcImEgeFwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJhIHhcIixcbiAgICAgIFwiNS4wLTUuMVwiOlwiYSB4XCIsXG4gICAgICBcIjYuMC02LjFcIjpcImEgeFwiLFxuICAgICAgXCI3LjAtNy4xXCI6XCJhIHhcIixcbiAgICAgIFwiOFwiOlwiYSB4XCJcbiAgICB9LFxuICAgIFwib3BfbWluaVwiOntcbiAgICAgIFwiNS4wLTguMFwiOlwieVwiXG4gICAgfSxcbiAgICBcImFuZHJvaWRcIjp7XG4gICAgICBcIjIuMVwiOlwiYSB4XCIsXG4gICAgICBcIjIuMlwiOlwiYSB4XCIsXG4gICAgICBcIjIuM1wiOlwiYSB4XCIsXG4gICAgICBcIjNcIjpcImEgeFwiLFxuICAgICAgXCI0XCI6XCJhIHhcIixcbiAgICAgIFwiNC4xXCI6XCJhIHhcIixcbiAgICAgIFwiNC4yLTQuM1wiOlwiYSB4XCIsXG4gICAgICBcIjQuNFwiOlwiYSB4XCIsXG4gICAgICBcIjQuNC4zXCI6XCJhIHhcIlxuICAgIH0sXG4gICAgXCJiYlwiOntcbiAgICAgIFwiN1wiOlwiYSB4XCIsXG4gICAgICBcIjEwXCI6XCJhIHhcIlxuICAgIH0sXG4gICAgXCJvcF9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJuXCIsXG4gICAgICBcIjExXCI6XCJuXCIsXG4gICAgICBcIjExLjFcIjpcInlcIixcbiAgICAgIFwiMTEuNVwiOlwieVwiLFxuICAgICAgXCIxMlwiOlwieVwiLFxuICAgICAgXCIxMi4xXCI6XCJ5XCIsXG4gICAgICBcIjI0XCI6XCJhIHhcIlxuICAgIH0sXG4gICAgXCJhbmRfY2hyXCI6e1xuICAgICAgXCIzOFwiOlwiYSB4XCJcbiAgICB9LFxuICAgIFwiYW5kX2ZmXCI6e1xuICAgICAgXCIzMlwiOlwiYSB4XCJcbiAgICB9LFxuICAgIFwiaWVfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwieVwiXG4gICAgfSxcbiAgICBcImFuZF91Y1wiOntcbiAgICAgIFwiOS45XCI6XCJhIHhcIlxuICAgIH1cbiAgfSxcbiAgXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IHJlZmVycyB0byBub3Qgc3VwcG9ydGluZyB0aGUgYGJyZWFrLWJlZm9yZWAsIGBicmVhay1hZnRlcmAsIGBicmVhay1pbnNpZGVgIHByb3BlcnRpZXMuIFdlYmtpdCBicm93c2VycyBkbyBoYXZlIGVxdWl2YWxlbnQgc3VwcG9ydCBmb3IgdGhlIG5vbi1zdGFuZGFyZCBgLXdlYmtpdC1jb2x1bW4tYnJlYWstKmAgcHJvcGVydGllcyB3aGlsZSBGaXJlZm94IHN1cHBvcnRzIGBwYWdlLWJyZWFrLSpgIHRvIGFjY29tcGxpc2ggdGhlIHNhbWUgcmVzdWx0LlwiLFxuICBcIm5vdGVzX2J5X251bVwiOntcbiAgICBcbiAgfSxcbiAgXCJ1c2FnZV9wZXJjX3lcIjoxMy41NixcbiAgXCJ1c2FnZV9wZXJjX2FcIjo3Ni4wNixcbiAgXCJ1Y3ByZWZpeFwiOmZhbHNlLFxuICBcInBhcmVudFwiOlwiXCIsXG4gIFwia2V5d29yZHNcIjpcImNvbHVtbi1jb3VudFwiLFxuICBcImllX2lkXCI6XCJtdWx0aWNvbHVtbmZ1bGxzdXBwb3J0XCIsXG4gIFwiY2hyb21lX2lkXCI6XCI2NTI2MTUxMjY2NjY0NDQ4XCIsXG4gIFwic2hvd25cIjp0cnVlXG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcInRpdGxlXCI6XCJQb2ludGVyIGV2ZW50c1wiLFxuICBcImRlc2NyaXB0aW9uXCI6XCJUaGlzIHNwZWNpZmljYXRpb24gaW50ZWdyYXRlcyB2YXJpb3VzIGlucHV0cyBmcm9tIG1pY2UsIHRvdWNoc2NyZWVucywgYW5kIHBlbnMsIG1ha2luZyBzZXBhcmF0ZSBpbXBsZW1lbnRhdGlvbnMgbm8gbG9uZ2VyIG5lY2Vzc2FyeSBhbmQgYXV0aG9yaW5nIGZvciBjcm9zcy1kZXZpY2UgcG9pbnRlcnMgZWFzaWVyLiBOb3QgdG8gYmUgbWlzdGFrZW4gd2l0aCB0aGUgdW5yZWxhdGVkIFxcXCJwb2ludGVyLWV2ZW50c1xcXCIgQ1NTIHByb3BlcnR5LlwiLFxuICBcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL3BvaW50ZXJldmVudHMvXCIsXG4gIFwic3RhdHVzXCI6XCJjclwiLFxuICBcImxpbmtzXCI6W1xuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZS9hcmNoaXZlLzIwMTEvMDkvMjAvdG91Y2gtaW5wdXQtZm9yLWllMTAtYW5kLW1ldHJvLXN0eWxlLWFwcHMuYXNweFwiLFxuICAgICAgXCJ0aXRsZVwiOlwiSW1wbGVtZW50YXRpb24gb2YgUG9pbnRlciBFdmVudHMgaW4gSUUxMFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvZXRlcm5hbGNvZGluZy9hcmNoaXZlLzIwMTMvMDEvMTYvaGFuZC1qcy1hLXBvbHlmaWxsLWZvci1zdXBwb3J0aW5nLXBvaW50ZXItZXZlbnRzLW9uLWV2ZXJ5LWJyb3dzZXIuYXNweFwiLFxuICAgICAgXCJ0aXRsZVwiOlwiSGFuZC5qcywgdGhlIHBvbHlmaWxsIGZvciBicm93c2VycyBvbmx5IHN1cHBvcnRpbmcgVG91Y2ggRXZlbnRzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9kYXZyb3VzL2FyY2hpdmUvMjAxMy8wMi8yMC9oYW5kbGluZy10b3VjaC1pbi15b3VyLWh0bWw1LWFwcHMtdGhhbmtzLXRvLXRoZS1wb2ludGVyLWV2ZW50cy1vZi1pZTEwLWFuZC13aW5kb3dzLTguYXNweFwiLFxuICAgICAgXCJ0aXRsZVwiOlwiQXJ0aWNsZSAmIHR1dG9yaWFsXCJcbiAgICB9XG4gIF0sXG4gIFwiYnVnc1wiOltcbiAgICBcbiAgXSxcbiAgXCJjYXRlZ29yaWVzXCI6W1xuICAgIFwiRE9NXCIsXG4gICAgXCJKUyBBUElcIlxuICBdLFxuICBcInN0YXRzXCI6e1xuICAgIFwiaWVcIjp7XG4gICAgICBcIjUuNVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiOFwiOlwiblwiLFxuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjEwXCI6XCJhIHhcIixcbiAgICAgIFwiMTFcIjpcInlcIlxuICAgIH0sXG4gICAgXCJmaXJlZm94XCI6e1xuICAgICAgXCIyXCI6XCJuXCIsXG4gICAgICBcIjNcIjpcIm5cIixcbiAgICAgIFwiMy41XCI6XCJuXCIsXG4gICAgICBcIjMuNlwiOlwiblwiLFxuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjVcIjpcIm5cIixcbiAgICAgIFwiNlwiOlwicFwiLFxuICAgICAgXCI3XCI6XCJwXCIsXG4gICAgICBcIjhcIjpcInBcIixcbiAgICAgIFwiOVwiOlwicFwiLFxuICAgICAgXCIxMFwiOlwicFwiLFxuICAgICAgXCIxMVwiOlwicFwiLFxuICAgICAgXCIxMlwiOlwicFwiLFxuICAgICAgXCIxM1wiOlwicFwiLFxuICAgICAgXCIxNFwiOlwicFwiLFxuICAgICAgXCIxNVwiOlwicFwiLFxuICAgICAgXCIxNlwiOlwicFwiLFxuICAgICAgXCIxN1wiOlwicFwiLFxuICAgICAgXCIxOFwiOlwicFwiLFxuICAgICAgXCIxOVwiOlwicFwiLFxuICAgICAgXCIyMFwiOlwicFwiLFxuICAgICAgXCIyMVwiOlwicFwiLFxuICAgICAgXCIyMlwiOlwicFwiLFxuICAgICAgXCIyM1wiOlwicFwiLFxuICAgICAgXCIyNFwiOlwicFwiLFxuICAgICAgXCIyNVwiOlwicFwiLFxuICAgICAgXCIyNlwiOlwicFwiLFxuICAgICAgXCIyN1wiOlwicFwiLFxuICAgICAgXCIyOFwiOlwicFwiLFxuICAgICAgXCIyOVwiOlwicFwiLFxuICAgICAgXCIzMFwiOlwicFwiLFxuICAgICAgXCIzMVwiOlwicFwiLFxuICAgICAgXCIzMlwiOlwicFwiLFxuICAgICAgXCIzM1wiOlwicFwiLFxuICAgICAgXCIzNFwiOlwicFwiLFxuICAgICAgXCIzNVwiOlwicFwiLFxuICAgICAgXCIzNlwiOlwicFwiXG4gICAgfSxcbiAgICBcImNocm9tZVwiOntcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI1XCI6XCJuXCIsXG4gICAgICBcIjZcIjpcIm5cIixcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCIsXG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcIm5cIixcbiAgICAgIFwiMTNcIjpcIm5cIixcbiAgICAgIFwiMTRcIjpcIm5cIixcbiAgICAgIFwiMTVcIjpcIm5cIixcbiAgICAgIFwiMTZcIjpcIm5cIixcbiAgICAgIFwiMTdcIjpcIm5cIixcbiAgICAgIFwiMThcIjpcIm5cIixcbiAgICAgIFwiMTlcIjpcIm5cIixcbiAgICAgIFwiMjBcIjpcIm5cIixcbiAgICAgIFwiMjFcIjpcIm5cIixcbiAgICAgIFwiMjJcIjpcInBcIixcbiAgICAgIFwiMjNcIjpcInBcIixcbiAgICAgIFwiMjRcIjpcInBcIixcbiAgICAgIFwiMjVcIjpcInBcIixcbiAgICAgIFwiMjZcIjpcInBcIixcbiAgICAgIFwiMjdcIjpcInBcIixcbiAgICAgIFwiMjhcIjpcInBcIixcbiAgICAgIFwiMjlcIjpcInBcIixcbiAgICAgIFwiMzBcIjpcInBcIixcbiAgICAgIFwiMzFcIjpcInBcIixcbiAgICAgIFwiMzJcIjpcInBcIixcbiAgICAgIFwiMzNcIjpcInBcIixcbiAgICAgIFwiMzRcIjpcInBcIixcbiAgICAgIFwiMzVcIjpcInBcIixcbiAgICAgIFwiMzZcIjpcInBcIixcbiAgICAgIFwiMzdcIjpcInBcIixcbiAgICAgIFwiMzhcIjpcInBcIixcbiAgICAgIFwiMzlcIjpcInBcIixcbiAgICAgIFwiNDBcIjpcInBcIixcbiAgICAgIFwiNDFcIjpcInBcIlxuICAgIH0sXG4gICAgXCJzYWZhcmlcIjp7XG4gICAgICBcIjMuMVwiOlwiblwiLFxuICAgICAgXCIzLjJcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI1XCI6XCJuXCIsXG4gICAgICBcIjUuMVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjYuMVwiOlwidVwiLFxuICAgICAgXCI3XCI6XCJ1XCIsXG4gICAgICBcIjcuMVwiOlwidVwiLFxuICAgICAgXCI4XCI6XCJ1XCJcbiAgICB9LFxuICAgIFwib3BlcmFcIjp7XG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiOS41LTkuNlwiOlwiblwiLFxuICAgICAgXCIxMC4wLTEwLjFcIjpcIm5cIixcbiAgICAgIFwiMTAuNVwiOlwiblwiLFxuICAgICAgXCIxMC42XCI6XCJuXCIsXG4gICAgICBcIjExXCI6XCJuXCIsXG4gICAgICBcIjExLjFcIjpcIm5cIixcbiAgICAgIFwiMTEuNVwiOlwiblwiLFxuICAgICAgXCIxMS42XCI6XCJuXCIsXG4gICAgICBcIjEyXCI6XCJuXCIsXG4gICAgICBcIjEyLjFcIjpcIm5cIixcbiAgICAgIFwiMTVcIjpcInBcIixcbiAgICAgIFwiMTZcIjpcInBcIixcbiAgICAgIFwiMTdcIjpcInBcIixcbiAgICAgIFwiMThcIjpcInBcIixcbiAgICAgIFwiMTlcIjpcInBcIixcbiAgICAgIFwiMjBcIjpcInBcIixcbiAgICAgIFwiMjFcIjpcInBcIixcbiAgICAgIFwiMjJcIjpcInBcIixcbiAgICAgIFwiMjNcIjpcInBcIixcbiAgICAgIFwiMjRcIjpcInBcIixcbiAgICAgIFwiMjVcIjpcInBcIixcbiAgICAgIFwiMjZcIjpcInBcIlxuICAgIH0sXG4gICAgXCJpb3Nfc2FmXCI6e1xuICAgICAgXCIzLjJcIjpcInBcIixcbiAgICAgIFwiNC4wLTQuMVwiOlwicFwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJwXCIsXG4gICAgICBcIjUuMC01LjFcIjpcInBcIixcbiAgICAgIFwiNi4wLTYuMVwiOlwicFwiLFxuICAgICAgXCI3LjAtNy4xXCI6XCJwXCIsXG4gICAgICBcIjhcIjpcInBcIlxuICAgIH0sXG4gICAgXCJvcF9taW5pXCI6e1xuICAgICAgXCI1LjAtOC4wXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kcm9pZFwiOntcbiAgICAgIFwiMi4xXCI6XCJwXCIsXG4gICAgICBcIjIuMlwiOlwicFwiLFxuICAgICAgXCIyLjNcIjpcInBcIixcbiAgICAgIFwiM1wiOlwicFwiLFxuICAgICAgXCI0XCI6XCJwXCIsXG4gICAgICBcIjQuMVwiOlwicFwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJwXCIsXG4gICAgICBcIjQuNFwiOlwicFwiLFxuICAgICAgXCI0LjQuM1wiOlwicFwiXG4gICAgfSxcbiAgICBcImJiXCI6e1xuICAgICAgXCI3XCI6XCJwXCIsXG4gICAgICBcIjEwXCI6XCJwXCJcbiAgICB9LFxuICAgIFwib3BfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwicFwiLFxuICAgICAgXCIxMS4xXCI6XCJwXCIsXG4gICAgICBcIjExLjVcIjpcInBcIixcbiAgICAgIFwiMTJcIjpcInBcIixcbiAgICAgIFwiMTIuMVwiOlwicFwiLFxuICAgICAgXCIyNFwiOlwicFwiXG4gICAgfSxcbiAgICBcImFuZF9jaHJcIjp7XG4gICAgICBcIjM4XCI6XCJwXCJcbiAgICB9LFxuICAgIFwiYW5kX2ZmXCI6e1xuICAgICAgXCIzMlwiOlwicFwiXG4gICAgfSxcbiAgICBcImllX21vYlwiOntcbiAgICAgIFwiMTBcIjpcImEgeFwiXG4gICAgfSxcbiAgICBcImFuZF91Y1wiOntcbiAgICAgIFwiOS45XCI6XCJwXCJcbiAgICB9XG4gIH0sXG4gIFwibm90ZXNcIjpcIlBhcnRpYWwgc3VwcG9ydCBpbiBJRTEwIHJlZmVycyB0aGUgbGFjayBvZiBwb2ludGVyZW50ZXIgYW5kIHBvaW50ZXJsZWF2ZSBldmVudHMuIEZpcmVmb3ggTmlnaHRseSBwcm92aWRlcyAnZG9tLnczY19wb2ludGVyX2V2ZW50cy5lbmFibGVkJyBvcHRpb24gdG8gc3VwcG9ydCB0aGlzIHNwZWNpZmljYXRpb24gc3RhcnRpbmcgd2l0aCB2ZXJzaW9uIDI4LlwiLFxuICBcIm5vdGVzX2J5X251bVwiOntcbiAgICBcbiAgfSxcbiAgXCJ1c2FnZV9wZXJjX3lcIjo3LjM3LFxuICBcInVzYWdlX3BlcmNfYVwiOjIuNzMsXG4gIFwidWNwcmVmaXhcIjpmYWxzZSxcbiAgXCJwYXJlbnRcIjpcIlwiLFxuICBcImtleXdvcmRzXCI6XCJwb2ludGVyZG93bixwb2ludGVybW92ZSxwb2ludGVydXAscG9pbnRlcmNhbmNlbCxwb2ludGVyb3Zlcixwb2ludGVyb3V0LHBvaW50ZXJlbnRlcixwb2ludGVybGVhdmVcIixcbiAgXCJpZV9pZFwiOlwicG9pbnRlcmV2ZW50c1wiLFxuICBcImNocm9tZV9pZFwiOlwiNDUwNDY5OTEzODk5ODI3MlwiLFxuICBcInNob3duXCI6dHJ1ZVxufSIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJ0aXRsZVwiOlwidGV4dC1kZWNvcmF0aW9uIHN0eWxpbmdcIixcbiAgXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIGRlZmluaW5nIHRoZSB0eXBlLCBzdHlsZSBhbmQgY29sb3Igb2YgbGluZXMgaW4gdGhlIHRleHQtZGVjb3JhdGlvbiBwcm9wZXJ0eS5cIixcbiAgXCJzcGVjXCI6XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MtdGV4dC1kZWNvci0zLyNsaW5lLWRlY29yYXRpb25cIixcbiAgXCJzdGF0dXNcIjpcImNyXCIsXG4gIFwibGlua3NcIjpbXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWRlY29yYXRpb24tc3R5bGVcIixcbiAgICAgIFwidGl0bGVcIjpcIk1ETiBEb2N1bWVudGF0aW9uIGZvciB0ZXh0LWRlY29yYXRpb24tc3R5bGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWRlY29yYXRpb24tY29sb3JcIixcbiAgICAgIFwidGl0bGVcIjpcIk1ETiBEb2N1bWVudGF0aW9uIGZvciB0ZXh0LWRlY29yYXRpb24tY29sb3JcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LWRlY29yYXRpb24tbGluZVwiLFxuICAgICAgXCJ0aXRsZVwiOlwiTUROIERvY3VtZW50YXRpb24gZm9yIHRleHQtZGVjb3JhdGlvbi1saW5lXCJcbiAgICB9XG4gIF0sXG4gIFwiYnVnc1wiOltcbiAgICBcbiAgXSxcbiAgXCJjYXRlZ29yaWVzXCI6W1xuICAgIFwiQ1NTM1wiXG4gIF0sXG4gIFwic3RhdHNcIjp7XG4gICAgXCJpZVwiOntcbiAgICAgIFwiNS41XCI6XCJuXCIsXG4gICAgICBcIjZcIjpcIm5cIixcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCIsXG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJmaXJlZm94XCI6e1xuICAgICAgXCIyXCI6XCJuXCIsXG4gICAgICBcIjNcIjpcIm5cIixcbiAgICAgIFwiMy41XCI6XCJuXCIsXG4gICAgICBcIjMuNlwiOlwiblwiLFxuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjVcIjpcIm5cIixcbiAgICAgIFwiNlwiOlwieSB4XCIsXG4gICAgICBcIjdcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIixcbiAgICAgIFwiOVwiOlwieSB4XCIsXG4gICAgICBcIjEwXCI6XCJ5IHhcIixcbiAgICAgIFwiMTFcIjpcInkgeFwiLFxuICAgICAgXCIxMlwiOlwieSB4XCIsXG4gICAgICBcIjEzXCI6XCJ5IHhcIixcbiAgICAgIFwiMTRcIjpcInkgeFwiLFxuICAgICAgXCIxNVwiOlwieSB4XCIsXG4gICAgICBcIjE2XCI6XCJ5IHhcIixcbiAgICAgIFwiMTdcIjpcInkgeFwiLFxuICAgICAgXCIxOFwiOlwieSB4XCIsXG4gICAgICBcIjE5XCI6XCJ5IHhcIixcbiAgICAgIFwiMjBcIjpcInkgeFwiLFxuICAgICAgXCIyMVwiOlwieSB4XCIsXG4gICAgICBcIjIyXCI6XCJ5IHhcIixcbiAgICAgIFwiMjNcIjpcInkgeFwiLFxuICAgICAgXCIyNFwiOlwieSB4XCIsXG4gICAgICBcIjI1XCI6XCJ5IHhcIixcbiAgICAgIFwiMjZcIjpcInkgeFwiLFxuICAgICAgXCIyN1wiOlwieSB4XCIsXG4gICAgICBcIjI4XCI6XCJ5IHhcIixcbiAgICAgIFwiMjlcIjpcInkgeFwiLFxuICAgICAgXCIzMFwiOlwieSB4XCIsXG4gICAgICBcIjMxXCI6XCJ5IHhcIixcbiAgICAgIFwiMzJcIjpcInkgeFwiLFxuICAgICAgXCIzM1wiOlwieSB4XCIsXG4gICAgICBcIjM0XCI6XCJ5IHhcIixcbiAgICAgIFwiMzVcIjpcInkgeFwiLFxuICAgICAgXCIzNlwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwiY2hyb21lXCI6e1xuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjVcIjpcIm5cIixcbiAgICAgIFwiNlwiOlwiblwiLFxuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjhcIjpcIm5cIixcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMlwiOlwiblwiLFxuICAgICAgXCIxM1wiOlwiblwiLFxuICAgICAgXCIxNFwiOlwiblwiLFxuICAgICAgXCIxNVwiOlwiblwiLFxuICAgICAgXCIxNlwiOlwiblwiLFxuICAgICAgXCIxN1wiOlwiblwiLFxuICAgICAgXCIxOFwiOlwiblwiLFxuICAgICAgXCIxOVwiOlwiblwiLFxuICAgICAgXCIyMFwiOlwiblwiLFxuICAgICAgXCIyMVwiOlwiblwiLFxuICAgICAgXCIyMlwiOlwiblwiLFxuICAgICAgXCIyM1wiOlwiblwiLFxuICAgICAgXCIyNFwiOlwiblwiLFxuICAgICAgXCIyNVwiOlwiblwiLFxuICAgICAgXCIyNlwiOlwibiB4IGQgIzFcIixcbiAgICAgIFwiMjdcIjpcIm4geCBkICMxXCIsXG4gICAgICBcIjI4XCI6XCJuIHggZCAjMVwiLFxuICAgICAgXCIyOVwiOlwibiB4IGQgIzFcIixcbiAgICAgIFwiMzBcIjpcIm4geCBkICMxXCIsXG4gICAgICBcIjMxXCI6XCJuIHggZCAjMVwiLFxuICAgICAgXCIzMlwiOlwibiB4IGQgIzFcIixcbiAgICAgIFwiMzNcIjpcIm4geCBkICMxXCIsXG4gICAgICBcIjM0XCI6XCJuIHggZCAjMVwiLFxuICAgICAgXCIzNVwiOlwibiB4IGQgIzFcIixcbiAgICAgIFwiMzZcIjpcIm4geCBkICMxXCIsXG4gICAgICBcIjM3XCI6XCJuIHggZCAjMVwiLFxuICAgICAgXCIzOFwiOlwibiB4IGQgIzFcIixcbiAgICAgIFwiMzlcIjpcIm4geCBkICMxXCIsXG4gICAgICBcIjQwXCI6XCJuIHggZCAjMVwiLFxuICAgICAgXCI0MVwiOlwibiB4IGQgIzFcIlxuICAgIH0sXG4gICAgXCJzYWZhcmlcIjp7XG4gICAgICBcIjMuMVwiOlwiblwiLFxuICAgICAgXCIzLjJcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI1XCI6XCJuXCIsXG4gICAgICBcIjUuMVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjYuMVwiOlwiblwiLFxuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjcuMVwiOlwiYSB4ICMyXCIsXG4gICAgICBcIjhcIjpcImEgeCAjMlwiXG4gICAgfSxcbiAgICBcIm9wZXJhXCI6e1xuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjkuNS05LjZcIjpcIm5cIixcbiAgICAgIFwiMTAuMC0xMC4xXCI6XCJuXCIsXG4gICAgICBcIjEwLjVcIjpcIm5cIixcbiAgICAgIFwiMTAuNlwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMS4xXCI6XCJuXCIsXG4gICAgICBcIjExLjVcIjpcIm5cIixcbiAgICAgIFwiMTEuNlwiOlwiblwiLFxuICAgICAgXCIxMlwiOlwiblwiLFxuICAgICAgXCIxMi4xXCI6XCJuXCIsXG4gICAgICBcIjE1XCI6XCJuXCIsXG4gICAgICBcIjE2XCI6XCJuXCIsXG4gICAgICBcIjE3XCI6XCJuXCIsXG4gICAgICBcIjE4XCI6XCJuXCIsXG4gICAgICBcIjE5XCI6XCJuXCIsXG4gICAgICBcIjIwXCI6XCJuXCIsXG4gICAgICBcIjIxXCI6XCJuXCIsXG4gICAgICBcIjIyXCI6XCJuXCIsXG4gICAgICBcIjIzXCI6XCJuXCIsXG4gICAgICBcIjI0XCI6XCJuXCIsXG4gICAgICBcIjI1XCI6XCJuXCIsXG4gICAgICBcIjI2XCI6XCJuXCJcbiAgICB9LFxuICAgIFwiaW9zX3NhZlwiOntcbiAgICAgIFwiMy4yXCI6XCJuXCIsXG4gICAgICBcIjQuMC00LjFcIjpcIm5cIixcbiAgICAgIFwiNC4yLTQuM1wiOlwiblwiLFxuICAgICAgXCI1LjAtNS4xXCI6XCJuXCIsXG4gICAgICBcIjYuMC02LjFcIjpcIm5cIixcbiAgICAgIFwiNy4wLTcuMVwiOlwiblwiLFxuICAgICAgXCI4XCI6XCJhIHggIzJcIlxuICAgIH0sXG4gICAgXCJvcF9taW5pXCI6e1xuICAgICAgXCI1LjAtOC4wXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kcm9pZFwiOntcbiAgICAgIFwiMi4xXCI6XCJuXCIsXG4gICAgICBcIjIuMlwiOlwiblwiLFxuICAgICAgXCIyLjNcIjpcIm5cIixcbiAgICAgIFwiM1wiOlwiblwiLFxuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjQuMVwiOlwiblwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJuXCIsXG4gICAgICBcIjQuNFwiOlwiblwiLFxuICAgICAgXCI0LjQuM1wiOlwiblwiXG4gICAgfSxcbiAgICBcImJiXCI6e1xuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjEwXCI6XCJuXCJcbiAgICB9LFxuICAgIFwib3BfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMS4xXCI6XCJuXCIsXG4gICAgICBcIjExLjVcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcIm5cIixcbiAgICAgIFwiMTIuMVwiOlwiblwiLFxuICAgICAgXCIyNFwiOlwiblwiXG4gICAgfSxcbiAgICBcImFuZF9jaHJcIjp7XG4gICAgICBcIjM4XCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kX2ZmXCI6e1xuICAgICAgXCIzMlwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwiaWVfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwiblwiXG4gICAgfSxcbiAgICBcImFuZF91Y1wiOntcbiAgICAgIFwiOS45XCI6XCJuXCJcbiAgICB9XG4gIH0sXG4gIFwibm90ZXNcIjpcIlwiLFxuICBcIm5vdGVzX2J5X251bVwiOntcbiAgICBcIjFcIjpcIkVuYWJsZWQgaW4gQ2hyb21lIHRocm91Z2ggdGhlIFxcXCJleHBlcmltZW50YWwgV2ViIFBsYXRmb3JtIGZlYXR1cmVzXFxcIiBmbGFnIGluIGNocm9tZTovL2ZsYWdzXCIsXG4gICAgXCIyXCI6XCJQYXJ0aWFsIHN1cHBvcnQgaW4gU2FmYXJpIHJlZmVycyB0byBub3Qgc3VwcG9ydGluZyB0aGUgdGV4dC1kZWNvcmF0aW9uLXN0eWxlIHByb3BlcnR5LlwiXG4gIH0sXG4gIFwidXNhZ2VfcGVyY195XCI6MTMuMDgsXG4gIFwidXNhZ2VfcGVyY19hXCI6MS44MSxcbiAgXCJ1Y3ByZWZpeFwiOmZhbHNlLFxuICBcInBhcmVudFwiOlwiXCIsXG4gIFwia2V5d29yZHNcIjpcInRleHQtZGVjb3JhdGlvbi1saW5lLHRleHQtZGVjb3JhdGlvbi1zdHlsZSx0ZXh0LWRlY29yYXRpb24tY29sb3JcIixcbiAgXCJpZV9pZFwiOlwiXCIsXG4gIFwiY2hyb21lX2lkXCI6XCJcIixcbiAgXCJzaG93blwiOnRydWVcbn0iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwidGl0bGVcIjpcIkNTUyB0ZXh0LXNpemUtYWRqdXN0XCIsXG4gIFwiZGVzY3JpcHRpb25cIjpcIk9uIG1vYmlsZSBkZXZpY2VzLCB0aGUgdGV4dC1zaXplLWFkanVzdCBDU1MgcHJvcGVydHkgYWxsb3dzIFdlYiBhdXRob3JzIHRvIGNvbnRyb2wgaWYgYW5kIGhvdyB0aGUgdGV4dC1pbmZsYXRpbmcgYWxnb3JpdGhtIGlzIGFwcGxpZWQgdG8gdGhlIHRleHR1YWwgY29udGVudCBvZiB0aGUgZWxlbWVudCBpdCBpcyBhcHBsaWVkIHRvLlwiLFxuICBcInNwZWNcIjpcImh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzcy1zaXplLWFkanVzdC9cIixcbiAgXCJzdGF0dXNcIjpcIndkXCIsXG4gIFwibGlua3NcIjpbXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90ZXh0LXNpemUtYWRqdXN0XCIsXG4gICAgICBcInRpdGxlXCI6XCJNRE4gRG9jc1wiXG4gICAgfVxuICBdLFxuICBcImJ1Z3NcIjpbXG4gICAge1xuICAgICAgXCJkZXNjcmlwdGlvblwiOlwiVGhlcmUgaXMgYSBidWcgaW4gV2Via2l0LWJhc2VkIGRlc2t0b3AgYnJvd3NlcnMuIElmIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdCBpcyBleHBsaWNpdGVseSBzZXQgdG8gbm9uZSwgV2Via2l0LWJhc2VkIGRlc2t0b3AgYnJvd3NlcnMsIGxpa2UgQ2hyb21lIG9yIFNhZmFyaSwgaW5zdGVhZCBvZiBpZ25vcmluZyB0aGUgcHJvcGVydHksIHdpbGwgcHJldmVudCB0aGUgdXNlciB0byB6b29tIGluIG9yIG91dCB0aGUgV2ViIHBhZ2UuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZGVzY3JpcHRpb25cIjpcIklmIHRoZSB2aWV3cG9ydCBpbiBJRSBQaG9uZSBpcyBzZXQgdXNpbmcgPG1ldGE+IGVsZW1lbnQsIHRoZSB2YWx1ZSBvZiB0aGUgQ1NTIHRleHQtc2l6ZS1hZGp1c3QgcHJvcGVydHkgaXMgaWdub3JlZC5cIlxuICAgIH1cbiAgXSxcbiAgXCJjYXRlZ29yaWVzXCI6W1xuICAgIFwiQ1NTM1wiXG4gIF0sXG4gIFwic3RhdHNcIjp7XG4gICAgXCJpZVwiOntcbiAgICAgIFwiNS41XCI6XCJuXCIsXG4gICAgICBcIjZcIjpcIm5cIixcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCIsXG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJmaXJlZm94XCI6e1xuICAgICAgXCIyXCI6XCJuXCIsXG4gICAgICBcIjNcIjpcIm5cIixcbiAgICAgIFwiMy41XCI6XCJuXCIsXG4gICAgICBcIjMuNlwiOlwiblwiLFxuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjVcIjpcIm5cIixcbiAgICAgIFwiNlwiOlwiblwiLFxuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjhcIjpcIm5cIixcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMlwiOlwiblwiLFxuICAgICAgXCIxM1wiOlwiblwiLFxuICAgICAgXCIxNFwiOlwiblwiLFxuICAgICAgXCIxNVwiOlwiblwiLFxuICAgICAgXCIxNlwiOlwiblwiLFxuICAgICAgXCIxN1wiOlwiblwiLFxuICAgICAgXCIxOFwiOlwiblwiLFxuICAgICAgXCIxOVwiOlwiblwiLFxuICAgICAgXCIyMFwiOlwiblwiLFxuICAgICAgXCIyMVwiOlwiblwiLFxuICAgICAgXCIyMlwiOlwiblwiLFxuICAgICAgXCIyM1wiOlwiblwiLFxuICAgICAgXCIyNFwiOlwiblwiLFxuICAgICAgXCIyNVwiOlwiblwiLFxuICAgICAgXCIyNlwiOlwiblwiLFxuICAgICAgXCIyN1wiOlwiblwiLFxuICAgICAgXCIyOFwiOlwiblwiLFxuICAgICAgXCIyOVwiOlwiblwiLFxuICAgICAgXCIzMFwiOlwiblwiLFxuICAgICAgXCIzMVwiOlwiblwiLFxuICAgICAgXCIzMlwiOlwiblwiLFxuICAgICAgXCIzM1wiOlwiblwiLFxuICAgICAgXCIzNFwiOlwiblwiLFxuICAgICAgXCIzNVwiOlwiblwiLFxuICAgICAgXCIzNlwiOlwiblwiXG4gICAgfSxcbiAgICBcImNocm9tZVwiOntcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI1XCI6XCJuXCIsXG4gICAgICBcIjZcIjpcIm5cIixcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCIsXG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcIm5cIixcbiAgICAgIFwiMTNcIjpcIm5cIixcbiAgICAgIFwiMTRcIjpcIm5cIixcbiAgICAgIFwiMTVcIjpcIm5cIixcbiAgICAgIFwiMTZcIjpcIm5cIixcbiAgICAgIFwiMTdcIjpcIm5cIixcbiAgICAgIFwiMThcIjpcIm5cIixcbiAgICAgIFwiMTlcIjpcIm5cIixcbiAgICAgIFwiMjBcIjpcIm5cIixcbiAgICAgIFwiMjFcIjpcIm5cIixcbiAgICAgIFwiMjJcIjpcIm5cIixcbiAgICAgIFwiMjNcIjpcIm5cIixcbiAgICAgIFwiMjRcIjpcIm5cIixcbiAgICAgIFwiMjVcIjpcIm5cIixcbiAgICAgIFwiMjZcIjpcIm5cIixcbiAgICAgIFwiMjdcIjpcIm5cIixcbiAgICAgIFwiMjhcIjpcIm5cIixcbiAgICAgIFwiMjlcIjpcIm5cIixcbiAgICAgIFwiMzBcIjpcIm5cIixcbiAgICAgIFwiMzFcIjpcIm5cIixcbiAgICAgIFwiMzJcIjpcIm5cIixcbiAgICAgIFwiMzNcIjpcIm5cIixcbiAgICAgIFwiMzRcIjpcIm5cIixcbiAgICAgIFwiMzVcIjpcIm5cIixcbiAgICAgIFwiMzZcIjpcIm5cIixcbiAgICAgIFwiMzdcIjpcIm5cIixcbiAgICAgIFwiMzhcIjpcIm5cIixcbiAgICAgIFwiMzlcIjpcIm5cIixcbiAgICAgIFwiNDBcIjpcIm5cIixcbiAgICAgIFwiNDFcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJzYWZhcmlcIjp7XG4gICAgICBcIjMuMVwiOlwiblwiLFxuICAgICAgXCIzLjJcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI1XCI6XCJuXCIsXG4gICAgICBcIjUuMVwiOlwiblwiLFxuICAgICAgXCI2XCI6XCJuXCIsXG4gICAgICBcIjYuMVwiOlwiblwiLFxuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjcuMVwiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCJcbiAgICB9LFxuICAgIFwib3BlcmFcIjp7XG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiOS41LTkuNlwiOlwiblwiLFxuICAgICAgXCIxMC4wLTEwLjFcIjpcIm5cIixcbiAgICAgIFwiMTAuNVwiOlwiblwiLFxuICAgICAgXCIxMC42XCI6XCJuXCIsXG4gICAgICBcIjExXCI6XCJuXCIsXG4gICAgICBcIjExLjFcIjpcIm5cIixcbiAgICAgIFwiMTEuNVwiOlwiblwiLFxuICAgICAgXCIxMS42XCI6XCJuXCIsXG4gICAgICBcIjEyXCI6XCJuXCIsXG4gICAgICBcIjEyLjFcIjpcIm5cIixcbiAgICAgIFwiMTVcIjpcIm5cIixcbiAgICAgIFwiMTZcIjpcIm5cIixcbiAgICAgIFwiMTdcIjpcIm5cIixcbiAgICAgIFwiMThcIjpcIm5cIixcbiAgICAgIFwiMTlcIjpcIm5cIixcbiAgICAgIFwiMjBcIjpcIm5cIixcbiAgICAgIFwiMjFcIjpcIm5cIixcbiAgICAgIFwiMjJcIjpcIm5cIixcbiAgICAgIFwiMjNcIjpcIm5cIixcbiAgICAgIFwiMjRcIjpcIm5cIixcbiAgICAgIFwiMjVcIjpcIm5cIixcbiAgICAgIFwiMjZcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJpb3Nfc2FmXCI6e1xuICAgICAgXCIzLjJcIjpcIm5cIixcbiAgICAgIFwiNC4wLTQuMVwiOlwiblwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJuXCIsXG4gICAgICBcIjUuMC01LjFcIjpcInkgeFwiLFxuICAgICAgXCI2LjAtNi4xXCI6XCJ5IHhcIixcbiAgICAgIFwiNy4wLTcuMVwiOlwieSB4XCIsXG4gICAgICBcIjhcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcIm9wX21pbmlcIjp7XG4gICAgICBcIjUuMC04LjBcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJhbmRyb2lkXCI6e1xuICAgICAgXCIyLjFcIjpcIm5cIixcbiAgICAgIFwiMi4yXCI6XCJuXCIsXG4gICAgICBcIjIuM1wiOlwiblwiLFxuICAgICAgXCIzXCI6XCJuXCIsXG4gICAgICBcIjRcIjpcIm5cIixcbiAgICAgIFwiNC4xXCI6XCJuXCIsXG4gICAgICBcIjQuMi00LjNcIjpcIm5cIixcbiAgICAgIFwiNC40XCI6XCJuXCIsXG4gICAgICBcIjQuNC4zXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYmJcIjp7XG4gICAgICBcIjdcIjpcIm5cIixcbiAgICAgIFwiMTBcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJvcF9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJuXCIsXG4gICAgICBcIjExXCI6XCJuXCIsXG4gICAgICBcIjExLjFcIjpcIm5cIixcbiAgICAgIFwiMTEuNVwiOlwiblwiLFxuICAgICAgXCIxMlwiOlwiblwiLFxuICAgICAgXCIxMi4xXCI6XCJuXCIsXG4gICAgICBcIjI0XCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kX2NoclwiOntcbiAgICAgIFwiMzhcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJhbmRfZmZcIjp7XG4gICAgICBcIjMyXCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJpZV9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJhbmRfdWNcIjp7XG4gICAgICBcIjkuOVwiOlwieSB4XCJcbiAgICB9XG4gIH0sXG4gIFwibm90ZXNcIjpcIlwiLFxuICBcIm5vdGVzX2J5X251bVwiOntcbiAgICBcbiAgfSxcbiAgXCJ1c2FnZV9wZXJjX3lcIjoxMS4xNyxcbiAgXCJ1c2FnZV9wZXJjX2FcIjowLFxuICBcInVjcHJlZml4XCI6ZmFsc2UsXG4gIFwicGFyZW50XCI6XCJcIixcbiAgXCJrZXl3b3Jkc1wiOlwiXCIsXG4gIFwiaWVfaWRcIjpcIlwiLFxuICBcImNocm9tZV9pZFwiOlwiXCIsXG4gIFwic2hvd25cIjp0cnVlXG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcInRpdGxlXCI6XCJDU1MzIFRyYW5zZm9ybXNcIixcbiAgXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHRyYW5zZm9ybWluZyBhbiBlbGVtZW50IGluY2x1ZGluZyByb3RhdGluZywgc2NhbGluZywgZXRjLlwiLFxuICBcInNwZWNcIjpcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtMmQtdHJhbnNmb3Jtcy9cIixcbiAgXCJzdGF0dXNcIjpcIndkXCIsXG4gIFwibGlua3NcIjpbXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly93d3cud2VzdGNpdi5jb20vdG9vbHMvdHJhbnNmb3Jtcy9cIixcbiAgICAgIFwidGl0bGVcIjpcIkxpdmUgZWRpdG9yXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9DU1MvLW1vei10cmFuc2Zvcm1cIixcbiAgICAgIFwidGl0bGVcIjpcIk1ETiBhcnRpY2xlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vd3d3LndlYnJlc291cmNlc2RlcG90LmNvbS9jcm9zcy1icm93c2VyLWNzcy10cmFuc2Zvcm1zLWNzc3NhbmRwYXBlci9cIixcbiAgICAgIFwidGl0bGVcIjpcIldvcmthcm91bmQgc2NyaXB0IGZvciBJRVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL3d3dy5jc3MzZmlsZXMuY29tL3RyYW5zZm9ybS9cIixcbiAgICAgIFwidGl0bGVcIjpcIkluZm9ybWF0aW9uIHBhZ2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly93d3cudXNlcmFnZW50bWFuLmNvbS9JRVRyYW5zZm9ybXNUcmFuc2xhdG9yL1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiQ29udmVydGVyIGZvciBJRVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9waGlnZ2luczQyL2hhcy5qcy9tYXN0ZXIvZGV0ZWN0L2Nzcy5qcyNjc3MtdHJhbnNmb3JtXCIsXG4gICAgICBcInRpdGxlXCI6XCJoYXMuanMgdGVzdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL2RvY3Mud2VicGxhdGZvcm0ub3JnL3dpa2kvY3NzL3RyYW5zZm9ybXMvdHJhbnNmb3JtXCIsXG4gICAgICBcInRpdGxlXCI6XCJXZWJQbGF0Zm9ybSBEb2NzXCJcbiAgICB9XG4gIF0sXG4gIFwiYnVnc1wiOltcbiAgICB7XG4gICAgICBcImRlc2NyaXB0aW9uXCI6XCJTY2FsaW5nIHRyYW5zZm9ybXMgaW4gQW5kcm9pZCAyLjMgZmFpbHMgdG8gc2NhbGUgZWxlbWVudCBiYWNrZ3JvdW5kIGltYWdlcy5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJkZXNjcmlwdGlvblwiOlwiRmlyZWZveCBhbmQgSUUgZG9uJ3Qgc3VwcG9ydCBDU1MgdHJhbnNmb3JtcyBvbiBTVkcgZWxlbWVudHMgKHRob3VnaCBTVkcgdHJhbnNmb3JtIGF0dHJpYnV0ZXMgZG8gd29yaykuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiZGVzY3JpcHRpb25cIjpcIlRyYW5zZm9ybXMgbWF5IGJyZWFrIHBvc2l0aW9uOmZpeGVkIHN0eWxlcyBvZiBjb250YWluZWQgZWxlbWVudHNcIlxuICAgIH1cbiAgXSxcbiAgXCJjYXRlZ29yaWVzXCI6W1xuICAgIFwiQ1NTM1wiXG4gIF0sXG4gIFwic3RhdHNcIjp7XG4gICAgXCJpZVwiOntcbiAgICAgIFwiNS41XCI6XCJuXCIsXG4gICAgICBcIjZcIjpcInBcIixcbiAgICAgIFwiN1wiOlwicFwiLFxuICAgICAgXCI4XCI6XCJwXCIsXG4gICAgICBcIjlcIjpcInkgeFwiLFxuICAgICAgXCIxMFwiOlwieVwiLFxuICAgICAgXCIxMVwiOlwieVwiXG4gICAgfSxcbiAgICBcImZpcmVmb3hcIjp7XG4gICAgICBcIjJcIjpcIm5cIixcbiAgICAgIFwiM1wiOlwiblwiLFxuICAgICAgXCIzLjVcIjpcInkgeFwiLFxuICAgICAgXCIzLjZcIjpcInkgeFwiLFxuICAgICAgXCI0XCI6XCJ5IHhcIixcbiAgICAgIFwiNVwiOlwieSB4XCIsXG4gICAgICBcIjZcIjpcInkgeFwiLFxuICAgICAgXCI3XCI6XCJ5IHhcIixcbiAgICAgIFwiOFwiOlwieSB4XCIsXG4gICAgICBcIjlcIjpcInkgeFwiLFxuICAgICAgXCIxMFwiOlwieSB4XCIsXG4gICAgICBcIjExXCI6XCJ5IHhcIixcbiAgICAgIFwiMTJcIjpcInkgeFwiLFxuICAgICAgXCIxM1wiOlwieSB4XCIsXG4gICAgICBcIjE0XCI6XCJ5IHhcIixcbiAgICAgIFwiMTVcIjpcInkgeFwiLFxuICAgICAgXCIxNlwiOlwieVwiLFxuICAgICAgXCIxN1wiOlwieVwiLFxuICAgICAgXCIxOFwiOlwieVwiLFxuICAgICAgXCIxOVwiOlwieVwiLFxuICAgICAgXCIyMFwiOlwieVwiLFxuICAgICAgXCIyMVwiOlwieVwiLFxuICAgICAgXCIyMlwiOlwieVwiLFxuICAgICAgXCIyM1wiOlwieVwiLFxuICAgICAgXCIyNFwiOlwieVwiLFxuICAgICAgXCIyNVwiOlwieVwiLFxuICAgICAgXCIyNlwiOlwieVwiLFxuICAgICAgXCIyN1wiOlwieVwiLFxuICAgICAgXCIyOFwiOlwieVwiLFxuICAgICAgXCIyOVwiOlwieVwiLFxuICAgICAgXCIzMFwiOlwieVwiLFxuICAgICAgXCIzMVwiOlwieVwiLFxuICAgICAgXCIzMlwiOlwieVwiLFxuICAgICAgXCIzM1wiOlwieVwiLFxuICAgICAgXCIzNFwiOlwieVwiLFxuICAgICAgXCIzNVwiOlwieVwiLFxuICAgICAgXCIzNlwiOlwieVwiXG4gICAgfSxcbiAgICBcImNocm9tZVwiOntcbiAgICAgIFwiNFwiOlwieSB4XCIsXG4gICAgICBcIjVcIjpcInkgeFwiLFxuICAgICAgXCI2XCI6XCJ5IHhcIixcbiAgICAgIFwiN1wiOlwieSB4XCIsXG4gICAgICBcIjhcIjpcInkgeFwiLFxuICAgICAgXCI5XCI6XCJ5IHhcIixcbiAgICAgIFwiMTBcIjpcInkgeFwiLFxuICAgICAgXCIxMVwiOlwieSB4XCIsXG4gICAgICBcIjEyXCI6XCJ5IHhcIixcbiAgICAgIFwiMTNcIjpcInkgeFwiLFxuICAgICAgXCIxNFwiOlwieSB4XCIsXG4gICAgICBcIjE1XCI6XCJ5IHhcIixcbiAgICAgIFwiMTZcIjpcInkgeFwiLFxuICAgICAgXCIxN1wiOlwieSB4XCIsXG4gICAgICBcIjE4XCI6XCJ5IHhcIixcbiAgICAgIFwiMTlcIjpcInkgeFwiLFxuICAgICAgXCIyMFwiOlwieSB4XCIsXG4gICAgICBcIjIxXCI6XCJ5IHhcIixcbiAgICAgIFwiMjJcIjpcInkgeFwiLFxuICAgICAgXCIyM1wiOlwieSB4XCIsXG4gICAgICBcIjI0XCI6XCJ5IHhcIixcbiAgICAgIFwiMjVcIjpcInkgeFwiLFxuICAgICAgXCIyNlwiOlwieSB4XCIsXG4gICAgICBcIjI3XCI6XCJ5IHhcIixcbiAgICAgIFwiMjhcIjpcInkgeFwiLFxuICAgICAgXCIyOVwiOlwieSB4XCIsXG4gICAgICBcIjMwXCI6XCJ5IHhcIixcbiAgICAgIFwiMzFcIjpcInkgeFwiLFxuICAgICAgXCIzMlwiOlwieSB4XCIsXG4gICAgICBcIjMzXCI6XCJ5IHhcIixcbiAgICAgIFwiMzRcIjpcInkgeFwiLFxuICAgICAgXCIzNVwiOlwieSB4XCIsXG4gICAgICBcIjM2XCI6XCJ5XCIsXG4gICAgICBcIjM3XCI6XCJ5XCIsXG4gICAgICBcIjM4XCI6XCJ5XCIsXG4gICAgICBcIjM5XCI6XCJ5XCIsXG4gICAgICBcIjQwXCI6XCJ5XCIsXG4gICAgICBcIjQxXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwic2FmYXJpXCI6e1xuICAgICAgXCIzLjFcIjpcInkgeFwiLFxuICAgICAgXCIzLjJcIjpcInkgeFwiLFxuICAgICAgXCI0XCI6XCJ5IHhcIixcbiAgICAgIFwiNVwiOlwieSB4XCIsXG4gICAgICBcIjUuMVwiOlwieSB4XCIsXG4gICAgICBcIjZcIjpcInkgeFwiLFxuICAgICAgXCI2LjFcIjpcInkgeFwiLFxuICAgICAgXCI3XCI6XCJ5IHhcIixcbiAgICAgIFwiNy4xXCI6XCJ5IHhcIixcbiAgICAgIFwiOFwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwib3BlcmFcIjp7XG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiOS41LTkuNlwiOlwiblwiLFxuICAgICAgXCIxMC4wLTEwLjFcIjpcIm5cIixcbiAgICAgIFwiMTAuNVwiOlwieSB4XCIsXG4gICAgICBcIjEwLjZcIjpcInkgeFwiLFxuICAgICAgXCIxMVwiOlwieSB4XCIsXG4gICAgICBcIjExLjFcIjpcInkgeFwiLFxuICAgICAgXCIxMS41XCI6XCJ5IHhcIixcbiAgICAgIFwiMTEuNlwiOlwieSB4XCIsXG4gICAgICBcIjEyXCI6XCJ5IHhcIixcbiAgICAgIFwiMTIuMVwiOlwieVwiLFxuICAgICAgXCIxNVwiOlwieSB4XCIsXG4gICAgICBcIjE2XCI6XCJ5IHhcIixcbiAgICAgIFwiMTdcIjpcInkgeFwiLFxuICAgICAgXCIxOFwiOlwieSB4XCIsXG4gICAgICBcIjE5XCI6XCJ5IHhcIixcbiAgICAgIFwiMjBcIjpcInkgeFwiLFxuICAgICAgXCIyMVwiOlwieSB4XCIsXG4gICAgICBcIjIyXCI6XCJ5IHhcIixcbiAgICAgIFwiMjNcIjpcInlcIixcbiAgICAgIFwiMjRcIjpcInlcIixcbiAgICAgIFwiMjVcIjpcInlcIixcbiAgICAgIFwiMjZcIjpcInlcIlxuICAgIH0sXG4gICAgXCJpb3Nfc2FmXCI6e1xuICAgICAgXCIzLjJcIjpcInkgeFwiLFxuICAgICAgXCI0LjAtNC4xXCI6XCJ5IHhcIixcbiAgICAgIFwiNC4yLTQuM1wiOlwieSB4XCIsXG4gICAgICBcIjUuMC01LjFcIjpcInkgeFwiLFxuICAgICAgXCI2LjAtNi4xXCI6XCJ5IHhcIixcbiAgICAgIFwiNy4wLTcuMVwiOlwieSB4XCIsXG4gICAgICBcIjhcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcIm9wX21pbmlcIjp7XG4gICAgICBcIjUuMC04LjBcIjpcIm5cIlxuICAgIH0sXG4gICAgXCJhbmRyb2lkXCI6e1xuICAgICAgXCIyLjFcIjpcInkgeFwiLFxuICAgICAgXCIyLjJcIjpcInkgeFwiLFxuICAgICAgXCIyLjNcIjpcInkgeFwiLFxuICAgICAgXCIzXCI6XCJ5IHhcIixcbiAgICAgIFwiNFwiOlwieSB4XCIsXG4gICAgICBcIjQuMVwiOlwieSB4XCIsXG4gICAgICBcIjQuMi00LjNcIjpcInkgeFwiLFxuICAgICAgXCI0LjRcIjpcInkgeFwiLFxuICAgICAgXCI0LjQuM1wiOlwieSB4XCJcbiAgICB9LFxuICAgIFwiYmJcIjp7XG4gICAgICBcIjdcIjpcInkgeFwiLFxuICAgICAgXCIxMFwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwib3BfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwieVwiLFxuICAgICAgXCIxMS4xXCI6XCJ5XCIsXG4gICAgICBcIjExLjVcIjpcInlcIixcbiAgICAgIFwiMTJcIjpcInlcIixcbiAgICAgIFwiMTIuMVwiOlwieVwiLFxuICAgICAgXCIyNFwiOlwieVwiXG4gICAgfSxcbiAgICBcImFuZF9jaHJcIjp7XG4gICAgICBcIjM4XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiYW5kX2ZmXCI6e1xuICAgICAgXCIzMlwiOlwieVwiXG4gICAgfSxcbiAgICBcImllX21vYlwiOntcbiAgICAgIFwiMTBcIjpcInlcIlxuICAgIH0sXG4gICAgXCJhbmRfdWNcIjp7XG4gICAgICBcIjkuOVwiOlwieSB4XCJcbiAgICB9XG4gIH0sXG4gIFwibm90ZXNcIjpcIlRoZSBzY2FsZSB0cmFuc2Zvcm0gY2FuIGJlIGVtdWxhdGVkIGluIElFIDwgOSB1c2luZyBNaWNyb3NvZnQncyBcXFwiem9vbVxcXCIgZXh0ZW5zaW9uLCBvdGhlcnMgYXJlIChub3QgZWFzaWx5KSBwb3NzaWJsZSB1c2luZyB0aGUgTVMgTWF0cml4IGZpbHRlclwiLFxuICBcIm5vdGVzX2J5X251bVwiOntcbiAgICBcbiAgfSxcbiAgXCJ1c2FnZV9wZXJjX3lcIjo4OC44NSxcbiAgXCJ1c2FnZV9wZXJjX2FcIjowLFxuICBcInVjcHJlZml4XCI6ZmFsc2UsXG4gIFwicGFyZW50XCI6XCJcIixcbiAgXCJrZXl3b3Jkc1wiOlwidHJhbnNmb3JtYXRpb24sdHJhbnNsYXRlLHJvdGF0aW9uLHJvdGF0ZSxzY2FsZSxjc3MtdHJhbnNmb3Jtc1wiLFxuICBcImllX2lkXCI6XCJ0cmFuc2Zvcm1zXCIsXG4gIFwiY2hyb21lX2lkXCI6XCI2NDM3NjQwNTgwNjI4NDgwXCIsXG4gIFwic2hvd25cIjp0cnVlXG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcInRpdGxlXCI6XCJDU1MzIDNEIFRyYW5zZm9ybXNcIixcbiAgXCJkZXNjcmlwdGlvblwiOlwiTWV0aG9kIG9mIHRyYW5zZm9ybWluZyBhbiBlbGVtZW50IGluIHRoZSB0aGlyZCBkaW1lbnNpb24gdXNpbmcgdGhlIGB0cmFuc2Zvcm1gIHByb3BlcnR5LiBJbmNsdWRlcyBzdXBwb3J0IGZvciB0aGUgYHBlcnNwZWN0aXZlYCBwcm9wZXJ0eSB0byBzZXQgdGhlIHBlcnNwZWN0aXZlIGluIHotc3BhY2UgYW5kIHRoZSBgYmFja2ZhY2UtdmlzaWJpbGl0eWAgcHJvcGVydHkgdG8gdG9nZ2xlIGRpc3BsYXkgb2YgdGhlIHJldmVyc2Ugc2lkZSBvZiBhIDNELXRyYW5zZm9ybWVkIGVsZW1lbnQuXCIsXG4gIFwic3BlY1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy0zZC10cmFuc2Zvcm1zL1wiLFxuICBcInN0YXR1c1wiOlwid2RcIixcbiAgXCJsaW5rc1wiOltcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL2NzczMuYnJhZHNoYXdlbnRlcnByaXNlcy5jb20vZmxpcC9cIixcbiAgICAgIFwidGl0bGVcIjpcIk11bHRpLWJyb3dzZXIgZGVtb1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL2hhY2tzLm1vemlsbGEub3JnLzIwMTEvMTAvY3NzLTNkLXRyYW5zZm9ybWF0aW9ucy1pbi1maXJlZm94LW5pZ2h0bHkvXCIsXG4gICAgICBcInRpdGxlXCI6XCJNb3ppbGxhIGhhY2tzIGFydGljbGVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly90aGV3ZWJyb2Nrcy5jb20vZGVtb3MvM0QtY3NzLXRlc3Rlci9cIixcbiAgICAgIFwidGl0bGVcIjpcIjNEIENTUyBUZXN0ZXJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vcGhpZ2dpbnM0Mi9oYXMuanMvbWFzdGVyL2RldGVjdC9jc3MuanMjY3NzLXRyYW5zZm9ybVwiLFxuICAgICAgXCJ0aXRsZVwiOlwiaGFzLmpzIHRlc3RcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHA6Ly9kb2NzLndlYnBsYXRmb3JtLm9yZy93aWtpL2Nzcy90cmFuc2Zvcm1zL3RyYW5zZm9ybVwiLFxuICAgICAgXCJ0aXRsZVwiOlwiV2ViUGxhdGZvcm0gRG9jc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL2Rlc2FuZHJvLmdpdGh1Yi5pby8zZHRyYW5zZm9ybXMvXCIsXG4gICAgICBcInRpdGxlXCI6XCJJbnRybyB0byBDU1MgM0QgdHJhbnNmb3Jtc1wiXG4gICAgfVxuICBdLFxuICBcImJ1Z3NcIjpbXG4gICAge1xuICAgICAgXCJkZXNjcmlwdGlvblwiOlwiU29tZSBjb25maWd1cmF0aW9ucyBvZiBMaW51eCBhbmQgb2xkZXIgV2luZG93cyBtYWNoaW5lcyAodGhvc2Ugd2l0aG91dCBXZWJHTCBzdXBwb3J0KSBoYXZlIHRyb3VibGUgd2l0aCAzRCB0cmFuc2Zvcm1zIGFuZCB3aWxsIHRyZWF0IHRoZW0gYXMgaWYgYHBlcnNwZWN0aXZlYCB3YXMgc2V0IGFzIGBub25lYC5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJkZXNjcmlwdGlvblwiOlwiRmlyZWZveCBvbiBXaW5kb3dzIFtpbmNvcnJlY3RseSByZW5kZXJzIHBsdWdpbiBjb250ZW50IHdpdGhpbiBuby1vcCAzRCB0cmFuc2Zvcm1zXShodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDQ4Mjc5KS5cIlxuICAgIH1cbiAgXSxcbiAgXCJjYXRlZ29yaWVzXCI6W1xuICAgIFwiQ1NTM1wiXG4gIF0sXG4gIFwic3RhdHNcIjp7XG4gICAgXCJpZVwiOntcbiAgICAgIFwiNS41XCI6XCJuXCIsXG4gICAgICBcIjZcIjpcIm5cIixcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCIsXG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiMTBcIjpcImFcIixcbiAgICAgIFwiMTFcIjpcImFcIlxuICAgIH0sXG4gICAgXCJmaXJlZm94XCI6e1xuICAgICAgXCIyXCI6XCJuXCIsXG4gICAgICBcIjNcIjpcIm5cIixcbiAgICAgIFwiMy41XCI6XCJuXCIsXG4gICAgICBcIjMuNlwiOlwiblwiLFxuICAgICAgXCI0XCI6XCJuXCIsXG4gICAgICBcIjVcIjpcIm5cIixcbiAgICAgIFwiNlwiOlwiblwiLFxuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjhcIjpcIm5cIixcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCIxMFwiOlwieSB4XCIsXG4gICAgICBcIjExXCI6XCJ5IHhcIixcbiAgICAgIFwiMTJcIjpcInkgeFwiLFxuICAgICAgXCIxM1wiOlwieSB4XCIsXG4gICAgICBcIjE0XCI6XCJ5IHhcIixcbiAgICAgIFwiMTVcIjpcInkgeFwiLFxuICAgICAgXCIxNlwiOlwieVwiLFxuICAgICAgXCIxN1wiOlwieVwiLFxuICAgICAgXCIxOFwiOlwieVwiLFxuICAgICAgXCIxOVwiOlwieVwiLFxuICAgICAgXCIyMFwiOlwieVwiLFxuICAgICAgXCIyMVwiOlwieVwiLFxuICAgICAgXCIyMlwiOlwieVwiLFxuICAgICAgXCIyM1wiOlwieVwiLFxuICAgICAgXCIyNFwiOlwieVwiLFxuICAgICAgXCIyNVwiOlwieVwiLFxuICAgICAgXCIyNlwiOlwieVwiLFxuICAgICAgXCIyN1wiOlwieVwiLFxuICAgICAgXCIyOFwiOlwieVwiLFxuICAgICAgXCIyOVwiOlwieVwiLFxuICAgICAgXCIzMFwiOlwieVwiLFxuICAgICAgXCIzMVwiOlwieVwiLFxuICAgICAgXCIzMlwiOlwieVwiLFxuICAgICAgXCIzM1wiOlwieVwiLFxuICAgICAgXCIzNFwiOlwieVwiLFxuICAgICAgXCIzNVwiOlwieVwiLFxuICAgICAgXCIzNlwiOlwieVwiXG4gICAgfSxcbiAgICBcImNocm9tZVwiOntcbiAgICAgIFwiNFwiOlwiblwiLFxuICAgICAgXCI1XCI6XCJuXCIsXG4gICAgICBcIjZcIjpcIm5cIixcbiAgICAgIFwiN1wiOlwiblwiLFxuICAgICAgXCI4XCI6XCJuXCIsXG4gICAgICBcIjlcIjpcIm5cIixcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTJcIjpcInkgeFwiLFxuICAgICAgXCIxM1wiOlwieSB4XCIsXG4gICAgICBcIjE0XCI6XCJ5IHhcIixcbiAgICAgIFwiMTVcIjpcInkgeFwiLFxuICAgICAgXCIxNlwiOlwieSB4XCIsXG4gICAgICBcIjE3XCI6XCJ5IHhcIixcbiAgICAgIFwiMThcIjpcInkgeFwiLFxuICAgICAgXCIxOVwiOlwieSB4XCIsXG4gICAgICBcIjIwXCI6XCJ5IHhcIixcbiAgICAgIFwiMjFcIjpcInkgeFwiLFxuICAgICAgXCIyMlwiOlwieSB4XCIsXG4gICAgICBcIjIzXCI6XCJ5IHhcIixcbiAgICAgIFwiMjRcIjpcInkgeFwiLFxuICAgICAgXCIyNVwiOlwieSB4XCIsXG4gICAgICBcIjI2XCI6XCJ5IHhcIixcbiAgICAgIFwiMjdcIjpcInkgeFwiLFxuICAgICAgXCIyOFwiOlwieSB4XCIsXG4gICAgICBcIjI5XCI6XCJ5IHhcIixcbiAgICAgIFwiMzBcIjpcInkgeFwiLFxuICAgICAgXCIzMVwiOlwieSB4XCIsXG4gICAgICBcIjMyXCI6XCJ5IHhcIixcbiAgICAgIFwiMzNcIjpcInkgeFwiLFxuICAgICAgXCIzNFwiOlwieSB4XCIsXG4gICAgICBcIjM1XCI6XCJ5IHhcIixcbiAgICAgIFwiMzZcIjpcInlcIixcbiAgICAgIFwiMzdcIjpcInlcIixcbiAgICAgIFwiMzhcIjpcInlcIixcbiAgICAgIFwiMzlcIjpcInlcIixcbiAgICAgIFwiNDBcIjpcInlcIixcbiAgICAgIFwiNDFcIjpcInlcIlxuICAgIH0sXG4gICAgXCJzYWZhcmlcIjp7XG4gICAgICBcIjMuMVwiOlwiblwiLFxuICAgICAgXCIzLjJcIjpcIm5cIixcbiAgICAgIFwiNFwiOlwieSB4XCIsXG4gICAgICBcIjVcIjpcInkgeFwiLFxuICAgICAgXCI1LjFcIjpcInkgeFwiLFxuICAgICAgXCI2XCI6XCJ5IHhcIixcbiAgICAgIFwiNi4xXCI6XCJ5IHhcIixcbiAgICAgIFwiN1wiOlwieSB4XCIsXG4gICAgICBcIjcuMVwiOlwieSB4XCIsXG4gICAgICBcIjhcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcIm9wZXJhXCI6e1xuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjkuNS05LjZcIjpcIm5cIixcbiAgICAgIFwiMTAuMC0xMC4xXCI6XCJuXCIsXG4gICAgICBcIjEwLjVcIjpcIm5cIixcbiAgICAgIFwiMTAuNlwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMS4xXCI6XCJuXCIsXG4gICAgICBcIjExLjVcIjpcIm5cIixcbiAgICAgIFwiMTEuNlwiOlwiblwiLFxuICAgICAgXCIxMlwiOlwiblwiLFxuICAgICAgXCIxMi4xXCI6XCJuXCIsXG4gICAgICBcIjE1XCI6XCJ5IHhcIixcbiAgICAgIFwiMTZcIjpcInkgeFwiLFxuICAgICAgXCIxN1wiOlwieSB4XCIsXG4gICAgICBcIjE4XCI6XCJ5IHhcIixcbiAgICAgIFwiMTlcIjpcInkgeFwiLFxuICAgICAgXCIyMFwiOlwieSB4XCIsXG4gICAgICBcIjIxXCI6XCJ5IHhcIixcbiAgICAgIFwiMjJcIjpcInkgeFwiLFxuICAgICAgXCIyM1wiOlwieVwiLFxuICAgICAgXCIyNFwiOlwieVwiLFxuICAgICAgXCIyNVwiOlwieVwiLFxuICAgICAgXCIyNlwiOlwieVwiXG4gICAgfSxcbiAgICBcImlvc19zYWZcIjp7XG4gICAgICBcIjMuMlwiOlwieSB4XCIsXG4gICAgICBcIjQuMC00LjFcIjpcInkgeFwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJ5IHhcIixcbiAgICAgIFwiNS4wLTUuMVwiOlwieSB4XCIsXG4gICAgICBcIjYuMC02LjFcIjpcInkgeFwiLFxuICAgICAgXCI3LjAtNy4xXCI6XCJ5IHhcIixcbiAgICAgIFwiOFwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwib3BfbWluaVwiOntcbiAgICAgIFwiNS4wLTguMFwiOlwiblwiXG4gICAgfSxcbiAgICBcImFuZHJvaWRcIjp7XG4gICAgICBcIjIuMVwiOlwiblwiLFxuICAgICAgXCIyLjJcIjpcIm5cIixcbiAgICAgIFwiMi4zXCI6XCJuXCIsXG4gICAgICBcIjNcIjpcInkgeFwiLFxuICAgICAgXCI0XCI6XCJ5IHhcIixcbiAgICAgIFwiNC4xXCI6XCJ5IHhcIixcbiAgICAgIFwiNC4yLTQuM1wiOlwieSB4XCIsXG4gICAgICBcIjQuNFwiOlwieSB4XCIsXG4gICAgICBcIjQuNC4zXCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJiYlwiOntcbiAgICAgIFwiN1wiOlwieSB4XCIsXG4gICAgICBcIjEwXCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJvcF9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJuXCIsXG4gICAgICBcIjExXCI6XCJuXCIsXG4gICAgICBcIjExLjFcIjpcIm5cIixcbiAgICAgIFwiMTEuNVwiOlwiblwiLFxuICAgICAgXCIxMlwiOlwiblwiLFxuICAgICAgXCIxMi4xXCI6XCJuXCIsXG4gICAgICBcIjI0XCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiYW5kX2NoclwiOntcbiAgICAgIFwiMzhcIjpcInlcIlxuICAgIH0sXG4gICAgXCJhbmRfZmZcIjp7XG4gICAgICBcIjMyXCI6XCJ5XCJcbiAgICB9LFxuICAgIFwiaWVfbW9iXCI6e1xuICAgICAgXCIxMFwiOlwiYVwiXG4gICAgfSxcbiAgICBcImFuZF91Y1wiOntcbiAgICAgIFwiOS45XCI6XCJ5IHhcIlxuICAgIH1cbiAgfSxcbiAgXCJub3Rlc1wiOlwiUGFydGlhbCBzdXBwb3J0IGluIElFIHJlZmVycyB0byBub3Qgc3VwcG9ydGluZyBbdGhlIHRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2QgcHJvcGVydHldKGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDY3MzUyOSUyOHY9dnMuODUlMjkuYXNweCN0aGVfbXNfdHJhbnNmb3JtX3N0eWxlX3Byb3BlcnR5KS4gVGhpcyBwcmV2ZW50cyBuZXN0aW5nIDNEIHRyYW5zZm9ybWVkIGVsZW1lbnRzLlwiLFxuICBcIm5vdGVzX2J5X251bVwiOntcbiAgICBcbiAgfSxcbiAgXCJ1c2FnZV9wZXJjX3lcIjo3NC42NyxcbiAgXCJ1c2FnZV9wZXJjX2FcIjoxMC4xLFxuICBcInVjcHJlZml4XCI6ZmFsc2UsXG4gIFwicGFyZW50XCI6XCJcIixcbiAgXCJrZXl3b3Jkc1wiOlwiY3NzIDNkLDNkdHJhbnNmb3Jtcyx0cmFuc2xhdGUzZCxiYWNrZmFjZSB2aXNpYmlsaXR5LHBlcnNwZWN0aXZlXCIsXG4gIFwiaWVfaWRcIjpcInRyYW5zZm9ybXMsY3NzdHJhbnNmb3Jtc3ByZXNlcnZlM2RcIixcbiAgXCJjaHJvbWVfaWRcIjpcIjY0Mzc2NDA1ODA2Mjg0ODBcIixcbiAgXCJzaG93blwiOnRydWVcbn0iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwidGl0bGVcIjpcIkNTUyB1c2VyLXNlbGVjdDogbm9uZVwiLFxuICBcImRlc2NyaXB0aW9uXCI6XCJNZXRob2Qgb2YgcHJldmVudGluZyB0ZXh0L2VsZW1lbnQgc2VsZWN0aW9uIHVzaW5nIENTUy4gXCIsXG4gIFwic3BlY1wiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvdXNlci1zZWxlY3RcIixcbiAgXCJzdGF0dXNcIjpcInVub2ZmXCIsXG4gIFwibGlua3NcIjpbXG4gICAge1xuICAgICAgXCJ1cmxcIjpcImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL3VzZXItc2VsZWN0XCIsXG4gICAgICBcInRpdGxlXCI6XCJNRE4gYXJ0aWNsZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInVybFwiOlwiaHR0cDovL2Nzcy10cmlja3MuY29tL2FsbWFuYWMvcHJvcGVydGllcy91L3VzZXItc2VsZWN0L1wiLFxuICAgICAgXCJ0aXRsZVwiOlwiQ1NTIFRyaWNrcyBhcnRpY2xlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwidXJsXCI6XCJodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg3ODE0OTIodj12cy44NSkuYXNweFwiLFxuICAgICAgXCJ0aXRsZVwiOlwiTVNETiBEb2N1bWVudGF0aW9uXCJcbiAgICB9XG4gIF0sXG4gIFwiYnVnc1wiOltcbiAgICBcbiAgXSxcbiAgXCJjYXRlZ29yaWVzXCI6W1xuICAgIFwiQ1NTXCJcbiAgXSxcbiAgXCJzdGF0c1wiOntcbiAgICBcImllXCI6e1xuICAgICAgXCI1LjVcIjpcIm5cIixcbiAgICAgIFwiNlwiOlwiblwiLFxuICAgICAgXCI3XCI6XCJuXCIsXG4gICAgICBcIjhcIjpcIm5cIixcbiAgICAgIFwiOVwiOlwiblwiLFxuICAgICAgXCIxMFwiOlwieSB4XCIsXG4gICAgICBcIjExXCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJmaXJlZm94XCI6e1xuICAgICAgXCIyXCI6XCJ5IHhcIixcbiAgICAgIFwiM1wiOlwieSB4XCIsXG4gICAgICBcIjMuNVwiOlwieSB4XCIsXG4gICAgICBcIjMuNlwiOlwieSB4XCIsXG4gICAgICBcIjRcIjpcInkgeFwiLFxuICAgICAgXCI1XCI6XCJ5IHhcIixcbiAgICAgIFwiNlwiOlwieSB4XCIsXG4gICAgICBcIjdcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIixcbiAgICAgIFwiOVwiOlwieSB4XCIsXG4gICAgICBcIjEwXCI6XCJ5IHhcIixcbiAgICAgIFwiMTFcIjpcInkgeFwiLFxuICAgICAgXCIxMlwiOlwieSB4XCIsXG4gICAgICBcIjEzXCI6XCJ5IHhcIixcbiAgICAgIFwiMTRcIjpcInkgeFwiLFxuICAgICAgXCIxNVwiOlwieSB4XCIsXG4gICAgICBcIjE2XCI6XCJ5IHhcIixcbiAgICAgIFwiMTdcIjpcInkgeFwiLFxuICAgICAgXCIxOFwiOlwieSB4XCIsXG4gICAgICBcIjE5XCI6XCJ5IHhcIixcbiAgICAgIFwiMjBcIjpcInkgeFwiLFxuICAgICAgXCIyMVwiOlwieSB4XCIsXG4gICAgICBcIjIyXCI6XCJ5IHhcIixcbiAgICAgIFwiMjNcIjpcInkgeFwiLFxuICAgICAgXCIyNFwiOlwieSB4XCIsXG4gICAgICBcIjI1XCI6XCJ5IHhcIixcbiAgICAgIFwiMjZcIjpcInkgeFwiLFxuICAgICAgXCIyN1wiOlwieSB4XCIsXG4gICAgICBcIjI4XCI6XCJ5IHhcIixcbiAgICAgIFwiMjlcIjpcInkgeFwiLFxuICAgICAgXCIzMFwiOlwieSB4XCIsXG4gICAgICBcIjMxXCI6XCJ5IHhcIixcbiAgICAgIFwiMzJcIjpcInkgeFwiLFxuICAgICAgXCIzM1wiOlwieSB4XCIsXG4gICAgICBcIjM0XCI6XCJ5IHhcIixcbiAgICAgIFwiMzVcIjpcInkgeFwiLFxuICAgICAgXCIzNlwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwiY2hyb21lXCI6e1xuICAgICAgXCI0XCI6XCJ1XCIsXG4gICAgICBcIjVcIjpcInVcIixcbiAgICAgIFwiNlwiOlwieSB4XCIsXG4gICAgICBcIjdcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIixcbiAgICAgIFwiOVwiOlwieSB4XCIsXG4gICAgICBcIjEwXCI6XCJ5IHhcIixcbiAgICAgIFwiMTFcIjpcInkgeFwiLFxuICAgICAgXCIxMlwiOlwieSB4XCIsXG4gICAgICBcIjEzXCI6XCJ5IHhcIixcbiAgICAgIFwiMTRcIjpcInkgeFwiLFxuICAgICAgXCIxNVwiOlwieSB4XCIsXG4gICAgICBcIjE2XCI6XCJ5IHhcIixcbiAgICAgIFwiMTdcIjpcInkgeFwiLFxuICAgICAgXCIxOFwiOlwieSB4XCIsXG4gICAgICBcIjE5XCI6XCJ5IHhcIixcbiAgICAgIFwiMjBcIjpcInkgeFwiLFxuICAgICAgXCIyMVwiOlwieSB4XCIsXG4gICAgICBcIjIyXCI6XCJ5IHhcIixcbiAgICAgIFwiMjNcIjpcInkgeFwiLFxuICAgICAgXCIyNFwiOlwieSB4XCIsXG4gICAgICBcIjI1XCI6XCJ5IHhcIixcbiAgICAgIFwiMjZcIjpcInkgeFwiLFxuICAgICAgXCIyN1wiOlwieSB4XCIsXG4gICAgICBcIjI4XCI6XCJ5IHhcIixcbiAgICAgIFwiMjlcIjpcInkgeFwiLFxuICAgICAgXCIzMFwiOlwieSB4XCIsXG4gICAgICBcIjMxXCI6XCJ5IHhcIixcbiAgICAgIFwiMzJcIjpcInkgeFwiLFxuICAgICAgXCIzM1wiOlwieSB4XCIsXG4gICAgICBcIjM0XCI6XCJ5IHhcIixcbiAgICAgIFwiMzVcIjpcInkgeFwiLFxuICAgICAgXCIzNlwiOlwieSB4XCIsXG4gICAgICBcIjM3XCI6XCJ5IHhcIixcbiAgICAgIFwiMzhcIjpcInkgeFwiLFxuICAgICAgXCIzOVwiOlwieSB4XCIsXG4gICAgICBcIjQwXCI6XCJ5IHhcIixcbiAgICAgIFwiNDFcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcInNhZmFyaVwiOntcbiAgICAgIFwiMy4xXCI6XCJ5IHhcIixcbiAgICAgIFwiMy4yXCI6XCJ5IHhcIixcbiAgICAgIFwiNFwiOlwieSB4XCIsXG4gICAgICBcIjVcIjpcInkgeFwiLFxuICAgICAgXCI1LjFcIjpcInkgeFwiLFxuICAgICAgXCI2XCI6XCJ5IHhcIixcbiAgICAgIFwiNi4xXCI6XCJ5IHhcIixcbiAgICAgIFwiN1wiOlwieSB4XCIsXG4gICAgICBcIjcuMVwiOlwieSB4XCIsXG4gICAgICBcIjhcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcIm9wZXJhXCI6e1xuICAgICAgXCI5XCI6XCJuXCIsXG4gICAgICBcIjkuNS05LjZcIjpcIm5cIixcbiAgICAgIFwiMTAuMC0xMC4xXCI6XCJuXCIsXG4gICAgICBcIjEwLjVcIjpcIm5cIixcbiAgICAgIFwiMTAuNlwiOlwiblwiLFxuICAgICAgXCIxMVwiOlwiblwiLFxuICAgICAgXCIxMS4xXCI6XCJuXCIsXG4gICAgICBcIjExLjVcIjpcIm5cIixcbiAgICAgIFwiMTEuNlwiOlwiblwiLFxuICAgICAgXCIxMlwiOlwiblwiLFxuICAgICAgXCIxMi4xXCI6XCJuXCIsXG4gICAgICBcIjE1XCI6XCJ5IHhcIixcbiAgICAgIFwiMTZcIjpcInkgeFwiLFxuICAgICAgXCIxN1wiOlwieSB4XCIsXG4gICAgICBcIjE4XCI6XCJ5IHhcIixcbiAgICAgIFwiMTlcIjpcInkgeFwiLFxuICAgICAgXCIyMFwiOlwieSB4XCIsXG4gICAgICBcIjIxXCI6XCJ5IHhcIixcbiAgICAgIFwiMjJcIjpcInkgeFwiLFxuICAgICAgXCIyM1wiOlwieSB4XCIsXG4gICAgICBcIjI0XCI6XCJ5IHhcIixcbiAgICAgIFwiMjVcIjpcInkgeFwiLFxuICAgICAgXCIyNlwiOlwieSB4XCJcbiAgICB9LFxuICAgIFwiaW9zX3NhZlwiOntcbiAgICAgIFwiMy4yXCI6XCJ5IHhcIixcbiAgICAgIFwiNC4wLTQuMVwiOlwieSB4XCIsXG4gICAgICBcIjQuMi00LjNcIjpcInkgeFwiLFxuICAgICAgXCI1LjAtNS4xXCI6XCJ5IHhcIixcbiAgICAgIFwiNi4wLTYuMVwiOlwieSB4XCIsXG4gICAgICBcIjcuMC03LjFcIjpcInkgeFwiLFxuICAgICAgXCI4XCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJvcF9taW5pXCI6e1xuICAgICAgXCI1LjAtOC4wXCI6XCJuXCJcbiAgICB9LFxuICAgIFwiYW5kcm9pZFwiOntcbiAgICAgIFwiMi4xXCI6XCJ5IHhcIixcbiAgICAgIFwiMi4yXCI6XCJ5IHhcIixcbiAgICAgIFwiMi4zXCI6XCJ5IHhcIixcbiAgICAgIFwiM1wiOlwieSB4XCIsXG4gICAgICBcIjRcIjpcInkgeFwiLFxuICAgICAgXCI0LjFcIjpcInkgeFwiLFxuICAgICAgXCI0LjItNC4zXCI6XCJ5IHhcIixcbiAgICAgIFwiNC40XCI6XCJ5IHhcIixcbiAgICAgIFwiNC40LjNcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcImJiXCI6e1xuICAgICAgXCI3XCI6XCJ5IHhcIixcbiAgICAgIFwiMTBcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcIm9wX21vYlwiOntcbiAgICAgIFwiMTBcIjpcIm5cIixcbiAgICAgIFwiMTFcIjpcIm5cIixcbiAgICAgIFwiMTEuMVwiOlwiblwiLFxuICAgICAgXCIxMS41XCI6XCJuXCIsXG4gICAgICBcIjEyXCI6XCJuXCIsXG4gICAgICBcIjEyLjFcIjpcIm5cIixcbiAgICAgIFwiMjRcIjpcInkgeFwiXG4gICAgfSxcbiAgICBcImFuZF9jaHJcIjp7XG4gICAgICBcIjM4XCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJhbmRfZmZcIjp7XG4gICAgICBcIjMyXCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJpZV9tb2JcIjp7XG4gICAgICBcIjEwXCI6XCJ5IHhcIlxuICAgIH0sXG4gICAgXCJhbmRfdWNcIjp7XG4gICAgICBcIjkuOVwiOlwieSB4XCJcbiAgICB9XG4gIH0sXG4gIFwibm90ZXNcIjpcIkN1cnJlbnRseSB0aGUgdXNlci1zZWxlY3QgcHJvcGVydHkgZG9lcyBub3QgYXBwZWFyIGluIGFueSBXM0Mgc3BlY2lmaWNhdGlvbi4gU3VwcG9ydCBpbmZvcm1hdGlvbiBoZXJlIGlzIG9ubHkgZm9yIFxcXCJub25lXFxcIiB2YWx1ZSwgbm90IG90aGVycy5cIixcbiAgXCJub3Rlc19ieV9udW1cIjp7XG4gICAgXG4gIH0sXG4gIFwidXNhZ2VfcGVyY195XCI6ODYuMTMsXG4gIFwidXNhZ2VfcGVyY19hXCI6MCxcbiAgXCJ1Y3ByZWZpeFwiOmZhbHNlLFxuICBcInBhcmVudFwiOlwiXCIsXG4gIFwia2V5d29yZHNcIjpcIlwiLFxuICBcImllX2lkXCI6XCJcIixcbiAgXCJjaHJvbWVfaWRcIjpcIlwiLFxuICBcInNob3duXCI6dHJ1ZVxufSIsInZhciBDb250YWluZXIgPSByZXF1aXJlKCcuL2NvbnRhaW5lcicpO1xuXG4vLyBDU1MgYXQtcnVsZSBsaWtlIOKAnHRoaXMua2V5ZnJhbWVzIG5hbWUgeyB94oCdLlxuLy9cbi8vIENhbiBjb250YWluIGRlY2xhcmF0aW9ucyAobGlrZSB0aGlzLmZvbnQtZmFjZSBvciB0aGlzLnBhZ2UpIG90IGFub3RoZXIgcnVsZXMuXG52YXIgQXRSdWxlID0gKGZ1bmN0aW9uKHN1cGVyJDApe1widXNlIHN0cmljdFwiO3ZhciBQUlMkMCA9IChmdW5jdGlvbihvLHQpe29bXCJfX3Byb3RvX19cIl09e1wiYVwiOnR9O3JldHVybiBvW1wiYVwiXT09PXR9KSh7fSx7fSk7dmFyIERQJDAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7dmFyIEdPUEQkMCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7dmFyIE1JWElOJDAgPSBmdW5jdGlvbih0LHMpe2Zvcih2YXIgcCBpbiBzKXtpZihzLmhhc093blByb3BlcnR5KHApKXtEUCQwKHQscCxHT1BEJDAocyxwKSk7fX1yZXR1cm4gdH07dmFyIFNQJDAgPSBPYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKG8scCl7b1tcIl9fcHJvdG9fX1wiXT1wO3JldHVybiBvfTt2YXIgT0MkMCA9IE9iamVjdC5jcmVhdGU7aWYoIVBSUyQwKU1JWElOJDAoQXRSdWxlLCBzdXBlciQwKTt2YXIgcHJvdG8kMD17fTtcbiAgICBmdW5jdGlvbiBBdFJ1bGUoZGVmYXVsdHMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ2F0cnVsZSc7XG4gICAgICAgIHN1cGVyJDAuY2FsbCh0aGlzLCBkZWZhdWx0cyk7XG4gICAgfWlmKHN1cGVyJDAhPT1udWxsKVNQJDAoQXRSdWxlLHN1cGVyJDApO0F0UnVsZS5wcm90b3R5cGUgPSBPQyQwKHN1cGVyJDAhPT1udWxsP3N1cGVyJDAucHJvdG90eXBlOm51bGwse1wiY29uc3RydWN0b3JcIjp7XCJ2YWx1ZVwiOkF0UnVsZSxcImNvbmZpZ3VyYWJsZVwiOnRydWUsXCJ3cml0YWJsZVwiOnRydWV9fSk7RFAkMChBdFJ1bGUsXCJwcm90b3R5cGVcIix7XCJjb25maWd1cmFibGVcIjpmYWxzZSxcImVudW1lcmFibGVcIjpmYWxzZSxcIndyaXRhYmxlXCI6ZmFsc2V9KTtcblxuICAgIC8vIERpZmZlcmVudCBzdHlsZSBmb3IgdGhpcy5lbmNvZGluZyBhbmQgdGhpcy5wYWdlIGF0LXJ1bGVzLlxuICAgIHByb3RvJDAuc3R5bGVUeXBlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUgKyAoKHRoaXMucnVsZXMgfHwgdGhpcy5kZWNscykgPyAnLWJvZHknIDogJy1ib2RpbGVzcycpO1xuICAgIH07XG5cbiAgICBwcm90byQwLmRlZmF1bHRTdHlsZSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgaWYgKCB0eXBlID09ICdhdHJ1bGUtYm9keScgKSB7XG4gICAgICAgICAgICByZXR1cm4geyBiZXR3ZWVuOiAnICcsIGFmdGVyOiB0aGlzLmRlZmF1bHRBZnRlcigpIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyBiZXR3ZWVuOiAnJyB9O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIExvYWQgaW50byBhdC1ydWxlIG1peGluIGZvciBzZWxlY3RlZCBjb250ZW50IHR5cGVcbiAgICBwcm90byQwLmFkZE1peGluID0gZnVuY3Rpb24odHlwZSkge1xuICAgICAgICB2YXIgbWl4aW4gPSB0eXBlID09ICdydWxlcycgPyBDb250YWluZXIuV2l0aFJ1bGVzIDogQ29udGFpbmVyLldpdGhEZWNscztcbiAgICAgICAgaWYgKCAhbWl4aW4gKSByZXR1cm47XG5cbiAgICAgICAgZm9yICggdmFyIG5hbWUgaW4gbWl4aW4ucHJvdG90eXBlICkge1xuICAgICAgICAgICAgaWYgKCBuYW1lID09ICdjb25zdHJ1Y3RvcicgKSBjb250aW51ZTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IG1peGluLnByb3RvdHlwZVtuYW1lXTtcblxuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IENvbnRhaW5lci5wcm90b3R5cGVbbmFtZV0gPT0gdmFsdWU7XG4gICAgICAgICAgICB2YXIgZGV0ZWN0b3IgID0gbmFtZSA9PSAnYXBwZW5kJyB8fCBuYW1lID09ICdwcmVwZW5kJztcbiAgICAgICAgICAgIGlmICggY29udGFpbmVyICYmICFkZXRlY3RvciApIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgbWl4aW4uYXBwbHkodGhpcyk7XG4gICAgfTtcblxuICAgIC8vIFN0cmluZ2lmeSBhdC1ydWxlXG4gICAgcHJvdG8kMC5zdHJpbmdpZnkgPSBmdW5jdGlvbihidWlsZGVyLCBsYXN0KSB7XG4gICAgICAgIHZhciBzdHlsZSA9IHRoaXMuc3R5bGUoKTtcblxuICAgICAgICB2YXIgbmFtZSAgID0gJ0AnICsgdGhpcy5uYW1lO1xuICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5wYXJhbXMgPyB0aGlzLnN0cmluZ2lmeVJhdygncGFyYW1zJykgOiAnJztcblxuICAgICAgICBpZiAoIHR5cGVvZih0aGlzLmFmdGVyTmFtZSkgIT0gJ3VuZGVmaW5lZCcgKSB7XG4gICAgICAgICAgICBuYW1lICs9IHRoaXMuYWZ0ZXJOYW1lO1xuICAgICAgICB9IGVsc2UgaWYgKCBwYXJhbXMgKSB7XG4gICAgICAgICAgICBuYW1lICs9ICcgJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggdGhpcy5ydWxlcyB8fCB0aGlzLmRlY2xzICkge1xuICAgICAgICAgICAgdGhpcy5zdHJpbmdpZnlCbG9jayhidWlsZGVyLCBuYW1lICsgcGFyYW1zICsgc3R5bGUuYmV0d2VlbiArICd7Jyk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICggdGhpcy5iZWZvcmUgKSBidWlsZGVyKHRoaXMuYmVmb3JlKTtcbiAgICAgICAgICAgIHZhciBzZW1pY29sb24gPSAoIWxhc3QgfHwgdGhpcy5zZW1pY29sb24pID8gJzsnIDogJyc7XG4gICAgICAgICAgICBidWlsZGVyKG5hbWUgKyBwYXJhbXMgKyBzdHlsZS5iZXR3ZWVuICsgc2VtaWNvbG9uLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBIYWNrIHRvIGRldGVjdCBjb250YWluZXIgdHlwZSBieSBjaGlsZCB0eXBlXG4gICAgcHJvdG8kMC5hcHBlbmQgPSBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICB2YXIgbWl4aW4gPSBjaGlsZC50eXBlID09ICdkZWNsJyA/ICdkZWNscycgOiAncnVsZXMnO1xuICAgICAgICB0aGlzLmFkZE1peGluKG1peGluKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwZW5kKGNoaWxkKTtcbiAgICB9O1xuXG4gICAgLy8gSGFjayB0byBkZXRlY3QgY29udGFpbmVyIHR5cGUgYnkgY2hpbGQgdHlwZVxuICAgIHByb3RvJDAucHJlcGVuZCA9IGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIHZhciBtaXhpbiA9IGNoaWxkLnR5cGUgPT0gJ2RlY2wnID8gJ2RlY2xzJyA6ICdydWxlcyc7XG4gICAgICAgIHRoaXMuYWRkTWl4aW4obWl4aW4pO1xuICAgICAgICByZXR1cm4gdGhpcy5wcmVwZW5kKGNoaWxkKTtcbiAgICB9O1xuTUlYSU4kMChBdFJ1bGUucHJvdG90eXBlLHByb3RvJDApO3Byb3RvJDA9dm9pZCAwO3JldHVybiBBdFJ1bGU7fSkoQ29udGFpbmVyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdFJ1bGU7XG4iLCJ2YXIgTm9kZSA9IHJlcXVpcmUoJy4vbm9kZScpO1xuXG4vLyBDU1MgY29tbWVudCBiZXR3ZWVuIGRlY2xhcmF0aW9ucyBvciBydWxlc1xudmFyIENvbW1lbnQgPSAoZnVuY3Rpb24oc3VwZXIkMCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIFBSUyQwID0gKGZ1bmN0aW9uKG8sdCl7b1tcIl9fcHJvdG9fX1wiXT17XCJhXCI6dH07cmV0dXJuIG9bXCJhXCJdPT09dH0pKHt9LHt9KTt2YXIgRFAkMCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgR09QRCQwID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjt2YXIgTUlYSU4kMCA9IGZ1bmN0aW9uKHQscyl7Zm9yKHZhciBwIGluIHMpe2lmKHMuaGFzT3duUHJvcGVydHkocCkpe0RQJDAodCxwLEdPUEQkMChzLHApKTt9fXJldHVybiB0fTt2YXIgU1AkMCA9IE9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24obyxwKXtvW1wiX19wcm90b19fXCJdPXA7cmV0dXJuIG99O3ZhciBPQyQwID0gT2JqZWN0LmNyZWF0ZTtpZighUFJTJDApTUlYSU4kMChDb21tZW50LCBzdXBlciQwKTt2YXIgcHJvdG8kMD17fTtcbiAgICBmdW5jdGlvbiBDb21tZW50KGRlZmF1bHRzKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdjb21tZW50JztcbiAgICAgICAgc3VwZXIkMC5jYWxsKHRoaXMsIGRlZmF1bHRzKTtcbiAgICB9aWYoc3VwZXIkMCE9PW51bGwpU1AkMChDb21tZW50LHN1cGVyJDApO0NvbW1lbnQucHJvdG90eXBlID0gT0MkMChzdXBlciQwIT09bnVsbD9zdXBlciQwLnByb3RvdHlwZTpudWxsLHtcImNvbnN0cnVjdG9yXCI6e1widmFsdWVcIjpDb21tZW50LFwiY29uZmlndXJhYmxlXCI6dHJ1ZSxcIndyaXRhYmxlXCI6dHJ1ZX19KTtEUCQwKENvbW1lbnQsXCJwcm90b3R5cGVcIix7XCJjb25maWd1cmFibGVcIjpmYWxzZSxcImVudW1lcmFibGVcIjpmYWxzZSxcIndyaXRhYmxlXCI6ZmFsc2V9KTtcblxuICAgIC8vIERlZmF1bHQgc3BhY2VzIGZvciBuZXcgbm9kZVxuICAgIHByb3RvJDAuZGVmYXVsdFN0eWxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgcmV0dXJuIHsgbGVmdDogJyAnLCByaWdodDogJyAnIH07XG4gICAgfTtcblxuICAgIC8vIFN0cmluZ2lmeSBkZWNsYXJhdGlvblxuICAgIHByb3RvJDAuc3RyaW5naWZ5ID0gZnVuY3Rpb24oYnVpbGRlcikge1xuICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLnN0eWxlKCk7XG4gICAgICAgIGlmICggdGhpcy5iZWZvcmUgKSBidWlsZGVyKHRoaXMuYmVmb3JlKTtcbiAgICAgICAgYnVpbGRlcignLyonICsgc3R5bGUubGVmdCArIHRoaXMudGV4dCArIHN0eWxlLnJpZ2h0ICsgJyovJywgdGhpcyk7XG4gICAgfTtcbk1JWElOJDAoQ29tbWVudC5wcm90b3R5cGUscHJvdG8kMCk7cHJvdG8kMD12b2lkIDA7cmV0dXJuIENvbW1lbnQ7fSkoTm9kZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tbWVudDtcbiIsInZhciBQUlMkMCA9IChmdW5jdGlvbihvLHQpe29bXCJfX3Byb3RvX19cIl09e1wiYVwiOnR9O3JldHVybiBvW1wiYVwiXT09PXR9KSh7fSx7fSk7dmFyIERQJDAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7dmFyIEdPUEQkMCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7dmFyIE1JWElOJDAgPSBmdW5jdGlvbih0LHMpe2Zvcih2YXIgcCBpbiBzKXtpZihzLmhhc093blByb3BlcnR5KHApKXtEUCQwKHQscCxHT1BEJDAocyxwKSk7fX1yZXR1cm4gdH07dmFyIFNQJDAgPSBPYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKG8scCl7b1tcIl9fcHJvdG9fX1wiXT1wO3JldHVybiBvfTt2YXIgT0MkMCA9IE9iamVjdC5jcmVhdGU7dmFyIE5vZGUgICAgICAgID0gcmVxdWlyZSgnLi9ub2RlJyk7XG52YXIgRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuL2RlY2xhcmF0aW9uJyk7XG5cbi8vIENTUyBub2RlLCB0aGF0IGNvbnRhaW4gYW5vdGhlciBub2RlcyAobGlrZSBhdC1ydWxlcyBvciBydWxlcyB3aXRoIHNlbGVjdG9ycylcbnZhciBDb250YWluZXIgPSAoZnVuY3Rpb24oc3VwZXIkMCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gQ29udGFpbmVyKCkge3N1cGVyJDAuYXBwbHkodGhpcywgYXJndW1lbnRzKX1pZighUFJTJDApTUlYSU4kMChDb250YWluZXIsIHN1cGVyJDApO2lmKHN1cGVyJDAhPT1udWxsKVNQJDAoQ29udGFpbmVyLHN1cGVyJDApO0NvbnRhaW5lci5wcm90b3R5cGUgPSBPQyQwKHN1cGVyJDAhPT1udWxsP3N1cGVyJDAucHJvdG90eXBlOm51bGwse1wiY29uc3RydWN0b3JcIjp7XCJ2YWx1ZVwiOkNvbnRhaW5lcixcImNvbmZpZ3VyYWJsZVwiOnRydWUsXCJ3cml0YWJsZVwiOnRydWV9LCBmaXJzdDoge1wiZ2V0XCI6IGZpcnN0JGdldCQwLCBcImNvbmZpZ3VyYWJsZVwiOnRydWUsXCJlbnVtZXJhYmxlXCI6dHJ1ZX0sIGxhc3Q6IHtcImdldFwiOiBsYXN0JGdldCQwLCBcImNvbmZpZ3VyYWJsZVwiOnRydWUsXCJlbnVtZXJhYmxlXCI6dHJ1ZX0sIGxpc3Q6IHtcImdldFwiOiBsaXN0JGdldCQwLCBcImNvbmZpZ3VyYWJsZVwiOnRydWUsXCJlbnVtZXJhYmxlXCI6dHJ1ZX19KTtEUCQwKENvbnRhaW5lcixcInByb3RvdHlwZVwiLHtcImNvbmZpZ3VyYWJsZVwiOmZhbHNlLFwiZW51bWVyYWJsZVwiOmZhbHNlLFwid3JpdGFibGVcIjpmYWxzZX0pO3ZhciBwcm90byQwPXt9O3ZhciBTX0lURVIkMCA9IHR5cGVvZiBTeW1ib2whPT0ndW5kZWZpbmVkJyYmU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3J8fCdAQGl0ZXJhdG9yJzt2YXIgU19NQVJLJDAgPSB0eXBlb2YgU3ltYm9sIT09J3VuZGVmaW5lZCcmJlN5bWJvbCYmU3ltYm9sW1wiX19zZXRPYmplY3RTZXR0ZXJfX1wiXTtmdW5jdGlvbiBHRVRfSVRFUiQwKHYpe2lmKHYpe2lmKEFycmF5LmlzQXJyYXkodikpcmV0dXJuIDA7dmFyIGY7aWYoU19NQVJLJDApU19NQVJLJDAodik7aWYodHlwZW9mIHY9PT0nb2JqZWN0JyYmdHlwZW9mIChmPXZbU19JVEVSJDBdKT09PSdmdW5jdGlvbicpe2lmKFNfTUFSSyQwKVNfTUFSSyQwKHZvaWQgMCk7cmV0dXJuIGYuY2FsbCh2KTt9aWYoU19NQVJLJDApU19NQVJLJDAodm9pZCAwKTtpZigodisnJyk9PT0nW29iamVjdCBHZW5lcmF0b3JdJylyZXR1cm4gdjt9dGhyb3cgbmV3IEVycm9yKHYrJyBpcyBub3QgaXRlcmFibGUnKX07XG4gICAgLy8gU3RyaW5naWZ5IGNvbnRhaW5lciBjaGlsZHNcbiAgICBwcm90byQwLnN0cmluZ2lmeUNvbnRlbnQgPSBmdW5jdGlvbihidWlsZGVyKSB7XG4gICAgICAgIGlmICggIXRoaXMucnVsZXMgJiYgIXRoaXMuZGVjbHMgKSByZXR1cm47XG5cbiAgICAgICAgdmFyIGksIGxhc3QgPSB0aGlzLmxpc3QubGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKCB0aGlzLnJ1bGVzICkge1xuICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCB0aGlzLnJ1bGVzLmxlbmd0aDsgaSsrICkge1xuICAgICAgICAgICAgICAgIHRoaXMucnVsZXNbaV0uc3RyaW5naWZ5KGJ1aWxkZXIsIGxhc3QgPT0gaSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmICggdGhpcy5kZWNscyApIHtcbiAgICAgICAgICAgIGZvciAoIGkgPSAwOyBpIDwgdGhpcy5kZWNscy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlY2xzW2ldLnN0cmluZ2lmeShidWlsZGVyLCBsYXN0ICE9IGkgfHwgdGhpcy5zZW1pY29sb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIEdlbmVyYXRlIGRlZmF1bHQgc3BhY2VzIGJlZm9yZSB9XG4gICAgcHJvdG8kMC5kZWZhdWx0QWZ0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCB0aGlzLmxpc3QubGVuZ3RoID09PSAwICkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGxhc3QgPSB0aGlzLmxpc3RbMF0uYmVmb3JlO1xuICAgICAgICAgICAgaWYgKCB0eXBlb2YobGFzdCkgIT0gJ3VuZGVmaW5lZCcgJiYgbGFzdC5pbmRleE9mKFwiXFxuXCIpID09IC0xICkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3RbMF0uYmVmb3JlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcXG5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBTdHJpbmdpZnkgbm9kZSB3aXRoIHN0YXJ0IChmb3IgZXhhbXBsZSwgc2VsZWN0b3IpIGFuZCBicmFja2V0cyBibG9ja1xuICAgIC8vIHdpdGggY2hpbGQgaW5zaWRlXG4gICAgcHJvdG8kMC5zdHJpbmdpZnlCbG9jayA9IGZ1bmN0aW9uKGJ1aWxkZXIsIHN0YXJ0KSB7XG4gICAgICAgIHZhciBzdHlsZSA9IHRoaXMuc3R5bGUoKTtcblxuICAgICAgICBpZiAoIHRoaXMuYmVmb3JlICkgYnVpbGRlcih0aGlzLmJlZm9yZSk7XG4gICAgICAgIGJ1aWxkZXIoc3RhcnQsIHRoaXMsICdzdGFydCcpO1xuXG4gICAgICAgIHRoaXMuc3RyaW5naWZ5Q29udGVudChidWlsZGVyKTtcblxuICAgICAgICBpZiAoIHN0eWxlLmFmdGVyICkgYnVpbGRlcihzdHlsZS5hZnRlcik7XG4gICAgICAgIGJ1aWxkZXIoJ30nLCB0aGlzLCAnZW5kJyk7XG4gICAgfTtcblxuICAgIC8vIEFkZCBjaGlsZCB0byBlbmQgb2YgbGlzdCB3aXRob3V0IGFueSBjaGVja3MuXG4gICAgLy8gUGxlYXNlLCB1c2UgYGFwcGVuZCgpYCBtZXRob2QsIGBwdXNoKClgIGlzIG1vc3RseSBmb3IgcGFyc2VyLlxuICAgIHByb3RvJDAucHVzaCA9IGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IHRoaXM7XG4gICAgICAgIHRoaXMubGlzdC5wdXNoKGNoaWxkKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8vIEV4ZWN1dGUgYGNhbGxiYWNrYCBvbiBldmVyeSBjaGlsZCBlbGVtZW50LiBGaXJzdCBhcmd1bWVudHMgd2lsbCBiZSBjaGlsZFxuICAgIC8vIG5vZGUsIHNlY29uZCB3aWxsIGJlIGluZGV4LlxuICAgIC8vXG4gICAgLy8gICBjc3MuZWFjaCggKHJ1bGUsIGkpID0+IHtcbiAgICAvLyAgICAgICBjb25zb2xlLmxvZyhydWxlLnR5cGUgKyAnIGF0ICcgKyBpKTtcbiAgICAvLyAgIH0pO1xuICAgIC8vXG4gICAgLy8gSXQgaXMgc2FmZSBmb3IgYWRkIGFuZCByZW1vdmUgZWxlbWVudHMgdG8gbGlzdCB3aGlsZSBpdGVyYXRpbmc6XG4gICAgLy9cbiAgICAvLyAgY3NzLmVhY2goIChydWxlKSA9PiB7XG4gICAgLy8gICAgICBjc3MuaW5zZXJ0QmVmb3JlKCBydWxlLCBhZGRQcmVmaXgocnVsZSkgKTtcbiAgICAvLyAgICAgICMgT24gbmV4dCBpdGVyYXRpb24gd2lsbCBiZSBuZXh0IHJ1bGUsIHJlZ2FyZGxlc3Mgb2YgdGhhdFxuICAgIC8vICAgICAgIyBsaXN0IHNpemUgd2FzIGluY3JlYXNlZFxuICAgIC8vICB9KTtcbiAgICBwcm90byQwLmVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICBpZiAoICF0aGlzLmxhc3RFYWNoICkgdGhpcy5sYXN0RWFjaCA9IDA7XG4gICAgICAgIGlmICggIXRoaXMuaW5kZXhlcyApICB0aGlzLmluZGV4ZXMgPSB7IH07XG5cbiAgICAgICAgdGhpcy5sYXN0RWFjaCArPSAxO1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmxhc3RFYWNoO1xuICAgICAgICB0aGlzLmluZGV4ZXNbaWRdID0gMDtcblxuICAgICAgICB2YXIgbGlzdCA9IHRoaXMubGlzdDtcbiAgICAgICAgaWYgKCAhbGlzdCApIHJldHVybjtcblxuICAgICAgICB2YXIgaW5kZXgsIHJlc3VsdDtcbiAgICAgICAgd2hpbGUgKCB0aGlzLmluZGV4ZXNbaWRdIDwgbGlzdC5sZW5ndGggKSB7XG5cbiAgICAgICAgICBpbmRleCAgPSB0aGlzLmluZGV4ZXNbaWRdO1xuICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKGxpc3RbaW5kZXhdLCBpbmRleCk7XG4gICAgICAgICAgaWYgKCByZXN1bHQgPT09IGZhbHNlICkgYnJlYWs7XG5cbiAgICAgICAgICB0aGlzLmluZGV4ZXNbaWRdICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgdGhpcy5pbmRleGVzW2lkXTtcblxuICAgICAgICBpZiAoIHJlc3VsdCA9PT0gZmFsc2UgKSByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIC8vIEV4ZWN1dGUgY2FsbGJhY2sgb24gZXZlcnkgY2hpbGQgaW4gYWxsIHJ1bGVzIGluc2lkZS5cbiAgICAvL1xuICAgIC8vIEZpcnN0IGFyZ3VtZW50IHdpbGwgYmUgY2hpbGQgbm9kZSwgc2Vjb25kIHdpbGwgYmUgaW5kZXggaW5zaWRlIHBhcmVudC5cbiAgICAvL1xuICAgIC8vICAgY3NzLmVhY2hJbnNpZGUoIChub2RlLCBpKSA9PiB7XG4gICAgLy8gICAgICAgY29uc29sZS5sb2cobm9kZS50eXBlICsgJyBhdCAnICsgaSk7XG4gICAgLy8gICB9KTtcbiAgICAvL1xuICAgIC8vIEFsc28gYXMgYGVhY2hgIGl0IGlzIHNhZmUgb2YgaW5zZXJ0L3JlbW92ZSBub2RlcyBpbnNpZGUgaXRlcmF0aW5nLlxuICAgIHByb3RvJDAuZWFjaEluc2lkZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKGNoaWxkLCBpKSAge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrKGNoaWxkLCBpKTtcblxuICAgICAgICAgICAgaWYgKCByZXN1bHQgIT09IGZhbHNlICYmIGNoaWxkLmVhY2hJbnNpZGUgKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY2hpbGQuZWFjaEluc2lkZShjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggcmVzdWx0ID09PSBmYWxzZSApIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBFeGVjdXRlIGNhbGxiYWNrIG9uIGV2ZXJ5IGRlY2xhcmF0aW9uIGluIGFsbCBydWxlcyBpbnNpZGUuXG4gICAgLy8gSXQgd2lsbCBnb2VzIGluc2lkZSBhdC1ydWxlcyByZWN1cnNpdmVsbHkuXG4gICAgLy9cbiAgICAvLyBGaXJzdCBhcmd1bWVudCB3aWxsIGJlIGRlY2xhcmF0aW9uIG5vZGUsIHNlY29uZCB3aWxsIGJlIGluZGV4IGluc2lkZVxuICAgIC8vIHBhcmVudCBydWxlLlxuICAgIC8vXG4gICAgLy8gICBjc3MuZWFjaERlY2woIChkZWNsLCBpKSA9PiB7XG4gICAgLy8gICAgICAgY29uc29sZS5sb2coZGVjbC5wcm9wICsgJyBpbiAnICsgZGVjbC5wYXJlbnQuc2VsZWN0b3IgKyAnOicgKyBpKTtcbiAgICAvLyAgIH0pO1xuICAgIC8vXG4gICAgLy8gQWxzbyBhcyBgZWFjaGAgaXQgaXMgc2FmZSBvZiBpbnNlcnQvcmVtb3ZlIG5vZGVzIGluc2lkZSBpdGVyYXRpbmcuXG4gICAgcHJvdG8kMC5lYWNoRGVjbCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIERpZmZlcmVudCByZWFsaXphdGlvbiB3aWxsIGJlIGluc2lkZSBzdWJjbGFzc2VzXG4gICAgfTtcblxuICAgIC8vIEV4ZWN1dGUgY2FsbGJhY2sgb24gZXZlcnkgYmxvY2sgY29tbWVudCAob25seSBiZXR3ZWVuIHJ1bGVzXG4gICAgLy8gYW5kIGRlY2xhcmF0aW9ucywgbm90IGluc2lkZSBzZWxlY3RvcnMgYW5kIHZhbHVlcykgaW4gYWxsIHJ1bGVzIGluc2lkZS5cbiAgICAvL1xuICAgIC8vIEZpcnN0IGFyZ3VtZW50IHdpbGwgYmUgY29tbWVudCBub2RlLCBzZWNvbmQgd2lsbCBiZSBpbmRleCBpbnNpZGVcbiAgICAvLyBwYXJlbnQgcnVsZS5cbiAgICAvL1xuICAgIC8vICAgY3NzLmVhY2hDb21tZW50KCAoY29tbWVudCwgaSkgPT4ge1xuICAgIC8vICAgICAgIGNvbnNvbGUubG9nKGNvbW1lbnQuY29udGVudCArICcgYXQgJyArIGkpO1xuICAgIC8vICAgfSk7XG4gICAgLy9cbiAgICAvLyBBbHNvIGFzIGBlYWNoYCBpdCBpcyBzYWZlIG9mIGluc2VydC9yZW1vdmUgbm9kZXMgaW5zaWRlIGl0ZXJhdGluZy5cbiAgICBwcm90byQwLmVhY2hDb21tZW50ID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaEluc2lkZSggZnVuY3Rpb24oY2hpbGQsIGkpICB7XG4gICAgICAgICAgICBpZiAoIGNoaWxkLnR5cGUgPT0gJ2NvbW1lbnQnICkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYWxsYmFjayhjaGlsZCwgaSk7XG4gICAgICAgICAgICAgICAgaWYgKCByZXN1bHQgPT09IGZhbHNlICkgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIEFkZCBjaGlsZCB0byBjb250YWluZXIuXG4gICAgLy9cbiAgICAvLyAgIGNzcy5hcHBlbmQocnVsZSk7XG4gICAgLy9cbiAgICAvLyBZb3UgY2FuIGFkZCBkZWNsYXJhdGlvbiBieSBoYXNoOlxuICAgIC8vXG4gICAgLy8gICBydWxlLmFwcGVuZCh7IHByb3A6ICdjb2xvcicsIHZhbHVlOiAnYmxhY2snIH0pO1xuICAgIHByb3RvJDAuYXBwZW5kID0gZnVuY3Rpb24oY2hpbGQpIHt2YXIgJEQkMDt2YXIgJEQkMTt2YXIgJEQkMjtcbiAgICAgICAgdmFyIGNoaWxkcyA9IHRoaXMubm9ybWFsaXplKGNoaWxkLCB0aGlzLmxpc3RbdGhpcy5saXN0Lmxlbmd0aCAtIDFdKTtcbiAgICAgICAgJEQkMCA9IEdFVF9JVEVSJDAoY2hpbGRzKTskRCQyID0gJEQkMCA9PT0gMDskRCQxID0gKCREJDIgPyBjaGlsZHMubGVuZ3RoIDogdm9pZCAwKTtmb3IgKCBjaGlsZCA7JEQkMiA/ICgkRCQwIDwgJEQkMSkgOiAhKCREJDEgPSAkRCQwW1wibmV4dFwiXSgpKVtcImRvbmVcIl07KXtjaGlsZCA9ICgkRCQyID8gY2hpbGRzWyREJDArK10gOiAkRCQxW1widmFsdWVcIl0pO1xuICAgICAgICAgICAgdGhpcy5saXN0LnB1c2goY2hpbGQpO1xuICAgICAgICB9OyREJDAgPSAkRCQxID0gJEQkMiA9IHZvaWQgMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8vIEFkZCBjaGlsZCB0byBiZWdpbm5pbmcgb2YgY29udGFpbmVyXG4gICAgLy9cbiAgICAvLyAgIGNzcy5wcmVwZW5kKHJ1bGUpO1xuICAgIC8vXG4gICAgLy8gWW91IGNhbiBhZGQgZGVjbGFyYXRpb24gYnkgaGFzaDpcbiAgICAvL1xuICAgIC8vICAgcnVsZS5wcmVwZW5kKHsgcHJvcDogJ2NvbG9yJywgdmFsdWU6ICdibGFjaycgfSk7XG4gICAgcHJvdG8kMC5wcmVwZW5kID0gZnVuY3Rpb24oY2hpbGQpIHt2YXIgJEQkMzt2YXIgJEQkNDt2YXIgJEQkNTtcbiAgICAgICAgdmFyIGNoaWxkcyA9IHRoaXMubm9ybWFsaXplKGNoaWxkLCB0aGlzLmxpc3RbMF0sICdwcmVwZW5kJykucmV2ZXJzZSgpO1xuICAgICAgICAkRCQzID0gR0VUX0lURVIkMChjaGlsZHMpOyREJDUgPSAkRCQzID09PSAwOyREJDQgPSAoJEQkNSA/IGNoaWxkcy5sZW5ndGggOiB2b2lkIDApO2ZvciAoIGNoaWxkIDskRCQ1ID8gKCREJDMgPCAkRCQ0KSA6ICEoJEQkNCA9ICREJDNbXCJuZXh0XCJdKCkpW1wiZG9uZVwiXTspe2NoaWxkID0gKCREJDUgPyBjaGlsZHNbJEQkMysrXSA6ICREJDRbXCJ2YWx1ZVwiXSk7XG4gICAgICAgICAgICB0aGlzLmxpc3QudW5zaGlmdChjaGlsZCk7XG4gICAgICAgIH07JEQkMyA9ICREJDQgPSAkRCQ1ID0gdm9pZCAwO1xuXG4gICAgICAgIGZvciAoIHZhciBpZCBpbiB0aGlzLmluZGV4ZXMgKSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4ZXNbaWRdID0gdGhpcy5pbmRleGVzW2lkXSArIGNoaWxkcy5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLy8gSW5zZXJ0IG5ldyBgYWRkZWRgIGNoaWxkIGJlZm9yZSBgZXhpc3RgLlxuICAgIC8vIFlvdSBjYW4gc2V0IG5vZGUgb2JqZWN0IG9yIG5vZGUgaW5kZXggKGl0IHdpbGwgYmUgZmFzdGVyKSBpbiBgZXhpc3RgLlxuICAgIC8vXG4gICAgLy8gICBjc3MuaW5zZXJ0QWZ0ZXIoMSwgcnVsZSk7XG4gICAgLy9cbiAgICAvLyBZb3UgY2FuIGFkZCBkZWNsYXJhdGlvbiBieSBoYXNoOlxuICAgIC8vXG4gICAgLy8gICBydWxlLmluc2VydEJlZm9yZSgxLCB7IHByb3A6ICdjb2xvcicsIHZhbHVlOiAnYmxhY2snIH0pO1xuICAgIHByb3RvJDAuaW5zZXJ0QmVmb3JlID0gZnVuY3Rpb24oZXhpc3QsIGFkZCkge3ZhciAkRCQ2O3ZhciAkRCQ3O3ZhciAkRCQ4O1xuICAgICAgICBleGlzdCA9IHRoaXMuaW5kZXgoZXhpc3QpO1xuXG4gICAgICAgIHZhciB0eXBlICAgPSBleGlzdCA9PT0gMCA/ICdwcmVwZW5kJyA6IGZhbHNlO1xuICAgICAgICB2YXIgY2hpbGRzID0gdGhpcy5ub3JtYWxpemUoYWRkLCB0aGlzLmxpc3RbZXhpc3RdLCB0eXBlKS5yZXZlcnNlKCk7XG4gICAgICAgICREJDYgPSBHRVRfSVRFUiQwKGNoaWxkcyk7JEQkOCA9ICREJDYgPT09IDA7JEQkNyA9ICgkRCQ4ID8gY2hpbGRzLmxlbmd0aCA6IHZvaWQgMCk7Zm9yICggdmFyIGNoaWxkIDskRCQ4ID8gKCREJDYgPCAkRCQ3KSA6ICEoJEQkNyA9ICREJDZbXCJuZXh0XCJdKCkpW1wiZG9uZVwiXTspe2NoaWxkID0gKCREJDggPyBjaGlsZHNbJEQkNisrXSA6ICREJDdbXCJ2YWx1ZVwiXSk7XG4gICAgICAgICAgICB0aGlzLmxpc3Quc3BsaWNlKGV4aXN0LCAwLCBjaGlsZCk7XG4gICAgICAgIH07JEQkNiA9ICREJDcgPSAkRCQ4ID0gdm9pZCAwO1xuXG4gICAgICAgIGZvciAoIHZhciBpZCBpbiB0aGlzLmluZGV4ZXMgKSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4ZXNbaWRdID0gdGhpcy5pbmRleGVzW2lkXSArIGNoaWxkcy5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLy8gSW5zZXJ0IG5ldyBgYWRkZWRgIGNoaWxkIGFmdGVyIGBleGlzdGAuXG4gICAgLy8gWW91IGNhbiBzZXQgbm9kZSBvYmplY3Qgb3Igbm9kZSBpbmRleCAoaXQgd2lsbCBiZSBmYXN0ZXIpIGluIGBleGlzdGAuXG4gICAgLy9cbiAgICAvLyAgIGNzcy5pbnNlcnRBZnRlcigxLCBydWxlKTtcbiAgICAvL1xuICAgIC8vIFlvdSBjYW4gYWRkIGRlY2xhcmF0aW9uIGJ5IGhhc2g6XG4gICAgLy9cbiAgICAvLyAgIHJ1bGUuaW5zZXJ0QWZ0ZXIoMSwgeyBwcm9wOiAnY29sb3InLCB2YWx1ZTogJ2JsYWNrJyB9KTtcbiAgICBwcm90byQwLmluc2VydEFmdGVyID0gZnVuY3Rpb24oZXhpc3QsIGFkZCkge3ZhciAkRCQ5O3ZhciAkRCQxMDt2YXIgJEQkMTE7XG4gICAgICAgIGV4aXN0ID0gdGhpcy5pbmRleChleGlzdCk7XG5cbiAgICAgICAgdmFyIGNoaWxkcyA9IHRoaXMubm9ybWFsaXplKGFkZCwgdGhpcy5saXN0W2V4aXN0XSkucmV2ZXJzZSgpO1xuICAgICAgICAkRCQ5ID0gR0VUX0lURVIkMChjaGlsZHMpOyREJDExID0gJEQkOSA9PT0gMDskRCQxMCA9ICgkRCQxMSA/IGNoaWxkcy5sZW5ndGggOiB2b2lkIDApO2ZvciAoIHZhciBjaGlsZCA7JEQkMTEgPyAoJEQkOSA8ICREJDEwKSA6ICEoJEQkMTAgPSAkRCQ5W1wibmV4dFwiXSgpKVtcImRvbmVcIl07KXtjaGlsZCA9ICgkRCQxMSA/IGNoaWxkc1skRCQ5KytdIDogJEQkMTBbXCJ2YWx1ZVwiXSk7XG4gICAgICAgICAgICB0aGlzLmxpc3Quc3BsaWNlKGV4aXN0ICsgMSwgMCwgY2hpbGQpO1xuICAgICAgICB9OyREJDkgPSAkRCQxMCA9ICREJDExID0gdm9pZCAwO1xuXG4gICAgICAgIGZvciAoIHZhciBpZCBpbiB0aGlzLmluZGV4ZXMgKSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4ZXNbaWRdID0gdGhpcy5pbmRleGVzW2lkXSArIGNoaWxkcy5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLy8gUmVtb3ZlIGBjaGlsZGAgYnkgaW5kZXggb3Igbm9kZS5cbiAgICAvL1xuICAgIC8vICAgY3NzLnJlbW92ZSgyKTtcbiAgICBwcm90byQwLnJlbW92ZSA9IGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIGNoaWxkID0gdGhpcy5pbmRleChjaGlsZCk7XG4gICAgICAgIHRoaXMubGlzdC5zcGxpY2UoY2hpbGQsIDEpO1xuXG4gICAgICAgIGZvciAoIHZhciBpZCBpbiB0aGlzLmluZGV4ZXMgKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4ZXNbaWRdO1xuICAgICAgICAgICAgaWYgKCBpbmRleCA+PSBjaGlsZCApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGV4ZXNbaWRdID0gaW5kZXggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8vIFJldHVybiB0cnVlIGlmIGFsbCBjaGlsZHMgcmV0dXJuIHRydWUgaW4gYGNvbmRpdGlvbmAuXG4gICAgLy8gSnVzdCBzaG9yY3V0IGZvciBgbGlzdC5ldmVyeWAuXG4gICAgcHJvdG8kMC5ldmVyeSA9IGZ1bmN0aW9uKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5saXN0LmV2ZXJ5KGNvbmRpdGlvbik7XG4gICAgfTtcblxuICAgIC8vIFJldHVybiB0cnVlIGlmIG9uZSBvciBtb3JlIGNoaWxkcyByZXR1cm4gdHJ1ZSBpbiBgY29uZGl0aW9uYC5cbiAgICAvLyBKdXN0IHNob3JjdXQgZm9yIGBsaXN0LnNvbWVgLlxuICAgIHByb3RvJDAuc29tZSA9IGZ1bmN0aW9uKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5saXN0LnNvbWUoY29uZGl0aW9uKTtcbiAgICB9O1xuXG4gICAgLy8gUmV0dXJuIGluZGV4IG9mIGNoaWxkXG4gICAgcHJvdG8kMC5pbmRleCA9IGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIGlmICggdHlwZW9mKGNoaWxkKSA9PSAnbnVtYmVyJyApIHtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QuaW5kZXhPZihjaGlsZCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gU2hvcnRjdXQgdG8gZ2V0IGZpcnN0IGNoaWxkXG4gICAgZnVuY3Rpb24gZmlyc3QkZ2V0JDAoKSB7XG4gICAgICAgIGlmICggIXRoaXMubGlzdCApIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RbMF07XG4gICAgfVxuXG4gICAgLy8gU2hvcnRjdXQgdG8gZ2V0IGZpcnN0IGNoaWxkXG4gICAgZnVuY3Rpb24gbGFzdCRnZXQkMCgpIHtcbiAgICAgICAgaWYgKCAhdGhpcy5saXN0ICkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdFt0aGlzLmxpc3QubGVuZ3RoIC0gMV07XG4gICAgfVxuXG4gICAgLy8gU2hvcnRjdXQgdG8gZ2V0IGN1cnJlbnQgbGlzdFxuICAgIGZ1bmN0aW9uIGxpc3QkZ2V0JDAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJ1bGVzIHx8IHRoaXMuZGVjbHM7XG4gICAgfVxuXG4gICAgLy8gTm9ybWFsaXplIGNoaWxkIGJlZm9yZSBpbnNlcnQuIENvcHkgYmVmb3JlIGZyb20gYHNhbXBsZWAuXG4gICAgcHJvdG8kMC5ub3JtYWxpemUgPSBmdW5jdGlvbihjaGlsZCwgc2FtcGxlKSB7dmFyICREJDEyO3ZhciAkRCQxMzt2YXIgJEQkMTQ7XG4gICAgICAgIHZhciBjaGlsZHM7XG4gICAgICAgIGlmICggY2hpbGQudHlwZSA9PSAncm9vdCcgKSB7XG4gICAgICAgICAgICBjaGlsZHMgPSBjaGlsZC5ydWxlcztcbiAgICAgICAgfSBlbHNlIGlmICggQXJyYXkuaXNBcnJheShjaGlsZCkgKSB7XG4gICAgICAgICAgICBjaGlsZHMgPSBjaGlsZC5tYXAoIGZ1bmN0aW9uKGkgKSB7cmV0dXJuIGkuY2xvbmUoKX0gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICggY2hpbGQucGFyZW50ICkge1xuICAgICAgICAgICAgICAgIGNoaWxkID0gY2hpbGQuY2xvbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoaWxkcyA9IFtjaGlsZF07XG4gICAgICAgIH1cblxuICAgICAgICAkRCQxMiA9IEdFVF9JVEVSJDAoY2hpbGRzKTskRCQxNCA9ICREJDEyID09PSAwOyREJDEzID0gKCREJDE0ID8gY2hpbGRzLmxlbmd0aCA6IHZvaWQgMCk7Zm9yICggY2hpbGQgOyREJDE0ID8gKCREJDEyIDwgJEQkMTMpIDogISgkRCQxMyA9ICREJDEyW1wibmV4dFwiXSgpKVtcImRvbmVcIl07KXtjaGlsZCA9ICgkRCQxNCA/IGNoaWxkc1skRCQxMisrXSA6ICREJDEzW1widmFsdWVcIl0pO1xuICAgICAgICAgICAgY2hpbGQucGFyZW50ID0gdGhpcztcbiAgICAgICAgICAgIGlmICggdHlwZW9mKGNoaWxkLmJlZm9yZSkgPT0gJ3VuZGVmaW5lZCcgJiYgc2FtcGxlICkge1xuICAgICAgICAgICAgICAgIGNoaWxkLmJlZm9yZSA9IHNhbXBsZS5iZWZvcmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07JEQkMTIgPSAkRCQxMyA9ICREJDE0ID0gdm9pZCAwO1xuXG4gICAgICAgIHJldHVybiBjaGlsZHM7XG4gICAgfTtcbk1JWElOJDAoQ29udGFpbmVyLnByb3RvdHlwZSxwcm90byQwKTtwcm90byQwPXZvaWQgMDtyZXR1cm4gQ29udGFpbmVyO30pKE5vZGUpO1xuXG4vLyBDb250YWluZXIgd2l0aCBhbm90aGVyIHJ1bGVzLCBsaWtlIHRoaXMubWVkaWEgYXQtcnVsZVxuIENvbnRhaW5lci5XaXRoUnVsZXMgPSAoKGZ1bmN0aW9uKHN1cGVyJDApe1widXNlIHN0cmljdFwiO2lmKCFQUlMkMClNSVhJTiQwKGNvbnN0cnVjdG9yJDAsIHN1cGVyJDApO3ZhciBwcm90byQwPXt9O1xuICAgIGZ1bmN0aW9uIGNvbnN0cnVjdG9yJDAoZGVmYXVsdHMpIHtcbiAgICAgICAgdGhpcy5ydWxlcyA9IFtdO1xuICAgICAgICBzdXBlciQwLmNhbGwodGhpcywgZGVmYXVsdHMpO1xuICAgIH1pZihzdXBlciQwIT09bnVsbClTUCQwKGNvbnN0cnVjdG9yJDAsc3VwZXIkMCk7Y29uc3RydWN0b3IkMC5wcm90b3R5cGUgPSBPQyQwKHN1cGVyJDAhPT1udWxsP3N1cGVyJDAucHJvdG90eXBlOm51bGwse1wiY29uc3RydWN0b3JcIjp7XCJ2YWx1ZVwiOmNvbnN0cnVjdG9yJDAsXCJjb25maWd1cmFibGVcIjp0cnVlLFwid3JpdGFibGVcIjp0cnVlfX0pO0RQJDAoY29uc3RydWN0b3IkMCxcInByb3RvdHlwZVwiLHtcImNvbmZpZ3VyYWJsZVwiOmZhbHNlLFwiZW51bWVyYWJsZVwiOmZhbHNlLFwid3JpdGFibGVcIjpmYWxzZX0pO1xuXG4gICAgLy8gRXhlY3V0ZSBgY2FsbGJhY2tgIG9uIGV2ZXJ5IGRlY2xhcmF0aW9uIGluIGFsbCBydWxlcyBpbnNpZGUuXG4gICAgLy8gSXQgd2lsbCBnb2VzIGluc2lkZSBhdC1ydWxlcyByZWN1cnNpdmVsbHkuXG4gICAgLy9cbiAgICAvLyBTZWUgZG9jdW1lbnRhdGlvbiBpbiBgQ29udGFpbmVyI2VhY2hEZWNsYC5cbiAgICBwcm90byQwLmVhY2hEZWNsID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oY2hpbGQpICB7XG4gICAgICAgICAgICBpZiAoIGNoaWxkLmVhY2hEZWNsICkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjaGlsZC5lYWNoRGVjbChjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKCByZXN1bHQgPT09IGZhbHNlICkgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIEV4ZWN1dGUgYGNhbGxiYWNrYCBvbiBldmVyeSBydWxlIGluIGNvbmF0aW5lciBhbmQgaW5zaWRlIGNoaWxkIGF0LXJ1bGVzLlxuICAgIC8vXG4gICAgLy8gRmlyc3QgYXJndW1lbnQgd2lsbCBiZSBydWxlIG5vZGUsIHNlY29uZCB3aWxsIGJlIGluZGV4IGluc2lkZSBwYXJlbnQuXG4gICAgLy9cbiAgICAvLyAgIGNzcy5lYWNoUnVsZSggKHJ1bGUsIGkpID0+IHtcbiAgICAvLyAgICAgICBpZiAoIHBhcmVudC50eXBlID09ICdhdHJ1bGUnICkge1xuICAgIC8vICAgICAgICAgICBjb25zb2xlLmxvZyhydWxlLnNlbGVjdG9yICsgJyBpbiAnICsgcnVsZS5wYXJlbnQubmFtZSk7XG4gICAgLy8gICAgICAgfSBlbHNlIHtcbiAgICAvLyAgICAgICAgICAgY29uc29sZS5sb2cocnVsZS5zZWxlY3RvciArICcgYXQgJyArIGkpO1xuICAgIC8vICAgICAgIH1cbiAgICAvLyAgIH0pO1xuICAgIHByb3RvJDAuZWFjaFJ1bGUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbihjaGlsZCwgaSkgIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgICBpZiAoIGNoaWxkLnR5cGUgPT0gJ3J1bGUnICkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKGNoaWxkLCBpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIGNoaWxkLmVhY2hSdWxlICkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNoaWxkLmVhY2hSdWxlKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggcmVzdWx0ID09PSBmYWxzZSApIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBFeGVjdXRlIGBjYWxsYmFja2Agb24gZXZlcnkgYXQtcnVsZSBpbiBjb25hdGluZXIgYW5kIGluc2lkZSBhdC1ydWxlcy5cbiAgICAvL1xuICAgIC8vIEZpcnN0IGFyZ3VtZW50IHdpbGwgYmUgYXQtcnVsZSBub2RlLCBzZWNvbmQgd2lsbCBiZSBpbmRleCBpbnNpZGUgcGFyZW50LlxuICAgIC8vXG4gICAgLy8gICBjc3MuZWFjaEF0UnVsZSggKGF0cnVsZSwgcGFyZW50LCBpKSA9PiB7XG4gICAgLy8gICAgICAgaWYgKCBwYXJlbnQudHlwZSA9PSAnYXRydWxlJyApIHtcbiAgICAvLyAgICAgICAgICAgY29uc29sZS5sb2coYXRydWxlLm5hbWUgKyAnIGluICcgKyBhdHJ1bGUucGFyZW50Lm5hbWUpO1xuICAgIC8vICAgICAgIH0gZWxzZSB7XG4gICAgLy8gICAgICAgICAgIGNvbnNvbGUubG9nKGF0cnVsZS5uYW1lICsgJyBhdCAnICsgaSk7XG4gICAgLy8gICAgICAgfVxuICAgIC8vICAgfSk7XG4gICAgcHJvdG8kMC5lYWNoQXRSdWxlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaEluc2lkZSggZnVuY3Rpb24oY2hpbGQsIGkpICB7XG4gICAgICAgICAgICBpZiAoIGNoaWxkLnR5cGUgPT0gJ2F0cnVsZScgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrKGNoaWxkLCBpKTtcbiAgICAgICAgICAgICAgICBpZiAoIHJlc3VsdCA9PT0gZmFsc2UgKSByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuTUlYSU4kMChjb25zdHJ1Y3RvciQwLnByb3RvdHlwZSxwcm90byQwKTtwcm90byQwPXZvaWQgMDtyZXR1cm4gY29uc3RydWN0b3IkMDt9KShDb250YWluZXIpKTtcblxuLy8gQ29udGFpbmVyIHdpdGggYW5vdGhlciBydWxlcywgbGlrZSB0aGlzLm1lZGlhIGF0LXJ1bGVcbiBDb250YWluZXIuV2l0aERlY2xzID0gKChmdW5jdGlvbihzdXBlciQwKXtcInVzZSBzdHJpY3RcIjtpZighUFJTJDApTUlYSU4kMChjb25zdHJ1Y3RvciQxLCBzdXBlciQwKTt2YXIgcHJvdG8kMD17fTtcbiAgICBmdW5jdGlvbiBjb25zdHJ1Y3RvciQxKGRlZmF1bHRzKSB7XG4gICAgICAgIHRoaXMuZGVjbHMgPSBbXTtcbiAgICAgICAgc3VwZXIkMC5jYWxsKHRoaXMsIGRlZmF1bHRzKTtcbiAgICB9aWYoc3VwZXIkMCE9PW51bGwpU1AkMChjb25zdHJ1Y3RvciQxLHN1cGVyJDApO2NvbnN0cnVjdG9yJDEucHJvdG90eXBlID0gT0MkMChzdXBlciQwIT09bnVsbD9zdXBlciQwLnByb3RvdHlwZTpudWxsLHtcImNvbnN0cnVjdG9yXCI6e1widmFsdWVcIjpjb25zdHJ1Y3RvciQxLFwiY29uZmlndXJhYmxlXCI6dHJ1ZSxcIndyaXRhYmxlXCI6dHJ1ZX19KTtEUCQwKGNvbnN0cnVjdG9yJDEsXCJwcm90b3R5cGVcIix7XCJjb25maWd1cmFibGVcIjpmYWxzZSxcImVudW1lcmFibGVcIjpmYWxzZSxcIndyaXRhYmxlXCI6ZmFsc2V9KTtcblxuICAgIC8vIEFsbG93IHRvIGRlZmluZSBuZXcgZGVjbGFyYXRpb24gYXMgaGFzaFxuICAgIHByb3RvJDAubm9ybWFsaXplID0gZnVuY3Rpb24oY2hpbGQsIHNhbXBsZSwgdHlwZSkge1xuICAgICAgICBpZiAoICFjaGlsZC50eXBlICYmICFBcnJheS5pc0FycmF5KGNoaWxkKSApIHtcbiAgICAgICAgICAgIGNoaWxkID0gbmV3IERlY2xhcmF0aW9uKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIkMC5wcm90b3R5cGUubm9ybWFsaXplLmNhbGwodGhpcywgY2hpbGQsIHNhbXBsZSwgdHlwZSk7XG4gICAgfTtcblxuICAgIC8vIEV4ZWN1dGUgY2FsbGJhY2sgb24gZXZlcnkgZGVjbGFyYXRpb24uXG4gICAgLy9cbiAgICAvLyBTZWUgZG9jdW1lbnRhdGlvbiBpbiBgQ29udGFpbmVyI2VhY2hEZWNsYC5cbiAgICBwcm90byQwLmVhY2hEZWNsID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oY2hpbGQsIGkpICB7XG4gICAgICAgICAgICBpZiAoIGNoaWxkLnR5cGUgPT0gJ2RlY2wnICkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYWxsYmFjayhjaGlsZCwgaSk7XG4gICAgICAgICAgICAgICAgaWYgKCByZXN1bHQgPT09IGZhbHNlICkgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbk1JWElOJDAoY29uc3RydWN0b3IkMS5wcm90b3R5cGUscHJvdG8kMCk7cHJvdG8kMD12b2lkIDA7cmV0dXJuIGNvbnN0cnVjdG9yJDE7fSkoQ29udGFpbmVyKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udGFpbmVyO1xuIiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8vIEVycm9yIHdoaWxlIENTUyBwYXJzaW5nXG52YXIgQ3NzU3ludGF4RXJyb3IgPSAoZnVuY3Rpb24oc3VwZXIkMCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIFBSUyQwID0gKGZ1bmN0aW9uKG8sdCl7b1tcIl9fcHJvdG9fX1wiXT17XCJhXCI6dH07cmV0dXJuIG9bXCJhXCJdPT09dH0pKHt9LHt9KTt2YXIgRFAkMCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgR09QRCQwID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjt2YXIgTUlYSU4kMCA9IGZ1bmN0aW9uKHQscyl7Zm9yKHZhciBwIGluIHMpe2lmKHMuaGFzT3duUHJvcGVydHkocCkpe0RQJDAodCxwLEdPUEQkMChzLHApKTt9fXJldHVybiB0fTt2YXIgU1AkMCA9IE9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24obyxwKXtvW1wiX19wcm90b19fXCJdPXA7cmV0dXJuIG99O3ZhciBPQyQwID0gT2JqZWN0LmNyZWF0ZTtpZighUFJTJDApTUlYSU4kMChDc3NTeW50YXhFcnJvciwgc3VwZXIkMCk7dmFyIHByb3RvJDA9e307XG4gICAgZnVuY3Rpb24gQ3NzU3ludGF4RXJyb3IodGV4dCwgc291cmNlLCBwb3MsIGZpbGUpIHtcbiAgICAgICAgdGhpcy5maWxlICAgICA9IGZpbGU7XG4gICAgICAgIHRoaXMubGluZSAgICAgPSBwb3MubGluZTtcbiAgICAgICAgdGhpcy5jb2x1bW4gICA9IHBvcy5jb2x1bW47XG4gICAgICAgIHRoaXMuc291cmNlICAgPSBzb3VyY2U7XG4gICAgICAgIHRoaXMucmVhc29uICAgPSB0ZXh0O1xuXG4gICAgICAgIHRoaXMubWVzc2FnZSAgPSBmaWxlID8gZmlsZSA6ICc8Y3NzIGlucHV0Pic7XG4gICAgICAgIHRoaXMubWVzc2FnZSArPSAnOicgKyBwb3MubGluZSArICc6JyArIHBvcy5jb2x1bW4gKyAnOiAnICsgdGV4dDtcbiAgICB9aWYoc3VwZXIkMCE9PW51bGwpU1AkMChDc3NTeW50YXhFcnJvcixzdXBlciQwKTtDc3NTeW50YXhFcnJvci5wcm90b3R5cGUgPSBPQyQwKHN1cGVyJDAhPT1udWxsP3N1cGVyJDAucHJvdG90eXBlOm51bGwse1wiY29uc3RydWN0b3JcIjp7XCJ2YWx1ZVwiOkNzc1N5bnRheEVycm9yLFwiY29uZmlndXJhYmxlXCI6dHJ1ZSxcIndyaXRhYmxlXCI6dHJ1ZX19KTtEUCQwKENzc1N5bnRheEVycm9yLFwicHJvdG90eXBlXCIse1wiY29uZmlndXJhYmxlXCI6ZmFsc2UsXCJlbnVtZXJhYmxlXCI6ZmFsc2UsXCJ3cml0YWJsZVwiOmZhbHNlfSk7XG5cbiAgICBwcm90byQwLmhpZ2hsaWdodCA9IGZ1bmN0aW9uKGNvbG9yKSB7XG4gICAgICAgIHZhciBudW0gICA9IHRoaXMubGluZSAtIDE7XG4gICAgICAgIHZhciBsaW5lcyA9IHRoaXMuc291cmNlLnNwbGl0KCdcXG4nKTtcblxuICAgICAgICB2YXIgcHJldiAgID0gbnVtID4gMCA/IGxpbmVzW251bSAtIDFdICsgJ1xcbicgOiAnJztcbiAgICAgICAgdmFyIGJyb2tlbiA9IGxpbmVzW251bV07XG4gICAgICAgIHZhciBuZXh0ICAgPSBudW0gPCBsaW5lcy5sZW5ndGggLSAxID8gJ1xcbicgKyBsaW5lc1tudW0gKyAxXSA6ICcnO1xuXG4gICAgICAgIHZhciBtYXJrID0gJ1xcbic7XG4gICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMuY29sdW1uIC0gMTsgaSsrICkge1xuICAgICAgICAgICAgbWFyayArPSAnICc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHR5cGVvZihjb2xvcikgPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mKHByb2Nlc3MpICE9ICd1bmRlZmluZWQnICkge1xuICAgICAgICAgICAgaWYgKCBwcm9jZXNzLnN0ZG91dCAmJiBwcm9jZXNzLmVudiApIHtcbiAgICAgICAgICAgICAgICBjb2xvciA9IHByb2Nlc3Muc3Rkb3V0LmlzVFRZICYmXG4gICAgICAgICAgICAgICAgICAgICAgICFwcm9jZXNzLmVudi5OT0RFX0RJU0FCTEVfQ09MT1JTO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBjb2xvciApIHtcbiAgICAgICAgICAgIG1hcmsgKz0gXCJcXHgxQlsxOzMxbV5cXHgxQlswbVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWFyayArPSAnXic7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJldiArIGJyb2tlbiArIG1hcmsgKyBuZXh0O1xuICAgIH07XG5cbiAgICBwcm90byQwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2UgKyBcIlxcblwiICsgdGhpcy5oaWdobGlnaHQoKTtcbiAgICB9O1xuTUlYSU4kMChDc3NTeW50YXhFcnJvci5wcm90b3R5cGUscHJvdG8kMCk7cHJvdG8kMD12b2lkIDA7cmV0dXJuIENzc1N5bnRheEVycm9yO30pKEVycm9yKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDc3NTeW50YXhFcnJvcjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpIiwidmFyIE5vZGUgICA9IHJlcXVpcmUoJy4vbm9kZScpO1xudmFyIHZlbmRvciA9IHJlcXVpcmUoJy4vdmVuZG9yJyk7XG5cbi8vIENTUyBkZWNsYXJhdGlvbiBsaWtlIOKAnGNvbG9yOiBibGFja+KAnSBpbiBydWxlc1xudmFyIERlY2xhcmF0aW9uID0gKGZ1bmN0aW9uKHN1cGVyJDApe1widXNlIHN0cmljdFwiO3ZhciBQUlMkMCA9IChmdW5jdGlvbihvLHQpe29bXCJfX3Byb3RvX19cIl09e1wiYVwiOnR9O3JldHVybiBvW1wiYVwiXT09PXR9KSh7fSx7fSk7dmFyIERQJDAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7dmFyIEdPUEQkMCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7dmFyIE1JWElOJDAgPSBmdW5jdGlvbih0LHMpe2Zvcih2YXIgcCBpbiBzKXtpZihzLmhhc093blByb3BlcnR5KHApKXtEUCQwKHQscCxHT1BEJDAocyxwKSk7fX1yZXR1cm4gdH07dmFyIFNQJDAgPSBPYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKG8scCl7b1tcIl9fcHJvdG9fX1wiXT1wO3JldHVybiBvfTt2YXIgT0MkMCA9IE9iamVjdC5jcmVhdGU7aWYoIVBSUyQwKU1JWElOJDAoRGVjbGFyYXRpb24sIHN1cGVyJDApO3ZhciBwcm90byQwPXt9O1xuICAgIGZ1bmN0aW9uIERlY2xhcmF0aW9uKGRlZmF1bHRzKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdkZWNsJztcbiAgICAgICAgc3VwZXIkMC5jYWxsKHRoaXMsIGRlZmF1bHRzKTtcbiAgICB9aWYoc3VwZXIkMCE9PW51bGwpU1AkMChEZWNsYXJhdGlvbixzdXBlciQwKTtEZWNsYXJhdGlvbi5wcm90b3R5cGUgPSBPQyQwKHN1cGVyJDAhPT1udWxsP3N1cGVyJDAucHJvdG90eXBlOm51bGwse1wiY29uc3RydWN0b3JcIjp7XCJ2YWx1ZVwiOkRlY2xhcmF0aW9uLFwiY29uZmlndXJhYmxlXCI6dHJ1ZSxcIndyaXRhYmxlXCI6dHJ1ZX19KTtEUCQwKERlY2xhcmF0aW9uLFwicHJvdG90eXBlXCIse1wiY29uZmlndXJhYmxlXCI6ZmFsc2UsXCJlbnVtZXJhYmxlXCI6ZmFsc2UsXCJ3cml0YWJsZVwiOmZhbHNlfSk7XG5cbiAgICBwcm90byQwLmRlZmF1bHRTdHlsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4geyBiZWZvcmU6IFwiXFxuICAgIFwiLCBiZXR3ZWVuOiAnOiAnIH07XG4gICAgfTtcblxuICAgIC8vIFN0cmluZ2lmeSBkZWNsYXJhdGlvblxuICAgIHByb3RvJDAuc3RyaW5naWZ5ID0gZnVuY3Rpb24oYnVpbGRlciwgc2VtaWNvbG9uKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IHRoaXMuc3R5bGUoKTtcblxuICAgICAgICBpZiAoIHN0eWxlLmJlZm9yZSApIGJ1aWxkZXIoc3R5bGUuYmVmb3JlKTtcbiAgICAgICAgdmFyIHN0cmluZyA9IHRoaXMucHJvcCArIHN0eWxlLmJldHdlZW4gKyB0aGlzLnN0cmluZ2lmeVJhdygndmFsdWUnKTtcblxuICAgICAgICBpZiAoIHRoaXMuaW1wb3J0YW50ICkge1xuICAgICAgICAgICAgc3RyaW5nICs9IHRoaXMuX2ltcG9ydGFudCB8fCAnICFpbXBvcnRhbnQnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBzZW1pY29sb24gKSBzdHJpbmcgKz0gJzsnO1xuICAgICAgICBidWlsZGVyKHN0cmluZywgdGhpcyk7XG4gICAgfTtcblxuICAgIC8vIENsZWFuIGBiZWZvcmVgIGFuZCBgYmV0d2VlbmAgcHJvcGVydHkgaW4gY2xvbmUgdG8gY29weSBpdCBmcm9tIG5ld1xuICAgIC8vIHBhcmVudCBydWxlXG4gICAgcHJvdG8kMC5jbG9uZSA9IGZ1bmN0aW9uKCkge3ZhciBvdmVycmlkZXMgPSBhcmd1bWVudHNbMF07aWYob3ZlcnJpZGVzID09PSB2b2lkIDApb3ZlcnJpZGVzID0geyB9O1xuICAgICAgICB2YXIgY2xvbmVkID0gc3VwZXIkMC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLCBvdmVycmlkZXMpO1xuICAgICAgICBkZWxldGUgY2xvbmVkLmJlZm9yZTtcbiAgICAgICAgZGVsZXRlIGNsb25lZC5iZXR3ZWVuO1xuICAgICAgICByZXR1cm4gY2xvbmVkO1xuICAgIH07XG5NSVhJTiQwKERlY2xhcmF0aW9uLnByb3RvdHlwZSxwcm90byQwKTtwcm90byQwPXZvaWQgMDtyZXR1cm4gRGVjbGFyYXRpb247fSkoTm9kZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGVjbGFyYXRpb247XG4iLCIvLyBNZXRob2RzIHRvIHBhcnNlIGxpc3QgYW5kIHNwbGl0IGl0IHRvIGFycmF5XG52YXIgbGlzdCA9IHtcblxuICAgIC8vIFNwbGl0IHN0cmluZyB0byBhcnJheSBieSBzZXBhcmF0b3Igc3ltYm9scyB3aXRoIGZ1bmN0aW9uIGFuZCBpbnNpZGUgc3RyaW5nc1xuICAgIC8vIGNoZWNoaW5nXG4gICAgc3BsaXQ6IGZ1bmN0aW9uIChzdHJpbmcsIHNlcGFyYXRvcnMsIGxhc3QpIHt2YXIgU19JVEVSJDAgPSB0eXBlb2YgU3ltYm9sIT09J3VuZGVmaW5lZCcmJlN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yfHwnQEBpdGVyYXRvcic7dmFyIFNfTUFSSyQwID0gdHlwZW9mIFN5bWJvbCE9PSd1bmRlZmluZWQnJiZTeW1ib2wmJlN5bWJvbFtcIl9fc2V0T2JqZWN0U2V0dGVyX19cIl07ZnVuY3Rpb24gR0VUX0lURVIkMCh2KXtpZih2KXtpZihBcnJheS5pc0FycmF5KHYpKXJldHVybiAwO3ZhciBmO2lmKFNfTUFSSyQwKVNfTUFSSyQwKHYpO2lmKHR5cGVvZiB2PT09J29iamVjdCcmJnR5cGVvZiAoZj12W1NfSVRFUiQwXSk9PT0nZnVuY3Rpb24nKXtpZihTX01BUkskMClTX01BUkskMCh2b2lkIDApO3JldHVybiBmLmNhbGwodik7fWlmKFNfTUFSSyQwKVNfTUFSSyQwKHZvaWQgMCk7aWYoKHYrJycpPT09J1tvYmplY3QgR2VuZXJhdG9yXScpcmV0dXJuIHY7fXRocm93IG5ldyBFcnJvcih2KycgaXMgbm90IGl0ZXJhYmxlJyl9O3ZhciAkRCQwO3ZhciAkRCQxO3ZhciAkRCQyO1xuICAgICAgICB2YXIgYXJyYXkgICA9IFtdO1xuICAgICAgICB2YXIgY3VycmVudCA9ICcnO1xuICAgICAgICB2YXIgc3BsaXQgICA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBmdW5jICAgID0gMDtcbiAgICAgICAgdmFyIHF1b3RlICAgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVzY2FwZSAgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICB2YXIgbGV0dGVyID0gc3RyaW5nW2ldO1xuXG4gICAgICAgICAgICBpZiAoIHF1b3RlICkge1xuICAgICAgICAgICAgICAgIGlmICggZXNjYXBlICkge1xuICAgICAgICAgICAgICAgICAgICBlc2NhcGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBsZXR0ZXIgPT0gJ1xcXFwnICkge1xuICAgICAgICAgICAgICAgICAgICBlc2NhcGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGxldHRlciA9PSBxdW90ZSApIHtcbiAgICAgICAgICAgICAgICAgICAgcXVvdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBsZXR0ZXIgPT0gJ1wiJyB8fCBsZXR0ZXIgPT0gXCInXCIgKSB7XG4gICAgICAgICAgICAgICAgcXVvdGUgPSBsZXR0ZXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBsZXR0ZXIgPT0gJygnICkge1xuICAgICAgICAgICAgICAgIGZ1bmMgKz0gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIGxldHRlciA9PSAnKScgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBmdW5jID4gMCApIGZ1bmMgLT0gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIGZ1bmMgPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgJEQkMCA9IEdFVF9JVEVSJDAoc2VwYXJhdG9ycyk7JEQkMiA9ICREJDAgPT09IDA7JEQkMSA9ICgkRCQyID8gc2VwYXJhdG9ycy5sZW5ndGggOiB2b2lkIDApO2ZvciAoIHZhciBzZXBhcmF0b3IgOyREJDIgPyAoJEQkMCA8ICREJDEpIDogISgkRCQxID0gJEQkMFtcIm5leHRcIl0oKSlbXCJkb25lXCJdOyl7c2VwYXJhdG9yID0gKCREJDIgPyBzZXBhcmF0b3JzWyREJDArK10gOiAkRCQxW1widmFsdWVcIl0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGxldHRlciA9PSBzZXBhcmF0b3IgKSBzcGxpdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfTskRCQwID0gJEQkMSA9ICREJDIgPSB2b2lkIDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggc3BsaXQgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBjdXJyZW50ICE9PSAnJyApIGFycmF5LnB1c2goY3VycmVudC50cmltKCkpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSAnJztcbiAgICAgICAgICAgICAgICBzcGxpdCAgID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgKz0gbGV0dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBsYXN0IHx8IGN1cnJlbnQgIT09ICcnICkgYXJyYXkucHVzaChjdXJyZW50LnRyaW0oKSk7XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9LFxuXG4gICAgLy8gU3BsaXQgbGlzdCBkZXZpZGVkIGJ5IHNwYWNlOlxuICAgIC8vXG4gICAgLy8gICBsaXN0LnNwYWNlKCdhIGInKSAjPT4gWydhJywgJ2InXVxuICAgIC8vXG4gICAgLy8gSXQgY2hlY2sgZm9yIGZ1Y3Rpb24gYW5kIHN0cmluZ3M6XG4gICAgLy9cbiAgICAvLyAgIGxpc3Quc3BhY2UoJ2NhbGMoMXB4ICsgMWVtKSBcImIgY1wiJykgIz0+IFsnY2FsYygxcHggKyAxZW0pJywgJ1wiYiBjXCInXVxuICAgIHNwYWNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGl0KHN0cmluZywgWycgJywgXCJcXG5cIiwgXCJcXHRcIl0pO1xuICAgIH0sXG5cbiAgICAvLyBTcGxpdCBsaXN0IGRldmlkZWQgYnkgY29tbWFcbiAgICAvL1xuICAgIC8vICAgbGlzdC5jb21tYSgnYSwgYicpICM9PiBbJ2EnLCAnYiddXG4gICAgLy9cbiAgICAvLyBJdCBjaGVjayBmb3IgZnVjdGlvbiBhbmQgc3RyaW5nczpcbiAgICAvL1xuICAgIC8vICAgbGlzdC5jb21tYSgncmdiYSgwLCAwLCAwLCAwKSB3aGl0ZScpICM9PiBbJ3JnYmEoMCwgMCwgMCwgMCknLCAnXCJ3aGl0ZVwiJ11cbiAgICBjb21tYTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGxpdChzdHJpbmcsIFsnLCddLCB0cnVlKTtcbiAgICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdDtcbiIsInZhciBSZXN1bHQgPSByZXF1aXJlKCcuL3Jlc3VsdCcpO1xuXG52YXIgbW96aWxsYSA9IHJlcXVpcmUoJ3NvdXJjZS1tYXAnKTtcbnZhciBCYXNlNjQgID0gcmVxdWlyZSgnanMtYmFzZTY0JykuQmFzZTY0O1xudmFyIHBhdGggICAgPSByZXF1aXJlKCdwYXRoJyk7XG5cbi8vIEFsbCB0b29scyB0byBnZW5lcmF0ZSBzb3VyY2UgbWFwc1xudmFyIE1hcEdlbmVyYXRvciA9IChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBQUlMkMCA9IChmdW5jdGlvbihvLHQpe29bXCJfX3Byb3RvX19cIl09e1wiYVwiOnR9O3JldHVybiBvW1wiYVwiXT09PXR9KSh7fSx7fSk7dmFyIERQJDAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7dmFyIEdPUEQkMCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7dmFyIE1JWElOJDAgPSBmdW5jdGlvbih0LHMpe2Zvcih2YXIgcCBpbiBzKXtpZihzLmhhc093blByb3BlcnR5KHApKXtEUCQwKHQscCxHT1BEJDAocyxwKSk7fX1yZXR1cm4gdH07dmFyIHByb3RvJDA9e307XG4gICAgZnVuY3Rpb24gTWFwR2VuZXJhdG9yKHJvb3QsIG9wdHMpIHtcbiAgICAgICAgdGhpcy5yb290ICAgID0gcm9vdDtcbiAgICAgICAgdGhpcy5vcHRzICAgID0gb3B0cztcbiAgICAgICAgdGhpcy5tYXBPcHRzID0gb3B0cy5tYXAgfHwgeyB9O1xuICAgIH1EUCQwKE1hcEdlbmVyYXRvcixcInByb3RvdHlwZVwiLHtcImNvbmZpZ3VyYWJsZVwiOmZhbHNlLFwiZW51bWVyYWJsZVwiOmZhbHNlLFwid3JpdGFibGVcIjpmYWxzZX0pO1xuXG4gICAgLy8gU2hvdWxkIG1hcCBiZSBnZW5lcmF0ZWRcbiAgICBwcm90byQwLmlzTWFwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggdHlwZW9mKHRoaXMub3B0cy5tYXApICE9ICd1bmRlZmluZWQnICkge1xuICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5vcHRzLm1hcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByZXZpb3VzKCkubGVuZ3RoID4gMDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBSZXR1cm4gc291cmNlIG1hcCBhcnJheXMgZnJvbSBwcmV2aW91cyBjb21waWxhdGlvbiBzdGVwIChsaWtlIFNhc3MpXG4gICAgcHJvdG8kMC5wcmV2aW91cyA9IGZ1bmN0aW9uKCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgICBpZiAoICF0aGlzLnByZXZpb3VzTWFwcyApIHtcbiAgICAgICAgICAgIHRoaXMucHJldmlvdXNNYXBzID0gW107XG4gICAgICAgICAgICB0aGlzLnJvb3QuZWFjaEluc2lkZSggZnVuY3Rpb24obm9kZSkgIHtcbiAgICAgICAgICAgICAgICBpZiAoIG5vZGUuc291cmNlICYmIG5vZGUuc291cmNlLm1hcCApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzJDAucHJldmlvdXNNYXBzLmluZGV4T2Yobm9kZS5zb3VyY2UubWFwKSA9PSAtMSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMkMC5wcmV2aW91c01hcHMucHVzaChub2RlLnNvdXJjZS5tYXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5wcmV2aW91c01hcHM7XG4gICAgfTtcblxuICAgIC8vIFNob3VsZCB3ZSBpbmxpbmUgc291cmNlIG1hcCB0byBhbm5vdGF0aW9uIGNvbW1lbnRcbiAgICBwcm90byQwLmlzSW5saW5lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggdHlwZW9mKHRoaXMubWFwT3B0cy5pbmxpbmUpICE9ICd1bmRlZmluZWQnICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwT3B0cy5pbmxpbmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucHJldmlvdXMoKS5zb21lKCBmdW5jdGlvbihpICkge3JldHVybiBpLmlubGluZX0gKTtcbiAgICB9O1xuXG4gICAgLy8gU2hvdWxkIHdlIHNldCBzb3VyY2VzQ29udGVudFxuICAgIHByb3RvJDAuaXNTb3VyY2VzQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIHR5cGVvZih0aGlzLm1hcE9wdHMuc291cmNlc0NvbnRlbnQpICE9ICd1bmRlZmluZWQnICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwT3B0cy5zb3VyY2VzQ29udGVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wcmV2aW91cygpLnNvbWUoIGZ1bmN0aW9uKGkgKSB7cmV0dXJuIGkud2l0aENvbnRlbnQoKX0gKTtcbiAgICB9O1xuXG4gICAgLy8gQ2xlYXIgc291cmNlIG1hcCBhbm5vdGF0aW9uIGNvbW1lbnRcbiAgICBwcm90byQwLmNsZWFyQW5ub3RhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbGFzdCA9IHRoaXMucm9vdC5sYXN0O1xuICAgICAgICBpZiAoICFsYXN0ICkgcmV0dXJuO1xuICAgICAgICBpZiAoIGxhc3QudHlwZSAhPSAnY29tbWVudCcgKSByZXR1cm47XG5cbiAgICAgICAgaWYgKCBsYXN0LnRleHQubWF0Y2goL14jIHNvdXJjZU1hcHBpbmdVUkw9LykgKSB7XG4gICAgICAgICAgICBsYXN0LnJlbW92ZVNlbGYoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBTZXQgb3JpZ2luIENTUyBjb250ZW50XG4gICAgcHJvdG8kMC5zZXRTb3VyY2VzQ29udGVudCA9IGZ1bmN0aW9uKCkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgICB2YXIgYWxyZWFkeSA9IHsgfTtcbiAgICAgICAgdGhpcy5yb290LmVhY2hJbnNpZGUoIGZ1bmN0aW9uKG5vZGUpICB7XG4gICAgICAgICAgICB2YXIgZmlsZSA9IG5vZGUuc291cmNlLmZpbGUgfHwgbm9kZS5zb3VyY2UuaWQ7XG4gICAgICAgICAgICBpZiAoIG5vZGUuc291cmNlICYmICFhbHJlYWR5W2ZpbGVdICkge1xuICAgICAgICAgICAgICAgIGFscmVhZHlbZmlsZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciByZWxhdGl2ZSA9IHRoaXMkMC5yZWxhdGl2ZShmaWxlKTtcbiAgICAgICAgICAgICAgICB0aGlzJDAubWFwLnNldFNvdXJjZUNvbnRlbnQocmVsYXRpdmUsIG5vZGUuc291cmNlLmNvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gQXBwbHkgc291cmNlIG1hcCBmcm9tIHByZXZpb3VzIGNvbXBpbGF0aW9uIHN0ZXAgKGxpa2UgU2FzcylcbiAgICBwcm90byQwLmFwcGx5UHJldk1hcHMgPSBmdW5jdGlvbigpIHt2YXIgU19JVEVSJDAgPSB0eXBlb2YgU3ltYm9sIT09J3VuZGVmaW5lZCcmJlN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yfHwnQEBpdGVyYXRvcic7dmFyIFNfTUFSSyQwID0gdHlwZW9mIFN5bWJvbCE9PSd1bmRlZmluZWQnJiZTeW1ib2wmJlN5bWJvbFtcIl9fc2V0T2JqZWN0U2V0dGVyX19cIl07ZnVuY3Rpb24gR0VUX0lURVIkMCh2KXtpZih2KXtpZihBcnJheS5pc0FycmF5KHYpKXJldHVybiAwO3ZhciBmO2lmKFNfTUFSSyQwKVNfTUFSSyQwKHYpO2lmKHR5cGVvZiB2PT09J29iamVjdCcmJnR5cGVvZiAoZj12W1NfSVRFUiQwXSk9PT0nZnVuY3Rpb24nKXtpZihTX01BUkskMClTX01BUkskMCh2b2lkIDApO3JldHVybiBmLmNhbGwodik7fWlmKFNfTUFSSyQwKVNfTUFSSyQwKHZvaWQgMCk7aWYoKHYrJycpPT09J1tvYmplY3QgR2VuZXJhdG9yXScpcmV0dXJuIHY7fXRocm93IG5ldyBFcnJvcih2KycgaXMgbm90IGl0ZXJhYmxlJyl9O3ZhciAkRCQwO3ZhciAkRCQxO3ZhciAkRCQyO3ZhciAkRCQzO1xuICAgICAgICAkRCQzID0gKHRoaXMucHJldmlvdXMoKSk7JEQkMCA9IEdFVF9JVEVSJDAoJEQkMyk7JEQkMiA9ICREJDAgPT09IDA7JEQkMSA9ICgkRCQyID8gJEQkMy5sZW5ndGggOiB2b2lkIDApO2ZvciAoIHZhciBwcmV2IDskRCQyID8gKCREJDAgPCAkRCQxKSA6ICEoJEQkMSA9ICREJDBbXCJuZXh0XCJdKCkpW1wiZG9uZVwiXTspe3ByZXYgPSAoJEQkMiA/ICREJDNbJEQkMCsrXSA6ICREJDFbXCJ2YWx1ZVwiXSk7XG4gICAgICAgICAgICB2YXIgZnJvbSA9IHRoaXMucmVsYXRpdmUocHJldi5maWxlKTtcbiAgICAgICAgICAgIHZhciByb290ID0gcHJldi5yb290IHx8IHBhdGguZGlybmFtZShwcmV2LmZpbGUpO1xuICAgICAgICAgICAgdmFyIG1hcDtcblxuICAgICAgICAgICAgaWYgKCB0aGlzLm1hcE9wdHMuc291cmNlc0NvbnRlbnQgPT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgIG1hcCA9IG5ldyBtb3ppbGxhLlNvdXJjZU1hcENvbnN1bWVyKHByZXYudGV4dCk7XG4gICAgICAgICAgICAgICAgbWFwLnNvdXJjZXNDb250ZW50ID0gbWFwLnNvdXJjZXNDb250ZW50Lm1hcCggZnVuY3Rpb24oaSApIHtyZXR1cm4gbnVsbH0gKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWFwID0gcHJldi5jb25zdW1lcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm1hcC5hcHBseVNvdXJjZU1hcChtYXAsIGZyb20sIHRoaXMucmVsYXRpdmUocm9vdCkpO1xuICAgICAgICB9OyREJDAgPSAkRCQxID0gJEQkMiA9ICREJDMgPSB2b2lkIDA7XG4gICAgfTtcblxuICAgIC8vIFNob3VsZCB3ZSBhZGQgYW5ub3RhdGlvbiBjb21tZW50XG4gICAgcHJvdG8kMC5pc0Fubm90YXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCB0aGlzLmlzSW5saW5lKCkgKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZSA7XG4gICAgICAgIH0gZWxzZSBpZiAoIHR5cGVvZih0aGlzLm1hcE9wdHMuYW5ub3RhdGlvbikgIT0gJ3VuZGVmaW5lZCcgKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXBPcHRzLmFubm90YXRpb247XG4gICAgICAgIH0gZWxzZSBpZiAoIHRoaXMucHJldmlvdXMoKS5sZW5ndGggKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmV2aW91cygpLnNvbWUoIGZ1bmN0aW9uKGkgKSB7cmV0dXJuIGkuYW5ub3RhdGlvbn0gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIEFkZCBzb3VyY2UgbWFwIGFubm90YXRpb24gY29tbWVudCBpZiBpdCBpcyBuZWVkZWRcbiAgICBwcm90byQwLmFkZEFubm90YXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNvbnRlbnQ7XG5cbiAgICAgICAgaWYgKCB0aGlzLmlzSW5saW5lKCkgKSB7XG4gICAgICAgICAgICBjb250ZW50ID0gXCJkYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgQmFzZTY0LmVuY29kZSggdGhpcy5tYXAudG9TdHJpbmcoKSApO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoIHR5cGVvZih0aGlzLm1hcE9wdHMuYW5ub3RhdGlvbikgPT0gJ3N0cmluZycgKSB7XG4gICAgICAgICAgICBjb250ZW50ID0gdGhpcy5tYXBPcHRzLmFubm90YXRpb247XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSB0aGlzLm91dHB1dEZpbGUoKSArICcubWFwJztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9XCIgKyBjb250ZW50ICsgXCIgKi9cIjtcbiAgICB9O1xuXG4gICAgLy8gUmV0dXJuIG91dHB1dCBDU1MgZmlsZSBwYXRoXG4gICAgcHJvdG8kMC5vdXRwdXRGaWxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdHMudG8gPyB0aGlzLnJlbGF0aXZlKHRoaXMub3B0cy50bykgOiAndG8uY3NzJztcbiAgICB9O1xuXG4gICAgLy8gUmV0dXJuIFJlc3VsdCBvYmplY3Qgd2l0aCBtYXBcbiAgICBwcm90byQwLmdlbmVyYXRlTWFwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc3RyaW5naWZ5KCk7XG4gICAgICAgIGlmICggdGhpcy5pc1NvdXJjZXNDb250ZW50KCkgKSAgICB0aGlzLnNldFNvdXJjZXNDb250ZW50KCk7XG4gICAgICAgIGlmICggdGhpcy5wcmV2aW91cygpLmxlbmd0aCA+IDAgKSB0aGlzLmFwcGx5UHJldk1hcHMoKTtcbiAgICAgICAgaWYgKCB0aGlzLmlzQW5ub3RhdGlvbigpICkgICAgICAgIHRoaXMuYWRkQW5ub3RhdGlvbigpO1xuXG4gICAgICAgIGlmICggdGhpcy5pc0lubGluZSgpICkge1xuICAgICAgICAgICAgcmV0dXJuIFt0aGlzLmNzc107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW3RoaXMuY3NzLCB0aGlzLm1hcF07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gUmV0dXJuIHBhdGggcmVsYXRpdmUgZnJvbSBvdXRwdXQgQ1NTIGZpbGVcbiAgICBwcm90byQwLnJlbGF0aXZlID0gZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICB2YXIgZnJvbSA9IHRoaXMub3B0cy50byA/IHBhdGguZGlybmFtZSh0aGlzLm9wdHMudG8pIDogJy4nO1xuXG4gICAgICAgIGlmICggdHlwZW9mKHRoaXMubWFwT3B0cy5hbm5vdGF0aW9uKSA9PSAnc3RyaW5nJyApIHtcbiAgICAgICAgICAgIGZyb20gPSBwYXRoLmRpcm5hbWUoIHBhdGgucmVzb2x2ZShmcm9tLCB0aGlzLm1hcE9wdHMuYW5ub3RhdGlvbikgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZpbGUgPSBwYXRoLnJlbGF0aXZlKGZyb20sIGZpbGUpO1xuICAgICAgICBpZiAoIHBhdGguc2VwID09ICdcXFxcJyApIHtcbiAgICAgICAgICAgIHJldHVybiBmaWxlLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIFJldHVybiBwYXRoIG9mIG5vZGUgc291cmNlIGZvciBtYXBcbiAgICBwcm90byQwLnNvdXJjZVBhdGggPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbGF0aXZlKG5vZGUuc291cmNlLmZpbGUgfHwgbm9kZS5zb3VyY2UuaWQpO1xuICAgIH07XG5cbiAgICAvLyBSZXR1cm4gQ1NTIHN0cmluZyBhbmQgc291cmNlIG1hcFxuICAgIHByb3RvJDAuc3RyaW5naWZ5ID0gZnVuY3Rpb24oKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICAgIHRoaXMuY3NzID0gJyc7XG4gICAgICAgIHRoaXMubWFwID0gbmV3IG1vemlsbGEuU291cmNlTWFwR2VuZXJhdG9yKHsgZmlsZTogdGhpcy5vdXRwdXRGaWxlKCkgfSk7XG5cbiAgICAgICAgdmFyIGxpbmUgICA9IDE7XG4gICAgICAgIHZhciBjb2x1bW4gPSAxO1xuXG4gICAgICAgIHZhciBsaW5lcywgbGFzdDtcbiAgICAgICAgdmFyIGJ1aWxkZXIgPSBmdW5jdGlvbihzdHIsIG5vZGUsIHR5cGUpICB7XG4gICAgICAgICAgICB0aGlzJDAuY3NzICs9IHN0cjtcblxuICAgICAgICAgICAgaWYgKCBub2RlICYmIG5vZGUuc291cmNlICYmIG5vZGUuc291cmNlLnN0YXJ0ICYmIHR5cGUgIT0gJ2VuZCcgKSB7XG4gICAgICAgICAgICAgICAgdGhpcyQwLm1hcC5hZGRNYXBwaW5nKHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiAgIHRoaXMkMC5zb3VyY2VQYXRoKG5vZGUpLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogICBub2RlLnNvdXJjZS5zdGFydC5saW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiBub2RlLnNvdXJjZS5zdGFydC5jb2x1bW4gLSAxXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogICBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiBjb2x1bW4gLSAxXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGluZXMgPSBzdHIubWF0Y2goL1xcbi9nKTtcbiAgICAgICAgICAgIGlmICggbGluZXMgKSB7XG4gICAgICAgICAgICAgICAgbGluZSAgKz0gbGluZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGxhc3QgICA9IHN0ci5sYXN0SW5kZXhPZihcIlxcblwiKTtcbiAgICAgICAgICAgICAgICBjb2x1bW4gPSBzdHIubGVuZ3RoIC0gbGFzdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29sdW1uID0gY29sdW1uICsgc3RyLmxlbmd0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCBub2RlICYmIG5vZGUuc291cmNlICYmIG5vZGUuc291cmNlLmVuZCAmJiB0eXBlICE9ICdzdGFydCcgKSB7XG4gICAgICAgICAgICAgIHRoaXMkMC5tYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgICAgICAgICBzb3VyY2U6ICAgdGhpcyQwLnNvdXJjZVBhdGgobm9kZSksXG4gICAgICAgICAgICAgICAgICBvcmlnaW5hbDoge1xuICAgICAgICAgICAgICAgICAgICAgIGxpbmU6ICAgbm9kZS5zb3VyY2UuZW5kLmxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiBub2RlLnNvdXJjZS5lbmQuY29sdW1uXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgICAgICAgICAgICAgbGluZTogICBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogY29sdW1uXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucm9vdC5zdHJpbmdpZnkoYnVpbGRlcik7XG4gICAgfTtcblxuICAgIC8vIFJldHVybiBSZXN1bHQgb2JqZWN0IHdpdGggb3Igd2l0aG91dCBtYXBcbiAgICBwcm90byQwLmdlbmVyYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuY2xlYXJBbm5vdGF0aW9uKCk7XG5cbiAgICAgICAgaWYgKCB0aGlzLmlzTWFwKCkgKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZU1hcCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFt0aGlzLnJvb3QudG9TdHJpbmcoKV07XG4gICAgICAgIH1cbiAgICB9O1xuTUlYSU4kMChNYXBHZW5lcmF0b3IucHJvdG90eXBlLHByb3RvJDApO3Byb3RvJDA9dm9pZCAwO3JldHVybiBNYXBHZW5lcmF0b3I7fSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBHZW5lcmF0b3I7XG4iLCIvLyBSZWN1cnNpdmx5IGNsb25lIG9iamVjdHNcbnZhciBjbG9uZSA9IGZ1bmN0aW9uIChvYmosIHBhcmVudCkge1xuICAgIGlmICggdHlwZW9mKG9iaikgIT0gJ29iamVjdCcgKSByZXR1cm4gb2JqO1xuICAgIHZhciBjbG9uZWQgPSBuZXcgb2JqLmNvbnN0cnVjdG9yKCk7XG5cbiAgICBmb3IgKCB2YXIgbmFtZSBpbiBvYmogKSB7XG4gICAgICAgIGlmICggIW9iai5oYXNPd25Qcm9wZXJ0eShuYW1lKSApIGNvbnRpbnVlO1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmpbbmFtZV07XG5cbiAgICAgICAgaWYgKCBuYW1lID09ICdwYXJlbnQnICYmIHR5cGVvZih2YWx1ZSkgPT0gJ29iamVjdCcgKSB7XG4gICAgICAgICAgICBpZiAocGFyZW50KSBjbG9uZWRbbmFtZV0gPSBwYXJlbnQ7XG4gICAgICAgIH0gZWxzZSBpZiAoIG5hbWUgPT0gJ3NvdXJjZScgKSB7XG4gICAgICAgICAgICBjbG9uZWRbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmICggdmFsdWUgaW5zdGFuY2VvZiBBcnJheSApIHtcbiAgICAgICAgICAgIGNsb25lZFtuYW1lXSA9IHZhbHVlLm1hcCggZnVuY3Rpb24oaSApIHtyZXR1cm4gY2xvbmUoaSwgY2xvbmVkKX0gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsb25lZFtuYW1lXSA9IGNsb25lKHZhbHVlLCBjbG9uZWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lZDtcbn07XG5cbi8vIElzIGBvYmpgIGhhcyBhbGwga2V5cyBmcm9tIGBrZXlzYC4gUmV0dXJuIGBmYWxzZWAgb2Ygb2JqZWN0IHdpdGgga2V5cyBmcm9tXG4vLyBga2V5c2AgYW5kIHZhbHVlcyBmcm9tIGBvYmpgLlxudmFyIGtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzKSB7XG4gICAgdmFyIGFsbCA9IHsgfTtcblxuICAgIGZvciAoIHZhciBrZXkgaW4ga2V5cyApIHtcbiAgICAgICAgaWYgKCB0eXBlb2Yob2JqW2tleV0pID09ICd1bmRlZmluZWQnICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWxsW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhbGw7XG59O1xuXG4vLyBTb21lIGNvbW1vbiBtZXRob2RzIGZvciBhbGwgQ1NTIG5vZGVzXG52YXIgTm9kZSA9IChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBQUlMkMCA9IChmdW5jdGlvbihvLHQpe29bXCJfX3Byb3RvX19cIl09e1wiYVwiOnR9O3JldHVybiBvW1wiYVwiXT09PXR9KSh7fSx7fSk7dmFyIERQJDAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7dmFyIEdPUEQkMCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7dmFyIE1JWElOJDAgPSBmdW5jdGlvbih0LHMpe2Zvcih2YXIgcCBpbiBzKXtpZihzLmhhc093blByb3BlcnR5KHApKXtEUCQwKHQscCxHT1BEJDAocyxwKSk7fX1yZXR1cm4gdH07dmFyIHByb3RvJDA9e307XG4gICAgZnVuY3Rpb24gTm9kZSgpIHt2YXIgZGVmYXVsdHMgPSBhcmd1bWVudHNbMF07aWYoZGVmYXVsdHMgPT09IHZvaWQgMClkZWZhdWx0cyA9IHsgfTtcbiAgICAgICAgZm9yICggdmFyIG5hbWUgaW4gZGVmYXVsdHMgKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gZGVmYXVsdHNbbmFtZV07XG4gICAgICAgIH1cbiAgICB9RFAkMChOb2RlLFwicHJvdG90eXBlXCIse1wiY29uZmlndXJhYmxlXCI6ZmFsc2UsXCJlbnVtZXJhYmxlXCI6ZmFsc2UsXCJ3cml0YWJsZVwiOmZhbHNlfSk7XG5cbiAgICAvLyBSZW1vdmUgdGhpcyBub2RlIGZyb20gcGFyZW50XG4gICAgLy9cbiAgICAvLyAgIGRlY2wucmVtb3ZlU2VsZigpO1xuICAgIC8vXG4gICAgLy8gTm90ZSwgdGhhdCByZW1vdmluZyBieSBpbmRleCBpcyBmYXN0ZXI6XG4gICAgLy9cbiAgICAvLyAgIHJ1bGUuZWFjaCggKGRlY2wsIGkpID0+IHJ1bGUucmVtb3ZlKGkpICk7XG4gICAgcHJvdG8kMC5yZW1vdmVTZWxmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggdGhpcy5wYXJlbnQgKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8vIFNob3J0Y3V0IHRvIGluc2VydCBub2RlcyBiZWZvcmUgYW5kIHJlbW92ZSBzZWxmLlxuICAgIC8vXG4gICAgLy8gICBpbXBvcnROb2RlLnJlcGxhY2UoIGxvYWRlZFJvb3QgKTtcbiAgICBwcm90byQwLnJlcGxhY2UgPSBmdW5jdGlvbihub2Rlcykge1xuICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUodGhpcywgbm9kZXMpO1xuICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmUodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAvLyBSZXR1cm4gQ1NTIHN0cmluZyBvZiBjdXJyZW50IG5vZGVcbiAgICAvL1xuICAgIC8vICAgZGVjbC50b1N0cmluZygpOyAvLz0+IFwiICBjb2xvcjogYmxhY2tcIlxuICAgIHByb3RvJDAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlc3VsdCAgPSAnJztcbiAgICAgICAgdmFyIGJ1aWxkZXIgPSBmdW5jdGlvbihzdHIpICB7cmV0dXJuIHJlc3VsdCArPSBzdHJ9O1xuICAgICAgICB0aGlzLnN0cmluZ2lmeShidWlsZGVyKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLy8gQ2xvbmUgY3VycmVudCBub2RlXG4gICAgLy9cbiAgICAvLyAgIHJ1bGUuYXBwZW5kKCBkZWNsLmNsb25lKCkgKTtcbiAgICAvL1xuICAgIC8vIFlvdSBjYW4gb3ZlcnJpZGUgcHJvcGVydGllcyB3aGlsZSBjbG9uaW5nOlxuICAgIC8vXG4gICAgLy8gICBydWxlLmFwcGVuZCggZGVjbC5jbG9uZSh7IHZhbHVlOiAnMCcgfSkgKTtcbiAgICBwcm90byQwLmNsb25lID0gZnVuY3Rpb24oKSB7dmFyIG92ZXJyaWRlcyA9IGFyZ3VtZW50c1swXTtpZihvdmVycmlkZXMgPT09IHZvaWQgMClvdmVycmlkZXMgPSB7IH07XG4gICAgICAgIHZhciBjbG9uZWQgPSBjbG9uZSh0aGlzKTtcbiAgICAgICAgZm9yICggdmFyIG5hbWUgaW4gb3ZlcnJpZGVzICkge1xuICAgICAgICAgICAgY2xvbmVkW25hbWVdID0gb3ZlcnJpZGVzW25hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgfTtcblxuICAgIC8vIFJlbW92ZSBgcGFyZW50YCBub2RlIG9uIGNsb25pbmcgdG8gZml4IGNpcmN1bGFyIHN0cnVjdHVyZXNcbiAgICBwcm90byQwLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZml4ZWQgPSB7IH07XG5cbiAgICAgICAgZm9yICggdmFyIG5hbWUgaW4gdGhpcyApIHtcbiAgICAgICAgICAgIGlmICggIXRoaXMuaGFzT3duUHJvcGVydHkobmFtZSkgKSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmICggbmFtZSA9PSAncGFyZW50JyApIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpc1tuYW1lXTtcblxuICAgICAgICAgICAgaWYgKCB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5ICkge1xuICAgICAgICAgICAgICAgIGZpeGVkW25hbWVdID0gdmFsdWUubWFwKCBmdW5jdGlvbihpKSAge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHR5cGVvZihpKSA9PSAnb2JqZWN0JyAmJiBpLnRvSlNPTikgPyBpLnRvSlNPTigpIDogaTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHR5cGVvZih2YWx1ZSkgPT0gJ29iamVjdCcgJiYgdmFsdWUudG9KU09OICkge1xuICAgICAgICAgICAgICAgIGZpeGVkW25hbWVdID0gdmFsdWUudG9KU09OKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZpeGVkW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZml4ZWQ7XG4gICAgfTtcblxuICAgIC8vIERlZmF1bHQgY29kZSBzdHlsZVxuICAgIHByb3RvJDAuZGVmYXVsdFN0eWxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7IH07XG4gICAgfTtcblxuICAgIC8vIEFsbG93IHRvIHNwbGl0IG5vZGUgd2l0aCBzYW1lIHR5cGUgYnkgb3RoZXIgY3JpdGVyYS5cbiAgICAvLyBGb3IgZXhhbXBsZSwgdG8gdXNlIGRpZmZlcmVudCBzdHlsZSBmb3IgYm9kaWxlc3MgYXQtcnVsZXMuXG4gICAgcHJvdG8kMC5zdHlsZVR5cGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZTtcbiAgICB9O1xuXG4gICAgLy8gQ29weSBjb2RlIHN0eWxlIGZyb20gZmlyc3Qgbm9kZSB3aXRoIHNhbWUgdHlwZVxuICAgIHByb3RvJDAuc3R5bGUgPSBmdW5jdGlvbigpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgICAgdmFyIHR5cGUgICAgID0gdGhpcy5zdHlsZVR5cGUoKTtcbiAgICAgICAgdmFyIGRlZmF1bHRzID0gdGhpcy5kZWZhdWx0U3R5bGUodHlwZSk7XG5cbiAgICAgICAgdmFyIGFsbCA9IGtleXModGhpcywgZGVmYXVsdHMpO1xuICAgICAgICBpZiAoIGFsbCApIHJldHVybiBhbGw7XG5cbiAgICAgICAgdmFyIHN0eWxlZCA9IGRlZmF1bHRzO1xuICAgICAgICBpZiAoIHRoaXMucGFyZW50ICkge1xuXG4gICAgICAgICAgICB2YXIgcm9vdCA9IHRoaXM7XG4gICAgICAgICAgICB3aGlsZSAoIHJvb3QucGFyZW50ICkgcm9vdCA9IHJvb3QucGFyZW50O1xuXG4gICAgICAgICAgICBpZiAoICFyb290LnN0eWxlQ2FjaGUgKSByb290LnN0eWxlQ2FjaGUgPSB7IH07XG4gICAgICAgICAgICBpZiAoIHJvb3Quc3R5bGVDYWNoZVt0eXBlXSApIHtcbiAgICAgICAgICAgICAgICBzdHlsZWQgPSByb290LnN0eWxlQ2FjaGVbdHlwZV07XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcm9vdC5lYWNoSW5zaWRlKCBmdW5jdGlvbihhbm90aGVyKSAge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGFub3RoZXIuc3R5bGVUeXBlKCkgIT0gdHlwZSApIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzJDAgPT0gYW5vdGhlciApICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICBhbGwgPSBrZXlzKGFub3RoZXIsIHN0eWxlZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICggYWxsICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVkID0gYWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByb290LnN0eWxlQ2FjaGVbdHlwZV0gPSBzdHlsZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWVyZ2UgPSB7IH07XG4gICAgICAgIGZvciAoIHZhciBrZXkgaW4gc3R5bGVkICkge1xuICAgICAgICAgICAgaWYgKCB0eXBlb2YodGhpc1trZXldKSA9PSAndW5kZWZpbmVkJyApIHtcbiAgICAgICAgICAgICAgICBtZXJnZVtrZXldID0gc3R5bGVkW2tleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lcmdlW2tleV0gPSB0aGlzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWVyZ2U7XG4gICAgfTtcblxuICAgIC8vIFVzZSByYXcgdmFsdWUgaWYgb3JpZ2luIHdhcyBub3QgY2hhbmdlZFxuICAgIHByb3RvJDAuc3RyaW5naWZ5UmF3ID0gZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzW3Byb3BdO1xuICAgICAgICB2YXIgcmF3ICAgPSB0aGlzWydfJyArIHByb3BdO1xuICAgICAgICBpZiAoIHJhdyAmJiByYXcudmFsdWUgPT09IHZhbHVlICkge1xuICAgICAgICAgICAgcmV0dXJuIHJhdy5yYXc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuTUlYSU4kMChOb2RlLnByb3RvdHlwZSxwcm90byQwKTtwcm90byQwPXZvaWQgMDtyZXR1cm4gTm9kZTt9KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5vZGU7XG4iLCJ2YXIgQ3NzU3ludGF4RXJyb3IgPSByZXF1aXJlKCcuL2Nzcy1zeW50YXgtZXJyb3InKTtcbnZhciBQcmV2aW91c01hcCAgICA9IHJlcXVpcmUoJy4vcHJldmlvdXMtbWFwJyk7XG52YXIgRGVjbGFyYXRpb24gICAgPSByZXF1aXJlKCcuL2RlY2xhcmF0aW9uJyk7XG52YXIgQ29tbWVudCAgICAgICAgPSByZXF1aXJlKCcuL2NvbW1lbnQnKTtcbnZhciBBdFJ1bGUgICAgICAgICA9IHJlcXVpcmUoJy4vYXQtcnVsZScpO1xudmFyIFJvb3QgICAgICAgICAgID0gcmVxdWlyZSgnLi9yb290Jyk7XG52YXIgUnVsZSAgICAgICAgICAgPSByZXF1aXJlKCcuL3J1bGUnKTtcblxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbnZhciBpc1NwYWNlID0gL1xccy87XG5cbnZhciBzZXF1ZW5jZSA9IDA7XG5cbi8vIENTUyBwYXJzZXJcbnZhciBQYXJzZXIgPSAoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgUFJTJDAgPSAoZnVuY3Rpb24obyx0KXtvW1wiX19wcm90b19fXCJdPXtcImFcIjp0fTtyZXR1cm4gb1tcImFcIl09PT10fSkoe30se30pO3ZhciBEUCQwID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O3ZhciBHT1BEJDAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3ZhciBNSVhJTiQwID0gZnVuY3Rpb24odCxzKXtmb3IodmFyIHAgaW4gcyl7aWYocy5oYXNPd25Qcm9wZXJ0eShwKSl7RFAkMCh0LHAsR09QRCQwKHMscCkpO319cmV0dXJuIHR9O3ZhciBwcm90byQwPXt9O1xuICAgIGZ1bmN0aW9uIFBhcnNlcihzb3VyY2UpIHt2YXIgb3B0cyA9IGFyZ3VtZW50c1sxXTtpZihvcHRzID09PSB2b2lkIDApb3B0cyA9IHsgfTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2UudG9TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5vcHRzICAgPSBvcHRzO1xuXG4gICAgICAgIHNlcXVlbmNlICAgICs9IDE7XG4gICAgICAgIHRoaXMuaWQgICAgICA9ICgobmV3IERhdGUoKSkudmFsdWVPZigpICogMTAgICsgc2VxdWVuY2UpLnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMucm9vdCAgICA9IG5ldyBSb290KCk7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMucm9vdDtcbiAgICAgICAgdGhpcy5wYXJlbnRzID0gW3RoaXMuY3VycmVudF07XG4gICAgICAgIHRoaXMudHlwZSAgICA9ICdydWxlcyc7XG4gICAgICAgIHRoaXMudHlwZXMgICA9IFt0aGlzLnR5cGVdO1xuXG4gICAgICAgIHRoaXMucG9zICAgID0gLTE7XG4gICAgICAgIHRoaXMubGluZSAgID0gMTtcbiAgICAgICAgdGhpcy5saW5lcyAgPSBbXTtcbiAgICAgICAgdGhpcy5jb2x1bW4gPSAwO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9ICcnO1xuICAgIH1EUCQwKFBhcnNlcixcInByb3RvdHlwZVwiLHtcImNvbmZpZ3VyYWJsZVwiOmZhbHNlLFwiZW51bWVyYWJsZVwiOmZhbHNlLFwid3JpdGFibGVcIjpmYWxzZX0pO1xuXG4gICAgcHJvdG8kMC5sb29wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubmV4dCAgPSB0aGlzLnNvdXJjZVswXTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHRoaXMuc291cmNlLmxlbmd0aCAtIDE7XG4gICAgICAgIHdoaWxlICggdGhpcy5wb3MgPCBsZW5ndGggKSB7XG4gICAgICAgICAgICB0aGlzLm1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMubmV4dExldHRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW5kRmlsZSgpO1xuICAgIH07XG5cbiAgICBwcm90byQwLnNldE1hcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbWFwID0gbmV3IFByZXZpb3VzTWFwKHRoaXMucm9vdCwgdGhpcy5vcHRzLCB0aGlzLmlkKTtcbiAgICAgICAgaWYgKCBtYXAudGV4dCApIHtcbiAgICAgICAgICAgIHRoaXMucm9vdC5wcmV2TWFwID0gbWFwO1xuICAgICAgICAgICAgdGhpcy5yb290LmVhY2hJbnNpZGUoIGZ1bmN0aW9uKGkgKSB7cmV0dXJuIGkuc291cmNlLm1hcCA9IG1hcH0gKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcm90byQwLm5leHRMZXR0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5TdHJpbmcoKSAgIHx8XG4gICAgICAgICAgICAgICB0aGlzLmluQ29tbWVudCgpICB8fFxuICAgICAgICAgICAgICAgdGhpcy5pc0NvbW1lbnQoKSAgfHxcbiAgICAgICAgICAgICAgIHRoaXMuaXNTdHJpbmcoKSAgIHx8XG5cbiAgICAgICAgICAgICAgIHRoaXMuaXNXcm9uZygpICAgIHx8XG5cbiAgICAgICAgICAgICAgIHRoaXMuaW5BdHJ1bGUoKSAgIHx8IHRoaXMuaXNBdHJ1bGUoKSAgIHx8XG4gICAgICAgICAgICAgICB0aGlzLmlzQmxvY2tFbmQoKSB8fFxuICAgICAgICAgICAgICAgdGhpcy5pblNlbGVjdG9yKCkgfHwgdGhpcy5pc1NlbGVjdG9yKCkgfHxcbiAgICAgICAgICAgICAgIHRoaXMuaW5Qcm9wZXJ0eSgpIHx8IHRoaXMuaXNQcm9wZXJ0eSgpIHx8IHRoaXMuaW5WYWx1ZSgpO1xuICAgIH07XG5cbiAgICAvLyBQYXJzZXJzXG5cbiAgICBwcm90byQwLmluU3RyaW5nID0gZnVuY3Rpb24oY2xvc2UpIHtcbiAgICAgICAgaWYgKCB0aGlzLnF1b3RlICkge1xuICAgICAgICAgICAgaWYgKCB0aGlzLmVzY2FwZSAmJiAhY2xvc2UgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lc2NhcGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHRoaXMubGV0dGVyID09ICdcXFxcJyApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVzY2FwZSA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB0aGlzLmxldHRlciA9PSB0aGlzLnF1b3RlIHx8IGNsb3NlICkge1xuICAgICAgICAgICAgICAgIHRoaXMucXVvdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnRyaW1tZWQgKz0gdGhpcy5sZXR0ZXI7XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByb3RvJDAuaXNTdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCB0aGlzLmxldHRlciA9PSAnXCInIHx8IHRoaXMubGV0dGVyID09IFwiJ1wiICkge1xuICAgICAgICAgICAgdGhpcy5xdW90ZSAgICA9IHRoaXMubGV0dGVyO1xuICAgICAgICAgICAgdGhpcy5xdW90ZVBvcyA9IHsgbGluZTogdGhpcy5saW5lLCBjb2x1bW46IHRoaXMuY29sdW1uIH07XG4gICAgICAgICAgICB0aGlzLnRyaW1tZWQgKz0gdGhpcy5sZXR0ZXI7XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByb3RvJDAuaW5Db21tZW50ID0gZnVuY3Rpb24oY2xvc2UpIHt2YXIgJEQkMDtcbiAgICAgICAgaWYgKCB0aGlzLmluc2lkZSgnY29tbWVudCcpICkge1xuICAgICAgICAgICAgaWYgKCBjbG9zZSB8fCAoIHRoaXMubGV0dGVyID09ICcqJyAmJiB0aGlzLm5leHQgPT0gJy8nICkgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRleHQsIGxlZnQsIHJpZ2h0O1xuICAgICAgICAgICAgICAgIHRleHQgPSAoJEQkMCA9IHRoaXMuc3RhcnRTcGFjZXModGhpcy5wcmV2QnVmZmVyKCkpKVswXSwgbGVmdCA9ICREJDBbMV0sICREJDA7XG4gICAgICAgICAgICAgICAgdGV4dCA9ICgkRCQwID0gdGhpcy5lbmRTcGFjZXModGV4dCkpWzBdLCByaWdodCA9ICREJDBbMV0sICREJDA7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnRleHQgID0gdGV4dDtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQubGVmdCAgPSBsZWZ0O1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5yaWdodCA9IHJpZ2h0O1xuICAgICAgICAgICAgICAgIHRoaXMubW92ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucG9wKCk7XG4gICAgICAgICAgICA7JEQkMCA9IHZvaWQgMH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoIHRoaXMuaW5zaWRlKCd2YWx1ZS1jb21tZW50JykgKSB7XG4gICAgICAgICAgICBpZiAoIGNsb3NlIHx8ICggdGhpcy5sZXR0ZXIgPT0gJyonICYmIHRoaXMubmV4dCA9PSAnLycgKSApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcFR5cGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByb3RvJDAuaXNDb21tZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggdGhpcy5sZXR0ZXIgPT0gJy8nICYmIHRoaXMubmV4dCA9PSAnKicgKSB7XG4gICAgICAgICAgICBpZiAoIHRoaXMuaW5zaWRlKCdydWxlcycpIHx8IHRoaXMuaW5zaWRlKCdkZWNscycpICkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdCggbmV3IENvbW1lbnQoKSApO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkVHlwZSgnY29tbWVudCcpO1xuICAgICAgICAgICAgICAgIHRoaXMubW92ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gJyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tbWVudFBvcyA9IHsgbGluZTogdGhpcy5saW5lLCBjb2x1bW46IHRoaXMuY29sdW1uIH07XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRUeXBlKCd2YWx1ZS1jb21tZW50Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJvdG8kMC5pc1dyb25nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggdGhpcy5sZXR0ZXIgPT0gJ3snICkge1xuICAgICAgICAgICAgaWYgKCB0aGlzLmluc2lkZSgnZGVjbHMnKSB8fCB0aGlzLmluc2lkZSgndmFsdWUnKSApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yKFwiVW5leHBlY3RlZCB7XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCB0aGlzLmluc2lkZSgncHJvcCcpICkge1xuICAgICAgICAgICAgaWYgKCB0aGlzLmxldHRlciA9PSAnfScgfHwgdGhpcy5sZXR0ZXIgPT0gJzsnKSB7XG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLm9wdHMuc2FmZSApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0cmluZyA9IHRoaXMuY3VycmVudC5iZWZvcmUgKyB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnBhcmVudC5kZWNscy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXIgICAgPSBzdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VtaWNvbG9uID0gdGhpcy5wcmV2U2VtaWNvbG9uO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoJ01pc3NpbmcgcHJvcGVydHkgdmFsdWUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJvdG8kMC5pc0F0cnVsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIHRoaXMubGV0dGVyID09ICdAJyAmJiB0aGlzLmluc2lkZSgncnVsZXMnKSApIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdCggbmV3IEF0UnVsZSgpICk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQubmFtZSA9ICcnO1xuICAgICAgICAgICAgdGhpcy5hZGRUeXBlKCdhdHJ1bGUtbmFtZScpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcm90byQwLmluQXRydWxlID0gZnVuY3Rpb24oY2xvc2UpIHt2YXIgJEQkMTtcbiAgICAgICAgaWYgKCB0aGlzLmluc2lkZSgnYXRydWxlLW5hbWUnKSApIHtcbiAgICAgICAgICAgIGlmICggdGhpcy5zcGFjZSgpICkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tBdHJ1bGVOYW1lKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXIgID0gdGhpcy5idWZmZXIuc3Vic3RyKHRoaXMuY3VycmVudC5uYW1lLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmltbWVkID0gJyc7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUeXBlKCdhdHJ1bGUtcGFyYW0nKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICggdGhpcy5sZXR0ZXIgPT0gJzsnIHx8IHRoaXMubGV0dGVyID09ICd7JyB8fCBjbG9zZSApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuYmV0d2VlbiA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tBdHJ1bGVOYW1lKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmRBdHJ1bGVQYXJhbXMoKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQubmFtZSArPSB0aGlzLmxldHRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoIHRoaXMuaW5zaWRlKCdhdHJ1bGUtcGFyYW0nKSApIHtcbiAgICAgICAgICAgIGlmICggdGhpcy5sZXR0ZXIgPT0gJzsnIHx8IHRoaXMubGV0dGVyID09ICd7JyB8fCBjbG9zZSApIHtcbiAgICAgICAgICAgICAgICB2YXIgcmF3LCBsZWZ0LCByaWdodDtcbiAgICAgICAgICAgICAgICByYXcgPSAoJEQkMSA9IHRoaXMuc3RhcnRTcGFjZXMoIHRoaXMucHJldkJ1ZmZlcigpICkpWzBdLCBsZWZ0ID0gJEQkMVsxXSwgJEQkMTtcbiAgICAgICAgICAgICAgICByYXcgPSAoJEQkMSA9IHRoaXMuZW5kU3BhY2VzKHJhdykpWzBdLCByaWdodCA9ICREJDFbMV0sICREJDE7XG4gICAgICAgICAgICAgICAgdGhpcy5yYXcoJ3BhcmFtcycsIHRoaXMudHJpbW1lZC50cmltKCksIHJhdyk7XG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLmN1cnJlbnQucGFyYW1zICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuYWZ0ZXJOYW1lID0gbGVmdDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LmJldHdlZW4gICA9IHJpZ2h0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5hZnRlck5hbWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LmJldHdlZW4gICA9IGxlZnQgKyByaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5lbmRBdHJ1bGVQYXJhbXMoKTtcblxuICAgICAgICAgICAgOyREJDEgPSB2b2lkIDB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpbW1lZCArPSB0aGlzLmxldHRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByb3RvJDAuaW5TZWxlY3RvciA9IGZ1bmN0aW9uKCkge3ZhciAkRCQyO1xuICAgICAgICBpZiAoIHRoaXMuaW5zaWRlKCdzZWxlY3RvcicpICkge1xuICAgICAgICAgICAgaWYgKCB0aGlzLmxldHRlciA9PSAneycgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhdywgc3BhY2VzO1xuICAgICAgICAgICAgICAgIHJhdyA9ICgkRCQyID0gdGhpcy5lbmRTcGFjZXMoIHRoaXMucHJldkJ1ZmZlcigpICkpWzBdLCBzcGFjZXMgPSAkRCQyWzFdLCAkRCQyO1xuICAgICAgICAgICAgICAgIHRoaXMucmF3KCdzZWxlY3RvcicsIHRoaXMudHJpbW1lZC50cmltKCksIHJhdyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LmJldHdlZW4gPSBzcGFjZXM7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW1pY29sb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciAgICA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VHlwZSgnZGVjbHMnKTtcbiAgICAgICAgICAgIDskRCQyID0gdm9pZCAwfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaW1tZWQgKz0gdGhpcy5sZXR0ZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByb3RvJDAuaXNTZWxlY3RvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoICF0aGlzLnNwYWNlKCkgJiYgdGhpcy5pbnNpZGUoJ3J1bGVzJykgKSB7XG4gICAgICAgICAgICB0aGlzLmluaXQoIG5ldyBSdWxlKCkgKTtcblxuICAgICAgICAgICAgaWYgKCB0aGlzLmxldHRlciA9PSAneycgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRUeXBlKCdkZWNscycpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5zZWxlY3RvciA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5iZXR3ZWVuICA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VtaWNvbG9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXIgICAgPSAnJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRUeXBlKCdzZWxlY3RvcicpO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyICA9IHRoaXMubGV0dGVyO1xuICAgICAgICAgICAgICAgIHRoaXMudHJpbW1lZCA9IHRoaXMubGV0dGVyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcm90byQwLmlzQmxvY2tFbmQgPSBmdW5jdGlvbihjbG9zZSkge3ZhciB0aGlzJDAgPSB0aGlzO1xuICAgICAgICBpZiAoIHRoaXMubGV0dGVyID09ICd9JyB8fCBjbG9zZSApIHtcbiAgICAgICAgICAgIGlmICggdGhpcy5wYXJlbnRzLmxlbmd0aCA9PSAxICkge1xuICAgICAgICAgICAgICAgIGlmICggIXRoaXMub3B0cy5zYWZlICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKCdVbmV4cGVjdGVkIH0nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICggdGhpcy5pbnNpZGUoJ3ZhbHVlJykgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZml4RW5kKCBmdW5jdGlvbigpICB7cmV0dXJuIHRoaXMkMC5pblZhbHVlKCdjbG9zZScpfSApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHRoaXMuaW5zaWRlKCdwcm9wJykgJiYgdGhpcy5vcHRzLnNhZmUgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5Qcm9wZXJ0eSgnY2xvc2UnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMuc2VtaWNvbG9uICkgdGhpcy5jdXJyZW50LnNlbWljb2xvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5hZnRlciA9IHRoaXMucHJldkJ1ZmZlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcm90byQwLmluUHJvcGVydHkgPSBmdW5jdGlvbihjbG9zZSkge1xuICAgICAgICBpZiAoIHRoaXMuaW5zaWRlKCdwcm9wJykgKSB7XG4gICAgICAgICAgICBpZiAoIHRoaXMubGV0dGVyID09ICc6JyB8fCBjbG9zZSApIHtcbiAgICAgICAgICAgICAgICBpZiAoIHRoaXMuYnVmZmVyWzBdID09ICcqJyB8fCB0aGlzLmJ1ZmZlclswXSA9PSAnXycgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5iZWZvcmUgKz0gdGhpcy5idWZmZXJbMF07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJpbW1lZCA9IHRoaXMudHJpbW1lZC5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyICA9IHRoaXMuYnVmZmVyLnN1YnN0cigxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQucHJvcCA9IHRoaXMudHJpbW1lZC50cmltKCk7XG4gICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHRoaXMuY3VycmVudC5wcm9wLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuYmV0d2VlbiA9IHRoaXMucHJldkJ1ZmZlcigpLnN1YnN0cihsZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gJyc7XG5cbiAgICAgICAgICAgICAgICBpZiAoIGNsb3NlICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQudmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFR5cGUoJ3ZhbHVlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudHJpbW1lZCA9ICcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICggdGhpcy5sZXR0ZXIgPT0gJ3snICkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoJ1VuZXhwZWN0ZWQgeyBpbiBkZWNscycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaW1tZWQgKz0gdGhpcy5sZXR0ZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByb3RvJDAuaXNQcm9wZXJ0eSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIHRoaXMuaW5zaWRlKCdkZWNscycpICYmICF0aGlzLnNwYWNlKCkgJiYgdGhpcy5sZXR0ZXIgIT0gJzsnICkge1xuICAgICAgICAgICAgdGhpcy5pbml0KCBuZXcgRGVjbGFyYXRpb24oKSApO1xuICAgICAgICAgICAgdGhpcy5hZGRUeXBlKCdwcm9wJyk7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciAgICAgICAgPSB0aGlzLmxldHRlcjtcbiAgICAgICAgICAgIHRoaXMudHJpbW1lZCAgICAgICA9IHRoaXMubGV0dGVyO1xuICAgICAgICAgICAgdGhpcy5wcmV2U2VtaWNvbG9uID0gdGhpcy5zZW1pY29sb247XG4gICAgICAgICAgICB0aGlzLnNlbWljb2xvbiAgICAgPSBmYWxzZTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJvdG8kMC5pblZhbHVlID0gZnVuY3Rpb24oY2xvc2UpIHt2YXIgJEQkMztcbiAgICAgICAgaWYgKCB0aGlzLmluc2lkZSgndmFsdWUnKSApIHtcbiAgICAgICAgICAgIGlmICggdGhpcy5sZXR0ZXIgPT0gJygnICkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5CcmFja2V0cyA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB0aGlzLmluQnJhY2tldHMgJiYgdGhpcy5sZXR0ZXIgPT0gJyknICkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5CcmFja2V0cyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoICh0aGlzLmxldHRlciA9PSAnOycgJiYgIXRoaXMuaW5CcmFja2V0cykgfHwgY2xvc2UgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLmxldHRlciA9PSAnOycgKSB0aGlzLnNlbWljb2xvbiA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmF3LCBzcGFjZXM7XG4gICAgICAgICAgICAgICAgcmF3ID0gKCREJDMgPSB0aGlzLnN0YXJ0U3BhY2VzKHRoaXMucHJldkJ1ZmZlcigpKSlbMF0sIHNwYWNlcyA9ICREJDNbMV0sICREJDM7XG4gICAgICAgICAgICAgICAgdmFyIHRyaW0gICAgICA9IHRoaXMudHJpbW1lZC50cmltKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIHJhdy5pbmRleE9mKCchaW1wb3J0YW50JykgIT0gLTEgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IHJhdy5tYXRjaCgvXFxzKyFpbXBvcnRhbnRcXHMqJC8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGNoICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LmltcG9ydGFudCAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Ll9pbXBvcnRhbnQgPSBtYXRjaFswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdyAgPSByYXcuc2xpY2UoMCwgLW1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmltID0gdHJpbS5yZXBsYWNlKC9cXHMrIWltcG9ydGFudCQvLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJhdygndmFsdWUnLCB0cmltLCByYXcpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5iZXR3ZWVuICs9ICc6JyArIHNwYWNlcztcbiAgICAgICAgICAgICAgICB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgOyREJDMgPSB2b2lkIDB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpbW1lZCArPSB0aGlzLmxldHRlcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJvdG8kMC5lbmRGaWxlID0gZnVuY3Rpb24oKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICAgIGlmICggdGhpcy5pbnNpZGUoJ2F0cnVsZS1wYXJhbScpIHx8IHRoaXMuaW5zaWRlKCdhdHJ1bGUtbmFtZScpICkge1xuICAgICAgICAgICAgdGhpcy5maXhFbmQoIGZ1bmN0aW9uKCkgIHtyZXR1cm4gdGhpcyQwLmluQXRydWxlKCdjbG9zZScpfSApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCB0aGlzLmluc2lkZSgnY29tbWVudCcpIHx8IHRoaXMuaW5zaWRlKCd2YWx1ZS1jb21tZW50JykgKSB7XG4gICAgICAgICAgICBpZiAoIHRoaXMub3B0cy5zYWZlICkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyICs9ICcvJztcbiAgICAgICAgICAgICAgICB0aGlzLmluQ29tbWVudCgnY2xvc2UnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlQmxvY2tzKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICggdGhpcy5pbnNpZGUoJ2NvbW1lbnQnKSApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcignVW5jbG9zZWQgY29tbWVudCcsIHRoaXMuY3VycmVudC5zb3VyY2Uuc3RhcnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoJ1VuY2xvc2VkIGNvbW1lbnQnLCB0aGlzLmNvbW1lbnRQb3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKCB0aGlzLnBhcmVudHMubGVuZ3RoID4gMSApIHtcbiAgICAgICAgICAgIGlmICggdGhpcy5vcHRzLnNhZmUgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZUJsb2NrcygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yKCdVbmNsb3NlZCBibG9jaycsIHRoaXMuY3VycmVudC5zb3VyY2Uuc3RhcnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAoIHRoaXMucXVvdGUgKSB7XG4gICAgICAgICAgICBpZiAoIHRoaXMub3B0cy5zYWZlICkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5TdHJpbmcoJ2Nsb3NlJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZUJsb2NrcygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yKCdVbmNsb3NlZCBxdW90ZScsIHRoaXMucXVvdGVQb3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJvb3QuYWZ0ZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBIZWxwZXJzXG5cbiAgICBwcm90byQwLmVycm9yID0gZnVuY3Rpb24obWVzc2FnZSkge3ZhciBwb3MgPSBhcmd1bWVudHNbMV07aWYocG9zID09PSB2b2lkIDApcG9zID0geyBsaW5lOiB0aGlzLmxpbmUsIGNvbHVtbjogdGhpcy5jb2x1bW4gfTtcbiAgICAgICAgdGhyb3cgbmV3IENzc1N5bnRheEVycm9yKG1lc3NhZ2UsIHRoaXMuc291cmNlLCBwb3MsIHRoaXMub3B0cy5mcm9tKTtcbiAgICB9O1xuXG4gICAgcHJvdG8kMC5tb3ZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucG9zICAgICs9IDE7XG4gICAgICAgIHRoaXMuY29sdW1uICs9IDE7XG4gICAgICAgIHRoaXMubGV0dGVyICA9IHRoaXMubmV4dDtcbiAgICAgICAgdGhpcy5uZXh0ICAgID0gdGhpcy5zb3VyY2VbdGhpcy5wb3MgKyAxXTtcbiAgICAgICAgdGhpcy5idWZmZXIgKz0gdGhpcy5sZXR0ZXI7XG5cbiAgICAgICAgaWYgKCB0aGlzLmxldHRlciA9PSBcIlxcblwiICkge1xuICAgICAgICAgICAgdGhpcy5saW5lc1t0aGlzLmxpbmVdID0gdGhpcy5jb2x1bW4gLSAxO1xuICAgICAgICAgICAgdGhpcy5saW5lICArPSAxO1xuICAgICAgICAgICAgdGhpcy5jb2x1bW4gPSAwO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByb3RvJDAucHJldkJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIuc2xpY2UoMCwgLTEpO1xuICAgIH07XG5cbiAgICBwcm90byQwLmluc2lkZSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PSB0eXBlO1xuICAgIH07XG5cbiAgICBwcm90byQwLnNwYWNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxldHRlci50cmltKCkgPT09ICcnO1xuICAgIH07XG5cbiAgICBwcm90byQwLmluaXQgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHRoaXMuY3VycmVudC5wdXNoKG5vZGUpO1xuICAgICAgICB0aGlzLnBhcmVudHMucHVzaChub2RlKTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gbm9kZTtcblxuICAgICAgICB0aGlzLmN1cnJlbnQuc291cmNlID0ge1xuICAgICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgICAgICBsaW5lOiAgIHRoaXMubGluZSxcbiAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMuY29sdW1uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29udGVudDogdGhpcy5zb3VyY2VcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCB0aGlzLm9wdHMuZnJvbSApIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudC5zb3VyY2UuZmlsZSA9IHBhdGgucmVzb2x2ZSh0aGlzLm9wdHMuZnJvbSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQuc291cmNlLmlkID0gdGhpcy5pZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnQuYmVmb3JlID0gdGhpcy5idWZmZXIuc2xpY2UoMCwgLTEpO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9ICcnO1xuICAgIH07XG5cbiAgICBwcm90byQwLnJhdyA9IGZ1bmN0aW9uKHByb3AsIHZhbHVlLCBvcmlnaW4pIHtcbiAgICAgICAgdGhpcy5jdXJyZW50W3Byb3BdID0gdmFsdWU7XG4gICAgICAgIGlmICggdmFsdWUgIT0gb3JpZ2luICkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50WydfJyArIHByb3BdID0geyB2YWx1ZTogdmFsdWUsIHJhdzogb3JpZ2luIH07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJvdG8kMC5maXhFbmQgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICB2YXIgc3RhcnQsIGFmdGVyO1xuICAgICAgICBpZiAoIHRoaXMubGV0dGVyID09ICd9JyApIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5idWZmZXIuc2VhcmNoKC9cXHMqXFx9JC8pO1xuICAgICAgICAgICAgYWZ0ZXIgPSB0aGlzLmJ1ZmZlci5zbGljZShzdGFydCwgLTEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhcnQgPSB0aGlzLmJ1ZmZlci5zZWFyY2goL1xccyokLyk7XG4gICAgICAgICAgICBhZnRlciA9IHRoaXMuYnVmZmVyLnN1YnN0cihzdGFydCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idWZmZXIgPSB0aGlzLmJ1ZmZlci5zdWJzdHIoMCwgc3RhcnQgKyAxKTtcblxuICAgICAgICB2YXIgZWwgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMpO1xuXG4gICAgICAgIHZhciBsaW5lcyA9IGFmdGVyLm1hdGNoKC9cXG4vZyk7XG4gICAgICAgIGlmICggbGluZXMgKSB7XG4gICAgICAgICAgICBlbC5zb3VyY2UuZW5kLmxpbmUgLT0gbGluZXMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGFsbCAgPSB0aGlzLmxpbmVzW2VsLnNvdXJjZS5lbmQubGluZV07XG4gICAgICAgICAgICB2YXIgbGFzdCA9IGFmdGVyLmluZGV4T2YoXCJcXG5cIik7XG4gICAgICAgICAgICBpZiAoIGxhc3QgPT0gLTEgKSBsYXN0ID0gYWZ0ZXIubGVuZ3RoO1xuICAgICAgICAgICAgZWwuc291cmNlLmVuZC5jb2x1bW4gPSBhbGwgLSBsYXN0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuc291cmNlLmVuZC5jb2x1bW4gLT0gYWZ0ZXIubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdXJyZW50LmFmdGVyID0gYWZ0ZXI7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gYWZ0ZXI7XG4gICAgfTtcblxuICAgIHByb3RvJDAucG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuY3VycmVudC5zb3VyY2UuZW5kID0ge1xuICAgICAgICAgICAgbGluZTogICB0aGlzLmxpbmUsXG4gICAgICAgICAgICBjb2x1bW46IHRoaXMuY29sdW1uXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5wb3BUeXBlKCk7XG4gICAgICAgIHRoaXMucGFyZW50cy5wb3AoKTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5wYXJlbnRzW3RoaXMucGFyZW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgdGhpcy5idWZmZXIgID0gJyc7XG4gICAgfTtcblxuICAgIHByb3RvJDAuYWRkVHlwZSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgdGhpcy50eXBlcy5wdXNoKHR5cGUpO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIH07XG5cbiAgICBwcm90byQwLnNldFR5cGUgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgIHRoaXMudHlwZXNbdGhpcy50eXBlcy5sZW5ndGggLSAxXSA9IHR5cGU7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgfTtcblxuICAgIHByb3RvJDAucG9wVHlwZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnR5cGVzLnBvcCgpO1xuICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLnR5cGVzW3RoaXMudHlwZXMubGVuZ3RoIC0gMV07XG4gICAgfTtcblxuICAgIHByb3RvJDAuYXRydWxlVHlwZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbmFtZSA9IHRoaXMuY3VycmVudC5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICggbmFtZSA9PSAncGFnZScgfHwgbmFtZSA9PSAnZm9udC1mYWNlJyApIHtcbiAgICAgICAgICAgIHJldHVybiAnZGVjbHMnO1xuICAgICAgICB9IGVsc2UgaWYgKCBuYW1lLnNsaWNlKC04KSA9PSAndmlld3BvcnQnICkge1xuICAgICAgICAgICAgcmV0dXJuICdkZWNscyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ3J1bGVzJztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcm90byQwLmVuZEF0cnVsZVBhcmFtcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIHRoaXMubGV0dGVyID09ICd7JyApIHtcbiAgICAgICAgICAgIHZhciB0eXBlID0gdGhpcy5hdHJ1bGVUeXBlKCk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQuYWRkTWl4aW4odHlwZSk7XG4gICAgICAgICAgICB0aGlzLnNldFR5cGUodHlwZSk7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCB0aGlzLmxldHRlciA9PSAnOycgKSB0aGlzLmN1cnJlbnQuc2VtaWNvbG9uID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucG9wKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJvdG8kMC5jaGVja0F0cnVsZU5hbWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCB0aGlzLmN1cnJlbnQubmFtZSA9PT0gJycgKSB0aGlzLmVycm9yKCdBdC1ydWxlIHdpdGhvdXQgbmFtZScpO1xuICAgIH07XG5cbiAgICBwcm90byQwLnN0YXJ0U3BhY2VzID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHN0cmluZy5tYXRjaCgvXlxccysvKTtcbiAgICAgICAgaWYgKCBtYXRjaCApIHtcbiAgICAgICAgICAgIHZhciBwb3MgPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgICAgICByZXR1cm4gW3N0cmluZy5zdWJzdHIocG9zKSwgbWF0Y2hbMF1dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtzdHJpbmcsICcnXTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcm90byQwLmVuZFNwYWNlcyA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICB2YXIgbWF0Y2ggPSBzdHJpbmcubWF0Y2goL1xccyskLyk7XG4gICAgICAgIGlmICggbWF0Y2ggKSB7XG4gICAgICAgICAgICB2YXIgcG9zID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgcmV0dXJuIFtzdHJpbmcuc2xpY2UoMCwgLXBvcyksIG1hdGNoWzBdXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbc3RyaW5nLCAnJ107XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHJvdG8kMC5jbG9zZUJsb2NrcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLnBhcmVudHMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciArPSAneyc7XG4gICAgICAgICAgICB0aGlzLmlzQmxvY2tFbmQoJ2Nsb3NlJyk7XG4gICAgICAgIH1cbiAgICB9O1xuTUlYSU4kMChQYXJzZXIucHJvdG90eXBlLHByb3RvJDApO3Byb3RvJDA9dm9pZCAwO3JldHVybiBQYXJzZXI7fSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc291cmNlKSB7dmFyIG9wdHMgPSBhcmd1bWVudHNbMV07aWYob3B0cyA9PT0gdm9pZCAwKW9wdHMgPSB7IH07XG4gICAgaWYgKCBvcHRzLm1hcCA9PSAnaW5saW5lJyApIG9wdHMubWFwID0geyBpbmxpbmU6IHRydWUgfTtcblxuICAgIHZhciBwYXJzZXIgPSBuZXcgUGFyc2VyKHNvdXJjZSwgb3B0cyk7XG4gICAgcGFyc2VyLmxvb3AoKTtcbiAgICBwYXJzZXIuc2V0TWFwKCk7XG5cbiAgICByZXR1cm4gcGFyc2VyLnJvb3Q7XG59O1xuIiwidmFyIERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9kZWNsYXJhdGlvbicpO1xudmFyIENvbW1lbnQgICAgID0gcmVxdWlyZSgnLi9jb21tZW50Jyk7XG52YXIgQXRSdWxlICAgICAgPSByZXF1aXJlKCcuL2F0LXJ1bGUnKTtcbnZhciBSZXN1bHQgICAgICA9IHJlcXVpcmUoJy4vcmVzdWx0Jyk7XG52YXIgUnVsZSAgICAgICAgPSByZXF1aXJlKCcuL3J1bGUnKTtcbnZhciBSb290ICAgICAgICA9IHJlcXVpcmUoJy4vcm9vdCcpO1xuXG4vLyBMaXN0IG9mIGZ1bmN0aW9ucyB0byBwcm9jZXNzIENTU1xudmFyIFBvc3RDU1MgPSAoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgUFJTJDAgPSAoZnVuY3Rpb24obyx0KXtvW1wiX19wcm90b19fXCJdPXtcImFcIjp0fTtyZXR1cm4gb1tcImFcIl09PT10fSkoe30se30pO3ZhciBEUCQwID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O3ZhciBHT1BEJDAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3ZhciBNSVhJTiQwID0gZnVuY3Rpb24odCxzKXtmb3IodmFyIHAgaW4gcyl7aWYocy5oYXNPd25Qcm9wZXJ0eShwKSl7RFAkMCh0LHAsR09QRCQwKHMscCkpO319cmV0dXJuIHR9O3ZhciBwcm90byQwPXt9O1xuICAgIGZ1bmN0aW9uIFBvc3RDU1MoKSB7dmFyIHByb2Nlc3NvcnMgPSBhcmd1bWVudHNbMF07aWYocHJvY2Vzc29ycyA9PT0gdm9pZCAwKXByb2Nlc3NvcnMgPSBbXTt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgICAgdGhpcy5wcm9jZXNzb3JzID0gcHJvY2Vzc29ycy5tYXAoIGZ1bmN0aW9uKGkpICB7cmV0dXJuIHRoaXMkMC5ub3JtYWxpemUoaSl9ICk7XG4gICAgfURQJDAoUG9zdENTUyxcInByb3RvdHlwZVwiLHtcImNvbmZpZ3VyYWJsZVwiOmZhbHNlLFwiZW51bWVyYWJsZVwiOmZhbHNlLFwid3JpdGFibGVcIjpmYWxzZX0pO1xuXG4gICAgLy8gQWRkIGFub3RoZXIgZnVuY3Rpb24gdG8gQ1NTIHByb2Nlc3NvcnNcbiAgICBwcm90byQwLnVzZSA9IGZ1bmN0aW9uKHByb2Nlc3Nvcikge1xuICAgICAgICBwcm9jZXNzb3IgPSB0aGlzLm5vcm1hbGl6ZShwcm9jZXNzb3IpO1xuICAgICAgICB0aGlzLnByb2Nlc3NvcnMucHVzaChwcm9jZXNzb3IpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgLy8gUHJvY2VzcyBDU1MgdGhyb3cgaW5zdGFsbGVkIHByb2Nlc3NvcnNcbiAgICBwcm90byQwLnByb2Nlc3MgPSBmdW5jdGlvbihjc3MpIHt2YXIgU19JVEVSJDAgPSB0eXBlb2YgU3ltYm9sIT09J3VuZGVmaW5lZCcmJlN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yfHwnQEBpdGVyYXRvcic7dmFyIFNfTUFSSyQwID0gdHlwZW9mIFN5bWJvbCE9PSd1bmRlZmluZWQnJiZTeW1ib2wmJlN5bWJvbFtcIl9fc2V0T2JqZWN0U2V0dGVyX19cIl07ZnVuY3Rpb24gR0VUX0lURVIkMCh2KXtpZih2KXtpZihBcnJheS5pc0FycmF5KHYpKXJldHVybiAwO3ZhciBmO2lmKFNfTUFSSyQwKVNfTUFSSyQwKHYpO2lmKHR5cGVvZiB2PT09J29iamVjdCcmJnR5cGVvZiAoZj12W1NfSVRFUiQwXSk9PT0nZnVuY3Rpb24nKXtpZihTX01BUkskMClTX01BUkskMCh2b2lkIDApO3JldHVybiBmLmNhbGwodik7fWlmKFNfTUFSSyQwKVNfTUFSSyQwKHZvaWQgMCk7aWYoKHYrJycpPT09J1tvYmplY3QgR2VuZXJhdG9yXScpcmV0dXJuIHY7fXRocm93IG5ldyBFcnJvcih2KycgaXMgbm90IGl0ZXJhYmxlJyl9O3ZhciAkRCQwO3ZhciAkRCQxO3ZhciAkRCQyO3ZhciAkRCQzO3ZhciBvcHRzID0gYXJndW1lbnRzWzFdO2lmKG9wdHMgPT09IHZvaWQgMClvcHRzID0geyB9O1xuICAgICAgICBpZiAoIG9wdHMubWFwID09ICdpbmxpbmUnICkgb3B0cy5tYXAgPSB7IGlubGluZTogdHJ1ZSB9O1xuXG4gICAgICAgIHZhciBwYXJzZWQ7XG4gICAgICAgIGlmICggY3NzIGluc3RhbmNlb2YgUm9vdCApIHtcbiAgICAgICAgICAgIHBhcnNlZCA9IGNzcztcbiAgICAgICAgfSBlbHNlIGlmICggY3NzIGluc3RhbmNlb2YgUmVzdWx0ICkge1xuICAgICAgICAgICAgcGFyc2VkID0gY3NzLnJvb3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJzZWQgPSBwb3N0Y3NzLnBhcnNlKGNzcywgb3B0cyk7XG4gICAgICAgIH1cblxuICAgICAgICAkRCQzID0gKHRoaXMucHJvY2Vzc29ycyk7JEQkMCA9IEdFVF9JVEVSJDAoJEQkMyk7JEQkMiA9ICREJDAgPT09IDA7JEQkMSA9ICgkRCQyID8gJEQkMy5sZW5ndGggOiB2b2lkIDApO2ZvciAoIHZhciBwcm9jZXNzb3IgOyREJDIgPyAoJEQkMCA8ICREJDEpIDogISgkRCQxID0gJEQkMFtcIm5leHRcIl0oKSlbXCJkb25lXCJdOyl7cHJvY2Vzc29yID0gKCREJDIgPyAkRCQzWyREJDArK10gOiAkRCQxW1widmFsdWVcIl0pO1xuICAgICAgICAgICAgdmFyIHJldHVybmVkID0gcHJvY2Vzc29yKHBhcnNlZCwgb3B0cyk7XG4gICAgICAgICAgICBpZiAoIHJldHVybmVkIGluc3RhbmNlb2YgUm9vdCApIHBhcnNlZCA9IHJldHVybmVkO1xuICAgICAgICB9OyREJDAgPSAkRCQxID0gJEQkMiA9ICREJDMgPSB2b2lkIDA7XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlZC50b1Jlc3VsdChvcHRzKTtcbiAgICB9O1xuXG4gICAgLy8gUmV0dXJuIHByb2Nlc3NvciBmdW5jdGlvblxuICAgIHByb3RvJDAubm9ybWFsaXplID0gZnVuY3Rpb24ocHJvY2Vzc29yKSB7XG4gICAgICAgIHZhciB0eXBlID0gdHlwZW9mKHByb2Nlc3Nvcik7XG4gICAgICAgIGlmICggKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKSAmJiBwcm9jZXNzb3IucG9zdGNzcyApIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9jZXNzb3IucG9zdGNzcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9jZXNzb3I7XG4gICAgICAgIH1cbiAgICB9O1xuTUlYSU4kMChQb3N0Q1NTLnByb3RvdHlwZSxwcm90byQwKTtwcm90byQwPXZvaWQgMDtyZXR1cm4gUG9zdENTUzt9KSgpO1xuXG4vLyBGcmFtZXdvcmsgZm9yIENTUyBwb3N0cHJvY2Vzc29yc1xuLy9cbi8vICAgdmFyIHByb2Nlc3NvciA9IHBvc3Rjc3MoZnVuY3Rpb24gKGNzcykge1xuLy8gICAgICAgLy8gQ2hhbmdlIG5vZGVzIGluIGNzc1xuLy8gICB9KTtcbi8vICAgcHJvY2Vzc29yLnByb2Nlc3MoY3NzKVxudmFyIHBvc3Rjc3MgPSBmdW5jdGlvbiAoKSB7dmFyIFNMSUNFJDAgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7dmFyIHByb2Nlc3NvcnMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICByZXR1cm4gbmV3IFBvc3RDU1MocHJvY2Vzc29ycyk7XG59O1xuXG4vLyBDb21waWxlIENTUyB0byBub2Rlc1xucG9zdGNzcy5wYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKTtcblxuLy8gTm9kZXMgc2hvcnRjdXRzXG5wb3N0Y3NzLmNvbW1lbnQgPSBmdW5jdGlvbiAoZGVmYXVsdHMpIHtcbiAgICByZXR1cm4gbmV3IENvbW1lbnQoZGVmYXVsdHMpO1xufTtcbnBvc3Rjc3MuYXRSdWxlID0gZnVuY3Rpb24gKGRlZmF1bHRzKSB7XG4gICAgcmV0dXJuIG5ldyBBdFJ1bGUoZGVmYXVsdHMpO1xufTtcbnBvc3Rjc3MuZGVjbCA9IGZ1bmN0aW9uIChkZWZhdWx0cykge1xuICAgIHJldHVybiBuZXcgRGVjbGFyYXRpb24oZGVmYXVsdHMpO1xufTtcbnBvc3Rjc3MucnVsZSA9IGZ1bmN0aW9uIChkZWZhdWx0cykge1xuICAgIHJldHVybiBuZXcgUnVsZShkZWZhdWx0cyk7XG59O1xucG9zdGNzcy5yb290ID0gZnVuY3Rpb24gKGRlZmF1bHRzKSB7XG4gICAgcmV0dXJuIG5ldyBSb290KGRlZmF1bHRzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcG9zdGNzcztcbiIsInZhciBtb3ppbGxhID0gcmVxdWlyZSgnc291cmNlLW1hcCcpO1xudmFyIEJhc2U2NCAgPSByZXF1aXJlKCdqcy1iYXNlNjQnKS5CYXNlNjQ7XG52YXIgcGF0aCAgICA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBmcyAgICAgID0gcmVxdWlyZSgnZnMnKTtcblxuLy8gRGV0ZWN0IHByZXZpb3VzIG1hcFxudmFyIFByZXZpb3VzTWFwID0gKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIFBSUyQwID0gKGZ1bmN0aW9uKG8sdCl7b1tcIl9fcHJvdG9fX1wiXT17XCJhXCI6dH07cmV0dXJuIG9bXCJhXCJdPT09dH0pKHt9LHt9KTt2YXIgRFAkMCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgR09QRCQwID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjt2YXIgTUlYSU4kMCA9IGZ1bmN0aW9uKHQscyl7Zm9yKHZhciBwIGluIHMpe2lmKHMuaGFzT3duUHJvcGVydHkocCkpe0RQJDAodCxwLEdPUEQkMChzLHApKTt9fXJldHVybiB0fTt2YXIgcHJvdG8kMD17fTtcbiAgICBmdW5jdGlvbiBQcmV2aW91c01hcChyb290LCBvcHRzLCBpZCkge1xuICAgICAgICB0aGlzLmZpbGUgPSBvcHRzLmZyb20gfHwgaWQ7XG5cbiAgICAgICAgdGhpcy5sb2FkQW5ub3RhdGlvbihyb290KTtcbiAgICAgICAgdmFyIGlubGluZVByZWZpeCA9ICcjIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTonO1xuICAgICAgICB0aGlzLmlubGluZSA9IHRoaXMuc3RhcnRXaXRoKHRoaXMuYW5ub3RhdGlvbiwgaW5saW5lUHJlZml4KTtcblxuICAgICAgICB2YXIgdGV4dCA9IHRoaXMubG9hZE1hcChvcHRzLm1hcCA/IG9wdHMubWFwLnByZXYgOiB1bmRlZmluZWQpO1xuICAgICAgICBpZiAoIHRleHQgKSB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIH1EUCQwKFByZXZpb3VzTWFwLFwicHJvdG90eXBlXCIse1wiY29uZmlndXJhYmxlXCI6ZmFsc2UsXCJlbnVtZXJhYmxlXCI6ZmFsc2UsXCJ3cml0YWJsZVwiOmZhbHNlfSk7XG5cbiAgICAvLyBSZXR1cm4gU291cmNlTWFwQ29uc3VtZXIgb2JqZWN0IHRvIHJlYWQgbWFwXG4gICAgcHJvdG8kMC5jb25zdW1lciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoICF0aGlzLmNvbnN1bWVyQ2FjaGUgKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnN1bWVyQ2FjaGUgPSBuZXcgbW96aWxsYS5Tb3VyY2VNYXBDb25zdW1lcih0aGlzLnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVyQ2FjaGU7XG4gICAgfTtcblxuICAgIC8vIElzIG1hcCBoYXMgc291cmNlcyBjb250ZW50XG4gICAgcHJvdG8kMC53aXRoQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gISEodGhpcy5jb25zdW1lcigpLnNvdXJjZXNDb250ZW50ICYmXG4gICAgICAgICAgICAgICAgICB0aGlzLmNvbnN1bWVyKCkuc291cmNlc0NvbnRlbnQubGVuZ3RoID4gMCk7XG4gICAgfTtcblxuICAgIC8vIElzIGBzdHJpbmdgIGlzIHN0YXJ0aW5nIHdpdGggYHN0YXJ0YFxuICAgIHByb3RvJDAuc3RhcnRXaXRoID0gZnVuY3Rpb24oc3RyaW5nLCBzdGFydCkge1xuICAgICAgICBpZiAoICFzdHJpbmcgKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiBzdHJpbmcuc3Vic3RyKDAsIHN0YXJ0Lmxlbmd0aCkgPT0gc3RhcnQ7XG4gICAgfTtcblxuICAgIC8vIExvYWQgZm9yIGFubm90YXRpb24gY29tbWVudCBmcm9tIHByZXZpb3VzIGNvbXBpbGF0aW9uIHN0ZXBcbiAgICBwcm90byQwLmxvYWRBbm5vdGF0aW9uID0gZnVuY3Rpb24ocm9vdCkge1xuICAgICAgICB2YXIgbGFzdCA9IHJvb3QubGFzdDtcbiAgICAgICAgaWYgKCAhbGFzdCApIHJldHVybjtcbiAgICAgICAgaWYgKCBsYXN0LnR5cGUgIT0gJ2NvbW1lbnQnICkgcmV0dXJuO1xuXG4gICAgICAgIGlmICggdGhpcy5zdGFydFdpdGgobGFzdC50ZXh0LCAnIyBzb3VyY2VNYXBwaW5nVVJMPScpICkge1xuICAgICAgICAgICAgdGhpcy5hbm5vdGF0aW9uID0gbGFzdC50ZXh0O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVuY29kZSBkaWZmZXJlbnQgdHlwZSBvZiBpbmxpbmVcbiAgICBwcm90byQwLmRlY29kZUlubGluZSA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgICAgdmFyIHVyaSAgICA9ICcjIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uLCc7XG4gICAgICAgIHZhciBiYXNlNjQgPSAnIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsJztcblxuICAgICAgICBpZiAoIHRoaXMuc3RhcnRXaXRoKHRleHQsIHVyaSkgKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KCB0ZXh0LnN1YnN0cih1cmkubGVuZ3RoKSApO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoIHRoaXMuc3RhcnRXaXRoKHRleHQsIGJhc2U2NCkgKSB7XG4gICAgICAgICAgICByZXR1cm4gQmFzZTY0LmRlY29kZSggdGV4dC5zdWJzdHIoYmFzZTY0Lmxlbmd0aCkgKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGVuY29kaW5nID0gdGV4dC5tYXRjaCgvYXRhOmFwcGxpY2F0aW9uXFwvanNvbjsoW14sXSspLC8pWzFdO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzb3VyY2UgbWFwIGVuY29kaW5nICcgKyBlbmNvZGluZyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gTG9hZCBwcmV2aW91cyBtYXBcbiAgICBwcm90byQwLmxvYWRNYXAgPSBmdW5jdGlvbihwcmV2KSB7XG4gICAgICAgIGlmICggcHJldiA9PT0gZmFsc2UgKSByZXR1cm47XG5cbiAgICAgICAgaWYgKCBwcmV2ICkge1xuICAgICAgICAgICAgaWYgKCB0eXBlb2YocHJldikgPT0gJ3N0cmluZycgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBwcmV2IGluc3RhbmNlb2YgbW96aWxsYS5Tb3VyY2VNYXBDb25zdW1lciApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW96aWxsYS5Tb3VyY2VNYXBHZW5lcmF0b3JcbiAgICAgICAgICAgICAgICAgICAgLmZyb21Tb3VyY2VNYXAocHJldikudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHByZXYgaW5zdGFuY2VvZiBtb3ppbGxhLlNvdXJjZU1hcEdlbmVyYXRvciApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldi50b1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICggdHlwZW9mKHByZXYpID09ICdvYmplY3QnICYmIHByZXYubWFwcGluZ3MgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHByZXYpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHByZXZpb3VzIHNvdXJjZSBtYXAgZm9ybWF0OiAnICtcbiAgICAgICAgICAgICAgICAgICAgcHJldi50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKCB0aGlzLmlubGluZSApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY29kZUlubGluZSh0aGlzLmFubm90YXRpb24pO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoIHRoaXMuYW5ub3RhdGlvbiApIHtcbiAgICAgICAgICAgIHZhciBtYXAgPSB0aGlzLmFubm90YXRpb24ucmVwbGFjZSgnIyBzb3VyY2VNYXBwaW5nVVJMPScsICcnKTtcbiAgICAgICAgICAgIGlmICggdGhpcy5maWxlICkgbWFwID0gcGF0aC5qb2luKHBhdGguZGlybmFtZSh0aGlzLmZpbGUpLCBtYXApO1xuXG4gICAgICAgICAgICB0aGlzLnJvb3QgPSBwYXRoLmRpcm5hbWUobWFwKTtcbiAgICAgICAgICAgIGlmICggZnMuZXhpc3RzU3luYyAmJiBmcy5leGlzdHNTeW5jKG1hcCkgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZzLnJlYWRGaWxlU3luYyhtYXAsICd1dGYtOCcpLnRvU3RyaW5nKCkudHJpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbk1JWElOJDAoUHJldmlvdXNNYXAucHJvdG90eXBlLHByb3RvJDApO3Byb3RvJDA9dm9pZCAwO3JldHVybiBQcmV2aW91c01hcDt9KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByZXZpb3VzTWFwO1xuIiwidmFyIE1hcEdlbmVyYXRvciA9IHJlcXVpcmUoJy4vbWFwLWdlbmVyYXRvcicpO1xuXG4vLyBPYmplY3Qgd2l0aCBwcm9jZXNzZWQgQ1NTXG52YXIgUmVzdWx0ID0gKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIFBSUyQwID0gKGZ1bmN0aW9uKG8sdCl7b1tcIl9fcHJvdG9fX1wiXT17XCJhXCI6dH07cmV0dXJuIG9bXCJhXCJdPT09dH0pKHt9LHt9KTt2YXIgRFAkMCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgR09QRCQwID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjt2YXIgTUlYSU4kMCA9IGZ1bmN0aW9uKHQscyl7Zm9yKHZhciBwIGluIHMpe2lmKHMuaGFzT3duUHJvcGVydHkocCkpe0RQJDAodCxwLEdPUEQkMChzLHApKTt9fXJldHVybiB0fTt2YXIgRFBTJDAgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllczt2YXIgcHJvdG8kMD17fTtcbiAgICBmdW5jdGlvbiBSZXN1bHQocm9vdCkge3ZhciBvcHRzID0gYXJndW1lbnRzWzFdO2lmKG9wdHMgPT09IHZvaWQgMClvcHRzID0geyB9O1xuICAgICAgICB0aGlzLnJvb3QgPSByb290O1xuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIH1EUFMkMChSZXN1bHQucHJvdG90eXBlLHttYXA6IHtcImdldFwiOiBtYXAkZ2V0JDAsIFwiY29uZmlndXJhYmxlXCI6dHJ1ZSxcImVudW1lcmFibGVcIjp0cnVlfSwgY3NzOiB7XCJnZXRcIjogY3NzJGdldCQwLCBcImNvbmZpZ3VyYWJsZVwiOnRydWUsXCJlbnVtZXJhYmxlXCI6dHJ1ZX19KTtEUCQwKFJlc3VsdCxcInByb3RvdHlwZVwiLHtcImNvbmZpZ3VyYWJsZVwiOmZhbHNlLFwiZW51bWVyYWJsZVwiOmZhbHNlLFwid3JpdGFibGVcIjpmYWxzZX0pO1xuXG4gICAgLy8gTGF6eSBtZXRob2QgdG8gcmV0dXJuIHNvdXJjZSBtYXBcbiAgICBmdW5jdGlvbiBtYXAkZ2V0JDAoKSB7XG4gICAgICAgIGlmICggIXRoaXMuY3NzQ2FjaGVkICkgdGhpcy5zdHJpbmdpZnkoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwQ2FjaGVkO1xuICAgIH1cblxuICAgIC8vIExhenkgbWV0aG9kIHRvIHJldHVybiBDU1Mgc3RyaW5nXG4gICAgZnVuY3Rpb24gY3NzJGdldCQwKCkge1xuICAgICAgICBpZiAoICF0aGlzLmNzc0NhY2hlZCApIHRoaXMuc3RyaW5naWZ5KCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNzc0NhY2hlZDtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gQ1NTIHN0cmluZyBvbiBhbnkgdHJ5IHRvIHByaW50XG4gICAgcHJvdG8kMC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jc3M7XG4gICAgfTtcblxuICAgIC8vIEdlbmVyYXRlIENTUyBhbmQgbWFwXG4gICAgcHJvdG8kMC5zdHJpbmdpZnkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1hcCA9IG5ldyBNYXBHZW5lcmF0b3IodGhpcy5yb290LCB0aGlzLm9wdHMpO1xuICAgICAgICB2YXIgZ2VuZXJhdGVkICA9IG1hcC5nZW5lcmF0ZSgpO1xuICAgICAgICB0aGlzLmNzc0NhY2hlZCA9IGdlbmVyYXRlZFswXTtcbiAgICAgICAgdGhpcy5tYXBDYWNoZWQgPSBnZW5lcmF0ZWRbMV07XG4gICAgfTtcbk1JWElOJDAoUmVzdWx0LnByb3RvdHlwZSxwcm90byQwKTtwcm90byQwPXZvaWQgMDtyZXR1cm4gUmVzdWx0O30pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVzdWx0O1xuIiwidmFyIERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9kZWNsYXJhdGlvbicpO1xudmFyIENvbnRhaW5lciAgID0gcmVxdWlyZSgnLi9jb250YWluZXInKTtcbnZhciBDb21tZW50ICAgICA9IHJlcXVpcmUoJy4vY29tbWVudCcpO1xudmFyIEF0UnVsZSAgICAgID0gcmVxdWlyZSgnLi9hdC1ydWxlJyk7XG52YXIgUmVzdWx0ICAgICAgPSByZXF1aXJlKCcuL3Jlc3VsdCcpO1xudmFyIFJ1bGUgICAgICAgID0gcmVxdWlyZSgnLi9ydWxlJyk7XG5cbi8vIFJvb3Qgb2YgQ1NTXG52YXIgUm9vdCA9IChmdW5jdGlvbihzdXBlciQwKXtcInVzZSBzdHJpY3RcIjt2YXIgUFJTJDAgPSAoZnVuY3Rpb24obyx0KXtvW1wiX19wcm90b19fXCJdPXtcImFcIjp0fTtyZXR1cm4gb1tcImFcIl09PT10fSkoe30se30pO3ZhciBEUCQwID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O3ZhciBHT1BEJDAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3ZhciBNSVhJTiQwID0gZnVuY3Rpb24odCxzKXtmb3IodmFyIHAgaW4gcyl7aWYocy5oYXNPd25Qcm9wZXJ0eShwKSl7RFAkMCh0LHAsR09QRCQwKHMscCkpO319cmV0dXJuIHR9O3ZhciBTUCQwID0gT2JqZWN0LnNldFByb3RvdHlwZU9mfHxmdW5jdGlvbihvLHApe29bXCJfX3Byb3RvX19cIl09cDtyZXR1cm4gb307dmFyIE9DJDAgPSBPYmplY3QuY3JlYXRlO2lmKCFQUlMkMClNSVhJTiQwKFJvb3QsIHN1cGVyJDApO3ZhciBwcm90byQwPXt9O1xuICAgIGZ1bmN0aW9uIFJvb3QoZGVmYXVsdHMpIHtcbiAgICAgICAgdGhpcy50eXBlICA9ICdyb290JztcbiAgICAgICAgdGhpcy5ydWxlcyA9IFtdO1xuICAgICAgICBzdXBlciQwLmNhbGwodGhpcywgZGVmYXVsdHMpO1xuICAgIH1pZihzdXBlciQwIT09bnVsbClTUCQwKFJvb3Qsc3VwZXIkMCk7Um9vdC5wcm90b3R5cGUgPSBPQyQwKHN1cGVyJDAhPT1udWxsP3N1cGVyJDAucHJvdG90eXBlOm51bGwse1wiY29uc3RydWN0b3JcIjp7XCJ2YWx1ZVwiOlJvb3QsXCJjb25maWd1cmFibGVcIjp0cnVlLFwid3JpdGFibGVcIjp0cnVlfX0pO0RQJDAoUm9vdCxcInByb3RvdHlwZVwiLHtcImNvbmZpZ3VyYWJsZVwiOmZhbHNlLFwiZW51bWVyYWJsZVwiOmZhbHNlLFwid3JpdGFibGVcIjpmYWxzZX0pO1xuXG4gICAgLy8gRml4IHNwYWNlcyBvbiBpbnNlcnQgYmVmb3JlIGZpcnN0IHJ1bGVcbiAgICBwcm90byQwLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKGNoaWxkLCBzYW1wbGUsIHR5cGUpIHt2YXIgU19JVEVSJDAgPSB0eXBlb2YgU3ltYm9sIT09J3VuZGVmaW5lZCcmJlN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yfHwnQEBpdGVyYXRvcic7dmFyIFNfTUFSSyQwID0gdHlwZW9mIFN5bWJvbCE9PSd1bmRlZmluZWQnJiZTeW1ib2wmJlN5bWJvbFtcIl9fc2V0T2JqZWN0U2V0dGVyX19cIl07ZnVuY3Rpb24gR0VUX0lURVIkMCh2KXtpZih2KXtpZihBcnJheS5pc0FycmF5KHYpKXJldHVybiAwO3ZhciBmO2lmKFNfTUFSSyQwKVNfTUFSSyQwKHYpO2lmKHR5cGVvZiB2PT09J29iamVjdCcmJnR5cGVvZiAoZj12W1NfSVRFUiQwXSk9PT0nZnVuY3Rpb24nKXtpZihTX01BUkskMClTX01BUkskMCh2b2lkIDApO3JldHVybiBmLmNhbGwodik7fWlmKFNfTUFSSyQwKVNfTUFSSyQwKHZvaWQgMCk7aWYoKHYrJycpPT09J1tvYmplY3QgR2VuZXJhdG9yXScpcmV0dXJuIHY7fXRocm93IG5ldyBFcnJvcih2KycgaXMgbm90IGl0ZXJhYmxlJyl9O3ZhciAkRCQwO3ZhciAkRCQxO3ZhciAkRCQyO1xuICAgICAgICB2YXIgY2hpbGRzID0gc3VwZXIkMC5wcm90b3R5cGUubm9ybWFsaXplLmNhbGwodGhpcywgY2hpbGQsIHNhbXBsZSwgdHlwZSk7XG5cbiAgICAgICAgJEQkMCA9IEdFVF9JVEVSJDAoY2hpbGRzKTskRCQyID0gJEQkMCA9PT0gMDskRCQxID0gKCREJDIgPyBjaGlsZHMubGVuZ3RoIDogdm9pZCAwKTtmb3IgKCBjaGlsZCA7JEQkMiA/ICgkRCQwIDwgJEQkMSkgOiAhKCREJDEgPSAkRCQwW1wibmV4dFwiXSgpKVtcImRvbmVcIl07KXtjaGlsZCA9ICgkRCQyID8gY2hpbGRzWyREJDArK10gOiAkRCQxW1widmFsdWVcIl0pO1xuICAgICAgICAgICAgaWYgKCB0eXBlID09ICdwcmVwZW5kJyApIHtcbiAgICAgICAgICAgICAgICBpZiAoIHRoaXMucnVsZXMubGVuZ3RoID4gMSApIHtcbiAgICAgICAgICAgICAgICAgICAgc2FtcGxlLmJlZm9yZSA9IHRoaXMucnVsZXNbMV0uYmVmb3JlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHRoaXMucnVsZXMubGVuZ3RoID09IDEgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNhbXBsZS5iZWZvcmUgPSB0aGlzLmFmdGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLnJ1bGVzLmxlbmd0aCA+IDEgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLmJlZm9yZSA9IHNhbXBsZS5iZWZvcmU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQuYmVmb3JlID0gdGhpcy5hZnRlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07JEQkMCA9ICREJDEgPSAkRCQyID0gdm9pZCAwO1xuXG4gICAgICAgIHJldHVybiBjaGlsZHM7XG4gICAgfTtcblxuICAgIC8vIFN0cmluZ2lmeSBzdHlsZXNcbiAgICBwcm90byQwLnN0cmluZ2lmeSA9IGZ1bmN0aW9uKGJ1aWxkZXIpIHtcbiAgICAgICAgdGhpcy5zdHJpbmdpZnlDb250ZW50KGJ1aWxkZXIpO1xuICAgICAgICBpZiAoIHRoaXMuYWZ0ZXIpIGJ1aWxkZXIodGhpcy5hZnRlcik7XG4gICAgfTtcblxuICAgIC8vIEdlbmVyYXRlIHByb2Nlc3NpbmcgcmVzdWx0IHdpdGggb3B0aW9uYWwgc291cmNlIG1hcFxuICAgIHByb3RvJDAudG9SZXN1bHQgPSBmdW5jdGlvbigpIHt2YXIgb3B0cyA9IGFyZ3VtZW50c1swXTtpZihvcHRzID09PSB2b2lkIDApb3B0cyA9IHsgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHQodGhpcywgb3B0cyk7XG4gICAgfTtcbk1JWElOJDAoUm9vdC5wcm90b3R5cGUscHJvdG8kMCk7cHJvdG8kMD12b2lkIDA7cmV0dXJuIFJvb3Q7fSkoQ29udGFpbmVyLldpdGhSdWxlcyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUm9vdDtcbiIsInZhciBDb250YWluZXIgICA9IHJlcXVpcmUoJy4vY29udGFpbmVyJyk7XG52YXIgRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuL2RlY2xhcmF0aW9uJyk7XG52YXIgbGlzdCAgICAgICAgPSByZXF1aXJlKCcuL2xpc3QnKTtcblxuLy8gQ1NTIHJ1bGUgbGlrZSDigJxhIHsgfeKAnVxudmFyIFJ1bGUgPSAoZnVuY3Rpb24oc3VwZXIkMCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIFBSUyQwID0gKGZ1bmN0aW9uKG8sdCl7b1tcIl9fcHJvdG9fX1wiXT17XCJhXCI6dH07cmV0dXJuIG9bXCJhXCJdPT09dH0pKHt9LHt9KTt2YXIgRFAkMCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgR09QRCQwID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjt2YXIgTUlYSU4kMCA9IGZ1bmN0aW9uKHQscyl7Zm9yKHZhciBwIGluIHMpe2lmKHMuaGFzT3duUHJvcGVydHkocCkpe0RQJDAodCxwLEdPUEQkMChzLHApKTt9fXJldHVybiB0fTt2YXIgU1AkMCA9IE9iamVjdC5zZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24obyxwKXtvW1wiX19wcm90b19fXCJdPXA7cmV0dXJuIG99O3ZhciBPQyQwID0gT2JqZWN0LmNyZWF0ZTtpZighUFJTJDApTUlYSU4kMChSdWxlLCBzdXBlciQwKTt2YXIgcHJvdG8kMD17fTtcbiAgICBmdW5jdGlvbiBSdWxlKGRlZmF1bHRzKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdydWxlJztcbiAgICAgICAgc3VwZXIkMC5jYWxsKHRoaXMsIGRlZmF1bHRzKTtcbiAgICB9aWYoc3VwZXIkMCE9PW51bGwpU1AkMChSdWxlLHN1cGVyJDApO1J1bGUucHJvdG90eXBlID0gT0MkMChzdXBlciQwIT09bnVsbD9zdXBlciQwLnByb3RvdHlwZTpudWxsLHtcImNvbnN0cnVjdG9yXCI6e1widmFsdWVcIjpSdWxlLFwiY29uZmlndXJhYmxlXCI6dHJ1ZSxcIndyaXRhYmxlXCI6dHJ1ZX0sIHNlbGVjdG9yczoge1wiZ2V0XCI6IHNlbGVjdG9ycyRnZXQkMCwgXCJzZXRcIjogc2VsZWN0b3JzJHNldCQwLCBcImNvbmZpZ3VyYWJsZVwiOnRydWUsXCJlbnVtZXJhYmxlXCI6dHJ1ZX19KTtEUCQwKFJ1bGUsXCJwcm90b3R5cGVcIix7XCJjb25maWd1cmFibGVcIjpmYWxzZSxcImVudW1lcmFibGVcIjpmYWxzZSxcIndyaXRhYmxlXCI6ZmFsc2V9KTtcblxuICAgIC8vIERpZmZlcmVudCBzdHlsZSBmb3IgZW1wdHkgYW5kIG5vbi1lbXB0eSBydWxlc1xuICAgIHByb3RvJDAuc3R5bGVUeXBlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUgKyAodGhpcy5kZWNscy5sZW5ndGggPyAnLWJvZHknIDogJy1lbXB0eScpO1xuICAgIH07XG5cbiAgICBwcm90byQwLmRlZmF1bHRTdHlsZSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgaWYgKCB0eXBlID09ICdydWxlLWJvZHknICkge1xuICAgICAgICAgICAgcmV0dXJuIHsgYmV0d2VlbjogJyAnLCBhZnRlcjogdGhpcy5kZWZhdWx0QWZ0ZXIoKSB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHsgYmV0d2VlbjogJyAnLCBhZnRlcjogJycgfTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBTaG9ydGN1dCB0byBnZXQgc2VsZWN0b3JzIGFzIGFycmF5XG5cbiAgICBmdW5jdGlvbiBzZWxlY3RvcnMkZ2V0JDAoKSB7XG4gICAgICAgIHJldHVybiBsaXN0LmNvbW1hKHRoaXMuc2VsZWN0b3IpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNlbGVjdG9ycyRzZXQkMCh2YWx1ZXMpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IHZhbHVlcy5qb2luKCcsICcpO1xuICAgIH1cblxuICAgIC8vIFN0cmluZ2lmeSBydWxlXG4gICAgcHJvdG8kMC5zdHJpbmdpZnkgPSBmdW5jdGlvbihidWlsZGVyKSB7XG4gICAgICAgIHRoaXMuc3RyaW5naWZ5QmxvY2soYnVpbGRlcixcbiAgICAgICAgICAgIHRoaXMuc3RyaW5naWZ5UmF3KCdzZWxlY3RvcicpICsgdGhpcy5zdHlsZSgpLmJldHdlZW4gKyAneycpO1xuICAgIH07XG5NSVhJTiQwKFJ1bGUucHJvdG90eXBlLHByb3RvJDApO3Byb3RvJDA9dm9pZCAwO3JldHVybiBSdWxlO30pKENvbnRhaW5lci5XaXRoRGVjbHMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJ1bGU7XG4iLCIvLyBNZXRob2RzIHRvIHdvcmsgd2l0aCB2ZW5kb3IgcHJlZml4ZXNcbnZhciB2ZW5kb3IgPSB7XG5cbiAgICAvLyBSZXR1cm4gdmVuZG9yIHByZWZpeCBmcm9tIHByb3BlcnR5IG5hbWUsIGlmIGl0IGV4aXN0c1xuICAgIC8vXG4gICAgLy8gICB2ZW5kb3IucHJlZml4KCctbW96LWJveC1zaXppbmcnKSAjPT4gJy1tb3otJ1xuICAgIC8vICAgdmVuZG9yLnByZWZpeCgnYm94LXNpemluZycpICAgICAgIz0+ICcnXG4gICAgcHJlZml4OiBmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICBpZiAoIHByb3BbMF0gPT0gJy0nICkge1xuICAgICAgICAgICAgdmFyIHNlcCA9IHByb3AuaW5kZXhPZignLScsIDEpO1xuICAgICAgICAgICAgcmV0dXJuIHByb3Auc3Vic3RyKDAsIHNlcCArIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vIFJlbW92ZSBwcmVmaXggZnJvbSBwcm9wZXJ0eSBuYW1lXG4gICAgLy9cbiAgICAvLyAgIHZlbmRvci5wcmVmaXgoJy1tb3otYm94LXNpemluZycpICM9PiAnYm94LXNpemluZydcbiAgICAvLyAgIHZlbmRvci5wcmVmaXgoJ2JveC1zaXppbmcnKSAgICAgICM9PiAnYm94LXNpemluZydcbiAgICB1bnByZWZpeGVkOiBmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICBpZiAoIHByb3BbMF0gPT0gJy0nICkge1xuICAgICAgICAgICAgdmFyIHNlcCA9IHByb3AuaW5kZXhPZignLScsIDEpO1xuICAgICAgICAgICAgcmV0dXJuIHByb3Auc3Vic3RyKHNlcCArIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICAgIH1cbiAgICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdmVuZG9yO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwpe1xuLypcbiAqICRJZDogYmFzZTY0LmpzLHYgMi4xNSAyMDE0LzA0LzA1IDEyOjU4OjU3IGRhbmtvZ2FpIEV4cCBkYW5rb2dhaSAkXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICpcbiAqICBSZWZlcmVuY2VzOlxuICogICAgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjRcbiAqL1xuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8vIGV4aXN0aW5nIHZlcnNpb24gZm9yIG5vQ29uZmxpY3QoKVxuICAgIHZhciBfQmFzZTY0ID0gZ2xvYmFsLkJhc2U2NDtcbiAgICB2YXIgdmVyc2lvbiA9IFwiMi4xLjVcIjtcbiAgICAvLyBpZiBub2RlLmpzLCB3ZSB1c2UgQnVmZmVyXG4gICAgdmFyIGJ1ZmZlcjtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuICAgIH1cbiAgICAvLyBjb25zdGFudHNcbiAgICB2YXIgYjY0Y2hhcnNcbiAgICAgICAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG4gICAgdmFyIGI2NHRhYiA9IGZ1bmN0aW9uKGJpbikge1xuICAgICAgICB2YXIgdCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGJpbi5sZW5ndGg7IGkgPCBsOyBpKyspIHRbYmluLmNoYXJBdChpKV0gPSBpO1xuICAgICAgICByZXR1cm4gdDtcbiAgICB9KGI2NGNoYXJzKTtcbiAgICB2YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbiAgICAvLyBlbmNvZGVyIHN0dWZmXG4gICAgdmFyIGNiX3V0b2IgPSBmdW5jdGlvbihjKSB7XG4gICAgICAgIGlmIChjLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHZhciBjYyA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIHJldHVybiBjYyA8IDB4ODAgPyBjXG4gICAgICAgICAgICAgICAgOiBjYyA8IDB4ODAwID8gKGZyb21DaGFyQ29kZSgweGMwIHwgKGNjID4+PiA2KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBmcm9tQ2hhckNvZGUoMHg4MCB8IChjYyAmIDB4M2YpKSlcbiAgICAgICAgICAgICAgICA6IChmcm9tQ2hhckNvZGUoMHhlMCB8ICgoY2MgPj4+IDEyKSAmIDB4MGYpKVxuICAgICAgICAgICAgICAgICAgICsgZnJvbUNoYXJDb2RlKDB4ODAgfCAoKGNjID4+PiAgNikgJiAweDNmKSlcbiAgICAgICAgICAgICAgICAgICArIGZyb21DaGFyQ29kZSgweDgwIHwgKCBjYyAgICAgICAgICYgMHgzZikpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjYyA9IDB4MTAwMDBcbiAgICAgICAgICAgICAgICArIChjLmNoYXJDb2RlQXQoMCkgLSAweEQ4MDApICogMHg0MDBcbiAgICAgICAgICAgICAgICArIChjLmNoYXJDb2RlQXQoMSkgLSAweERDMDApO1xuICAgICAgICAgICAgcmV0dXJuIChmcm9tQ2hhckNvZGUoMHhmMCB8ICgoY2MgPj4+IDE4KSAmIDB4MDcpKVxuICAgICAgICAgICAgICAgICAgICArIGZyb21DaGFyQ29kZSgweDgwIHwgKChjYyA+Pj4gMTIpICYgMHgzZikpXG4gICAgICAgICAgICAgICAgICAgICsgZnJvbUNoYXJDb2RlKDB4ODAgfCAoKGNjID4+PiAgNikgJiAweDNmKSlcbiAgICAgICAgICAgICAgICAgICAgKyBmcm9tQ2hhckNvZGUoMHg4MCB8ICggY2MgICAgICAgICAmIDB4M2YpKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZV91dG9iID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRkZdfFteXFx4MDAtXFx4N0ZdL2c7XG4gICAgdmFyIHV0b2IgPSBmdW5jdGlvbih1KSB7XG4gICAgICAgIHJldHVybiB1LnJlcGxhY2UocmVfdXRvYiwgY2JfdXRvYik7XG4gICAgfTtcbiAgICB2YXIgY2JfZW5jb2RlID0gZnVuY3Rpb24oY2NjKSB7XG4gICAgICAgIHZhciBwYWRsZW4gPSBbMCwgMiwgMV1bY2NjLmxlbmd0aCAlIDNdLFxuICAgICAgICBvcmQgPSBjY2MuY2hhckNvZGVBdCgwKSA8PCAxNlxuICAgICAgICAgICAgfCAoKGNjYy5sZW5ndGggPiAxID8gY2NjLmNoYXJDb2RlQXQoMSkgOiAwKSA8PCA4KVxuICAgICAgICAgICAgfCAoKGNjYy5sZW5ndGggPiAyID8gY2NjLmNoYXJDb2RlQXQoMikgOiAwKSksXG4gICAgICAgIGNoYXJzID0gW1xuICAgICAgICAgICAgYjY0Y2hhcnMuY2hhckF0KCBvcmQgPj4+IDE4KSxcbiAgICAgICAgICAgIGI2NGNoYXJzLmNoYXJBdCgob3JkID4+PiAxMikgJiA2MyksXG4gICAgICAgICAgICBwYWRsZW4gPj0gMiA/ICc9JyA6IGI2NGNoYXJzLmNoYXJBdCgob3JkID4+PiA2KSAmIDYzKSxcbiAgICAgICAgICAgIHBhZGxlbiA+PSAxID8gJz0nIDogYjY0Y2hhcnMuY2hhckF0KG9yZCAmIDYzKVxuICAgICAgICBdO1xuICAgICAgICByZXR1cm4gY2hhcnMuam9pbignJyk7XG4gICAgfTtcbiAgICB2YXIgYnRvYSA9IGdsb2JhbC5idG9hID8gZnVuY3Rpb24oYikge1xuICAgICAgICByZXR1cm4gZ2xvYmFsLmJ0b2EoYik7XG4gICAgfSA6IGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgcmV0dXJuIGIucmVwbGFjZSgvW1xcc1xcU117MSwzfS9nLCBjYl9lbmNvZGUpO1xuICAgIH07XG4gICAgdmFyIF9lbmNvZGUgPSBidWZmZXJcbiAgICAgICAgPyBmdW5jdGlvbiAodSkgeyByZXR1cm4gKG5ldyBidWZmZXIodSkpLnRvU3RyaW5nKCdiYXNlNjQnKSB9IFxuICAgIDogZnVuY3Rpb24gKHUpIHsgcmV0dXJuIGJ0b2EodXRvYih1KSkgfVxuICAgIDtcbiAgICB2YXIgZW5jb2RlID0gZnVuY3Rpb24odSwgdXJpc2FmZSkge1xuICAgICAgICByZXR1cm4gIXVyaXNhZmUgXG4gICAgICAgICAgICA/IF9lbmNvZGUodSlcbiAgICAgICAgICAgIDogX2VuY29kZSh1KS5yZXBsYWNlKC9bK1xcL10vZywgZnVuY3Rpb24obTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbTAgPT0gJysnID8gJy0nIDogJ18nO1xuICAgICAgICAgICAgfSkucmVwbGFjZSgvPS9nLCAnJyk7XG4gICAgfTtcbiAgICB2YXIgZW5jb2RlVVJJID0gZnVuY3Rpb24odSkgeyByZXR1cm4gZW5jb2RlKHUsIHRydWUpIH07XG4gICAgLy8gZGVjb2RlciBzdHVmZlxuICAgIHZhciByZV9idG91ID0gbmV3IFJlZ0V4cChbXG4gICAgICAgICdbXFx4QzAtXFx4REZdW1xceDgwLVxceEJGXScsXG4gICAgICAgICdbXFx4RTAtXFx4RUZdW1xceDgwLVxceEJGXXsyfScsXG4gICAgICAgICdbXFx4RjAtXFx4RjddW1xceDgwLVxceEJGXXszfSdcbiAgICBdLmpvaW4oJ3wnKSwgJ2cnKTtcbiAgICB2YXIgY2JfYnRvdSA9IGZ1bmN0aW9uKGNjY2MpIHtcbiAgICAgICAgc3dpdGNoKGNjY2MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHZhciBjcCA9ICgoMHgwNyAmIGNjY2MuY2hhckNvZGVBdCgwKSkgPDwgMTgpXG4gICAgICAgICAgICAgICAgfCAgICAoKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMSkpIDw8IDEyKVxuICAgICAgICAgICAgICAgIHwgICAgKCgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDIpKSA8PCAgNilcbiAgICAgICAgICAgICAgICB8ICAgICAoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgzKSksXG4gICAgICAgICAgICBvZmZzZXQgPSBjcCAtIDB4MTAwMDA7XG4gICAgICAgICAgICByZXR1cm4gKGZyb21DaGFyQ29kZSgob2Zmc2V0ICA+Pj4gMTApICsgMHhEODAwKVxuICAgICAgICAgICAgICAgICAgICArIGZyb21DaGFyQ29kZSgob2Zmc2V0ICYgMHgzRkYpICsgMHhEQzAwKSk7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiBmcm9tQ2hhckNvZGUoXG4gICAgICAgICAgICAgICAgKCgweDBmICYgY2NjYy5jaGFyQ29kZUF0KDApKSA8PCAxMilcbiAgICAgICAgICAgICAgICAgICAgfCAoKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMSkpIDw8IDYpXG4gICAgICAgICAgICAgICAgICAgIHwgICgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDIpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAgZnJvbUNoYXJDb2RlKFxuICAgICAgICAgICAgICAgICgoMHgxZiAmIGNjY2MuY2hhckNvZGVBdCgwKSkgPDwgNilcbiAgICAgICAgICAgICAgICAgICAgfCAgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMSkpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgYnRvdSA9IGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgcmV0dXJuIGIucmVwbGFjZShyZV9idG91LCBjYl9idG91KTtcbiAgICB9O1xuICAgIHZhciBjYl9kZWNvZGUgPSBmdW5jdGlvbihjY2NjKSB7XG4gICAgICAgIHZhciBsZW4gPSBjY2NjLmxlbmd0aCxcbiAgICAgICAgcGFkbGVuID0gbGVuICUgNCxcbiAgICAgICAgbiA9IChsZW4gPiAwID8gYjY0dGFiW2NjY2MuY2hhckF0KDApXSA8PCAxOCA6IDApXG4gICAgICAgICAgICB8IChsZW4gPiAxID8gYjY0dGFiW2NjY2MuY2hhckF0KDEpXSA8PCAxMiA6IDApXG4gICAgICAgICAgICB8IChsZW4gPiAyID8gYjY0dGFiW2NjY2MuY2hhckF0KDIpXSA8PCAgNiA6IDApXG4gICAgICAgICAgICB8IChsZW4gPiAzID8gYjY0dGFiW2NjY2MuY2hhckF0KDMpXSAgICAgICA6IDApLFxuICAgICAgICBjaGFycyA9IFtcbiAgICAgICAgICAgIGZyb21DaGFyQ29kZSggbiA+Pj4gMTYpLFxuICAgICAgICAgICAgZnJvbUNoYXJDb2RlKChuID4+PiAgOCkgJiAweGZmKSxcbiAgICAgICAgICAgIGZyb21DaGFyQ29kZSggbiAgICAgICAgICYgMHhmZilcbiAgICAgICAgXTtcbiAgICAgICAgY2hhcnMubGVuZ3RoIC09IFswLCAwLCAyLCAxXVtwYWRsZW5dO1xuICAgICAgICByZXR1cm4gY2hhcnMuam9pbignJyk7XG4gICAgfTtcbiAgICB2YXIgYXRvYiA9IGdsb2JhbC5hdG9iID8gZnVuY3Rpb24oYSkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsLmF0b2IoYSk7XG4gICAgfSA6IGZ1bmN0aW9uKGEpe1xuICAgICAgICByZXR1cm4gYS5yZXBsYWNlKC9bXFxzXFxTXXsxLDR9L2csIGNiX2RlY29kZSk7XG4gICAgfTtcbiAgICB2YXIgX2RlY29kZSA9IGJ1ZmZlclxuICAgICAgICA/IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIChuZXcgYnVmZmVyKGEsICdiYXNlNjQnKSkudG9TdHJpbmcoKSB9XG4gICAgOiBmdW5jdGlvbihhKSB7IHJldHVybiBidG91KGF0b2IoYSkpIH07XG4gICAgdmFyIGRlY29kZSA9IGZ1bmN0aW9uKGEpe1xuICAgICAgICByZXR1cm4gX2RlY29kZShcbiAgICAgICAgICAgIGEucmVwbGFjZSgvWy1fXS9nLCBmdW5jdGlvbihtMCkgeyByZXR1cm4gbTAgPT0gJy0nID8gJysnIDogJy8nIH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1teQS1aYS16MC05XFwrXFwvXS9nLCAnJylcbiAgICAgICAgKTtcbiAgICB9O1xuICAgIHZhciBub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBCYXNlNjQgPSBnbG9iYWwuQmFzZTY0O1xuICAgICAgICBnbG9iYWwuQmFzZTY0ID0gX0Jhc2U2NDtcbiAgICAgICAgcmV0dXJuIEJhc2U2NDtcbiAgICB9O1xuICAgIC8vIGV4cG9ydCBCYXNlNjRcbiAgICBnbG9iYWwuQmFzZTY0ID0ge1xuICAgICAgICBWRVJTSU9OOiB2ZXJzaW9uLFxuICAgICAgICBhdG9iOiBhdG9iLFxuICAgICAgICBidG9hOiBidG9hLFxuICAgICAgICBmcm9tQmFzZTY0OiBkZWNvZGUsXG4gICAgICAgIHRvQmFzZTY0OiBlbmNvZGUsXG4gICAgICAgIHV0b2I6IHV0b2IsXG4gICAgICAgIGVuY29kZTogZW5jb2RlLFxuICAgICAgICBlbmNvZGVVUkk6IGVuY29kZVVSSSxcbiAgICAgICAgYnRvdTogYnRvdSxcbiAgICAgICAgZGVjb2RlOiBkZWNvZGUsXG4gICAgICAgIG5vQ29uZmxpY3Q6IG5vQ29uZmxpY3RcbiAgICB9O1xuICAgIC8vIGlmIEVTNSBpcyBhdmFpbGFibGUsIG1ha2UgQmFzZTY0LmV4dGVuZFN0cmluZygpIGF2YWlsYWJsZVxuICAgIGlmICh0eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnR5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBub0VudW0gPSBmdW5jdGlvbih2KXtcbiAgICAgICAgICAgIHJldHVybiB7dmFsdWU6dixlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9O1xuICAgICAgICB9O1xuICAgICAgICBnbG9iYWwuQmFzZTY0LmV4dGVuZFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICBTdHJpbmcucHJvdG90eXBlLCAnZnJvbUJhc2U2NCcsIG5vRW51bShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGUodGhpcylcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICAgICAgICAgICAgU3RyaW5nLnByb3RvdHlwZSwgJ3RvQmFzZTY0Jywgbm9FbnVtKGZ1bmN0aW9uICh1cmlzYWZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmNvZGUodGhpcywgdXJpc2FmZSlcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICAgICAgICAgICAgU3RyaW5nLnByb3RvdHlwZSwgJ3RvQmFzZTY0VVJJJywgbm9FbnVtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZSh0aGlzLCB0cnVlKVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gdGhhdCdzIGl0IVxufSkodGhpcyk7XG5cbmlmICh0aGlzWydNZXRlb3InXSkge1xuICAgIEJhc2U2NCA9IGdsb2JhbC5CYXNlNjQ7IC8vIGZvciBub3JtYWwgZXhwb3J0IGluIE1ldGVvci5qc1xufVxuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSkiLCIvKlxuICogQ29weXJpZ2h0IDIwMDktMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0UudHh0IG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5leHBvcnRzLlNvdXJjZU1hcEdlbmVyYXRvciA9IHJlcXVpcmUoJy4vc291cmNlLW1hcC9zb3VyY2UtbWFwLWdlbmVyYXRvcicpLlNvdXJjZU1hcEdlbmVyYXRvcjtcbmV4cG9ydHMuU291cmNlTWFwQ29uc3VtZXIgPSByZXF1aXJlKCcuL3NvdXJjZS1tYXAvc291cmNlLW1hcC1jb25zdW1lcicpLlNvdXJjZU1hcENvbnN1bWVyO1xuZXhwb3J0cy5Tb3VyY2VOb2RlID0gcmVxdWlyZSgnLi9zb3VyY2UtbWFwL3NvdXJjZS1ub2RlJykuU291cmNlTm9kZTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGRlZmluZSA9IHJlcXVpcmUoJ2FtZGVmaW5lJykobW9kdWxlLCByZXF1aXJlKTtcbn1cbmRlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG5cbiAgdmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuICAvKipcbiAgICogQSBkYXRhIHN0cnVjdHVyZSB3aGljaCBpcyBhIGNvbWJpbmF0aW9uIG9mIGFuIGFycmF5IGFuZCBhIHNldC4gQWRkaW5nIGEgbmV3XG4gICAqIG1lbWJlciBpcyBPKDEpLCB0ZXN0aW5nIGZvciBtZW1iZXJzaGlwIGlzIE8oMSksIGFuZCBmaW5kaW5nIHRoZSBpbmRleCBvZiBhblxuICAgKiBlbGVtZW50IGlzIE8oMSkuIFJlbW92aW5nIGVsZW1lbnRzIGZyb20gdGhlIHNldCBpcyBub3Qgc3VwcG9ydGVkLiBPbmx5XG4gICAqIHN0cmluZ3MgYXJlIHN1cHBvcnRlZCBmb3IgbWVtYmVyc2hpcC5cbiAgICovXG4gIGZ1bmN0aW9uIEFycmF5U2V0KCkge1xuICAgIHRoaXMuX2FycmF5ID0gW107XG4gICAgdGhpcy5fc2V0ID0ge307XG4gIH1cblxuICAvKipcbiAgICogU3RhdGljIG1ldGhvZCBmb3IgY3JlYXRpbmcgQXJyYXlTZXQgaW5zdGFuY2VzIGZyb20gYW4gZXhpc3RpbmcgYXJyYXkuXG4gICAqL1xuICBBcnJheVNldC5mcm9tQXJyYXkgPSBmdW5jdGlvbiBBcnJheVNldF9mcm9tQXJyYXkoYUFycmF5LCBhQWxsb3dEdXBsaWNhdGVzKSB7XG4gICAgdmFyIHNldCA9IG5ldyBBcnJheVNldCgpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhQXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHNldC5hZGQoYUFycmF5W2ldLCBhQWxsb3dEdXBsaWNhdGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHNldDtcbiAgfTtcblxuICAvKipcbiAgICogQWRkIHRoZSBnaXZlbiBzdHJpbmcgdG8gdGhpcyBzZXQuXG4gICAqXG4gICAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICAgKi9cbiAgQXJyYXlTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIEFycmF5U2V0X2FkZChhU3RyLCBhQWxsb3dEdXBsaWNhdGVzKSB7XG4gICAgdmFyIGlzRHVwbGljYXRlID0gdGhpcy5oYXMoYVN0cik7XG4gICAgdmFyIGlkeCA9IHRoaXMuX2FycmF5Lmxlbmd0aDtcbiAgICBpZiAoIWlzRHVwbGljYXRlIHx8IGFBbGxvd0R1cGxpY2F0ZXMpIHtcbiAgICAgIHRoaXMuX2FycmF5LnB1c2goYVN0cik7XG4gICAgfVxuICAgIGlmICghaXNEdXBsaWNhdGUpIHtcbiAgICAgIHRoaXMuX3NldFt1dGlsLnRvU2V0U3RyaW5nKGFTdHIpXSA9IGlkeDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIElzIHRoZSBnaXZlbiBzdHJpbmcgYSBtZW1iZXIgb2YgdGhpcyBzZXQ/XG4gICAqXG4gICAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICAgKi9cbiAgQXJyYXlTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIEFycmF5U2V0X2hhcyhhU3RyKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9zZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLnRvU2V0U3RyaW5nKGFTdHIpKTtcbiAgfTtcblxuICAvKipcbiAgICogV2hhdCBpcyB0aGUgaW5kZXggb2YgdGhlIGdpdmVuIHN0cmluZyBpbiB0aGUgYXJyYXk/XG4gICAqXG4gICAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICAgKi9cbiAgQXJyYXlTZXQucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBBcnJheVNldF9pbmRleE9mKGFTdHIpIHtcbiAgICBpZiAodGhpcy5oYXMoYVN0cikpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zZXRbdXRpbC50b1NldFN0cmluZyhhU3RyKV07XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignXCInICsgYVN0ciArICdcIiBpcyBub3QgaW4gdGhlIHNldC4nKTtcbiAgfTtcblxuICAvKipcbiAgICogV2hhdCBpcyB0aGUgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXg/XG4gICAqXG4gICAqIEBwYXJhbSBOdW1iZXIgYUlkeFxuICAgKi9cbiAgQXJyYXlTZXQucHJvdG90eXBlLmF0ID0gZnVuY3Rpb24gQXJyYXlTZXRfYXQoYUlkeCkge1xuICAgIGlmIChhSWR4ID49IDAgJiYgYUlkeCA8IHRoaXMuX2FycmF5Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2FycmF5W2FJZHhdO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGVsZW1lbnQgaW5kZXhlZCBieSAnICsgYUlkeCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFycmF5IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgc2V0ICh3aGljaCBoYXMgdGhlIHByb3BlciBpbmRpY2VzXG4gICAqIGluZGljYXRlZCBieSBpbmRleE9mKS4gTm90ZSB0aGF0IHRoaXMgaXMgYSBjb3B5IG9mIHRoZSBpbnRlcm5hbCBhcnJheSB1c2VkXG4gICAqIGZvciBzdG9yaW5nIHRoZSBtZW1iZXJzIHNvIHRoYXQgbm8gb25lIGNhbiBtZXNzIHdpdGggaW50ZXJuYWwgc3RhdGUuXG4gICAqL1xuICBBcnJheVNldC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIEFycmF5U2V0X3RvQXJyYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FycmF5LnNsaWNlKCk7XG4gIH07XG5cbiAgZXhwb3J0cy5BcnJheVNldCA9IEFycmF5U2V0O1xuXG59KTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKlxuICogQmFzZWQgb24gdGhlIEJhc2UgNjQgVkxRIGltcGxlbWVudGF0aW9uIGluIENsb3N1cmUgQ29tcGlsZXI6XG4gKiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nsb3N1cmUtY29tcGlsZXIvc291cmNlL2Jyb3dzZS90cnVuay9zcmMvY29tL2dvb2dsZS9kZWJ1Z2dpbmcvc291cmNlbWFwL0Jhc2U2NFZMUS5qYXZhXG4gKlxuICogQ29weXJpZ2h0IDIwMTEgVGhlIENsb3N1cmUgQ29tcGlsZXIgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZVxuICogbWV0OlxuICpcbiAqICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlXG4gKiAgICBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuICogICAgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkXG4gKiAgICB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEdvb2dsZSBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzXG4gKiAgICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWRcbiAqICAgIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLFxuICogREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZXG4gKiBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0VcbiAqIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cbmlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGRlZmluZSA9IHJlcXVpcmUoJ2FtZGVmaW5lJykobW9kdWxlLCByZXF1aXJlKTtcbn1cbmRlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG5cbiAgdmFyIGJhc2U2NCA9IHJlcXVpcmUoJy4vYmFzZTY0Jyk7XG5cbiAgLy8gQSBzaW5nbGUgYmFzZSA2NCBkaWdpdCBjYW4gY29udGFpbiA2IGJpdHMgb2YgZGF0YS4gRm9yIHRoZSBiYXNlIDY0IHZhcmlhYmxlXG4gIC8vIGxlbmd0aCBxdWFudGl0aWVzIHdlIHVzZSBpbiB0aGUgc291cmNlIG1hcCBzcGVjLCB0aGUgZmlyc3QgYml0IGlzIHRoZSBzaWduLFxuICAvLyB0aGUgbmV4dCBmb3VyIGJpdHMgYXJlIHRoZSBhY3R1YWwgdmFsdWUsIGFuZCB0aGUgNnRoIGJpdCBpcyB0aGVcbiAgLy8gY29udGludWF0aW9uIGJpdC4gVGhlIGNvbnRpbnVhdGlvbiBiaXQgdGVsbHMgdXMgd2hldGhlciB0aGVyZSBhcmUgbW9yZVxuICAvLyBkaWdpdHMgaW4gdGhpcyB2YWx1ZSBmb2xsb3dpbmcgdGhpcyBkaWdpdC5cbiAgLy9cbiAgLy8gICBDb250aW51YXRpb25cbiAgLy8gICB8ICAgIFNpZ25cbiAgLy8gICB8ICAgIHxcbiAgLy8gICBWICAgIFZcbiAgLy8gICAxMDEwMTFcblxuICB2YXIgVkxRX0JBU0VfU0hJRlQgPSA1O1xuXG4gIC8vIGJpbmFyeTogMTAwMDAwXG4gIHZhciBWTFFfQkFTRSA9IDEgPDwgVkxRX0JBU0VfU0hJRlQ7XG5cbiAgLy8gYmluYXJ5OiAwMTExMTFcbiAgdmFyIFZMUV9CQVNFX01BU0sgPSBWTFFfQkFTRSAtIDE7XG5cbiAgLy8gYmluYXJ5OiAxMDAwMDBcbiAgdmFyIFZMUV9DT05USU5VQVRJT05fQklUID0gVkxRX0JBU0U7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGZyb20gYSB0d28tY29tcGxlbWVudCB2YWx1ZSB0byBhIHZhbHVlIHdoZXJlIHRoZSBzaWduIGJpdCBpc1xuICAgKiBpcyBwbGFjZWQgaW4gdGhlIGxlYXN0IHNpZ25pZmljYW50IGJpdC4gIEZvciBleGFtcGxlLCBhcyBkZWNpbWFsczpcbiAgICogICAxIGJlY29tZXMgMiAoMTAgYmluYXJ5KSwgLTEgYmVjb21lcyAzICgxMSBiaW5hcnkpXG4gICAqICAgMiBiZWNvbWVzIDQgKDEwMCBiaW5hcnkpLCAtMiBiZWNvbWVzIDUgKDEwMSBiaW5hcnkpXG4gICAqL1xuICBmdW5jdGlvbiB0b1ZMUVNpZ25lZChhVmFsdWUpIHtcbiAgICByZXR1cm4gYVZhbHVlIDwgMFxuICAgICAgPyAoKC1hVmFsdWUpIDw8IDEpICsgMVxuICAgICAgOiAoYVZhbHVlIDw8IDEpICsgMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0byBhIHR3by1jb21wbGVtZW50IHZhbHVlIGZyb20gYSB2YWx1ZSB3aGVyZSB0aGUgc2lnbiBiaXQgaXNcbiAgICogaXMgcGxhY2VkIGluIHRoZSBsZWFzdCBzaWduaWZpY2FudCBiaXQuICBGb3IgZXhhbXBsZSwgYXMgZGVjaW1hbHM6XG4gICAqICAgMiAoMTAgYmluYXJ5KSBiZWNvbWVzIDEsIDMgKDExIGJpbmFyeSkgYmVjb21lcyAtMVxuICAgKiAgIDQgKDEwMCBiaW5hcnkpIGJlY29tZXMgMiwgNSAoMTAxIGJpbmFyeSkgYmVjb21lcyAtMlxuICAgKi9cbiAgZnVuY3Rpb24gZnJvbVZMUVNpZ25lZChhVmFsdWUpIHtcbiAgICB2YXIgaXNOZWdhdGl2ZSA9IChhVmFsdWUgJiAxKSA9PT0gMTtcbiAgICB2YXIgc2hpZnRlZCA9IGFWYWx1ZSA+PiAxO1xuICAgIHJldHVybiBpc05lZ2F0aXZlXG4gICAgICA/IC1zaGlmdGVkXG4gICAgICA6IHNoaWZ0ZWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYmFzZSA2NCBWTFEgZW5jb2RlZCB2YWx1ZS5cbiAgICovXG4gIGV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gYmFzZTY0VkxRX2VuY29kZShhVmFsdWUpIHtcbiAgICB2YXIgZW5jb2RlZCA9IFwiXCI7XG4gICAgdmFyIGRpZ2l0O1xuXG4gICAgdmFyIHZscSA9IHRvVkxRU2lnbmVkKGFWYWx1ZSk7XG5cbiAgICBkbyB7XG4gICAgICBkaWdpdCA9IHZscSAmIFZMUV9CQVNFX01BU0s7XG4gICAgICB2bHEgPj4+PSBWTFFfQkFTRV9TSElGVDtcbiAgICAgIGlmICh2bHEgPiAwKSB7XG4gICAgICAgIC8vIFRoZXJlIGFyZSBzdGlsbCBtb3JlIGRpZ2l0cyBpbiB0aGlzIHZhbHVlLCBzbyB3ZSBtdXN0IG1ha2Ugc3VyZSB0aGVcbiAgICAgICAgLy8gY29udGludWF0aW9uIGJpdCBpcyBtYXJrZWQuXG4gICAgICAgIGRpZ2l0IHw9IFZMUV9DT05USU5VQVRJT05fQklUO1xuICAgICAgfVxuICAgICAgZW5jb2RlZCArPSBiYXNlNjQuZW5jb2RlKGRpZ2l0KTtcbiAgICB9IHdoaWxlICh2bHEgPiAwKTtcblxuICAgIHJldHVybiBlbmNvZGVkO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZWNvZGVzIHRoZSBuZXh0IGJhc2UgNjQgVkxRIHZhbHVlIGZyb20gdGhlIGdpdmVuIHN0cmluZyBhbmQgcmV0dXJucyB0aGVcbiAgICogdmFsdWUgYW5kIHRoZSByZXN0IG9mIHRoZSBzdHJpbmcgdmlhIHRoZSBvdXQgcGFyYW1ldGVyLlxuICAgKi9cbiAgZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbiBiYXNlNjRWTFFfZGVjb2RlKGFTdHIsIGFPdXRQYXJhbSkge1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgc3RyTGVuID0gYVN0ci5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgdmFyIHNoaWZ0ID0gMDtcbiAgICB2YXIgY29udGludWF0aW9uLCBkaWdpdDtcblxuICAgIGRvIHtcbiAgICAgIGlmIChpID49IHN0ckxlbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBtb3JlIGRpZ2l0cyBpbiBiYXNlIDY0IFZMUSB2YWx1ZS5cIik7XG4gICAgICB9XG4gICAgICBkaWdpdCA9IGJhc2U2NC5kZWNvZGUoYVN0ci5jaGFyQXQoaSsrKSk7XG4gICAgICBjb250aW51YXRpb24gPSAhIShkaWdpdCAmIFZMUV9DT05USU5VQVRJT05fQklUKTtcbiAgICAgIGRpZ2l0ICY9IFZMUV9CQVNFX01BU0s7XG4gICAgICByZXN1bHQgPSByZXN1bHQgKyAoZGlnaXQgPDwgc2hpZnQpO1xuICAgICAgc2hpZnQgKz0gVkxRX0JBU0VfU0hJRlQ7XG4gICAgfSB3aGlsZSAoY29udGludWF0aW9uKTtcblxuICAgIGFPdXRQYXJhbS52YWx1ZSA9IGZyb21WTFFTaWduZWQocmVzdWx0KTtcbiAgICBhT3V0UGFyYW0ucmVzdCA9IGFTdHIuc2xpY2UoaSk7XG4gIH07XG5cbn0pO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuaWYgKHR5cGVvZiBkZWZpbmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgZGVmaW5lID0gcmVxdWlyZSgnYW1kZWZpbmUnKShtb2R1bGUsIHJlcXVpcmUpO1xufVxuZGVmaW5lKGZ1bmN0aW9uIChyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcblxuICB2YXIgY2hhclRvSW50TWFwID0ge307XG4gIHZhciBpbnRUb0NoYXJNYXAgPSB7fTtcblxuICAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbiAgICAuc3BsaXQoJycpXG4gICAgLmZvckVhY2goZnVuY3Rpb24gKGNoLCBpbmRleCkge1xuICAgICAgY2hhclRvSW50TWFwW2NoXSA9IGluZGV4O1xuICAgICAgaW50VG9DaGFyTWFwW2luZGV4XSA9IGNoO1xuICAgIH0pO1xuXG4gIC8qKlxuICAgKiBFbmNvZGUgYW4gaW50ZWdlciBpbiB0aGUgcmFuZ2Ugb2YgMCB0byA2MyB0byBhIHNpbmdsZSBiYXNlIDY0IGRpZ2l0LlxuICAgKi9cbiAgZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiBiYXNlNjRfZW5jb2RlKGFOdW1iZXIpIHtcbiAgICBpZiAoYU51bWJlciBpbiBpbnRUb0NoYXJNYXApIHtcbiAgICAgIHJldHVybiBpbnRUb0NoYXJNYXBbYU51bWJlcl07XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJNdXN0IGJlIGJldHdlZW4gMCBhbmQgNjM6IFwiICsgYU51bWJlcik7XG4gIH07XG5cbiAgLyoqXG4gICAqIERlY29kZSBhIHNpbmdsZSBiYXNlIDY0IGRpZ2l0IHRvIGFuIGludGVnZXIuXG4gICAqL1xuICBleHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uIGJhc2U2NF9kZWNvZGUoYUNoYXIpIHtcbiAgICBpZiAoYUNoYXIgaW4gY2hhclRvSW50TWFwKSB7XG4gICAgICByZXR1cm4gY2hhclRvSW50TWFwW2FDaGFyXTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vdCBhIHZhbGlkIGJhc2UgNjQgZGlnaXQ6IFwiICsgYUNoYXIpO1xuICB9O1xuXG59KTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGRlZmluZSA9IHJlcXVpcmUoJ2FtZGVmaW5lJykobW9kdWxlLCByZXF1aXJlKTtcbn1cbmRlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG5cbiAgLyoqXG4gICAqIFJlY3Vyc2l2ZSBpbXBsZW1lbnRhdGlvbiBvZiBiaW5hcnkgc2VhcmNoLlxuICAgKlxuICAgKiBAcGFyYW0gYUxvdyBJbmRpY2VzIGhlcmUgYW5kIGxvd2VyIGRvIG5vdCBjb250YWluIHRoZSBuZWVkbGUuXG4gICAqIEBwYXJhbSBhSGlnaCBJbmRpY2VzIGhlcmUgYW5kIGhpZ2hlciBkbyBub3QgY29udGFpbiB0aGUgbmVlZGxlLlxuICAgKiBAcGFyYW0gYU5lZWRsZSBUaGUgZWxlbWVudCBiZWluZyBzZWFyY2hlZCBmb3IuXG4gICAqIEBwYXJhbSBhSGF5c3RhY2sgVGhlIG5vbi1lbXB0eSBhcnJheSBiZWluZyBzZWFyY2hlZC5cbiAgICogQHBhcmFtIGFDb21wYXJlIEZ1bmN0aW9uIHdoaWNoIHRha2VzIHR3byBlbGVtZW50cyBhbmQgcmV0dXJucyAtMSwgMCwgb3IgMS5cbiAgICovXG4gIGZ1bmN0aW9uIHJlY3Vyc2l2ZVNlYXJjaChhTG93LCBhSGlnaCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSkge1xuICAgIC8vIFRoaXMgZnVuY3Rpb24gdGVybWluYXRlcyB3aGVuIG9uZSBvZiB0aGUgZm9sbG93aW5nIGlzIHRydWU6XG4gICAgLy9cbiAgICAvLyAgIDEuIFdlIGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQgd2UgYXJlIGxvb2tpbmcgZm9yLlxuICAgIC8vXG4gICAgLy8gICAyLiBXZSBkaWQgbm90IGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQsIGJ1dCB3ZSBjYW4gcmV0dXJuIHRoZSBuZXh0XG4gICAgLy8gICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBsZXNzIHRoYW4gdGhhdCBlbGVtZW50LlxuICAgIC8vXG4gICAgLy8gICAzLiBXZSBkaWQgbm90IGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQsIGFuZCB0aGVyZSBpcyBubyBuZXh0LWNsb3Nlc3RcbiAgICAvLyAgICAgIGVsZW1lbnQgd2hpY2ggaXMgbGVzcyB0aGFuIHRoZSBvbmUgd2UgYXJlIHNlYXJjaGluZyBmb3IsIHNvIHdlXG4gICAgLy8gICAgICByZXR1cm4gbnVsbC5cbiAgICB2YXIgbWlkID0gTWF0aC5mbG9vcigoYUhpZ2ggLSBhTG93KSAvIDIpICsgYUxvdztcbiAgICB2YXIgY21wID0gYUNvbXBhcmUoYU5lZWRsZSwgYUhheXN0YWNrW21pZF0sIHRydWUpO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIC8vIEZvdW5kIHRoZSBlbGVtZW50IHdlIGFyZSBsb29raW5nIGZvci5cbiAgICAgIHJldHVybiBhSGF5c3RhY2tbbWlkXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgLy8gYUhheXN0YWNrW21pZF0gaXMgZ3JlYXRlciB0aGFuIG91ciBuZWVkbGUuXG4gICAgICBpZiAoYUhpZ2ggLSBtaWQgPiAxKSB7XG4gICAgICAgIC8vIFRoZSBlbGVtZW50IGlzIGluIHRoZSB1cHBlciBoYWxmLlxuICAgICAgICByZXR1cm4gcmVjdXJzaXZlU2VhcmNoKG1pZCwgYUhpZ2gsIGFOZWVkbGUsIGFIYXlzdGFjaywgYUNvbXBhcmUpO1xuICAgICAgfVxuICAgICAgLy8gV2UgZGlkIG5vdCBmaW5kIGFuIGV4YWN0IG1hdGNoLCByZXR1cm4gdGhlIG5leHQgY2xvc2VzdCBvbmVcbiAgICAgIC8vICh0ZXJtaW5hdGlvbiBjYXNlIDIpLlxuICAgICAgcmV0dXJuIGFIYXlzdGFja1ttaWRdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIGFIYXlzdGFja1ttaWRdIGlzIGxlc3MgdGhhbiBvdXIgbmVlZGxlLlxuICAgICAgaWYgKG1pZCAtIGFMb3cgPiAxKSB7XG4gICAgICAgIC8vIFRoZSBlbGVtZW50IGlzIGluIHRoZSBsb3dlciBoYWxmLlxuICAgICAgICByZXR1cm4gcmVjdXJzaXZlU2VhcmNoKGFMb3csIG1pZCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSk7XG4gICAgICB9XG4gICAgICAvLyBUaGUgZXhhY3QgbmVlZGxlIGVsZW1lbnQgd2FzIG5vdCBmb3VuZCBpbiB0aGlzIGhheXN0YWNrLiBEZXRlcm1pbmUgaWZcbiAgICAgIC8vIHdlIGFyZSBpbiB0ZXJtaW5hdGlvbiBjYXNlICgyKSBvciAoMykgYW5kIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgdGhpbmcuXG4gICAgICByZXR1cm4gYUxvdyA8IDBcbiAgICAgICAgPyBudWxsXG4gICAgICAgIDogYUhheXN0YWNrW2FMb3ddO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGJpbmFyeSBzZWFyY2ggd2hpY2ggd2lsbCBhbHdheXMgdHJ5IGFuZCByZXR1cm5cbiAgICogdGhlIG5leHQgbG93ZXN0IHZhbHVlIGNoZWNrZWQgaWYgdGhlcmUgaXMgbm8gZXhhY3QgaGl0LiBUaGlzIGlzIGJlY2F1c2VcbiAgICogbWFwcGluZ3MgYmV0d2VlbiBvcmlnaW5hbCBhbmQgZ2VuZXJhdGVkIGxpbmUvY29sIHBhaXJzIGFyZSBzaW5nbGUgcG9pbnRzLFxuICAgKiBhbmQgdGhlcmUgaXMgYW4gaW1wbGljaXQgcmVnaW9uIGJldHdlZW4gZWFjaCBvZiB0aGVtLCBzbyBhIG1pc3MganVzdCBtZWFuc1xuICAgKiB0aGF0IHlvdSBhcmVuJ3Qgb24gdGhlIHZlcnkgc3RhcnQgb2YgYSByZWdpb24uXG4gICAqXG4gICAqIEBwYXJhbSBhTmVlZGxlIFRoZSBlbGVtZW50IHlvdSBhcmUgbG9va2luZyBmb3IuXG4gICAqIEBwYXJhbSBhSGF5c3RhY2sgVGhlIGFycmF5IHRoYXQgaXMgYmVpbmcgc2VhcmNoZWQuXG4gICAqIEBwYXJhbSBhQ29tcGFyZSBBIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHRoZSBuZWVkbGUgYW5kIGFuIGVsZW1lbnQgaW4gdGhlXG4gICAqICAgICBhcnJheSBhbmQgcmV0dXJucyAtMSwgMCwgb3IgMSBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgbmVlZGxlIGlzIGxlc3NcbiAgICogICAgIHRoYW4sIGVxdWFsIHRvLCBvciBncmVhdGVyIHRoYW4gdGhlIGVsZW1lbnQsIHJlc3BlY3RpdmVseS5cbiAgICovXG4gIGV4cG9ydHMuc2VhcmNoID0gZnVuY3Rpb24gc2VhcmNoKGFOZWVkbGUsIGFIYXlzdGFjaywgYUNvbXBhcmUpIHtcbiAgICByZXR1cm4gYUhheXN0YWNrLmxlbmd0aCA+IDBcbiAgICAgID8gcmVjdXJzaXZlU2VhcmNoKC0xLCBhSGF5c3RhY2subGVuZ3RoLCBhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlKVxuICAgICAgOiBudWxsO1xuICB9O1xuXG59KTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGRlZmluZSA9IHJlcXVpcmUoJ2FtZGVmaW5lJykobW9kdWxlLCByZXF1aXJlKTtcbn1cbmRlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG5cbiAgdmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbiAgdmFyIGJpbmFyeVNlYXJjaCA9IHJlcXVpcmUoJy4vYmluYXJ5LXNlYXJjaCcpO1xuICB2YXIgQXJyYXlTZXQgPSByZXF1aXJlKCcuL2FycmF5LXNldCcpLkFycmF5U2V0O1xuICB2YXIgYmFzZTY0VkxRID0gcmVxdWlyZSgnLi9iYXNlNjQtdmxxJyk7XG5cbiAgLyoqXG4gICAqIEEgU291cmNlTWFwQ29uc3VtZXIgaW5zdGFuY2UgcmVwcmVzZW50cyBhIHBhcnNlZCBzb3VyY2UgbWFwIHdoaWNoIHdlIGNhblxuICAgKiBxdWVyeSBmb3IgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9yaWdpbmFsIGZpbGUgcG9zaXRpb25zIGJ5IGdpdmluZyBpdCBhIGZpbGVcbiAgICogcG9zaXRpb24gaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuXG4gICAqXG4gICAqIFRoZSBvbmx5IHBhcmFtZXRlciBpcyB0aGUgcmF3IHNvdXJjZSBtYXAgKGVpdGhlciBhcyBhIEpTT04gc3RyaW5nLCBvclxuICAgKiBhbHJlYWR5IHBhcnNlZCB0byBhbiBvYmplY3QpLiBBY2NvcmRpbmcgdG8gdGhlIHNwZWMsIHNvdXJjZSBtYXBzIGhhdmUgdGhlXG4gICAqIGZvbGxvd2luZyBhdHRyaWJ1dGVzOlxuICAgKlxuICAgKiAgIC0gdmVyc2lvbjogV2hpY2ggdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcCBzcGVjIHRoaXMgbWFwIGlzIGZvbGxvd2luZy5cbiAgICogICAtIHNvdXJjZXM6IEFuIGFycmF5IG9mIFVSTHMgdG8gdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlcy5cbiAgICogICAtIG5hbWVzOiBBbiBhcnJheSBvZiBpZGVudGlmaWVycyB3aGljaCBjYW4gYmUgcmVmZXJyZW5jZWQgYnkgaW5kaXZpZHVhbCBtYXBwaW5ncy5cbiAgICogICAtIHNvdXJjZVJvb3Q6IE9wdGlvbmFsLiBUaGUgVVJMIHJvb3QgZnJvbSB3aGljaCBhbGwgc291cmNlcyBhcmUgcmVsYXRpdmUuXG4gICAqICAgLSBzb3VyY2VzQ29udGVudDogT3B0aW9uYWwuIEFuIGFycmF5IG9mIGNvbnRlbnRzIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZXMuXG4gICAqICAgLSBtYXBwaW5nczogQSBzdHJpbmcgb2YgYmFzZTY0IFZMUXMgd2hpY2ggY29udGFpbiB0aGUgYWN0dWFsIG1hcHBpbmdzLlxuICAgKiAgIC0gZmlsZTogT3B0aW9uYWwuIFRoZSBnZW5lcmF0ZWQgZmlsZSB0aGlzIHNvdXJjZSBtYXAgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICAgKlxuICAgKiBIZXJlIGlzIGFuIGV4YW1wbGUgc291cmNlIG1hcCwgdGFrZW4gZnJvbSB0aGUgc291cmNlIG1hcCBzcGVjWzBdOlxuICAgKlxuICAgKiAgICAge1xuICAgKiAgICAgICB2ZXJzaW9uIDogMyxcbiAgICogICAgICAgZmlsZTogXCJvdXQuanNcIixcbiAgICogICAgICAgc291cmNlUm9vdCA6IFwiXCIsXG4gICAqICAgICAgIHNvdXJjZXM6IFtcImZvby5qc1wiLCBcImJhci5qc1wiXSxcbiAgICogICAgICAgbmFtZXM6IFtcInNyY1wiLCBcIm1hcHNcIiwgXCJhcmVcIiwgXCJmdW5cIl0sXG4gICAqICAgICAgIG1hcHBpbmdzOiBcIkFBLEFCOztBQkNERTtcIlxuICAgKiAgICAgfVxuICAgKlxuICAgKiBbMF06IGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2RvY3VtZW50L2QvMVUxUkdBZWhRd1J5cFVUb3ZGMUtSbHBpT0Z6ZTBiLV8yZ2M2ZkFIMEtZMGsvZWRpdD9wbGk9MSNcbiAgICovXG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXApIHtcbiAgICB2YXIgc291cmNlTWFwID0gYVNvdXJjZU1hcDtcbiAgICBpZiAodHlwZW9mIGFTb3VyY2VNYXAgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzb3VyY2VNYXAgPSBKU09OLnBhcnNlKGFTb3VyY2VNYXAucmVwbGFjZSgvXlxcKVxcXVxcfScvLCAnJykpO1xuICAgIH1cblxuICAgIHZhciB2ZXJzaW9uID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAndmVyc2lvbicpO1xuICAgIHZhciBzb3VyY2VzID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc291cmNlcycpO1xuICAgIC8vIFNhc3MgMy4zIGxlYXZlcyBvdXQgdGhlICduYW1lcycgYXJyYXksIHNvIHdlIGRldmlhdGUgZnJvbSB0aGUgc3BlYyAod2hpY2hcbiAgICAvLyByZXF1aXJlcyB0aGUgYXJyYXkpIHRvIHBsYXkgbmljZSBoZXJlLlxuICAgIHZhciBuYW1lcyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ25hbWVzJywgW10pO1xuICAgIHZhciBzb3VyY2VSb290ID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc291cmNlUm9vdCcsIG51bGwpO1xuICAgIHZhciBzb3VyY2VzQ29udGVudCA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NvdXJjZXNDb250ZW50JywgbnVsbCk7XG4gICAgdmFyIG1hcHBpbmdzID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnbWFwcGluZ3MnKTtcbiAgICB2YXIgZmlsZSA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ2ZpbGUnLCBudWxsKTtcblxuICAgIC8vIE9uY2UgYWdhaW4sIFNhc3MgZGV2aWF0ZXMgZnJvbSB0aGUgc3BlYyBhbmQgc3VwcGxpZXMgdGhlIHZlcnNpb24gYXMgYVxuICAgIC8vIHN0cmluZyByYXRoZXIgdGhhbiBhIG51bWJlciwgc28gd2UgdXNlIGxvb3NlIGVxdWFsaXR5IGNoZWNraW5nIGhlcmUuXG4gICAgaWYgKHZlcnNpb24gIT0gdGhpcy5fdmVyc2lvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB2ZXJzaW9uOiAnICsgdmVyc2lvbik7XG4gICAgfVxuXG4gICAgLy8gUGFzcyBgdHJ1ZWAgYmVsb3cgdG8gYWxsb3cgZHVwbGljYXRlIG5hbWVzIGFuZCBzb3VyY2VzLiBXaGlsZSBzb3VyY2UgbWFwc1xuICAgIC8vIGFyZSBpbnRlbmRlZCB0byBiZSBjb21wcmVzc2VkIGFuZCBkZWR1cGxpY2F0ZWQsIHRoZSBUeXBlU2NyaXB0IGNvbXBpbGVyXG4gICAgLy8gc29tZXRpbWVzIGdlbmVyYXRlcyBzb3VyY2UgbWFwcyB3aXRoIGR1cGxpY2F0ZXMgaW4gdGhlbS4gU2VlIEdpdGh1YiBpc3N1ZVxuICAgIC8vICM3MiBhbmQgYnVnemlsLmxhLzg4OTQ5Mi5cbiAgICB0aGlzLl9uYW1lcyA9IEFycmF5U2V0LmZyb21BcnJheShuYW1lcywgdHJ1ZSk7XG4gICAgdGhpcy5fc291cmNlcyA9IEFycmF5U2V0LmZyb21BcnJheShzb3VyY2VzLCB0cnVlKTtcblxuICAgIHRoaXMuc291cmNlUm9vdCA9IHNvdXJjZVJvb3Q7XG4gICAgdGhpcy5zb3VyY2VzQ29udGVudCA9IHNvdXJjZXNDb250ZW50O1xuICAgIHRoaXMuX21hcHBpbmdzID0gbWFwcGluZ3M7XG4gICAgdGhpcy5maWxlID0gZmlsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBTb3VyY2VNYXBDb25zdW1lciBmcm9tIGEgU291cmNlTWFwR2VuZXJhdG9yLlxuICAgKlxuICAgKiBAcGFyYW0gU291cmNlTWFwR2VuZXJhdG9yIGFTb3VyY2VNYXBcbiAgICogICAgICAgIFRoZSBzb3VyY2UgbWFwIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbiAgICogQHJldHVybnMgU291cmNlTWFwQ29uc3VtZXJcbiAgICovXG4gIFNvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXAgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2Zyb21Tb3VyY2VNYXAoYVNvdXJjZU1hcCkge1xuICAgICAgdmFyIHNtYyA9IE9iamVjdC5jcmVhdGUoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlKTtcblxuICAgICAgc21jLl9uYW1lcyA9IEFycmF5U2V0LmZyb21BcnJheShhU291cmNlTWFwLl9uYW1lcy50b0FycmF5KCksIHRydWUpO1xuICAgICAgc21jLl9zb3VyY2VzID0gQXJyYXlTZXQuZnJvbUFycmF5KGFTb3VyY2VNYXAuX3NvdXJjZXMudG9BcnJheSgpLCB0cnVlKTtcbiAgICAgIHNtYy5zb3VyY2VSb290ID0gYVNvdXJjZU1hcC5fc291cmNlUm9vdDtcbiAgICAgIHNtYy5zb3VyY2VzQ29udGVudCA9IGFTb3VyY2VNYXAuX2dlbmVyYXRlU291cmNlc0NvbnRlbnQoc21jLl9zb3VyY2VzLnRvQXJyYXkoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21jLnNvdXJjZVJvb3QpO1xuICAgICAgc21jLmZpbGUgPSBhU291cmNlTWFwLl9maWxlO1xuXG4gICAgICBzbWMuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IGFTb3VyY2VNYXAuX21hcHBpbmdzLnNsaWNlKClcbiAgICAgICAgLnNvcnQodXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnMpO1xuICAgICAgc21jLl9fb3JpZ2luYWxNYXBwaW5ncyA9IGFTb3VyY2VNYXAuX21hcHBpbmdzLnNsaWNlKClcbiAgICAgICAgLnNvcnQodXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG5cbiAgICAgIHJldHVybiBzbWM7XG4gICAgfTtcblxuICAvKipcbiAgICogVGhlIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXBwaW5nIHNwZWMgdGhhdCB3ZSBhcmUgY29uc3VtaW5nLlxuICAgKi9cbiAgU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl92ZXJzaW9uID0gMztcblxuICAvKipcbiAgICogVGhlIGxpc3Qgb2Ygb3JpZ2luYWwgc291cmNlcy5cbiAgICovXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdzb3VyY2VzJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NvdXJjZXMudG9BcnJheSgpLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VSb290ICE9IG51bGwgPyB1dGlsLmpvaW4odGhpcy5zb3VyY2VSb290LCBzKSA6IHM7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIGBfX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmQgYF9fb3JpZ2luYWxNYXBwaW5nc2AgYXJlIGFycmF5cyB0aGF0IGhvbGQgdGhlXG4gIC8vIHBhcnNlZCBtYXBwaW5nIGNvb3JkaW5hdGVzIGZyb20gdGhlIHNvdXJjZSBtYXAncyBcIm1hcHBpbmdzXCIgYXR0cmlidXRlLiBUaGV5XG4gIC8vIGFyZSBsYXppbHkgaW5zdGFudGlhdGVkLCBhY2Nlc3NlZCB2aWEgdGhlIGBfZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICAvLyBgX29yaWdpbmFsTWFwcGluZ3NgIGdldHRlcnMgcmVzcGVjdGl2ZWx5LCBhbmQgd2Ugb25seSBwYXJzZSB0aGUgbWFwcGluZ3NcbiAgLy8gYW5kIGNyZWF0ZSB0aGVzZSBhcnJheXMgb25jZSBxdWVyaWVkIGZvciBhIHNvdXJjZSBsb2NhdGlvbi4gV2UganVtcCB0aHJvdWdoXG4gIC8vIHRoZXNlIGhvb3BzIGJlY2F1c2UgdGhlcmUgY2FuIGJlIG1hbnkgdGhvdXNhbmRzIG9mIG1hcHBpbmdzLCBhbmQgcGFyc2luZ1xuICAvLyB0aGVtIGlzIGV4cGVuc2l2ZSwgc28gd2Ugb25seSB3YW50IHRvIGRvIGl0IGlmIHdlIG11c3QuXG4gIC8vXG4gIC8vIEVhY2ggb2JqZWN0IGluIHRoZSBhcnJheXMgaXMgb2YgdGhlIGZvcm06XG4gIC8vXG4gIC8vICAgICB7XG4gIC8vICAgICAgIGdlbmVyYXRlZExpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIGNvZGUsXG4gIC8vICAgICAgIGdlbmVyYXRlZENvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBjb2RlLFxuICAvLyAgICAgICBzb3VyY2U6IFRoZSBwYXRoIHRvIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSB0aGF0IGdlbmVyYXRlZCB0aGlzXG4gIC8vICAgICAgICAgICAgICAgY2h1bmsgb2YgY29kZSxcbiAgLy8gICAgICAgb3JpZ2luYWxMaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSB0aGF0XG4gIC8vICAgICAgICAgICAgICAgICAgICAgY29ycmVzcG9uZHMgdG8gdGhpcyBjaHVuayBvZiBnZW5lcmF0ZWQgY29kZSxcbiAgLy8gICAgICAgb3JpZ2luYWxDb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UgdGhhdFxuICAvLyAgICAgICAgICAgICAgICAgICAgICAgY29ycmVzcG9uZHMgdG8gdGhpcyBjaHVuayBvZiBnZW5lcmF0ZWQgY29kZSxcbiAgLy8gICAgICAgbmFtZTogVGhlIG5hbWUgb2YgdGhlIG9yaWdpbmFsIHN5bWJvbCB3aGljaCBnZW5lcmF0ZWQgdGhpcyBjaHVuayBvZlxuICAvLyAgICAgICAgICAgICBjb2RlLlxuICAvLyAgICAgfVxuICAvL1xuICAvLyBBbGwgcHJvcGVydGllcyBleGNlcHQgZm9yIGBnZW5lcmF0ZWRMaW5lYCBhbmQgYGdlbmVyYXRlZENvbHVtbmAgY2FuIGJlXG4gIC8vIGBudWxsYC5cbiAgLy9cbiAgLy8gYF9nZW5lcmF0ZWRNYXBwaW5nc2AgaXMgb3JkZXJlZCBieSB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucy5cbiAgLy9cbiAgLy8gYF9vcmlnaW5hbE1hcHBpbmdzYCBpcyBvcmRlcmVkIGJ5IHRoZSBvcmlnaW5hbCBwb3NpdGlvbnMuXG5cbiAgU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBudWxsO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnX2dlbmVyYXRlZE1hcHBpbmdzJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCF0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MpIHtcbiAgICAgICAgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzID0gW107XG4gICAgICAgIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzID0gW107XG4gICAgICAgIHRoaXMuX3BhcnNlTWFwcGluZ3ModGhpcy5fbWFwcGluZ3MsIHRoaXMuc291cmNlUm9vdCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gICAgfVxuICB9KTtcblxuICBTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX19vcmlnaW5hbE1hcHBpbmdzID0gbnVsbDtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ19vcmlnaW5hbE1hcHBpbmdzJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCF0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncykge1xuICAgICAgICB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBbXTtcbiAgICAgICAgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MgPSBbXTtcbiAgICAgICAgdGhpcy5fcGFyc2VNYXBwaW5ncyh0aGlzLl9tYXBwaW5ncywgdGhpcy5zb3VyY2VSb290KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzO1xuICAgIH1cbiAgfSk7XG5cbiAgU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9uZXh0Q2hhcklzTWFwcGluZ1NlcGFyYXRvciA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfbmV4dENoYXJJc01hcHBpbmdTZXBhcmF0b3IoYVN0cikge1xuICAgICAgdmFyIGMgPSBhU3RyLmNoYXJBdCgwKTtcbiAgICAgIHJldHVybiBjID09PSBcIjtcIiB8fCBjID09PSBcIixcIjtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gICAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICAgKiBgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3NgIHByb3BlcnRpZXMpLlxuICAgKi9cbiAgU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9wYXJzZU1hcHBpbmdzKGFTdHIsIGFTb3VyY2VSb290KSB7XG4gICAgICB2YXIgZ2VuZXJhdGVkTGluZSA9IDE7XG4gICAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgdmFyIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gMDtcbiAgICAgIHZhciBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gMDtcbiAgICAgIHZhciBwcmV2aW91c1NvdXJjZSA9IDA7XG4gICAgICB2YXIgcHJldmlvdXNOYW1lID0gMDtcbiAgICAgIHZhciBzdHIgPSBhU3RyO1xuICAgICAgdmFyIHRlbXAgPSB7fTtcbiAgICAgIHZhciBtYXBwaW5nO1xuXG4gICAgICB3aGlsZSAoc3RyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKHN0ci5jaGFyQXQoMCkgPT09ICc7Jykge1xuICAgICAgICAgIGdlbmVyYXRlZExpbmUrKztcbiAgICAgICAgICBzdHIgPSBzdHIuc2xpY2UoMSk7XG4gICAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0ci5jaGFyQXQoMCkgPT09ICcsJykge1xuICAgICAgICAgIHN0ciA9IHN0ci5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBtYXBwaW5nID0ge307XG4gICAgICAgICAgbWFwcGluZy5nZW5lcmF0ZWRMaW5lID0gZ2VuZXJhdGVkTGluZTtcblxuICAgICAgICAgIC8vIEdlbmVyYXRlZCBjb2x1bW4uXG4gICAgICAgICAgYmFzZTY0VkxRLmRlY29kZShzdHIsIHRlbXApO1xuICAgICAgICAgIG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uID0gcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gKyB0ZW1wLnZhbHVlO1xuICAgICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG4gICAgICAgICAgc3RyID0gdGVtcC5yZXN0O1xuXG4gICAgICAgICAgaWYgKHN0ci5sZW5ndGggPiAwICYmICF0aGlzLl9uZXh0Q2hhcklzTWFwcGluZ1NlcGFyYXRvcihzdHIpKSB7XG4gICAgICAgICAgICAvLyBPcmlnaW5hbCBzb3VyY2UuXG4gICAgICAgICAgICBiYXNlNjRWTFEuZGVjb2RlKHN0ciwgdGVtcCk7XG4gICAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHRoaXMuX3NvdXJjZXMuYXQocHJldmlvdXNTb3VyY2UgKyB0ZW1wLnZhbHVlKTtcbiAgICAgICAgICAgIHByZXZpb3VzU291cmNlICs9IHRlbXAudmFsdWU7XG4gICAgICAgICAgICBzdHIgPSB0ZW1wLnJlc3Q7XG4gICAgICAgICAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMCB8fCB0aGlzLl9uZXh0Q2hhcklzTWFwcGluZ1NlcGFyYXRvcihzdHIpKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgYSBzb3VyY2UsIGJ1dCBubyBsaW5lIGFuZCBjb2x1bW4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gT3JpZ2luYWwgbGluZS5cbiAgICAgICAgICAgIGJhc2U2NFZMUS5kZWNvZGUoc3RyLCB0ZW1wKTtcbiAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lID0gcHJldmlvdXNPcmlnaW5hbExpbmUgKyB0ZW1wLnZhbHVlO1xuICAgICAgICAgICAgcHJldmlvdXNPcmlnaW5hbExpbmUgPSBtYXBwaW5nLm9yaWdpbmFsTGluZTtcbiAgICAgICAgICAgIC8vIExpbmVzIGFyZSBzdG9yZWQgMC1iYXNlZFxuICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgKz0gMTtcbiAgICAgICAgICAgIHN0ciA9IHRlbXAucmVzdDtcbiAgICAgICAgICAgIGlmIChzdHIubGVuZ3RoID09PSAwIHx8IHRoaXMuX25leHRDaGFySXNNYXBwaW5nU2VwYXJhdG9yKHN0cikpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCBhIHNvdXJjZSBhbmQgbGluZSwgYnV0IG5vIGNvbHVtbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBPcmlnaW5hbCBjb2x1bW4uXG4gICAgICAgICAgICBiYXNlNjRWTFEuZGVjb2RlKHN0ciwgdGVtcCk7XG4gICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uID0gcHJldmlvdXNPcmlnaW5hbENvbHVtbiArIHRlbXAudmFsdWU7XG4gICAgICAgICAgICBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gbWFwcGluZy5vcmlnaW5hbENvbHVtbjtcbiAgICAgICAgICAgIHN0ciA9IHRlbXAucmVzdDtcblxuICAgICAgICAgICAgaWYgKHN0ci5sZW5ndGggPiAwICYmICF0aGlzLl9uZXh0Q2hhcklzTWFwcGluZ1NlcGFyYXRvcihzdHIpKSB7XG4gICAgICAgICAgICAgIC8vIE9yaWdpbmFsIG5hbWUuXG4gICAgICAgICAgICAgIGJhc2U2NFZMUS5kZWNvZGUoc3RyLCB0ZW1wKTtcbiAgICAgICAgICAgICAgbWFwcGluZy5uYW1lID0gdGhpcy5fbmFtZXMuYXQocHJldmlvdXNOYW1lICsgdGVtcC52YWx1ZSk7XG4gICAgICAgICAgICAgIHByZXZpb3VzTmFtZSArPSB0ZW1wLnZhbHVlO1xuICAgICAgICAgICAgICBzdHIgPSB0ZW1wLnJlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzLnB1c2gobWFwcGluZyk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBtYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzLnB1c2gobWFwcGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncy5zb3J0KHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zKTtcbiAgICAgIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzLnNvcnQodXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG4gICAgfTtcblxuICAvKipcbiAgICogRmluZCB0aGUgbWFwcGluZyB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgaHlwb3RoZXRpY2FsIFwibmVlZGxlXCIgbWFwcGluZyB0aGF0XG4gICAqIHdlIGFyZSBzZWFyY2hpbmcgZm9yIGluIHRoZSBnaXZlbiBcImhheXN0YWNrXCIgb2YgbWFwcGluZ3MuXG4gICAqL1xuICBTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2ZpbmRNYXBwaW5nID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9maW5kTWFwcGluZyhhTmVlZGxlLCBhTWFwcGluZ3MsIGFMaW5lTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhQ29sdW1uTmFtZSwgYUNvbXBhcmF0b3IpIHtcbiAgICAgIC8vIFRvIHJldHVybiB0aGUgcG9zaXRpb24gd2UgYXJlIHNlYXJjaGluZyBmb3IsIHdlIG11c3QgZmlyc3QgZmluZCB0aGVcbiAgICAgIC8vIG1hcHBpbmcgZm9yIHRoZSBnaXZlbiBwb3NpdGlvbiBhbmQgdGhlbiByZXR1cm4gdGhlIG9wcG9zaXRlIHBvc2l0aW9uIGl0XG4gICAgICAvLyBwb2ludHMgdG8uIEJlY2F1c2UgdGhlIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHdlIGNhbiB1c2UgYmluYXJ5IHNlYXJjaCB0b1xuICAgICAgLy8gZmluZCB0aGUgYmVzdCBtYXBwaW5nLlxuXG4gICAgICBpZiAoYU5lZWRsZVthTGluZU5hbWVdIDw9IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTGluZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAxLCBnb3QgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgYU5lZWRsZVthTGluZU5hbWVdKTtcbiAgICAgIH1cbiAgICAgIGlmIChhTmVlZGxlW2FDb2x1bW5OYW1lXSA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29sdW1uIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDAsIGdvdCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBhTmVlZGxlW2FDb2x1bW5OYW1lXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBiaW5hcnlTZWFyY2guc2VhcmNoKGFOZWVkbGUsIGFNYXBwaW5ncywgYUNvbXBhcmF0b3IpO1xuICAgIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSwgbGluZSwgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGdlbmVyYXRlZFxuICAgKiBzb3VyY2UncyBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3RcbiAgICogd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuXG4gICAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLlxuICAgKlxuICAgKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUsIG9yIG51bGwuXG4gICAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC5cbiAgICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC5cbiAgICogICAtIG5hbWU6IFRoZSBvcmlnaW5hbCBpZGVudGlmaWVyLCBvciBudWxsLlxuICAgKi9cbiAgU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLm9yaWdpbmFsUG9zaXRpb25Gb3IgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX29yaWdpbmFsUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICAgIGdlbmVyYXRlZExpbmU6IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbGluZScpLFxuICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJylcbiAgICAgIH07XG5cbiAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5fZmluZE1hcHBpbmcobmVlZGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJnZW5lcmF0ZWRMaW5lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZ2VuZXJhdGVkQ29sdW1uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zKTtcblxuICAgICAgaWYgKG1hcHBpbmcgJiYgbWFwcGluZy5nZW5lcmF0ZWRMaW5lID09PSBuZWVkbGUuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICB2YXIgc291cmNlID0gdXRpbC5nZXRBcmcobWFwcGluZywgJ3NvdXJjZScsIG51bGwpO1xuICAgICAgICBpZiAoc291cmNlICE9IG51bGwgJiYgdGhpcy5zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2UgPSB1dGlsLmpvaW4odGhpcy5zb3VyY2VSb290LCBzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ29yaWdpbmFsTGluZScsIG51bGwpLFxuICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ29yaWdpbmFsQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgbmFtZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ25hbWUnLCBudWxsKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IG51bGwsXG4gICAgICAgIGxpbmU6IG51bGwsXG4gICAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgICAgbmFtZTogbnVsbFxuICAgICAgfTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UgY29udGVudC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgdGhlIHVybCBvZiB0aGVcbiAgICogb3JpZ2luYWwgc291cmNlIGZpbGUuIFJldHVybnMgbnVsbCBpZiBubyBvcmlnaW5hbCBzb3VyY2UgY29udGVudCBpc1xuICAgKiBhdmFpbGlibGUuXG4gICAqL1xuICBTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuc291cmNlQ29udGVudEZvciA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfc291cmNlQ29udGVudEZvcihhU291cmNlKSB7XG4gICAgICBpZiAoIXRoaXMuc291cmNlc0NvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICBhU291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLnNvdXJjZVJvb3QsIGFTb3VyY2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fc291cmNlcy5oYXMoYVNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnRbdGhpcy5fc291cmNlcy5pbmRleE9mKGFTb3VyY2UpXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHVybDtcbiAgICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbFxuICAgICAgICAgICYmICh1cmwgPSB1dGlsLnVybFBhcnNlKHRoaXMuc291cmNlUm9vdCkpKSB7XG4gICAgICAgIC8vIFhYWDogZmlsZTovLyBVUklzIGFuZCBhYnNvbHV0ZSBwYXRocyBsZWFkIHRvIHVuZXhwZWN0ZWQgYmVoYXZpb3IgZm9yXG4gICAgICAgIC8vIG1hbnkgdXNlcnMuIFdlIGNhbiBoZWxwIHRoZW0gb3V0IHdoZW4gdGhleSBleHBlY3QgZmlsZTovLyBVUklzIHRvXG4gICAgICAgIC8vIGJlaGF2ZSBsaWtlIGl0IHdvdWxkIGlmIHRoZXkgd2VyZSBydW5uaW5nIGEgbG9jYWwgSFRUUCBzZXJ2ZXIuIFNlZVxuICAgICAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04ODU1OTcuXG4gICAgICAgIHZhciBmaWxlVXJpQWJzUGF0aCA9IGFTb3VyY2UucmVwbGFjZSgvXmZpbGU6XFwvXFwvLywgXCJcIik7XG4gICAgICAgIGlmICh1cmwuc2NoZW1lID09IFwiZmlsZVwiXG4gICAgICAgICAgICAmJiB0aGlzLl9zb3VyY2VzLmhhcyhmaWxlVXJpQWJzUGF0aCkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudFt0aGlzLl9zb3VyY2VzLmluZGV4T2YoZmlsZVVyaUFic1BhdGgpXVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCghdXJsLnBhdGggfHwgdXJsLnBhdGggPT0gXCIvXCIpXG4gICAgICAgICAgICAmJiB0aGlzLl9zb3VyY2VzLmhhcyhcIi9cIiArIGFTb3VyY2UpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnRbdGhpcy5fc291cmNlcy5pbmRleE9mKFwiL1wiICsgYVNvdXJjZSldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcignXCInICsgYVNvdXJjZSArICdcIiBpcyBub3QgaW4gdGhlIFNvdXJjZU1hcC4nKTtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgb3JpZ2luYWwgc291cmNlLFxuICAgKiBsaW5lLCBhbmQgY29sdW1uIHBvc2l0aW9ucyBwcm92aWRlZC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0IHdpdGhcbiAgICogdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gc291cmNlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAgICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICAgKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICAgKlxuICAgKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICAgKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAgICovXG4gIFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5nZW5lcmF0ZWRQb3NpdGlvbkZvciA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICAgIHNvdXJjZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2UnKSxcbiAgICAgICAgb3JpZ2luYWxMaW5lOiB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKSxcbiAgICAgICAgb3JpZ2luYWxDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJylcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICBuZWVkbGUuc291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLnNvdXJjZVJvb3QsIG5lZWRsZS5zb3VyY2UpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX2ZpbmRNYXBwaW5nKG5lZWRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3JpZ2luYWxNYXBwaW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvcmlnaW5hbExpbmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvcmlnaW5hbENvbHVtblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKTtcblxuICAgICAgaWYgKG1hcHBpbmcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkTGluZScsIG51bGwpLFxuICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZENvbHVtbicsIG51bGwpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpbmU6IG51bGwsXG4gICAgICAgIGNvbHVtbjogbnVsbFxuICAgICAgfTtcbiAgICB9O1xuXG4gIFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUiA9IDE7XG4gIFNvdXJjZU1hcENvbnN1bWVyLk9SSUdJTkFMX09SREVSID0gMjtcblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGVhY2ggbWFwcGluZyBiZXR3ZWVuIGFuIG9yaWdpbmFsIHNvdXJjZS9saW5lL2NvbHVtbiBhbmQgYVxuICAgKiBnZW5lcmF0ZWQgbGluZS9jb2x1bW4gaW4gdGhpcyBzb3VyY2UgbWFwLlxuICAgKlxuICAgKiBAcGFyYW0gRnVuY3Rpb24gYUNhbGxiYWNrXG4gICAqICAgICAgICBUaGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2l0aCBlYWNoIG1hcHBpbmcuXG4gICAqIEBwYXJhbSBPYmplY3QgYUNvbnRleHRcbiAgICogICAgICAgIE9wdGlvbmFsLiBJZiBzcGVjaWZpZWQsIHRoaXMgb2JqZWN0IHdpbGwgYmUgdGhlIHZhbHVlIG9mIGB0aGlzYCBldmVyeVxuICAgKiAgICAgICAgdGltZSB0aGF0IGBhQ2FsbGJhY2tgIGlzIGNhbGxlZC5cbiAgICogQHBhcmFtIGFPcmRlclxuICAgKiAgICAgICAgRWl0aGVyIGBTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVJgIG9yXG4gICAqICAgICAgICBgU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVJgLiBTcGVjaWZpZXMgd2hldGhlciB5b3Ugd2FudCB0b1xuICAgKiAgICAgICAgaXRlcmF0ZSBvdmVyIHRoZSBtYXBwaW5ncyBzb3J0ZWQgYnkgdGhlIGdlbmVyYXRlZCBmaWxlJ3MgbGluZS9jb2x1bW5cbiAgICogICAgICAgIG9yZGVyIG9yIHRoZSBvcmlnaW5hbCdzIHNvdXJjZS9saW5lL2NvbHVtbiBvcmRlciwgcmVzcGVjdGl2ZWx5LiBEZWZhdWx0cyB0b1xuICAgKiAgICAgICAgYFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUmAuXG4gICAqL1xuICBTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuZWFjaE1hcHBpbmcgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2VhY2hNYXBwaW5nKGFDYWxsYmFjaywgYUNvbnRleHQsIGFPcmRlcikge1xuICAgICAgdmFyIGNvbnRleHQgPSBhQ29udGV4dCB8fCBudWxsO1xuICAgICAgdmFyIG9yZGVyID0gYU9yZGVyIHx8IFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUjtcblxuICAgICAgdmFyIG1hcHBpbmdzO1xuICAgICAgc3dpdGNoIChvcmRlcikge1xuICAgICAgY2FzZSBTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVI6XG4gICAgICAgIG1hcHBpbmdzID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTb3VyY2VNYXBDb25zdW1lci5PUklHSU5BTF9PUkRFUjpcbiAgICAgICAgbWFwcGluZ3MgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gb3JkZXIgb2YgaXRlcmF0aW9uLlwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNvdXJjZVJvb3QgPSB0aGlzLnNvdXJjZVJvb3Q7XG4gICAgICBtYXBwaW5ncy5tYXAoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IG1hcHBpbmcuc291cmNlO1xuICAgICAgICBpZiAoc291cmNlICE9IG51bGwgJiYgc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgc291cmNlID0gdXRpbC5qb2luKHNvdXJjZVJvb3QsIHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICBnZW5lcmF0ZWRMaW5lOiBtYXBwaW5nLmdlbmVyYXRlZExpbmUsXG4gICAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbixcbiAgICAgICAgICBvcmlnaW5hbExpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgIG9yaWdpbmFsQ29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uLFxuICAgICAgICAgIG5hbWU6IG1hcHBpbmcubmFtZVxuICAgICAgICB9O1xuICAgICAgfSkuZm9yRWFjaChhQ2FsbGJhY2ssIGNvbnRleHQpO1xuICAgIH07XG5cbiAgZXhwb3J0cy5Tb3VyY2VNYXBDb25zdW1lciA9IFNvdXJjZU1hcENvbnN1bWVyO1xuXG59KTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGRlZmluZSA9IHJlcXVpcmUoJ2FtZGVmaW5lJykobW9kdWxlLCByZXF1aXJlKTtcbn1cbmRlZmluZShmdW5jdGlvbiAocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG5cbiAgdmFyIGJhc2U2NFZMUSA9IHJlcXVpcmUoJy4vYmFzZTY0LXZscScpO1xuICB2YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuICB2YXIgQXJyYXlTZXQgPSByZXF1aXJlKCcuL2FycmF5LXNldCcpLkFycmF5U2V0O1xuXG4gIC8qKlxuICAgKiBBbiBpbnN0YW5jZSBvZiB0aGUgU291cmNlTWFwR2VuZXJhdG9yIHJlcHJlc2VudHMgYSBzb3VyY2UgbWFwIHdoaWNoIGlzXG4gICAqIGJlaW5nIGJ1aWx0IGluY3JlbWVudGFsbHkuIFlvdSBtYXkgcGFzcyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSBmaWxlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIGdlbmVyYXRlZCBzb3VyY2UuXG4gICAqICAgLSBzb3VyY2VSb290OiBBIHJvb3QgZm9yIGFsbCByZWxhdGl2ZSBVUkxzIGluIHRoaXMgc291cmNlIG1hcC5cbiAgICovXG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcihhQXJncykge1xuICAgIGlmICghYUFyZ3MpIHtcbiAgICAgIGFBcmdzID0ge307XG4gICAgfVxuICAgIHRoaXMuX2ZpbGUgPSB1dGlsLmdldEFyZyhhQXJncywgJ2ZpbGUnLCBudWxsKTtcbiAgICB0aGlzLl9zb3VyY2VSb290ID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2VSb290JywgbnVsbCk7XG4gICAgdGhpcy5fc291cmNlcyA9IG5ldyBBcnJheVNldCgpO1xuICAgIHRoaXMuX25hbWVzID0gbmV3IEFycmF5U2V0KCk7XG4gICAgdGhpcy5fbWFwcGluZ3MgPSBbXTtcbiAgICB0aGlzLl9zb3VyY2VzQ29udGVudHMgPSBudWxsO1xuICB9XG5cbiAgU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgU291cmNlTWFwR2VuZXJhdG9yIGJhc2VkIG9uIGEgU291cmNlTWFwQ29uc3VtZXJcbiAgICpcbiAgICogQHBhcmFtIGFTb3VyY2VNYXBDb25zdW1lciBUaGUgU291cmNlTWFwLlxuICAgKi9cbiAgU291cmNlTWFwR2VuZXJhdG9yLmZyb21Tb3VyY2VNYXAgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9mcm9tU291cmNlTWFwKGFTb3VyY2VNYXBDb25zdW1lcikge1xuICAgICAgdmFyIHNvdXJjZVJvb3QgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlUm9vdDtcbiAgICAgIHZhciBnZW5lcmF0b3IgPSBuZXcgU291cmNlTWFwR2VuZXJhdG9yKHtcbiAgICAgICAgZmlsZTogYVNvdXJjZU1hcENvbnN1bWVyLmZpbGUsXG4gICAgICAgIHNvdXJjZVJvb3Q6IHNvdXJjZVJvb3RcbiAgICAgIH0pO1xuICAgICAgYVNvdXJjZU1hcENvbnN1bWVyLmVhY2hNYXBwaW5nKGZ1bmN0aW9uIChtYXBwaW5nKSB7XG4gICAgICAgIHZhciBuZXdNYXBwaW5nID0ge1xuICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgbGluZTogbWFwcGluZy5nZW5lcmF0ZWRMaW5lLFxuICAgICAgICAgICAgY29sdW1uOiBtYXBwaW5nLmdlbmVyYXRlZENvbHVtblxuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWFwcGluZy5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICAgIG5ld01hcHBpbmcuc291cmNlID0gbWFwcGluZy5zb3VyY2U7XG4gICAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgbmV3TWFwcGluZy5zb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIG5ld01hcHBpbmcuc291cmNlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXdNYXBwaW5nLm9yaWdpbmFsID0ge1xuICAgICAgICAgICAgbGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgICBjb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW5cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKG1hcHBpbmcubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBuZXdNYXBwaW5nLm5hbWUgPSBtYXBwaW5nLm5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZ2VuZXJhdG9yLmFkZE1hcHBpbmcobmV3TWFwcGluZyk7XG4gICAgICB9KTtcbiAgICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUZpbGUpIHtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlQ29udGVudEZvcihzb3VyY2VGaWxlKTtcbiAgICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICAgIGdlbmVyYXRvci5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBnZW5lcmF0b3I7XG4gICAgfTtcblxuICAvKipcbiAgICogQWRkIGEgc2luZ2xlIG1hcHBpbmcgZnJvbSBvcmlnaW5hbCBzb3VyY2UgbGluZSBhbmQgY29sdW1uIHRvIHRoZSBnZW5lcmF0ZWRcbiAgICogc291cmNlJ3MgbGluZSBhbmQgY29sdW1uIGZvciB0aGlzIHNvdXJjZSBtYXAgYmVpbmcgY3JlYXRlZC4gVGhlIG1hcHBpbmdcbiAgICogb2JqZWN0IHNob3VsZCBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogICAtIGdlbmVyYXRlZDogQW4gb2JqZWN0IHdpdGggdGhlIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zLlxuICAgKiAgIC0gb3JpZ2luYWw6IEFuIG9iamVjdCB3aXRoIHRoZSBvcmlnaW5hbCBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zLlxuICAgKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUgKHJlbGF0aXZlIHRvIHRoZSBzb3VyY2VSb290KS5cbiAgICogICAtIG5hbWU6IEFuIG9wdGlvbmFsIG9yaWdpbmFsIHRva2VuIG5hbWUgZm9yIHRoaXMgbWFwcGluZy5cbiAgICovXG4gIFNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYWRkTWFwcGluZyA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2FkZE1hcHBpbmcoYUFyZ3MpIHtcbiAgICAgIHZhciBnZW5lcmF0ZWQgPSB1dGlsLmdldEFyZyhhQXJncywgJ2dlbmVyYXRlZCcpO1xuICAgICAgdmFyIG9yaWdpbmFsID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdvcmlnaW5hbCcsIG51bGwpO1xuICAgICAgdmFyIHNvdXJjZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJywgbnVsbCk7XG4gICAgICB2YXIgbmFtZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbmFtZScsIG51bGwpO1xuXG4gICAgICB0aGlzLl92YWxpZGF0ZU1hcHBpbmcoZ2VuZXJhdGVkLCBvcmlnaW5hbCwgc291cmNlLCBuYW1lKTtcblxuICAgICAgaWYgKHNvdXJjZSAhPSBudWxsICYmICF0aGlzLl9zb3VyY2VzLmhhcyhzb3VyY2UpKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuYW1lICE9IG51bGwgJiYgIXRoaXMuX25hbWVzLmhhcyhuYW1lKSkge1xuICAgICAgICB0aGlzLl9uYW1lcy5hZGQobmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX21hcHBpbmdzLnB1c2goe1xuICAgICAgICBnZW5lcmF0ZWRMaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uLFxuICAgICAgICBvcmlnaW5hbExpbmU6IG9yaWdpbmFsICE9IG51bGwgJiYgb3JpZ2luYWwubGluZSxcbiAgICAgICAgb3JpZ2luYWxDb2x1bW46IG9yaWdpbmFsICE9IG51bGwgJiYgb3JpZ2luYWwuY29sdW1uLFxuICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAvKipcbiAgICogU2V0IHRoZSBzb3VyY2UgY29udGVudCBmb3IgYSBzb3VyY2UgZmlsZS5cbiAgICovXG4gIFNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuc2V0U291cmNlQ29udGVudCA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3NldFNvdXJjZUNvbnRlbnQoYVNvdXJjZUZpbGUsIGFTb3VyY2VDb250ZW50KSB7XG4gICAgICB2YXIgc291cmNlID0gYVNvdXJjZUZpbGU7XG4gICAgICBpZiAodGhpcy5fc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgIHNvdXJjZSA9IHV0aWwucmVsYXRpdmUodGhpcy5fc291cmNlUm9vdCwgc291cmNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFTb3VyY2VDb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgLy8gQWRkIHRoZSBzb3VyY2UgY29udGVudCB0byB0aGUgX3NvdXJjZXNDb250ZW50cyBtYXAuXG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBfc291cmNlc0NvbnRlbnRzIG1hcCBpZiB0aGUgcHJvcGVydHkgaXMgbnVsbC5cbiAgICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgICAgICB0aGlzLl9zb3VyY2VzQ29udGVudHMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zb3VyY2VzQ29udGVudHNbdXRpbC50b1NldFN0cmluZyhzb3VyY2UpXSA9IGFTb3VyY2VDb250ZW50O1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBzb3VyY2UgZmlsZSBmcm9tIHRoZSBfc291cmNlc0NvbnRlbnRzIG1hcC5cbiAgICAgICAgLy8gSWYgdGhlIF9zb3VyY2VzQ29udGVudHMgbWFwIGlzIGVtcHR5LCBzZXQgdGhlIHByb3BlcnR5IHRvIG51bGwuXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9zb3VyY2VzQ29udGVudHNbdXRpbC50b1NldFN0cmluZyhzb3VyY2UpXTtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuX3NvdXJjZXNDb250ZW50cykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fc291cmNlc0NvbnRlbnRzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIG1hcHBpbmdzIG9mIGEgc3ViLXNvdXJjZS1tYXAgZm9yIGEgc3BlY2lmaWMgc291cmNlIGZpbGUgdG8gdGhlXG4gICAqIHNvdXJjZSBtYXAgYmVpbmcgZ2VuZXJhdGVkLiBFYWNoIG1hcHBpbmcgdG8gdGhlIHN1cHBsaWVkIHNvdXJjZSBmaWxlIGlzXG4gICAqIHJld3JpdHRlbiB1c2luZyB0aGUgc3VwcGxpZWQgc291cmNlIG1hcC4gTm90ZTogVGhlIHJlc29sdXRpb24gZm9yIHRoZVxuICAgKiByZXN1bHRpbmcgbWFwcGluZ3MgaXMgdGhlIG1pbmltaXVtIG9mIHRoaXMgbWFwIGFuZCB0aGUgc3VwcGxpZWQgbWFwLlxuICAgKlxuICAgKiBAcGFyYW0gYVNvdXJjZU1hcENvbnN1bWVyIFRoZSBzb3VyY2UgbWFwIHRvIGJlIGFwcGxpZWQuXG4gICAqIEBwYXJhbSBhU291cmNlRmlsZSBPcHRpb25hbC4gVGhlIGZpbGVuYW1lIG9mIHRoZSBzb3VyY2UgZmlsZS5cbiAgICogICAgICAgIElmIG9taXR0ZWQsIFNvdXJjZU1hcENvbnN1bWVyJ3MgZmlsZSBwcm9wZXJ0eSB3aWxsIGJlIHVzZWQuXG4gICAqIEBwYXJhbSBhU291cmNlTWFwUGF0aCBPcHRpb25hbC4gVGhlIGRpcm5hbWUgb2YgdGhlIHBhdGggdG8gdGhlIHNvdXJjZSBtYXBcbiAgICogICAgICAgIHRvIGJlIGFwcGxpZWQuIElmIHJlbGF0aXZlLCBpdCBpcyByZWxhdGl2ZSB0byB0aGUgU291cmNlTWFwQ29uc3VtZXIuXG4gICAqICAgICAgICBUaGlzIHBhcmFtZXRlciBpcyBuZWVkZWQgd2hlbiB0aGUgdHdvIHNvdXJjZSBtYXBzIGFyZW4ndCBpbiB0aGUgc2FtZVxuICAgKiAgICAgICAgZGlyZWN0b3J5LCBhbmQgdGhlIHNvdXJjZSBtYXAgdG8gYmUgYXBwbGllZCBjb250YWlucyByZWxhdGl2ZSBzb3VyY2VcbiAgICogICAgICAgIHBhdGhzLiBJZiBzbywgdGhvc2UgcmVsYXRpdmUgc291cmNlIHBhdGhzIG5lZWQgdG8gYmUgcmV3cml0dGVuXG4gICAqICAgICAgICByZWxhdGl2ZSB0byB0aGUgU291cmNlTWFwR2VuZXJhdG9yLlxuICAgKi9cbiAgU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5hcHBseVNvdXJjZU1hcCA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2FwcGx5U291cmNlTWFwKGFTb3VyY2VNYXBDb25zdW1lciwgYVNvdXJjZUZpbGUsIGFTb3VyY2VNYXBQYXRoKSB7XG4gICAgICB2YXIgc291cmNlRmlsZSA9IGFTb3VyY2VGaWxlO1xuICAgICAgLy8gSWYgYVNvdXJjZUZpbGUgaXMgb21pdHRlZCwgd2Ugd2lsbCB1c2UgdGhlIGZpbGUgcHJvcGVydHkgb2YgdGhlIFNvdXJjZU1hcFxuICAgICAgaWYgKGFTb3VyY2VGaWxlID09IG51bGwpIHtcbiAgICAgICAgaWYgKGFTb3VyY2VNYXBDb25zdW1lci5maWxlID09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5hcHBseVNvdXJjZU1hcCByZXF1aXJlcyBlaXRoZXIgYW4gZXhwbGljaXQgc291cmNlIGZpbGUsICcgK1xuICAgICAgICAgICAgJ29yIHRoZSBzb3VyY2UgbWFwXFwncyBcImZpbGVcIiBwcm9wZXJ0eS4gQm90aCB3ZXJlIG9taXR0ZWQuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgc291cmNlRmlsZSA9IGFTb3VyY2VNYXBDb25zdW1lci5maWxlO1xuICAgICAgfVxuICAgICAgdmFyIHNvdXJjZVJvb3QgPSB0aGlzLl9zb3VyY2VSb290O1xuICAgICAgLy8gTWFrZSBcInNvdXJjZUZpbGVcIiByZWxhdGl2ZSBpZiBhbiBhYnNvbHV0ZSBVcmwgaXMgcGFzc2VkLlxuICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICBzb3VyY2VGaWxlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBzb3VyY2VGaWxlKTtcbiAgICAgIH1cbiAgICAgIC8vIEFwcGx5aW5nIHRoZSBTb3VyY2VNYXAgY2FuIGFkZCBhbmQgcmVtb3ZlIGl0ZW1zIGZyb20gdGhlIHNvdXJjZXMgYW5kXG4gICAgICAvLyB0aGUgbmFtZXMgYXJyYXkuXG4gICAgICB2YXIgbmV3U291cmNlcyA9IG5ldyBBcnJheVNldCgpO1xuICAgICAgdmFyIG5ld05hbWVzID0gbmV3IEFycmF5U2V0KCk7XG5cbiAgICAgIC8vIEZpbmQgbWFwcGluZ3MgZm9yIHRoZSBcInNvdXJjZUZpbGVcIlxuICAgICAgdGhpcy5fbWFwcGluZ3MuZm9yRWFjaChmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgICBpZiAobWFwcGluZy5zb3VyY2UgPT09IHNvdXJjZUZpbGUgJiYgbWFwcGluZy5vcmlnaW5hbExpbmUgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIENoZWNrIGlmIGl0IGNhbiBiZSBtYXBwZWQgYnkgdGhlIHNvdXJjZSBtYXAsIHRoZW4gdXBkYXRlIHRoZSBtYXBwaW5nLlxuICAgICAgICAgIHZhciBvcmlnaW5hbCA9IGFTb3VyY2VNYXBDb25zdW1lci5vcmlnaW5hbFBvc2l0aW9uRm9yKHtcbiAgICAgICAgICAgIGxpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgICAgY29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG9yaWdpbmFsLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBDb3B5IG1hcHBpbmdcbiAgICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gb3JpZ2luYWwuc291cmNlO1xuICAgICAgICAgICAgaWYgKGFTb3VyY2VNYXBQYXRoICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSB1dGlsLmpvaW4oYVNvdXJjZU1hcFBhdGgsIG1hcHBpbmcuc291cmNlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgbWFwcGluZy5zb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgPSBvcmlnaW5hbC5saW5lO1xuICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IG9yaWdpbmFsLmNvbHVtbjtcbiAgICAgICAgICAgIGlmIChvcmlnaW5hbC5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgbWFwcGluZy5uYW1lID0gb3JpZ2luYWwubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc291cmNlID0gbWFwcGluZy5zb3VyY2U7XG4gICAgICAgIGlmIChzb3VyY2UgIT0gbnVsbCAmJiAhbmV3U291cmNlcy5oYXMoc291cmNlKSkge1xuICAgICAgICAgIG5ld1NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmFtZSA9IG1hcHBpbmcubmFtZTtcbiAgICAgICAgaWYgKG5hbWUgIT0gbnVsbCAmJiAhbmV3TmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgbmV3TmFtZXMuYWRkKG5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgIH0sIHRoaXMpO1xuICAgICAgdGhpcy5fc291cmNlcyA9IG5ld1NvdXJjZXM7XG4gICAgICB0aGlzLl9uYW1lcyA9IG5ld05hbWVzO1xuXG4gICAgICAvLyBDb3B5IHNvdXJjZXNDb250ZW50cyBvZiBhcHBsaWVkIG1hcC5cbiAgICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUZpbGUpIHtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlQ29udGVudEZvcihzb3VyY2VGaWxlKTtcbiAgICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChhU291cmNlTWFwUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBzb3VyY2VGaWxlID0gdXRpbC5qb2luKGFTb3VyY2VNYXBQYXRoLCBzb3VyY2VGaWxlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc291cmNlRmlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBjb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcyk7XG4gICAgfTtcblxuICAvKipcbiAgICogQSBtYXBwaW5nIGNhbiBoYXZlIG9uZSBvZiB0aGUgdGhyZWUgbGV2ZWxzIG9mIGRhdGE6XG4gICAqXG4gICAqICAgMS4gSnVzdCB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9uLlxuICAgKiAgIDIuIFRoZSBHZW5lcmF0ZWQgcG9zaXRpb24sIG9yaWdpbmFsIHBvc2l0aW9uLCBhbmQgb3JpZ2luYWwgc291cmNlLlxuICAgKiAgIDMuIEdlbmVyYXRlZCBhbmQgb3JpZ2luYWwgcG9zaXRpb24sIG9yaWdpbmFsIHNvdXJjZSwgYXMgd2VsbCBhcyBhIG5hbWVcbiAgICogICAgICB0b2tlbi5cbiAgICpcbiAgICogVG8gbWFpbnRhaW4gY29uc2lzdGVuY3ksIHdlIHZhbGlkYXRlIHRoYXQgYW55IG5ldyBtYXBwaW5nIGJlaW5nIGFkZGVkIGZhbGxzXG4gICAqIGluIHRvIG9uZSBvZiB0aGVzZSBjYXRlZ29yaWVzLlxuICAgKi9cbiAgU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fdmFsaWRhdGVNYXBwaW5nID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfdmFsaWRhdGVNYXBwaW5nKGFHZW5lcmF0ZWQsIGFPcmlnaW5hbCwgYVNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFOYW1lKSB7XG4gICAgICBpZiAoYUdlbmVyYXRlZCAmJiAnbGluZScgaW4gYUdlbmVyYXRlZCAmJiAnY29sdW1uJyBpbiBhR2VuZXJhdGVkXG4gICAgICAgICAgJiYgYUdlbmVyYXRlZC5saW5lID4gMCAmJiBhR2VuZXJhdGVkLmNvbHVtbiA+PSAwXG4gICAgICAgICAgJiYgIWFPcmlnaW5hbCAmJiAhYVNvdXJjZSAmJiAhYU5hbWUpIHtcbiAgICAgICAgLy8gQ2FzZSAxLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChhR2VuZXJhdGVkICYmICdsaW5lJyBpbiBhR2VuZXJhdGVkICYmICdjb2x1bW4nIGluIGFHZW5lcmF0ZWRcbiAgICAgICAgICAgICAgICYmIGFPcmlnaW5hbCAmJiAnbGluZScgaW4gYU9yaWdpbmFsICYmICdjb2x1bW4nIGluIGFPcmlnaW5hbFxuICAgICAgICAgICAgICAgJiYgYUdlbmVyYXRlZC5saW5lID4gMCAmJiBhR2VuZXJhdGVkLmNvbHVtbiA+PSAwXG4gICAgICAgICAgICAgICAmJiBhT3JpZ2luYWwubGluZSA+IDAgJiYgYU9yaWdpbmFsLmNvbHVtbiA+PSAwXG4gICAgICAgICAgICAgICAmJiBhU291cmNlKSB7XG4gICAgICAgIC8vIENhc2VzIDIgYW5kIDMuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbWFwcGluZzogJyArIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBnZW5lcmF0ZWQ6IGFHZW5lcmF0ZWQsXG4gICAgICAgICAgc291cmNlOiBhU291cmNlLFxuICAgICAgICAgIG9yaWdpbmFsOiBhT3JpZ2luYWwsXG4gICAgICAgICAgbmFtZTogYU5hbWVcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZSB0aGUgYWNjdW11bGF0ZWQgbWFwcGluZ3MgaW4gdG8gdGhlIHN0cmVhbSBvZiBiYXNlIDY0IFZMUXNcbiAgICogc3BlY2lmaWVkIGJ5IHRoZSBzb3VyY2UgbWFwIGZvcm1hdC5cbiAgICovXG4gIFNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX3NlcmlhbGl6ZU1hcHBpbmdzID1cbiAgICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3Jfc2VyaWFsaXplTWFwcGluZ3MoKSB7XG4gICAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgdmFyIHByZXZpb3VzR2VuZXJhdGVkTGluZSA9IDE7XG4gICAgICB2YXIgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IDA7XG4gICAgICB2YXIgcHJldmlvdXNPcmlnaW5hbExpbmUgPSAwO1xuICAgICAgdmFyIHByZXZpb3VzTmFtZSA9IDA7XG4gICAgICB2YXIgcHJldmlvdXNTb3VyY2UgPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG1hcHBpbmc7XG5cbiAgICAgIC8vIFRoZSBtYXBwaW5ncyBtdXN0IGJlIGd1YXJhbnRlZWQgdG8gYmUgaW4gc29ydGVkIG9yZGVyIGJlZm9yZSB3ZSBzdGFydFxuICAgICAgLy8gc2VyaWFsaXppbmcgdGhlbSBvciBlbHNlIHRoZSBnZW5lcmF0ZWQgbGluZSBudW1iZXJzICh3aGljaCBhcmUgZGVmaW5lZFxuICAgICAgLy8gdmlhIHRoZSAnOycgc2VwYXJhdG9ycykgd2lsbCBiZSBhbGwgbWVzc2VkIHVwLiBOb3RlOiBpdCBtaWdodCBiZSBtb3JlXG4gICAgICAvLyBwZXJmb3JtYW50IHRvIG1haW50YWluIHRoZSBzb3J0aW5nIGFzIHdlIGluc2VydCB0aGVtLCByYXRoZXIgdGhhbiBhcyB3ZVxuICAgICAgLy8gc2VyaWFsaXplIHRoZW0sIGJ1dCB0aGUgYmlnIE8gaXMgdGhlIHNhbWUgZWl0aGVyIHdheS5cbiAgICAgIHRoaXMuX21hcHBpbmdzLnNvcnQodXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnMpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fbWFwcGluZ3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgbWFwcGluZyA9IHRoaXMuX21hcHBpbmdzW2ldO1xuXG4gICAgICAgIGlmIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgIT09IHByZXZpb3VzR2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgICAgICB3aGlsZSAobWFwcGluZy5nZW5lcmF0ZWRMaW5lICE9PSBwcmV2aW91c0dlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAnOyc7XG4gICAgICAgICAgICBwcmV2aW91c0dlbmVyYXRlZExpbmUrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICBpZiAoIXV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zKG1hcHBpbmcsIHRoaXMuX21hcHBpbmdzW2kgLSAxXSkpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgKz0gJywnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdCArPSBiYXNlNjRWTFEuZW5jb2RlKG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuXG4gICAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IGJhc2U2NFZMUS5lbmNvZGUodGhpcy5fc291cmNlcy5pbmRleE9mKG1hcHBpbmcuc291cmNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNTb3VyY2UpO1xuICAgICAgICAgIHByZXZpb3VzU291cmNlID0gdGhpcy5fc291cmNlcy5pbmRleE9mKG1hcHBpbmcuc291cmNlKTtcblxuICAgICAgICAgIC8vIGxpbmVzIGFyZSBzdG9yZWQgMC1iYXNlZCBpbiBTb3VyY2VNYXAgc3BlYyB2ZXJzaW9uIDNcbiAgICAgICAgICByZXN1bHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLm9yaWdpbmFsTGluZSAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHByZXZpb3VzT3JpZ2luYWxMaW5lKTtcbiAgICAgICAgICBwcmV2aW91c09yaWdpbmFsTGluZSA9IG1hcHBpbmcub3JpZ2luYWxMaW5lIC0gMTtcblxuICAgICAgICAgIHJlc3VsdCArPSBiYXNlNjRWTFEuZW5jb2RlKG1hcHBpbmcub3JpZ2luYWxDb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4pO1xuICAgICAgICAgIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgICAgaWYgKG1hcHBpbmcubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gYmFzZTY0VkxRLmVuY29kZSh0aGlzLl9uYW1lcy5pbmRleE9mKG1hcHBpbmcubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNOYW1lKTtcbiAgICAgICAgICAgIHByZXZpb3VzTmFtZSA9IHRoaXMuX25hbWVzLmluZGV4T2YobWFwcGluZy5uYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gIFNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX2dlbmVyYXRlU291cmNlc0NvbnRlbnQgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50KGFTb3VyY2VzLCBhU291cmNlUm9vdCkge1xuICAgICAgcmV0dXJuIGFTb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGlmICghdGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFTb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2UgPSB1dGlsLnJlbGF0aXZlKGFTb3VyY2VSb290LCBzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBrZXkgPSB1dGlsLnRvU2V0U3RyaW5nKHNvdXJjZSk7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5fc291cmNlc0NvbnRlbnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleSlcbiAgICAgICAgICA/IHRoaXMuX3NvdXJjZXNDb250ZW50c1trZXldXG4gICAgICAgICAgOiBudWxsO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfTtcblxuICAvKipcbiAgICogRXh0ZXJuYWxpemUgdGhlIHNvdXJjZSBtYXAuXG4gICAqL1xuICBTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLnRvSlNPTiA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3RvSlNPTigpIHtcbiAgICAgIHZhciBtYXAgPSB7XG4gICAgICAgIHZlcnNpb246IHRoaXMuX3ZlcnNpb24sXG4gICAgICAgIHNvdXJjZXM6IHRoaXMuX3NvdXJjZXMudG9BcnJheSgpLFxuICAgICAgICBuYW1lczogdGhpcy5fbmFtZXMudG9BcnJheSgpLFxuICAgICAgICBtYXBwaW5nczogdGhpcy5fc2VyaWFsaXplTWFwcGluZ3MoKVxuICAgICAgfTtcbiAgICAgIGlmICh0aGlzLl9maWxlICE9IG51bGwpIHtcbiAgICAgICAgbWFwLmZpbGUgPSB0aGlzLl9maWxlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX3NvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICBtYXAuc291cmNlUm9vdCA9IHRoaXMuX3NvdXJjZVJvb3Q7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICAgIG1hcC5zb3VyY2VzQ29udGVudCA9IHRoaXMuX2dlbmVyYXRlU291cmNlc0NvbnRlbnQobWFwLnNvdXJjZXMsIG1hcC5zb3VyY2VSb290KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9O1xuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIHNvdXJjZSBtYXAgYmVpbmcgZ2VuZXJhdGVkIHRvIGEgc3RyaW5nLlxuICAgKi9cbiAgU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS50b1N0cmluZyA9XG4gICAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3RvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuICAgIH07XG5cbiAgZXhwb3J0cy5Tb3VyY2VNYXBHZW5lcmF0b3IgPSBTb3VyY2VNYXBHZW5lcmF0b3I7XG5cbn0pO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuaWYgKHR5cGVvZiBkZWZpbmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgZGVmaW5lID0gcmVxdWlyZSgnYW1kZWZpbmUnKShtb2R1bGUsIHJlcXVpcmUpO1xufVxuZGVmaW5lKGZ1bmN0aW9uIChyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcblxuICB2YXIgU291cmNlTWFwR2VuZXJhdG9yID0gcmVxdWlyZSgnLi9zb3VyY2UtbWFwLWdlbmVyYXRvcicpLlNvdXJjZU1hcEdlbmVyYXRvcjtcbiAgdmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuICAvLyBNYXRjaGVzIGEgV2luZG93cy1zdHlsZSBgXFxyXFxuYCBuZXdsaW5lIG9yIGEgYFxcbmAgbmV3bGluZSB1c2VkIGJ5IGFsbCBvdGhlclxuICAvLyBvcGVyYXRpbmcgc3lzdGVtcyB0aGVzZSBkYXlzIChjYXB0dXJpbmcgdGhlIHJlc3VsdCkuXG4gIHZhciBSRUdFWF9ORVdMSU5FID0gLyhcXHI/XFxuKS87XG5cbiAgLy8gTWF0Y2hlcyBhIFdpbmRvd3Mtc3R5bGUgbmV3bGluZSwgb3IgYW55IGNoYXJhY3Rlci5cbiAgdmFyIFJFR0VYX0NIQVJBQ1RFUiA9IC9cXHJcXG58W1xcc1xcU10vZztcblxuICAvKipcbiAgICogU291cmNlTm9kZXMgcHJvdmlkZSBhIHdheSB0byBhYnN0cmFjdCBvdmVyIGludGVycG9sYXRpbmcvY29uY2F0ZW5hdGluZ1xuICAgKiBzbmlwcGV0cyBvZiBnZW5lcmF0ZWQgSmF2YVNjcmlwdCBzb3VyY2UgY29kZSB3aGlsZSBtYWludGFpbmluZyB0aGUgbGluZSBhbmRcbiAgICogY29sdW1uIGluZm9ybWF0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgb3JpZ2luYWwgc291cmNlIGNvZGUuXG4gICAqXG4gICAqIEBwYXJhbSBhTGluZSBUaGUgb3JpZ2luYWwgbGluZSBudW1iZXIuXG4gICAqIEBwYXJhbSBhQ29sdW1uIFRoZSBvcmlnaW5hbCBjb2x1bW4gbnVtYmVyLlxuICAgKiBAcGFyYW0gYVNvdXJjZSBUaGUgb3JpZ2luYWwgc291cmNlJ3MgZmlsZW5hbWUuXG4gICAqIEBwYXJhbSBhQ2h1bmtzIE9wdGlvbmFsLiBBbiBhcnJheSBvZiBzdHJpbmdzIHdoaWNoIGFyZSBzbmlwcGV0cyBvZlxuICAgKiAgICAgICAgZ2VuZXJhdGVkIEpTLCBvciBvdGhlciBTb3VyY2VOb2Rlcy5cbiAgICogQHBhcmFtIGFOYW1lIFRoZSBvcmlnaW5hbCBpZGVudGlmaWVyLlxuICAgKi9cbiAgZnVuY3Rpb24gU291cmNlTm9kZShhTGluZSwgYUNvbHVtbiwgYVNvdXJjZSwgYUNodW5rcywgYU5hbWUpIHtcbiAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdGhpcy5zb3VyY2VDb250ZW50cyA9IHt9O1xuICAgIHRoaXMubGluZSA9IGFMaW5lID09IG51bGwgPyBudWxsIDogYUxpbmU7XG4gICAgdGhpcy5jb2x1bW4gPSBhQ29sdW1uID09IG51bGwgPyBudWxsIDogYUNvbHVtbjtcbiAgICB0aGlzLnNvdXJjZSA9IGFTb3VyY2UgPT0gbnVsbCA/IG51bGwgOiBhU291cmNlO1xuICAgIHRoaXMubmFtZSA9IGFOYW1lID09IG51bGwgPyBudWxsIDogYU5hbWU7XG4gICAgaWYgKGFDaHVua3MgIT0gbnVsbCkgdGhpcy5hZGQoYUNodW5rcyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIFNvdXJjZU5vZGUgZnJvbSBnZW5lcmF0ZWQgY29kZSBhbmQgYSBTb3VyY2VNYXBDb25zdW1lci5cbiAgICpcbiAgICogQHBhcmFtIGFHZW5lcmF0ZWRDb2RlIFRoZSBnZW5lcmF0ZWQgY29kZVxuICAgKiBAcGFyYW0gYVNvdXJjZU1hcENvbnN1bWVyIFRoZSBTb3VyY2VNYXAgZm9yIHRoZSBnZW5lcmF0ZWQgY29kZVxuICAgKiBAcGFyYW0gYVJlbGF0aXZlUGF0aCBPcHRpb25hbC4gVGhlIHBhdGggdGhhdCByZWxhdGl2ZSBzb3VyY2VzIGluIHRoZVxuICAgKiAgICAgICAgU291cmNlTWFwQ29uc3VtZXIgc2hvdWxkIGJlIHJlbGF0aXZlIHRvLlxuICAgKi9cbiAgU291cmNlTm9kZS5mcm9tU3RyaW5nV2l0aFNvdXJjZU1hcCA9XG4gICAgZnVuY3Rpb24gU291cmNlTm9kZV9mcm9tU3RyaW5nV2l0aFNvdXJjZU1hcChhR2VuZXJhdGVkQ29kZSwgYVNvdXJjZU1hcENvbnN1bWVyLCBhUmVsYXRpdmVQYXRoKSB7XG4gICAgICAvLyBUaGUgU291cmNlTm9kZSB3ZSB3YW50IHRvIGZpbGwgd2l0aCB0aGUgZ2VuZXJhdGVkIGNvZGVcbiAgICAgIC8vIGFuZCB0aGUgU291cmNlTWFwXG4gICAgICB2YXIgbm9kZSA9IG5ldyBTb3VyY2VOb2RlKCk7XG5cbiAgICAgIC8vIEFsbCBldmVuIGluZGljZXMgb2YgdGhpcyBhcnJheSBhcmUgb25lIGxpbmUgb2YgdGhlIGdlbmVyYXRlZCBjb2RlLFxuICAgICAgLy8gd2hpbGUgYWxsIG9kZCBpbmRpY2VzIGFyZSB0aGUgbmV3bGluZXMgYmV0d2VlbiB0d28gYWRqYWNlbnQgbGluZXNcbiAgICAgIC8vIChzaW5jZSBgUkVHRVhfTkVXTElORWAgY2FwdHVyZXMgaXRzIG1hdGNoKS5cbiAgICAgIC8vIFByb2Nlc3NlZCBmcmFnbWVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGlzIGFycmF5LCBieSBjYWxsaW5nIGBzaGlmdE5leHRMaW5lYC5cbiAgICAgIHZhciByZW1haW5pbmdMaW5lcyA9IGFHZW5lcmF0ZWRDb2RlLnNwbGl0KFJFR0VYX05FV0xJTkUpO1xuICAgICAgdmFyIHNoaWZ0TmV4dExpbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGxpbmVDb250ZW50cyA9IHJlbWFpbmluZ0xpbmVzLnNoaWZ0KCk7XG4gICAgICAgIC8vIFRoZSBsYXN0IGxpbmUgb2YgYSBmaWxlIG1pZ2h0IG5vdCBoYXZlIGEgbmV3bGluZS5cbiAgICAgICAgdmFyIG5ld0xpbmUgPSByZW1haW5pbmdMaW5lcy5zaGlmdCgpIHx8IFwiXCI7XG4gICAgICAgIHJldHVybiBsaW5lQ29udGVudHMgKyBuZXdMaW5lO1xuICAgICAgfTtcblxuICAgICAgLy8gV2UgbmVlZCB0byByZW1lbWJlciB0aGUgcG9zaXRpb24gb2YgXCJyZW1haW5pbmdMaW5lc1wiXG4gICAgICB2YXIgbGFzdEdlbmVyYXRlZExpbmUgPSAxLCBsYXN0R2VuZXJhdGVkQ29sdW1uID0gMDtcblxuICAgICAgLy8gVGhlIGdlbmVyYXRlIFNvdXJjZU5vZGVzIHdlIG5lZWQgYSBjb2RlIHJhbmdlLlxuICAgICAgLy8gVG8gZXh0cmFjdCBpdCBjdXJyZW50IGFuZCBsYXN0IG1hcHBpbmcgaXMgdXNlZC5cbiAgICAgIC8vIEhlcmUgd2Ugc3RvcmUgdGhlIGxhc3QgbWFwcGluZy5cbiAgICAgIHZhciBsYXN0TWFwcGluZyA9IG51bGw7XG5cbiAgICAgIGFTb3VyY2VNYXBDb25zdW1lci5lYWNoTWFwcGluZyhmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgICBpZiAobGFzdE1hcHBpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBXZSBhZGQgdGhlIGNvZGUgZnJvbSBcImxhc3RNYXBwaW5nXCIgdG8gXCJtYXBwaW5nXCI6XG4gICAgICAgICAgLy8gRmlyc3QgY2hlY2sgaWYgdGhlcmUgaXMgYSBuZXcgbGluZSBpbiBiZXR3ZWVuLlxuICAgICAgICAgIGlmIChsYXN0R2VuZXJhdGVkTGluZSA8IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgICAgdmFyIGNvZGUgPSBcIlwiO1xuICAgICAgICAgICAgLy8gQXNzb2NpYXRlIGZpcnN0IGxpbmUgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgICAgIGFkZE1hcHBpbmdXaXRoQ29kZShsYXN0TWFwcGluZywgc2hpZnROZXh0TGluZSgpKTtcbiAgICAgICAgICAgIGxhc3RHZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgICAgICAgIC8vIFRoZSByZW1haW5pbmcgY29kZSBpcyBhZGRlZCB3aXRob3V0IG1hcHBpbmdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVGhlcmUgaXMgbm8gbmV3IGxpbmUgaW4gYmV0d2Vlbi5cbiAgICAgICAgICAgIC8vIEFzc29jaWF0ZSB0aGUgY29kZSBiZXR3ZWVuIFwibGFzdEdlbmVyYXRlZENvbHVtblwiIGFuZFxuICAgICAgICAgICAgLy8gXCJtYXBwaW5nLmdlbmVyYXRlZENvbHVtblwiIHdpdGggXCJsYXN0TWFwcGluZ1wiXG4gICAgICAgICAgICB2YXIgbmV4dExpbmUgPSByZW1haW5pbmdMaW5lc1swXTtcbiAgICAgICAgICAgIHZhciBjb2RlID0gbmV4dExpbmUuc3Vic3RyKDAsIG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICAgICAgcmVtYWluaW5nTGluZXNbMF0gPSBuZXh0TGluZS5zdWJzdHIobWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG4gICAgICAgICAgICBhZGRNYXBwaW5nV2l0aENvZGUobGFzdE1hcHBpbmcsIGNvZGUpO1xuICAgICAgICAgICAgLy8gTm8gbW9yZSByZW1haW5pbmcgY29kZSwgY29udGludWVcbiAgICAgICAgICAgIGxhc3RNYXBwaW5nID0gbWFwcGluZztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgYWRkIHRoZSBnZW5lcmF0ZWQgY29kZSB1bnRpbCB0aGUgZmlyc3QgbWFwcGluZ1xuICAgICAgICAvLyB0byB0aGUgU291cmNlTm9kZSB3aXRob3V0IGFueSBtYXBwaW5nLlxuICAgICAgICAvLyBFYWNoIGxpbmUgaXMgYWRkZWQgYXMgc2VwYXJhdGUgc3RyaW5nLlxuICAgICAgICB3aGlsZSAobGFzdEdlbmVyYXRlZExpbmUgPCBtYXBwaW5nLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgICBub2RlLmFkZChzaGlmdE5leHRMaW5lKCkpO1xuICAgICAgICAgIGxhc3RHZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RHZW5lcmF0ZWRDb2x1bW4gPCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbikge1xuICAgICAgICAgIHZhciBuZXh0TGluZSA9IHJlbWFpbmluZ0xpbmVzWzBdO1xuICAgICAgICAgIG5vZGUuYWRkKG5leHRMaW5lLnN1YnN0cigwLCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbikpO1xuICAgICAgICAgIHJlbWFpbmluZ0xpbmVzWzBdID0gbmV4dExpbmUuc3Vic3RyKG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG4gICAgICAgIH1cbiAgICAgICAgbGFzdE1hcHBpbmcgPSBtYXBwaW5nO1xuICAgICAgfSwgdGhpcyk7XG4gICAgICAvLyBXZSBoYXZlIHByb2Nlc3NlZCBhbGwgbWFwcGluZ3MuXG4gICAgICBpZiAocmVtYWluaW5nTGluZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAobGFzdE1hcHBpbmcpIHtcbiAgICAgICAgICAvLyBBc3NvY2lhdGUgdGhlIHJlbWFpbmluZyBjb2RlIGluIHRoZSBjdXJyZW50IGxpbmUgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgICBhZGRNYXBwaW5nV2l0aENvZGUobGFzdE1hcHBpbmcsIHNoaWZ0TmV4dExpbmUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYW5kIGFkZCB0aGUgcmVtYWluaW5nIGxpbmVzIHdpdGhvdXQgYW55IG1hcHBpbmdcbiAgICAgICAgbm9kZS5hZGQocmVtYWluaW5nTGluZXMuam9pbihcIlwiKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIENvcHkgc291cmNlc0NvbnRlbnQgaW50byBTb3VyY2VOb2RlXG4gICAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICAgIHZhciBjb250ZW50ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3Ioc291cmNlRmlsZSk7XG4gICAgICAgIGlmIChjb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoYVJlbGF0aXZlUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBzb3VyY2VGaWxlID0gdXRpbC5qb2luKGFSZWxhdGl2ZVBhdGgsIHNvdXJjZUZpbGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBub2RlLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gbm9kZTtcblxuICAgICAgZnVuY3Rpb24gYWRkTWFwcGluZ1dpdGhDb2RlKG1hcHBpbmcsIGNvZGUpIHtcbiAgICAgICAgaWYgKG1hcHBpbmcgPT09IG51bGwgfHwgbWFwcGluZy5zb3VyY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5vZGUuYWRkKGNvZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBhUmVsYXRpdmVQYXRoXG4gICAgICAgICAgICA/IHV0aWwuam9pbihhUmVsYXRpdmVQYXRoLCBtYXBwaW5nLnNvdXJjZSlcbiAgICAgICAgICAgIDogbWFwcGluZy5zb3VyY2U7XG4gICAgICAgICAgbm9kZS5hZGQobmV3IFNvdXJjZU5vZGUobWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwaW5nLm5hbWUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgLyoqXG4gICAqIEFkZCBhIGNodW5rIG9mIGdlbmVyYXRlZCBKUyB0byB0aGlzIHNvdXJjZSBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0gYUNodW5rIEEgc3RyaW5nIHNuaXBwZXQgb2YgZ2VuZXJhdGVkIEpTIGNvZGUsIGFub3RoZXIgaW5zdGFuY2Ugb2ZcbiAgICogICAgICAgIFNvdXJjZU5vZGUsIG9yIGFuIGFycmF5IHdoZXJlIGVhY2ggbWVtYmVyIGlzIG9uZSBvZiB0aG9zZSB0aGluZ3MuXG4gICAqL1xuICBTb3VyY2VOb2RlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX2FkZChhQ2h1bmspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhQ2h1bmspKSB7XG4gICAgICBhQ2h1bmsuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgdGhpcy5hZGQoY2h1bmspO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGFDaHVuayBpbnN0YW5jZW9mIFNvdXJjZU5vZGUgfHwgdHlwZW9mIGFDaHVuayA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgaWYgKGFDaHVuaykge1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goYUNodW5rKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBcIkV4cGVjdGVkIGEgU291cmNlTm9kZSwgc3RyaW5nLCBvciBhbiBhcnJheSBvZiBTb3VyY2VOb2RlcyBhbmQgc3RyaW5ncy4gR290IFwiICsgYUNodW5rXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogQWRkIGEgY2h1bmsgb2YgZ2VuZXJhdGVkIEpTIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBzb3VyY2Ugbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIGFDaHVuayBBIHN0cmluZyBzbmlwcGV0IG9mIGdlbmVyYXRlZCBKUyBjb2RlLCBhbm90aGVyIGluc3RhbmNlIG9mXG4gICAqICAgICAgICBTb3VyY2VOb2RlLCBvciBhbiBhcnJheSB3aGVyZSBlYWNoIG1lbWJlciBpcyBvbmUgb2YgdGhvc2UgdGhpbmdzLlxuICAgKi9cbiAgU291cmNlTm9kZS5wcm90b3R5cGUucHJlcGVuZCA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfcHJlcGVuZChhQ2h1bmspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhQ2h1bmspKSB7XG4gICAgICBmb3IgKHZhciBpID0gYUNodW5rLmxlbmd0aC0xOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLnByZXBlbmQoYUNodW5rW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoYUNodW5rIGluc3RhbmNlb2YgU291cmNlTm9kZSB8fCB0eXBlb2YgYUNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aGlzLmNoaWxkcmVuLnVuc2hpZnQoYUNodW5rKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBcIkV4cGVjdGVkIGEgU291cmNlTm9kZSwgc3RyaW5nLCBvciBhbiBhcnJheSBvZiBTb3VyY2VOb2RlcyBhbmQgc3RyaW5ncy4gR290IFwiICsgYUNodW5rXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogV2FsayBvdmVyIHRoZSB0cmVlIG9mIEpTIHNuaXBwZXRzIGluIHRoaXMgbm9kZSBhbmQgaXRzIGNoaWxkcmVuLiBUaGVcbiAgICogd2Fsa2luZyBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBmb3IgZWFjaCBzbmlwcGV0IG9mIEpTIGFuZCBpcyBwYXNzZWQgdGhhdFxuICAgKiBzbmlwcGV0IGFuZCB0aGUgaXRzIG9yaWdpbmFsIGFzc29jaWF0ZWQgc291cmNlJ3MgbGluZS9jb2x1bW4gbG9jYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSBhRm4gVGhlIHRyYXZlcnNhbCBmdW5jdGlvbi5cbiAgICovXG4gIFNvdXJjZU5vZGUucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3dhbGsoYUZuKSB7XG4gICAgdmFyIGNodW5rO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjaHVuayA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgICBpZiAoY2h1bmsgaW5zdGFuY2VvZiBTb3VyY2VOb2RlKSB7XG4gICAgICAgIGNodW5rLndhbGsoYUZuKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoY2h1bmsgIT09ICcnKSB7XG4gICAgICAgICAgYUZuKGNodW5rLCB7IHNvdXJjZTogdGhpcy5zb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMubGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiB0aGlzLmNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBMaWtlIGBTdHJpbmcucHJvdG90eXBlLmpvaW5gIGV4Y2VwdCBmb3IgU291cmNlTm9kZXMuIEluc2VydHMgYGFTdHJgIGJldHdlZW5cbiAgICogZWFjaCBvZiBgdGhpcy5jaGlsZHJlbmAuXG4gICAqXG4gICAqIEBwYXJhbSBhU2VwIFRoZSBzZXBhcmF0b3IuXG4gICAqL1xuICBTb3VyY2VOb2RlLnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gU291cmNlTm9kZV9qb2luKGFTZXApIHtcbiAgICB2YXIgbmV3Q2hpbGRyZW47XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGlmIChsZW4gPiAwKSB7XG4gICAgICBuZXdDaGlsZHJlbiA9IFtdO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbi0xOyBpKyspIHtcbiAgICAgICAgbmV3Q2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcbiAgICAgICAgbmV3Q2hpbGRyZW4ucHVzaChhU2VwKTtcbiAgICAgIH1cbiAgICAgIG5ld0NoaWxkcmVuLnB1c2godGhpcy5jaGlsZHJlbltpXSk7XG4gICAgICB0aGlzLmNoaWxkcmVuID0gbmV3Q2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSBvbiB0aGUgdmVyeSByaWdodC1tb3N0IHNvdXJjZSBzbmlwcGV0LiBVc2VmdWxcbiAgICogZm9yIHRyaW1taW5nIHdoaXRlc3BhY2UgZnJvbSB0aGUgZW5kIG9mIGEgc291cmNlIG5vZGUsIGV0Yy5cbiAgICpcbiAgICogQHBhcmFtIGFQYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gICAqIEBwYXJhbSBhUmVwbGFjZW1lbnQgVGhlIHRoaW5nIHRvIHJlcGxhY2UgdGhlIHBhdHRlcm4gd2l0aC5cbiAgICovXG4gIFNvdXJjZU5vZGUucHJvdG90eXBlLnJlcGxhY2VSaWdodCA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfcmVwbGFjZVJpZ2h0KGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgbGFzdENoaWxkID0gdGhpcy5jaGlsZHJlblt0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICAgIGlmIChsYXN0Q2hpbGQgaW5zdGFuY2VvZiBTb3VyY2VOb2RlKSB7XG4gICAgICBsYXN0Q2hpbGQucmVwbGFjZVJpZ2h0KGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgbGFzdENoaWxkID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5jaGlsZHJlblt0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDFdID0gbGFzdENoaWxkLnJlcGxhY2UoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKCcnLnJlcGxhY2UoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogU2V0IHRoZSBzb3VyY2UgY29udGVudCBmb3IgYSBzb3VyY2UgZmlsZS4gVGhpcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3JcbiAgICogaW4gdGhlIHNvdXJjZXNDb250ZW50IGZpZWxkLlxuICAgKlxuICAgKiBAcGFyYW0gYVNvdXJjZUZpbGUgVGhlIGZpbGVuYW1lIG9mIHRoZSBzb3VyY2UgZmlsZVxuICAgKiBAcGFyYW0gYVNvdXJjZUNvbnRlbnQgVGhlIGNvbnRlbnQgb2YgdGhlIHNvdXJjZSBmaWxlXG4gICAqL1xuICBTb3VyY2VOb2RlLnByb3RvdHlwZS5zZXRTb3VyY2VDb250ZW50ID1cbiAgICBmdW5jdGlvbiBTb3VyY2VOb2RlX3NldFNvdXJjZUNvbnRlbnQoYVNvdXJjZUZpbGUsIGFTb3VyY2VDb250ZW50KSB7XG4gICAgICB0aGlzLnNvdXJjZUNvbnRlbnRzW3V0aWwudG9TZXRTdHJpbmcoYVNvdXJjZUZpbGUpXSA9IGFTb3VyY2VDb250ZW50O1xuICAgIH07XG5cbiAgLyoqXG4gICAqIFdhbGsgb3ZlciB0aGUgdHJlZSBvZiBTb3VyY2VOb2Rlcy4gVGhlIHdhbGtpbmcgZnVuY3Rpb24gaXMgY2FsbGVkIGZvciBlYWNoXG4gICAqIHNvdXJjZSBmaWxlIGNvbnRlbnQgYW5kIGlzIHBhc3NlZCB0aGUgZmlsZW5hbWUgYW5kIHNvdXJjZSBjb250ZW50LlxuICAgKlxuICAgKiBAcGFyYW0gYUZuIFRoZSB0cmF2ZXJzYWwgZnVuY3Rpb24uXG4gICAqL1xuICBTb3VyY2VOb2RlLnByb3RvdHlwZS53YWxrU291cmNlQ29udGVudHMgPVxuICAgIGZ1bmN0aW9uIFNvdXJjZU5vZGVfd2Fsa1NvdXJjZUNvbnRlbnRzKGFGbikge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW5baV0gaW5zdGFuY2VvZiBTb3VyY2VOb2RlKSB7XG4gICAgICAgICAgdGhpcy5jaGlsZHJlbltpXS53YWxrU291cmNlQ29udGVudHMoYUZuKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc291cmNlcyA9IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQ29udGVudHMpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNvdXJjZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgYUZuKHV0aWwuZnJvbVNldFN0cmluZyhzb3VyY2VzW2ldKSwgdGhpcy5zb3VyY2VDb250ZW50c1tzb3VyY2VzW2ldXSk7XG4gICAgICB9XG4gICAgfTtcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzb3VyY2Ugbm9kZS4gV2Fsa3Mgb3ZlciB0aGUgdHJlZVxuICAgKiBhbmQgY29uY2F0ZW5hdGVzIGFsbCB0aGUgdmFyaW91cyBzbmlwcGV0cyB0b2dldGhlciB0byBvbmUgc3RyaW5nLlxuICAgKi9cbiAgU291cmNlTm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3RvU3RyaW5nKCkge1xuICAgIHZhciBzdHIgPSBcIlwiO1xuICAgIHRoaXMud2FsayhmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgIHN0ciArPSBjaHVuaztcbiAgICB9KTtcbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzb3VyY2Ugbm9kZSBhbG9uZyB3aXRoIGEgc291cmNlXG4gICAqIG1hcC5cbiAgICovXG4gIFNvdXJjZU5vZGUucHJvdG90eXBlLnRvU3RyaW5nV2l0aFNvdXJjZU1hcCA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfdG9TdHJpbmdXaXRoU291cmNlTWFwKGFBcmdzKSB7XG4gICAgdmFyIGdlbmVyYXRlZCA9IHtcbiAgICAgIGNvZGU6IFwiXCIsXG4gICAgICBsaW5lOiAxLFxuICAgICAgY29sdW1uOiAwXG4gICAgfTtcbiAgICB2YXIgbWFwID0gbmV3IFNvdXJjZU1hcEdlbmVyYXRvcihhQXJncyk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgICB2YXIgbGFzdE9yaWdpbmFsU291cmNlID0gbnVsbDtcbiAgICB2YXIgbGFzdE9yaWdpbmFsTGluZSA9IG51bGw7XG4gICAgdmFyIGxhc3RPcmlnaW5hbENvbHVtbiA9IG51bGw7XG4gICAgdmFyIGxhc3RPcmlnaW5hbE5hbWUgPSBudWxsO1xuICAgIHRoaXMud2FsayhmdW5jdGlvbiAoY2h1bmssIG9yaWdpbmFsKSB7XG4gICAgICBnZW5lcmF0ZWQuY29kZSArPSBjaHVuaztcbiAgICAgIGlmIChvcmlnaW5hbC5zb3VyY2UgIT09IG51bGxcbiAgICAgICAgICAmJiBvcmlnaW5hbC5saW5lICE9PSBudWxsXG4gICAgICAgICAgJiYgb3JpZ2luYWwuY29sdW1uICE9PSBudWxsKSB7XG4gICAgICAgIGlmKGxhc3RPcmlnaW5hbFNvdXJjZSAhPT0gb3JpZ2luYWwuc291cmNlXG4gICAgICAgICAgIHx8IGxhc3RPcmlnaW5hbExpbmUgIT09IG9yaWdpbmFsLmxpbmVcbiAgICAgICAgICAgfHwgbGFzdE9yaWdpbmFsQ29sdW1uICE9PSBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgICAgfHwgbGFzdE9yaWdpbmFsTmFtZSAhPT0gb3JpZ2luYWwubmFtZSkge1xuICAgICAgICAgIG1hcC5hZGRNYXBwaW5nKHtcbiAgICAgICAgICAgIHNvdXJjZTogb3JpZ2luYWwuc291cmNlLFxuICAgICAgICAgICAgb3JpZ2luYWw6IHtcbiAgICAgICAgICAgICAgbGluZTogb3JpZ2luYWwubGluZSxcbiAgICAgICAgICAgICAgY29sdW1uOiBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICAgICAgbGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5hbWU6IG9yaWdpbmFsLm5hbWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0T3JpZ2luYWxTb3VyY2UgPSBvcmlnaW5hbC5zb3VyY2U7XG4gICAgICAgIGxhc3RPcmlnaW5hbExpbmUgPSBvcmlnaW5hbC5saW5lO1xuICAgICAgICBsYXN0T3JpZ2luYWxDb2x1bW4gPSBvcmlnaW5hbC5jb2x1bW47XG4gICAgICAgIGxhc3RPcmlnaW5hbE5hbWUgPSBvcmlnaW5hbC5uYW1lO1xuICAgICAgICBzb3VyY2VNYXBwaW5nQWN0aXZlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoc291cmNlTWFwcGluZ0FjdGl2ZSkge1xuICAgICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gICAgICAgIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNodW5rLm1hdGNoKFJFR0VYX0NIQVJBQ1RFUikuZm9yRWFjaChmdW5jdGlvbiAoY2gsIGlkeCwgYXJyYXkpIHtcbiAgICAgICAgaWYgKFJFR0VYX05FV0xJTkUudGVzdChjaCkpIHtcbiAgICAgICAgICBnZW5lcmF0ZWQubGluZSsrO1xuICAgICAgICAgIGdlbmVyYXRlZC5jb2x1bW4gPSAwO1xuICAgICAgICAgIC8vIE1hcHBpbmdzIGVuZCBhdCBlb2xcbiAgICAgICAgICBpZiAoaWR4ICsgMSA9PT0gYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgICBsYXN0T3JpZ2luYWxTb3VyY2UgPSBudWxsO1xuICAgICAgICAgICAgc291cmNlTWFwcGluZ0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc291cmNlTWFwcGluZ0FjdGl2ZSkge1xuICAgICAgICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgICAgICBzb3VyY2U6IG9yaWdpbmFsLnNvdXJjZSxcbiAgICAgICAgICAgICAgb3JpZ2luYWw6IHtcbiAgICAgICAgICAgICAgICBsaW5lOiBvcmlnaW5hbC5saW5lLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogb3JpZ2luYWwuY29sdW1uXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBuYW1lOiBvcmlnaW5hbC5uYW1lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2VuZXJhdGVkLmNvbHVtbiArPSBjaC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRoaXMud2Fsa1NvdXJjZUNvbnRlbnRzKGZ1bmN0aW9uIChzb3VyY2VGaWxlLCBzb3VyY2VDb250ZW50KSB7XG4gICAgICBtYXAuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBzb3VyY2VDb250ZW50KTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7IGNvZGU6IGdlbmVyYXRlZC5jb2RlLCBtYXA6IG1hcCB9O1xuICB9O1xuXG4gIGV4cG9ydHMuU291cmNlTm9kZSA9IFNvdXJjZU5vZGU7XG5cbn0pO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuaWYgKHR5cGVvZiBkZWZpbmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgZGVmaW5lID0gcmVxdWlyZSgnYW1kZWZpbmUnKShtb2R1bGUsIHJlcXVpcmUpO1xufVxuZGVmaW5lKGZ1bmN0aW9uIChyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcblxuICAvKipcbiAgICogVGhpcyBpcyBhIGhlbHBlciBmdW5jdGlvbiBmb3IgZ2V0dGluZyB2YWx1ZXMgZnJvbSBwYXJhbWV0ZXIvb3B0aW9uc1xuICAgKiBvYmplY3RzLlxuICAgKlxuICAgKiBAcGFyYW0gYXJncyBUaGUgb2JqZWN0IHdlIGFyZSBleHRyYWN0aW5nIHZhbHVlcyBmcm9tXG4gICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB3ZSBhcmUgZ2V0dGluZy5cbiAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBBbiBvcHRpb25hbCB2YWx1ZSB0byByZXR1cm4gaWYgdGhlIHByb3BlcnR5IGlzIG1pc3NpbmdcbiAgICogZnJvbSB0aGUgb2JqZWN0LiBJZiB0aGlzIGlzIG5vdCBzcGVjaWZpZWQgYW5kIHRoZSBwcm9wZXJ0eSBpcyBtaXNzaW5nLCBhblxuICAgKiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAgICovXG4gIGZ1bmN0aW9uIGdldEFyZyhhQXJncywgYU5hbWUsIGFEZWZhdWx0VmFsdWUpIHtcbiAgICBpZiAoYU5hbWUgaW4gYUFyZ3MpIHtcbiAgICAgIHJldHVybiBhQXJnc1thTmFtZV07XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICByZXR1cm4gYURlZmF1bHRWYWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhTmFtZSArICdcIiBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LicpO1xuICAgIH1cbiAgfVxuICBleHBvcnRzLmdldEFyZyA9IGdldEFyZztcblxuICB2YXIgdXJsUmVnZXhwID0gL14oPzooW1xcdytcXC0uXSspOik/XFwvXFwvKD86KFxcdys6XFx3KylAKT8oW1xcdy5dKikoPzo6KFxcZCspKT8oXFxTKikkLztcbiAgdmFyIGRhdGFVcmxSZWdleHAgPSAvXmRhdGE6LitcXCwuKyQvO1xuXG4gIGZ1bmN0aW9uIHVybFBhcnNlKGFVcmwpIHtcbiAgICB2YXIgbWF0Y2ggPSBhVXJsLm1hdGNoKHVybFJlZ2V4cCk7XG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzY2hlbWU6IG1hdGNoWzFdLFxuICAgICAgYXV0aDogbWF0Y2hbMl0sXG4gICAgICBob3N0OiBtYXRjaFszXSxcbiAgICAgIHBvcnQ6IG1hdGNoWzRdLFxuICAgICAgcGF0aDogbWF0Y2hbNV1cbiAgICB9O1xuICB9XG4gIGV4cG9ydHMudXJsUGFyc2UgPSB1cmxQYXJzZTtcblxuICBmdW5jdGlvbiB1cmxHZW5lcmF0ZShhUGFyc2VkVXJsKSB7XG4gICAgdmFyIHVybCA9ICcnO1xuICAgIGlmIChhUGFyc2VkVXJsLnNjaGVtZSkge1xuICAgICAgdXJsICs9IGFQYXJzZWRVcmwuc2NoZW1lICsgJzonO1xuICAgIH1cbiAgICB1cmwgKz0gJy8vJztcbiAgICBpZiAoYVBhcnNlZFVybC5hdXRoKSB7XG4gICAgICB1cmwgKz0gYVBhcnNlZFVybC5hdXRoICsgJ0AnO1xuICAgIH1cbiAgICBpZiAoYVBhcnNlZFVybC5ob3N0KSB7XG4gICAgICB1cmwgKz0gYVBhcnNlZFVybC5ob3N0O1xuICAgIH1cbiAgICBpZiAoYVBhcnNlZFVybC5wb3J0KSB7XG4gICAgICB1cmwgKz0gXCI6XCIgKyBhUGFyc2VkVXJsLnBvcnRcbiAgICB9XG4gICAgaWYgKGFQYXJzZWRVcmwucGF0aCkge1xuICAgICAgdXJsICs9IGFQYXJzZWRVcmwucGF0aDtcbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBleHBvcnRzLnVybEdlbmVyYXRlID0gdXJsR2VuZXJhdGU7XG5cbiAgLyoqXG4gICAqIE5vcm1hbGl6ZXMgYSBwYXRoLCBvciB0aGUgcGF0aCBwb3J0aW9uIG9mIGEgVVJMOlxuICAgKlxuICAgKiAtIFJlcGxhY2VzIGNvbnNlcXV0aXZlIHNsYXNoZXMgd2l0aCBvbmUgc2xhc2guXG4gICAqIC0gUmVtb3ZlcyB1bm5lY2Vzc2FyeSAnLicgcGFydHMuXG4gICAqIC0gUmVtb3ZlcyB1bm5lY2Vzc2FyeSAnPGRpcj4vLi4nIHBhcnRzLlxuICAgKlxuICAgKiBCYXNlZCBvbiBjb2RlIGluIHRoZSBOb2RlLmpzICdwYXRoJyBjb3JlIG1vZHVsZS5cbiAgICpcbiAgICogQHBhcmFtIGFQYXRoIFRoZSBwYXRoIG9yIHVybCB0byBub3JtYWxpemUuXG4gICAqL1xuICBmdW5jdGlvbiBub3JtYWxpemUoYVBhdGgpIHtcbiAgICB2YXIgcGF0aCA9IGFQYXRoO1xuICAgIHZhciB1cmwgPSB1cmxQYXJzZShhUGF0aCk7XG4gICAgaWYgKHVybCkge1xuICAgICAgaWYgKCF1cmwucGF0aCkge1xuICAgICAgICByZXR1cm4gYVBhdGg7XG4gICAgICB9XG4gICAgICBwYXRoID0gdXJsLnBhdGg7XG4gICAgfVxuICAgIHZhciBpc0Fic29sdXRlID0gKHBhdGguY2hhckF0KDApID09PSAnLycpO1xuXG4gICAgdmFyIHBhcnRzID0gcGF0aC5zcGxpdCgvXFwvKy8pO1xuICAgIGZvciAodmFyIHBhcnQsIHVwID0gMCwgaSA9IHBhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBwYXJ0ID0gcGFydHNbaV07XG4gICAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgICB1cCsrO1xuICAgICAgfSBlbHNlIGlmICh1cCA+IDApIHtcbiAgICAgICAgaWYgKHBhcnQgPT09ICcnKSB7XG4gICAgICAgICAgLy8gVGhlIGZpcnN0IHBhcnQgaXMgYmxhbmsgaWYgdGhlIHBhdGggaXMgYWJzb2x1dGUuIFRyeWluZyB0byBnb1xuICAgICAgICAgIC8vIGFib3ZlIHRoZSByb290IGlzIGEgbm8tb3AuIFRoZXJlZm9yZSB3ZSBjYW4gcmVtb3ZlIGFsbCAnLi4nIHBhcnRzXG4gICAgICAgICAgLy8gZGlyZWN0bHkgYWZ0ZXIgdGhlIHJvb3QuXG4gICAgICAgICAgcGFydHMuc3BsaWNlKGkgKyAxLCB1cCk7XG4gICAgICAgICAgdXAgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcnRzLnNwbGljZShpLCAyKTtcbiAgICAgICAgICB1cC0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHBhdGggPSBwYXJ0cy5qb2luKCcvJyk7XG5cbiAgICBpZiAocGF0aCA9PT0gJycpIHtcbiAgICAgIHBhdGggPSBpc0Fic29sdXRlID8gJy8nIDogJy4nO1xuICAgIH1cblxuICAgIGlmICh1cmwpIHtcbiAgICAgIHVybC5wYXRoID0gcGF0aDtcbiAgICAgIHJldHVybiB1cmxHZW5lcmF0ZSh1cmwpO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuICBleHBvcnRzLm5vcm1hbGl6ZSA9IG5vcm1hbGl6ZTtcblxuICAvKipcbiAgICogSm9pbnMgdHdvIHBhdGhzL1VSTHMuXG4gICAqXG4gICAqIEBwYXJhbSBhUm9vdCBUaGUgcm9vdCBwYXRoIG9yIFVSTC5cbiAgICogQHBhcmFtIGFQYXRoIFRoZSBwYXRoIG9yIFVSTCB0byBiZSBqb2luZWQgd2l0aCB0aGUgcm9vdC5cbiAgICpcbiAgICogLSBJZiBhUGF0aCBpcyBhIFVSTCBvciBhIGRhdGEgVVJJLCBhUGF0aCBpcyByZXR1cm5lZCwgdW5sZXNzIGFQYXRoIGlzIGFcbiAgICogICBzY2hlbWUtcmVsYXRpdmUgVVJMOiBUaGVuIHRoZSBzY2hlbWUgb2YgYVJvb3QsIGlmIGFueSwgaXMgcHJlcGVuZGVkXG4gICAqICAgZmlyc3QuXG4gICAqIC0gT3RoZXJ3aXNlIGFQYXRoIGlzIGEgcGF0aC4gSWYgYVJvb3QgaXMgYSBVUkwsIHRoZW4gaXRzIHBhdGggcG9ydGlvblxuICAgKiAgIGlzIHVwZGF0ZWQgd2l0aCB0aGUgcmVzdWx0IGFuZCBhUm9vdCBpcyByZXR1cm5lZC4gT3RoZXJ3aXNlIHRoZSByZXN1bHRcbiAgICogICBpcyByZXR1cm5lZC5cbiAgICogICAtIElmIGFQYXRoIGlzIGFic29sdXRlLCB0aGUgcmVzdWx0IGlzIGFQYXRoLlxuICAgKiAgIC0gT3RoZXJ3aXNlIHRoZSB0d28gcGF0aHMgYXJlIGpvaW5lZCB3aXRoIGEgc2xhc2guXG4gICAqIC0gSm9pbmluZyBmb3IgZXhhbXBsZSAnaHR0cDovLycgYW5kICd3d3cuZXhhbXBsZS5jb20nIGlzIGFsc28gc3VwcG9ydGVkLlxuICAgKi9cbiAgZnVuY3Rpb24gam9pbihhUm9vdCwgYVBhdGgpIHtcbiAgICBpZiAoYVJvb3QgPT09IFwiXCIpIHtcbiAgICAgIGFSb290ID0gXCIuXCI7XG4gICAgfVxuICAgIGlmIChhUGF0aCA9PT0gXCJcIikge1xuICAgICAgYVBhdGggPSBcIi5cIjtcbiAgICB9XG4gICAgdmFyIGFQYXRoVXJsID0gdXJsUGFyc2UoYVBhdGgpO1xuICAgIHZhciBhUm9vdFVybCA9IHVybFBhcnNlKGFSb290KTtcbiAgICBpZiAoYVJvb3RVcmwpIHtcbiAgICAgIGFSb290ID0gYVJvb3RVcmwucGF0aCB8fCAnLyc7XG4gICAgfVxuXG4gICAgLy8gYGpvaW4oZm9vLCAnLy93d3cuZXhhbXBsZS5vcmcnKWBcbiAgICBpZiAoYVBhdGhVcmwgJiYgIWFQYXRoVXJsLnNjaGVtZSkge1xuICAgICAgaWYgKGFSb290VXJsKSB7XG4gICAgICAgIGFQYXRoVXJsLnNjaGVtZSA9IGFSb290VXJsLnNjaGVtZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUGF0aFVybCk7XG4gICAgfVxuXG4gICAgaWYgKGFQYXRoVXJsIHx8IGFQYXRoLm1hdGNoKGRhdGFVcmxSZWdleHApKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuXG4gICAgLy8gYGpvaW4oJ2h0dHA6Ly8nLCAnd3d3LmV4YW1wbGUuY29tJylgXG4gICAgaWYgKGFSb290VXJsICYmICFhUm9vdFVybC5ob3N0ICYmICFhUm9vdFVybC5wYXRoKSB7XG4gICAgICBhUm9vdFVybC5ob3N0ID0gYVBhdGg7XG4gICAgICByZXR1cm4gdXJsR2VuZXJhdGUoYVJvb3RVcmwpO1xuICAgIH1cblxuICAgIHZhciBqb2luZWQgPSBhUGF0aC5jaGFyQXQoMCkgPT09ICcvJ1xuICAgICAgPyBhUGF0aFxuICAgICAgOiBub3JtYWxpemUoYVJvb3QucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyBhUGF0aCk7XG5cbiAgICBpZiAoYVJvb3RVcmwpIHtcbiAgICAgIGFSb290VXJsLnBhdGggPSBqb2luZWQ7XG4gICAgICByZXR1cm4gdXJsR2VuZXJhdGUoYVJvb3RVcmwpO1xuICAgIH1cbiAgICByZXR1cm4gam9pbmVkO1xuICB9XG4gIGV4cG9ydHMuam9pbiA9IGpvaW47XG5cbiAgLyoqXG4gICAqIE1ha2UgYSBwYXRoIHJlbGF0aXZlIHRvIGEgVVJMIG9yIGFub3RoZXIgcGF0aC5cbiAgICpcbiAgICogQHBhcmFtIGFSb290IFRoZSByb290IHBhdGggb3IgVVJMLlxuICAgKiBAcGFyYW0gYVBhdGggVGhlIHBhdGggb3IgVVJMIHRvIGJlIG1hZGUgcmVsYXRpdmUgdG8gYVJvb3QuXG4gICAqL1xuICBmdW5jdGlvbiByZWxhdGl2ZShhUm9vdCwgYVBhdGgpIHtcbiAgICBpZiAoYVJvb3QgPT09IFwiXCIpIHtcbiAgICAgIGFSb290ID0gXCIuXCI7XG4gICAgfVxuXG4gICAgYVJvb3QgPSBhUm9vdC5yZXBsYWNlKC9cXC8kLywgJycpO1xuXG4gICAgLy8gWFhYOiBJdCBpcyBwb3NzaWJsZSB0byByZW1vdmUgdGhpcyBibG9jaywgYW5kIHRoZSB0ZXN0cyBzdGlsbCBwYXNzIVxuICAgIHZhciB1cmwgPSB1cmxQYXJzZShhUm9vdCk7XG4gICAgaWYgKGFQYXRoLmNoYXJBdCgwKSA9PSBcIi9cIiAmJiB1cmwgJiYgdXJsLnBhdGggPT0gXCIvXCIpIHtcbiAgICAgIHJldHVybiBhUGF0aC5zbGljZSgxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYVBhdGguaW5kZXhPZihhUm9vdCArICcvJykgPT09IDBcbiAgICAgID8gYVBhdGguc3Vic3RyKGFSb290Lmxlbmd0aCArIDEpXG4gICAgICA6IGFQYXRoO1xuICB9XG4gIGV4cG9ydHMucmVsYXRpdmUgPSByZWxhdGl2ZTtcblxuICAvKipcbiAgICogQmVjYXVzZSBiZWhhdmlvciBnb2VzIHdhY2t5IHdoZW4geW91IHNldCBgX19wcm90b19fYCBvbiBvYmplY3RzLCB3ZVxuICAgKiBoYXZlIHRvIHByZWZpeCBhbGwgdGhlIHN0cmluZ3MgaW4gb3VyIHNldCB3aXRoIGFuIGFyYml0cmFyeSBjaGFyYWN0ZXIuXG4gICAqXG4gICAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL3B1bGwvMzEgYW5kXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3NvdXJjZS1tYXAvaXNzdWVzLzMwXG4gICAqXG4gICAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICAgKi9cbiAgZnVuY3Rpb24gdG9TZXRTdHJpbmcoYVN0cikge1xuICAgIHJldHVybiAnJCcgKyBhU3RyO1xuICB9XG4gIGV4cG9ydHMudG9TZXRTdHJpbmcgPSB0b1NldFN0cmluZztcblxuICBmdW5jdGlvbiBmcm9tU2V0U3RyaW5nKGFTdHIpIHtcbiAgICByZXR1cm4gYVN0ci5zdWJzdHIoMSk7XG4gIH1cbiAgZXhwb3J0cy5mcm9tU2V0U3RyaW5nID0gZnJvbVNldFN0cmluZztcblxuICBmdW5jdGlvbiBzdHJjbXAoYVN0cjEsIGFTdHIyKSB7XG4gICAgdmFyIHMxID0gYVN0cjEgfHwgXCJcIjtcbiAgICB2YXIgczIgPSBhU3RyMiB8fCBcIlwiO1xuICAgIHJldHVybiAoczEgPiBzMikgLSAoczEgPCBzMik7XG4gIH1cblxuICAvKipcbiAgICogQ29tcGFyYXRvciBiZXR3ZWVuIHR3byBtYXBwaW5ncyB3aGVyZSB0aGUgb3JpZ2luYWwgcG9zaXRpb25zIGFyZSBjb21wYXJlZC5cbiAgICpcbiAgICogT3B0aW9uYWxseSBwYXNzIGluIGB0cnVlYCBhcyBgb25seUNvbXBhcmVHZW5lcmF0ZWRgIHRvIGNvbnNpZGVyIHR3b1xuICAgKiBtYXBwaW5ncyB3aXRoIHRoZSBzYW1lIG9yaWdpbmFsIHNvdXJjZS9saW5lL2NvbHVtbiwgYnV0IGRpZmZlcmVudCBnZW5lcmF0ZWRcbiAgICogbGluZSBhbmQgY29sdW1uIHRoZSBzYW1lLiBVc2VmdWwgd2hlbiBzZWFyY2hpbmcgZm9yIGEgbWFwcGluZyB3aXRoIGFcbiAgICogc3R1YmJlZCBvdXQgbWFwcGluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKG1hcHBpbmdBLCBtYXBwaW5nQiwgb25seUNvbXBhcmVPcmlnaW5hbCkge1xuICAgIHZhciBjbXA7XG5cbiAgICBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICAgIGlmIChjbXApIHtcbiAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuXG4gICAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxMaW5lIC0gbWFwcGluZ0Iub3JpZ2luYWxMaW5lO1xuICAgIGlmIChjbXApIHtcbiAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuXG4gICAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxDb2x1bW4gLSBtYXBwaW5nQi5vcmlnaW5hbENvbHVtbjtcbiAgICBpZiAoY21wIHx8IG9ubHlDb21wYXJlT3JpZ2luYWwpIHtcbiAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuXG4gICAgY21wID0gc3RyY21wKG1hcHBpbmdBLm5hbWUsIG1hcHBpbmdCLm5hbWUpO1xuICAgIGlmIChjbXApIHtcbiAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuXG4gICAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZSAtIG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gICAgaWYgKGNtcCkge1xuICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICB9O1xuICBleHBvcnRzLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zID0gY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnM7XG5cbiAgLyoqXG4gICAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2hlcmUgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbnMgYXJlXG4gICAqIGNvbXBhcmVkLlxuICAgKlxuICAgKiBPcHRpb25hbGx5IHBhc3MgaW4gYHRydWVgIGFzIGBvbmx5Q29tcGFyZUdlbmVyYXRlZGAgdG8gY29uc2lkZXIgdHdvXG4gICAqIG1hcHBpbmdzIHdpdGggdGhlIHNhbWUgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiwgYnV0IGRpZmZlcmVudFxuICAgKiBzb3VyY2UvbmFtZS9vcmlnaW5hbCBsaW5lIGFuZCBjb2x1bW4gdGhlIHNhbWUuIFVzZWZ1bCB3aGVuIHNlYXJjaGluZyBmb3IgYVxuICAgKiBtYXBwaW5nIHdpdGggYSBzdHViYmVkIG91dCBtYXBwaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zKG1hcHBpbmdBLCBtYXBwaW5nQiwgb25seUNvbXBhcmVHZW5lcmF0ZWQpIHtcbiAgICB2YXIgY21wO1xuXG4gICAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZSAtIG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gICAgaWYgKGNtcCkge1xuICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG5cbiAgICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW4gLSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gICAgaWYgKGNtcCB8fCBvbmx5Q29tcGFyZUdlbmVyYXRlZCkge1xuICAgICAgcmV0dXJuIGNtcDtcbiAgICB9XG5cbiAgICBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICAgIGlmIChjbXApIHtcbiAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuXG4gICAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxMaW5lIC0gbWFwcGluZ0Iub3JpZ2luYWxMaW5lO1xuICAgIGlmIChjbXApIHtcbiAgICAgIHJldHVybiBjbXA7XG4gICAgfVxuXG4gICAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxDb2x1bW4gLSBtYXBwaW5nQi5vcmlnaW5hbENvbHVtbjtcbiAgICBpZiAoY21wKSB7XG4gICAgICByZXR1cm4gY21wO1xuICAgIH1cblxuICAgIHJldHVybiBzdHJjbXAobWFwcGluZ0EubmFtZSwgbWFwcGluZ0IubmFtZSk7XG4gIH07XG4gIGV4cG9ydHMuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zID0gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zO1xuXG59KTtcbiIsIihmdW5jdGlvbiAocHJvY2VzcyxfX2ZpbGVuYW1lKXtcbi8qKiB2aW06IGV0OnRzPTQ6c3c9NDpzdHM9NFxuICogQGxpY2Vuc2UgYW1kZWZpbmUgMC4xLjAgQ29weXJpZ2h0IChjKSAyMDExLCBUaGUgRG9qbyBGb3VuZGF0aW9uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBBdmFpbGFibGUgdmlhIHRoZSBNSVQgb3IgbmV3IEJTRCBsaWNlbnNlLlxuICogc2VlOiBodHRwOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL2FtZGVmaW5lIGZvciBkZXRhaWxzXG4gKi9cblxuLypqc2xpbnQgbm9kZTogdHJ1ZSAqL1xuLypnbG9iYWwgbW9kdWxlLCBwcm9jZXNzICovXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGRlZmluZSBmb3Igbm9kZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBtb2R1bGUgdGhlIFwibW9kdWxlXCIgb2JqZWN0IHRoYXQgaXMgZGVmaW5lZCBieSBOb2RlIGZvciB0aGVcbiAqIGN1cnJlbnQgbW9kdWxlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3JlcXVpcmVGbl0uIE5vZGUncyByZXF1aXJlIGZ1bmN0aW9uIGZvciB0aGUgY3VycmVudCBtb2R1bGUuXG4gKiBJdCBvbmx5IG5lZWRzIHRvIGJlIHBhc3NlZCBpbiBOb2RlIHZlcnNpb25zIGJlZm9yZSAwLjUsIHdoZW4gbW9kdWxlLnJlcXVpcmVcbiAqIGRpZCBub3QgZXhpc3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGEgZGVmaW5lIGZ1bmN0aW9uIHRoYXQgaXMgdXNhYmxlIGZvciB0aGUgY3VycmVudCBub2RlXG4gKiBtb2R1bGUuXG4gKi9cbmZ1bmN0aW9uIGFtZGVmaW5lKG1vZHVsZSwgcmVxdWlyZUZuKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBkZWZpbmVDYWNoZSA9IHt9LFxuICAgICAgICBsb2FkZXJDYWNoZSA9IHt9LFxuICAgICAgICBhbHJlYWR5Q2FsbGVkID0gZmFsc2UsXG4gICAgICAgIHBhdGggPSByZXF1aXJlKCdwYXRoJyksXG4gICAgICAgIG1ha2VSZXF1aXJlLCBzdHJpbmdSZXF1aXJlO1xuXG4gICAgLyoqXG4gICAgICogVHJpbXMgdGhlIC4gYW5kIC4uIGZyb20gYW4gYXJyYXkgb2YgcGF0aCBzZWdtZW50cy5cbiAgICAgKiBJdCB3aWxsIGtlZXAgYSBsZWFkaW5nIHBhdGggc2VnbWVudCBpZiBhIC4uIHdpbGwgYmVjb21lXG4gICAgICogdGhlIGZpcnN0IHBhdGggc2VnbWVudCwgdG8gaGVscCB3aXRoIG1vZHVsZSBuYW1lIGxvb2t1cHMsXG4gICAgICogd2hpY2ggYWN0IGxpa2UgcGF0aHMsIGJ1dCBjYW4gYmUgcmVtYXBwZWQuIEJ1dCB0aGUgZW5kIHJlc3VsdCxcbiAgICAgKiBhbGwgcGF0aHMgdGhhdCB1c2UgdGhpcyBmdW5jdGlvbiBzaG91bGQgbG9vayBub3JtYWxpemVkLlxuICAgICAqIE5PVEU6IHRoaXMgbWV0aG9kIE1PRElGSUVTIHRoZSBpbnB1dCBhcnJheS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnkgdGhlIGFycmF5IG9mIHBhdGggc2VnbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbURvdHMoYXJ5KSB7XG4gICAgICAgIHZhciBpLCBwYXJ0O1xuICAgICAgICBmb3IgKGkgPSAwOyBhcnlbaV07IGkrPSAxKSB7XG4gICAgICAgICAgICBwYXJ0ID0gYXJ5W2ldO1xuICAgICAgICAgICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgICAgICAgICAgIGFyeS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IDEgJiYgKGFyeVsyXSA9PT0gJy4uJyB8fCBhcnlbMF0gPT09ICcuLicpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vRW5kIG9mIHRoZSBsaW5lLiBLZWVwIGF0IGxlYXN0IG9uZSBub24tZG90XG4gICAgICAgICAgICAgICAgICAgIC8vcGF0aCBzZWdtZW50IGF0IHRoZSBmcm9udCBzbyBpdCBjYW4gYmUgbWFwcGVkXG4gICAgICAgICAgICAgICAgICAgIC8vY29ycmVjdGx5IHRvIGRpc2suIE90aGVyd2lzZSwgdGhlcmUgaXMgbGlrZWx5XG4gICAgICAgICAgICAgICAgICAgIC8vbm8gcGF0aCBtYXBwaW5nIGZvciBhIHBhdGggc3RhcnRpbmcgd2l0aCAnLi4nLlxuICAgICAgICAgICAgICAgICAgICAvL1RoaXMgY2FuIHN0aWxsIGZhaWwsIGJ1dCBjYXRjaGVzIHRoZSBtb3N0IHJlYXNvbmFibGVcbiAgICAgICAgICAgICAgICAgICAgLy91c2VzIG9mIC4uXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYXJ5LnNwbGljZShpIC0gMSwgMik7XG4gICAgICAgICAgICAgICAgICAgIGkgLT0gMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemUobmFtZSwgYmFzZU5hbWUpIHtcbiAgICAgICAgdmFyIGJhc2VQYXJ0cztcblxuICAgICAgICAvL0FkanVzdCBhbnkgcmVsYXRpdmUgcGF0aHMuXG4gICAgICAgIGlmIChuYW1lICYmIG5hbWUuY2hhckF0KDApID09PSAnLicpIHtcbiAgICAgICAgICAgIC8vSWYgaGF2ZSBhIGJhc2UgbmFtZSwgdHJ5IHRvIG5vcm1hbGl6ZSBhZ2FpbnN0IGl0LFxuICAgICAgICAgICAgLy9vdGhlcndpc2UsIGFzc3VtZSBpdCBpcyBhIHRvcC1sZXZlbCByZXF1aXJlIHRoYXQgd2lsbFxuICAgICAgICAgICAgLy9iZSByZWxhdGl2ZSB0byBiYXNlVXJsIGluIHRoZSBlbmQuXG4gICAgICAgICAgICBpZiAoYmFzZU5hbWUpIHtcbiAgICAgICAgICAgICAgICBiYXNlUGFydHMgPSBiYXNlTmFtZS5zcGxpdCgnLycpO1xuICAgICAgICAgICAgICAgIGJhc2VQYXJ0cyA9IGJhc2VQYXJ0cy5zbGljZSgwLCBiYXNlUGFydHMubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgYmFzZVBhcnRzID0gYmFzZVBhcnRzLmNvbmNhdChuYW1lLnNwbGl0KCcvJykpO1xuICAgICAgICAgICAgICAgIHRyaW1Eb3RzKGJhc2VQYXJ0cyk7XG4gICAgICAgICAgICAgICAgbmFtZSA9IGJhc2VQYXJ0cy5qb2luKCcvJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIG5vcm1hbGl6ZSgpIGZ1bmN0aW9uIHBhc3NlZCB0byBhIGxvYWRlciBwbHVnaW4nc1xuICAgICAqIG5vcm1hbGl6ZSBtZXRob2QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFrZU5vcm1hbGl6ZShyZWxOYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZShuYW1lLCByZWxOYW1lKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlTG9hZChpZCkge1xuICAgICAgICBmdW5jdGlvbiBsb2FkKHZhbHVlKSB7XG4gICAgICAgICAgICBsb2FkZXJDYWNoZVtpZF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvYWQuZnJvbVRleHQgPSBmdW5jdGlvbiAoaWQsIHRleHQpIHtcbiAgICAgICAgICAgIC8vVGhpcyBvbmUgaXMgZGlmZmljdWx0IGJlY2F1c2UgdGhlIHRleHQgY2FuL3Byb2JhYmx5IHVzZXNcbiAgICAgICAgICAgIC8vZGVmaW5lLCBhbmQgYW55IHJlbGF0aXZlIHBhdGhzIGFuZCByZXF1aXJlcyBzaG91bGQgYmUgcmVsYXRpdmVcbiAgICAgICAgICAgIC8vdG8gdGhhdCBpZCB3YXMgaXQgd291bGQgYmUgZm91bmQgb24gZGlzay4gQnV0IHRoaXMgd291bGQgcmVxdWlyZVxuICAgICAgICAgICAgLy9ib290c3RyYXBwaW5nIGEgbW9kdWxlL3JlcXVpcmUgZmFpcmx5IGRlZXBseSBmcm9tIG5vZGUgY29yZS5cbiAgICAgICAgICAgIC8vTm90IHN1cmUgaG93IGJlc3QgdG8gZ28gYWJvdXQgdGhhdCB5ZXQuXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FtZGVmaW5lIGRvZXMgbm90IGltcGxlbWVudCBsb2FkLmZyb21UZXh0Jyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGxvYWQ7XG4gICAgfVxuXG4gICAgbWFrZVJlcXVpcmUgPSBmdW5jdGlvbiAoc3lzdGVtUmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlLCByZWxJZCkge1xuICAgICAgICBmdW5jdGlvbiBhbWRSZXF1aXJlKGRlcHMsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgLy9TeW5jaHJvbm91cywgc2luZ2xlIG1vZHVsZSByZXF1aXJlKCcnKVxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdSZXF1aXJlKHN5c3RlbVJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSwgZGVwcywgcmVsSWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL0FycmF5IG9mIGRlcGVuZGVuY2llcyB3aXRoIGEgY2FsbGJhY2suXG5cbiAgICAgICAgICAgICAgICAvL0NvbnZlcnQgdGhlIGRlcGVuZGVuY2llcyB0byBtb2R1bGVzLlxuICAgICAgICAgICAgICAgIGRlcHMgPSBkZXBzLm1hcChmdW5jdGlvbiAoZGVwTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nUmVxdWlyZShzeXN0ZW1SZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUsIGRlcE5hbWUsIHJlbElkKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vV2FpdCBmb3IgbmV4dCB0aWNrIHRvIGNhbGwgYmFjayB0aGUgcmVxdWlyZSBjYWxsLlxuICAgICAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShudWxsLCBkZXBzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGFtZFJlcXVpcmUudG9VcmwgPSBmdW5jdGlvbiAoZmlsZVBhdGgpIHtcbiAgICAgICAgICAgIGlmIChmaWxlUGF0aC5pbmRleE9mKCcuJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9ybWFsaXplKGZpbGVQYXRoLCBwYXRoLmRpcm5hbWUobW9kdWxlLmZpbGVuYW1lKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmaWxlUGF0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gYW1kUmVxdWlyZTtcbiAgICB9O1xuXG4gICAgLy9GYXZvciBleHBsaWNpdCB2YWx1ZSwgcGFzc2VkIGluIGlmIHRoZSBtb2R1bGUgd2FudHMgdG8gc3VwcG9ydCBOb2RlIDAuNC5cbiAgICByZXF1aXJlRm4gPSByZXF1aXJlRm4gfHwgZnVuY3Rpb24gcmVxKCkge1xuICAgICAgICByZXR1cm4gbW9kdWxlLnJlcXVpcmUuYXBwbHkobW9kdWxlLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBydW5GYWN0b3J5KGlkLCBkZXBzLCBmYWN0b3J5KSB7XG4gICAgICAgIHZhciByLCBlLCBtLCByZXN1bHQ7XG5cbiAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICBlID0gbG9hZGVyQ2FjaGVbaWRdID0ge307XG4gICAgICAgICAgICBtID0ge1xuICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICB1cmk6IF9fZmlsZW5hbWUsXG4gICAgICAgICAgICAgICAgZXhwb3J0czogZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHIgPSBtYWtlUmVxdWlyZShyZXF1aXJlRm4sIGUsIG0sIGlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vT25seSBzdXBwb3J0IG9uZSBkZWZpbmUgY2FsbCBwZXIgZmlsZVxuICAgICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FtZGVmaW5lIHdpdGggbm8gbW9kdWxlIElEIGNhbm5vdCBiZSBjYWxsZWQgbW9yZSB0aGFuIG9uY2UgcGVyIGZpbGUuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgLy9Vc2UgdGhlIHJlYWwgdmFyaWFibGVzIGZyb20gbm9kZVxuICAgICAgICAgICAgLy9Vc2UgbW9kdWxlLmV4cG9ydHMgZm9yIGV4cG9ydHMsIHNpbmNlXG4gICAgICAgICAgICAvL3RoZSBleHBvcnRzIGluIGhlcmUgaXMgYW1kZWZpbmUgZXhwb3J0cy5cbiAgICAgICAgICAgIGUgPSBtb2R1bGUuZXhwb3J0cztcbiAgICAgICAgICAgIG0gPSBtb2R1bGU7XG4gICAgICAgICAgICByID0gbWFrZVJlcXVpcmUocmVxdWlyZUZuLCBlLCBtLCBtb2R1bGUuaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9JZiB0aGVyZSBhcmUgZGVwZW5kZW5jaWVzLCB0aGV5IGFyZSBzdHJpbmdzLCBzbyBuZWVkXG4gICAgICAgIC8vdG8gY29udmVydCB0aGVtIHRvIGRlcGVuZGVuY3kgdmFsdWVzLlxuICAgICAgICBpZiAoZGVwcykge1xuICAgICAgICAgICAgZGVwcyA9IGRlcHMubWFwKGZ1bmN0aW9uIChkZXBOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHIoZGVwTmFtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vQ2FsbCB0aGUgZmFjdG9yeSB3aXRoIHRoZSByaWdodCBkZXBlbmRlbmNpZXMuXG4gICAgICAgIGlmICh0eXBlb2YgZmFjdG9yeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFjdG9yeS5hcHBseShtLmV4cG9ydHMsIGRlcHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFjdG9yeTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbS5leHBvcnRzID0gcmVzdWx0O1xuICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgbG9hZGVyQ2FjaGVbaWRdID0gbS5leHBvcnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RyaW5nUmVxdWlyZSA9IGZ1bmN0aW9uIChzeXN0ZW1SZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUsIGlkLCByZWxJZCkge1xuICAgICAgICAvL1NwbGl0IHRoZSBJRCBieSBhICEgc28gdGhhdFxuICAgICAgICB2YXIgaW5kZXggPSBpZC5pbmRleE9mKCchJyksXG4gICAgICAgICAgICBvcmlnaW5hbElkID0gaWQsXG4gICAgICAgICAgICBwcmVmaXgsIHBsdWdpbjtcblxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBpZCA9IG5vcm1hbGl6ZShpZCwgcmVsSWQpO1xuXG4gICAgICAgICAgICAvL1N0cmFpZ2h0IG1vZHVsZSBsb29rdXAuIElmIGl0IGlzIG9uZSBvZiB0aGUgc3BlY2lhbCBkZXBlbmRlbmNpZXMsXG4gICAgICAgICAgICAvL2RlYWwgd2l0aCBpdCwgb3RoZXJ3aXNlLCBkZWxlZ2F0ZSB0byBub2RlLlxuICAgICAgICAgICAgaWYgKGlkID09PSAncmVxdWlyZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZVJlcXVpcmUoc3lzdGVtUmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlLCByZWxJZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlkID09PSAnZXhwb3J0cycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0cztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaWQgPT09ICdtb2R1bGUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vZHVsZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobG9hZGVyQ2FjaGUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvYWRlckNhY2hlW2lkXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVmaW5lQ2FjaGVbaWRdKSB7XG4gICAgICAgICAgICAgICAgcnVuRmFjdG9yeS5hcHBseShudWxsLCBkZWZpbmVDYWNoZVtpZF0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2FkZXJDYWNoZVtpZF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmKHN5c3RlbVJlcXVpcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN5c3RlbVJlcXVpcmUob3JpZ2luYWxJZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtb2R1bGUgd2l0aCBJRDogJyArIGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL1RoZXJlIGlzIGEgcGx1Z2luIGluIHBsYXkuXG4gICAgICAgICAgICBwcmVmaXggPSBpZC5zdWJzdHJpbmcoMCwgaW5kZXgpO1xuICAgICAgICAgICAgaWQgPSBpZC5zdWJzdHJpbmcoaW5kZXggKyAxLCBpZC5sZW5ndGgpO1xuXG4gICAgICAgICAgICBwbHVnaW4gPSBzdHJpbmdSZXF1aXJlKHN5c3RlbVJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSwgcHJlZml4LCByZWxJZCk7XG5cbiAgICAgICAgICAgIGlmIChwbHVnaW4ubm9ybWFsaXplKSB7XG4gICAgICAgICAgICAgICAgaWQgPSBwbHVnaW4ubm9ybWFsaXplKGlkLCBtYWtlTm9ybWFsaXplKHJlbElkKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vTm9ybWFsaXplIHRoZSBJRCBub3JtYWxseS5cbiAgICAgICAgICAgICAgICBpZCA9IG5vcm1hbGl6ZShpZCwgcmVsSWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobG9hZGVyQ2FjaGVbaWRdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvYWRlckNhY2hlW2lkXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGx1Z2luLmxvYWQoaWQsIG1ha2VSZXF1aXJlKHN5c3RlbVJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSwgcmVsSWQpLCBtYWtlTG9hZChpZCksIHt9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBsb2FkZXJDYWNoZVtpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy9DcmVhdGUgYSBkZWZpbmUgZnVuY3Rpb24gc3BlY2lmaWMgdG8gdGhlIG1vZHVsZSBhc2tpbmcgZm9yIGFtZGVmaW5lLlxuICAgIGZ1bmN0aW9uIGRlZmluZShpZCwgZGVwcywgZmFjdG9yeSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpZCkpIHtcbiAgICAgICAgICAgIGZhY3RvcnkgPSBkZXBzO1xuICAgICAgICAgICAgZGVwcyA9IGlkO1xuICAgICAgICAgICAgaWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZmFjdG9yeSA9IGlkO1xuICAgICAgICAgICAgaWQgPSBkZXBzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlcHMgJiYgIUFycmF5LmlzQXJyYXkoZGVwcykpIHtcbiAgICAgICAgICAgIGZhY3RvcnkgPSBkZXBzO1xuICAgICAgICAgICAgZGVwcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGVwcykge1xuICAgICAgICAgICAgZGVwcyA9IFsncmVxdWlyZScsICdleHBvcnRzJywgJ21vZHVsZSddO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9TZXQgdXAgcHJvcGVydGllcyBmb3IgdGhpcyBtb2R1bGUuIElmIGFuIElELCB0aGVuIHVzZVxuICAgICAgICAvL2ludGVybmFsIGNhY2hlLiBJZiBubyBJRCwgdGhlbiB1c2UgdGhlIGV4dGVybmFsIHZhcmlhYmxlc1xuICAgICAgICAvL2ZvciB0aGlzIG5vZGUgbW9kdWxlLlxuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIC8vUHV0IHRoZSBtb2R1bGUgaW4gZGVlcCBmcmVlemUgdW50aWwgdGhlcmUgaXMgYVxuICAgICAgICAgICAgLy9yZXF1aXJlIGNhbGwgZm9yIGl0LlxuICAgICAgICAgICAgZGVmaW5lQ2FjaGVbaWRdID0gW2lkLCBkZXBzLCBmYWN0b3J5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJ1bkZhY3RvcnkoaWQsIGRlcHMsIGZhY3RvcnkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9kZWZpbmUucmVxdWlyZSwgd2hpY2ggaGFzIGFjY2VzcyB0byBhbGwgdGhlIHZhbHVlcyBpbiB0aGVcbiAgICAvL2NhY2hlLiBVc2VmdWwgZm9yIEFNRCBtb2R1bGVzIHRoYXQgYWxsIGhhdmUgSURzIGluIHRoZSBmaWxlLFxuICAgIC8vYnV0IG5lZWQgdG8gZmluYWxseSBleHBvcnQgYSB2YWx1ZSB0byBub2RlIGJhc2VkIG9uIG9uZSBvZiB0aG9zZVxuICAgIC8vSURzLlxuICAgIGRlZmluZS5yZXF1aXJlID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmIChsb2FkZXJDYWNoZVtpZF0pIHtcbiAgICAgICAgICAgIHJldHVybiBsb2FkZXJDYWNoZVtpZF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVmaW5lQ2FjaGVbaWRdKSB7XG4gICAgICAgICAgICBydW5GYWN0b3J5LmFwcGx5KG51bGwsIGRlZmluZUNhY2hlW2lkXSk7XG4gICAgICAgICAgICByZXR1cm4gbG9hZGVyQ2FjaGVbaWRdO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGRlZmluZS5hbWQgPSB7fTtcblxuICAgIHJldHVybiBkZWZpbmU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYW1kZWZpbmU7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLFwiL25vZGVfbW9kdWxlcy9hdXRvcHJlZml4ZXItY29yZS9ub2RlX21vZHVsZXMvcG9zdGNzcy9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9ub2RlX21vZHVsZXMvYW1kZWZpbmUvYW1kZWZpbmUuanNcIikiLCIoZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsKXtcbi8qIVxuICogQG92ZXJ2aWV3IGVzNi1wcm9taXNlIC0gYSB0aW55IGltcGxlbWVudGF0aW9uIG9mIFByb21pc2VzL0ErLlxuICogQGNvcHlyaWdodCBDb3B5cmlnaHQgKGMpIDIwMTQgWWVodWRhIEthdHosIFRvbSBEYWxlLCBTdGVmYW4gUGVubmVyIGFuZCBjb250cmlidXRvcnMgKENvbnZlcnNpb24gdG8gRVM2IEFQSSBieSBKYWtlIEFyY2hpYmFsZClcbiAqIEBsaWNlbnNlICAgTGljZW5zZWQgdW5kZXIgTUlUIGxpY2Vuc2VcbiAqICAgICAgICAgICAgU2VlIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9qYWtlYXJjaGliYWxkL2VzNi1wcm9taXNlL21hc3Rlci9MSUNFTlNFXG4gKiBAdmVyc2lvbiAgIDIuMC4wXG4gKi9cblxuKGZ1bmN0aW9uKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgZnVuY3Rpb24gJCR1dGlscyQkb2JqZWN0T3JGdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJiB4ICE9PSBudWxsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkJHV0aWxzJCRpc0Z1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkJHV0aWxzJCRpc01heWJlVGhlbmFibGUoeCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJiB4ICE9PSBudWxsO1xuICAgIH1cblxuICAgIHZhciAkJHV0aWxzJCRfaXNBcnJheTtcblxuICAgIGlmICghQXJyYXkuaXNBcnJheSkge1xuICAgICAgJCR1dGlscyQkX2lzQXJyYXkgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgJCR1dGlscyQkX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuICAgIH1cblxuICAgIHZhciAkJHV0aWxzJCRpc0FycmF5ID0gJCR1dGlscyQkX2lzQXJyYXk7XG4gICAgdmFyICQkdXRpbHMkJG5vdyA9IERhdGUubm93IHx8IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH07XG4gICAgZnVuY3Rpb24gJCR1dGlscyQkRigpIHsgfVxuXG4gICAgdmFyICQkdXRpbHMkJG9fY3JlYXRlID0gKE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gKG8pIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlY29uZCBhcmd1bWVudCBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG8gIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgICB9XG4gICAgICAkJHV0aWxzJCRGLnByb3RvdHlwZSA9IG87XG4gICAgICByZXR1cm4gbmV3ICQkdXRpbHMkJEYoKTtcbiAgICB9KTtcblxuICAgIHZhciAkJGFzYXAkJGxlbiA9IDA7XG5cbiAgICB2YXIgJCRhc2FwJCRkZWZhdWx0ID0gZnVuY3Rpb24gYXNhcChjYWxsYmFjaywgYXJnKSB7XG4gICAgICAkJGFzYXAkJHF1ZXVlWyQkYXNhcCQkbGVuXSA9IGNhbGxiYWNrO1xuICAgICAgJCRhc2FwJCRxdWV1ZVskJGFzYXAkJGxlbiArIDFdID0gYXJnO1xuICAgICAgJCRhc2FwJCRsZW4gKz0gMjtcbiAgICAgIGlmICgkJGFzYXAkJGxlbiA9PT0gMikge1xuICAgICAgICAvLyBJZiBsZW4gaXMgMSwgdGhhdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gc2NoZWR1bGUgYW4gYXN5bmMgZmx1c2guXG4gICAgICAgIC8vIElmIGFkZGl0aW9uYWwgY2FsbGJhY2tzIGFyZSBxdWV1ZWQgYmVmb3JlIHRoZSBxdWV1ZSBpcyBmbHVzaGVkLCB0aGV5XG4gICAgICAgIC8vIHdpbGwgYmUgcHJvY2Vzc2VkIGJ5IHRoaXMgZmx1c2ggdGhhdCB3ZSBhcmUgc2NoZWR1bGluZy5cbiAgICAgICAgJCRhc2FwJCRzY2hlZHVsZUZsdXNoKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciAkJGFzYXAkJGJyb3dzZXJHbG9iYWwgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpID8gd2luZG93IDoge307XG4gICAgdmFyICQkYXNhcCQkQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPSAkJGFzYXAkJGJyb3dzZXJHbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCAkJGFzYXAkJGJyb3dzZXJHbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcblxuICAgIC8vIHRlc3QgZm9yIHdlYiB3b3JrZXIgYnV0IG5vdCBpbiBJRTEwXG4gICAgdmFyICQkYXNhcCQkaXNXb3JrZXIgPSB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICB0eXBlb2YgaW1wb3J0U2NyaXB0cyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCc7XG5cbiAgICAvLyBub2RlXG4gICAgZnVuY3Rpb24gJCRhc2FwJCR1c2VOZXh0VGljaygpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygkJGFzYXAkJGZsdXNoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJCRhc2FwJCR1c2VNdXRhdGlvbk9ic2VydmVyKCkge1xuICAgICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgdmFyIG9ic2VydmVyID0gbmV3ICQkYXNhcCQkQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIoJCRhc2FwJCRmbHVzaCk7XG4gICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgIG9ic2VydmVyLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIG5vZGUuZGF0YSA9IChpdGVyYXRpb25zID0gKytpdGVyYXRpb25zICUgMik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIHdlYiB3b3JrZXJcbiAgICBmdW5jdGlvbiAkJGFzYXAkJHVzZU1lc3NhZ2VDaGFubmVsKCkge1xuICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gJCRhc2FwJCRmbHVzaDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uICQkYXNhcCQkdXNlU2V0VGltZW91dCgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0VGltZW91dCgkJGFzYXAkJGZsdXNoLCAxKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyICQkYXNhcCQkcXVldWUgPSBuZXcgQXJyYXkoMTAwMCk7XG5cbiAgICBmdW5jdGlvbiAkJGFzYXAkJGZsdXNoKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkJGFzYXAkJGxlbjsgaSs9Mikge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSAkJGFzYXAkJHF1ZXVlW2ldO1xuICAgICAgICB2YXIgYXJnID0gJCRhc2FwJCRxdWV1ZVtpKzFdO1xuXG4gICAgICAgIGNhbGxiYWNrKGFyZyk7XG5cbiAgICAgICAgJCRhc2FwJCRxdWV1ZVtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgJCRhc2FwJCRxdWV1ZVtpKzFdID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICAkJGFzYXAkJGxlbiA9IDA7XG4gICAgfVxuXG4gICAgdmFyICQkYXNhcCQkc2NoZWR1bGVGbHVzaDtcblxuICAgIC8vIERlY2lkZSB3aGF0IGFzeW5jIG1ldGhvZCB0byB1c2UgdG8gdHJpZ2dlcmluZyBwcm9jZXNzaW5nIG9mIHF1ZXVlZCBjYWxsYmFja3M6XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiB7fS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAgICQkYXNhcCQkc2NoZWR1bGVGbHVzaCA9ICQkYXNhcCQkdXNlTmV4dFRpY2soKTtcbiAgICB9IGVsc2UgaWYgKCQkYXNhcCQkQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgICQkYXNhcCQkc2NoZWR1bGVGbHVzaCA9ICQkYXNhcCQkdXNlTXV0YXRpb25PYnNlcnZlcigpO1xuICAgIH0gZWxzZSBpZiAoJCRhc2FwJCRpc1dvcmtlcikge1xuICAgICAgJCRhc2FwJCRzY2hlZHVsZUZsdXNoID0gJCRhc2FwJCR1c2VNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkJGFzYXAkJHNjaGVkdWxlRmx1c2ggPSAkJGFzYXAkJHVzZVNldFRpbWVvdXQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkJCRpbnRlcm5hbCQkbm9vcCgpIHt9XG4gICAgdmFyICQkJGludGVybmFsJCRQRU5ESU5HICAgPSB2b2lkIDA7XG4gICAgdmFyICQkJGludGVybmFsJCRGVUxGSUxMRUQgPSAxO1xuICAgIHZhciAkJCRpbnRlcm5hbCQkUkVKRUNURUQgID0gMjtcbiAgICB2YXIgJCQkaW50ZXJuYWwkJEdFVF9USEVOX0VSUk9SID0gbmV3ICQkJGludGVybmFsJCRFcnJvck9iamVjdCgpO1xuXG4gICAgZnVuY3Rpb24gJCQkaW50ZXJuYWwkJHNlbGZGdWxsZmlsbG1lbnQoKSB7XG4gICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIllvdSBjYW5ub3QgcmVzb2x2ZSBhIHByb21pc2Ugd2l0aCBpdHNlbGZcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJCQkaW50ZXJuYWwkJGNhbm5vdFJldHVybk93bigpIHtcbiAgICAgIHJldHVybiBuZXcgVHlwZUVycm9yKCdBIHByb21pc2VzIGNhbGxiYWNrIGNhbm5vdCByZXR1cm4gdGhhdCBzYW1lIHByb21pc2UuJylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkJCRpbnRlcm5hbCQkZ2V0VGhlbihwcm9taXNlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuO1xuICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICAkJCRpbnRlcm5hbCQkR0VUX1RIRU5fRVJST1IuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgcmV0dXJuICQkJGludGVybmFsJCRHRVRfVEhFTl9FUlJPUjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkJCRpbnRlcm5hbCQkdHJ5VGhlbih0aGVuLCB2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcik7XG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJCQkaW50ZXJuYWwkJGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSwgdGhlbikge1xuICAgICAgICQkYXNhcCQkZGVmYXVsdChmdW5jdGlvbihwcm9taXNlKSB7XG4gICAgICAgIHZhciBzZWFsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yID0gJCQkaW50ZXJuYWwkJHRyeVRoZW4odGhlbiwgdGhlbmFibGUsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHNlYWxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgICAgIGlmICh0aGVuYWJsZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICQkJGludGVybmFsJCRyZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJCQkaW50ZXJuYWwkJGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgICAgaWYgKHNlYWxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgICBzZWFsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgJCQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgICAgICB9LCAnU2V0dGxlOiAnICsgKHByb21pc2UuX2xhYmVsIHx8ICcgdW5rbm93biBwcm9taXNlJykpO1xuXG4gICAgICAgIGlmICghc2VhbGVkICYmIGVycm9yKSB7XG4gICAgICAgICAgc2VhbGVkID0gdHJ1ZTtcbiAgICAgICAgICAkJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSwgcHJvbWlzZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJCQkaW50ZXJuYWwkJGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIHRoZW5hYmxlKSB7XG4gICAgICBpZiAodGhlbmFibGUuX3N0YXRlID09PSAkJCRpbnRlcm5hbCQkRlVMRklMTEVEKSB7XG4gICAgICAgICQkJGludGVybmFsJCRmdWxmaWxsKHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICAgICAgfSBlbHNlIGlmIChwcm9taXNlLl9zdGF0ZSA9PT0gJCQkaW50ZXJuYWwkJFJFSkVDVEVEKSB7XG4gICAgICAgICQkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgdGhlbmFibGUuX3Jlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkJCRpbnRlcm5hbCQkc3Vic2NyaWJlKHRoZW5hYmxlLCB1bmRlZmluZWQsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgJCQkaW50ZXJuYWwkJHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgICAkJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uICQkJGludGVybmFsJCRoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUpIHtcbiAgICAgIGlmIChtYXliZVRoZW5hYmxlLmNvbnN0cnVjdG9yID09PSBwcm9taXNlLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICQkJGludGVybmFsJCRoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0aGVuID0gJCQkaW50ZXJuYWwkJGdldFRoZW4obWF5YmVUaGVuYWJsZSk7XG5cbiAgICAgICAgaWYgKHRoZW4gPT09ICQkJGludGVybmFsJCRHRVRfVEhFTl9FUlJPUikge1xuICAgICAgICAgICQkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgJCQkaW50ZXJuYWwkJEdFVF9USEVOX0VSUk9SLmVycm9yKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGVuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAkJCRpbnRlcm5hbCQkZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICAgICAgfSBlbHNlIGlmICgkJHV0aWxzJCRpc0Z1bmN0aW9uKHRoZW4pKSB7XG4gICAgICAgICAgJCQkaW50ZXJuYWwkJGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlLCB0aGVuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkJCRpbnRlcm5hbCQkZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uICQkJGludGVybmFsJCRyZXNvbHZlKHByb21pc2UsIHZhbHVlKSB7XG4gICAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgJCQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCAkJCRpbnRlcm5hbCQkc2VsZkZ1bGxmaWxsbWVudCgpKTtcbiAgICAgIH0gZWxzZSBpZiAoJCR1dGlscyQkb2JqZWN0T3JGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgJCQkaW50ZXJuYWwkJGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCQkaW50ZXJuYWwkJGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uICQkJGludGVybmFsJCRwdWJsaXNoUmVqZWN0aW9uKHByb21pc2UpIHtcbiAgICAgIGlmIChwcm9taXNlLl9vbmVycm9yKSB7XG4gICAgICAgIHByb21pc2UuX29uZXJyb3IocHJvbWlzZS5fcmVzdWx0KTtcbiAgICAgIH1cblxuICAgICAgJCQkaW50ZXJuYWwkJHB1Ymxpc2gocHJvbWlzZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJCQkaW50ZXJuYWwkJGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpIHtcbiAgICAgIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gJCQkaW50ZXJuYWwkJFBFTkRJTkcpIHsgcmV0dXJuOyB9XG5cbiAgICAgIHByb21pc2UuX3Jlc3VsdCA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fc3RhdGUgPSAkJCRpbnRlcm5hbCQkRlVMRklMTEVEO1xuXG4gICAgICBpZiAocHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkJGFzYXAkJGRlZmF1bHQoJCQkaW50ZXJuYWwkJHB1Ymxpc2gsIHByb21pc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uICQkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgcmVhc29uKSB7XG4gICAgICBpZiAocHJvbWlzZS5fc3RhdGUgIT09ICQkJGludGVybmFsJCRQRU5ESU5HKSB7IHJldHVybjsgfVxuICAgICAgcHJvbWlzZS5fc3RhdGUgPSAkJCRpbnRlcm5hbCQkUkVKRUNURUQ7XG4gICAgICBwcm9taXNlLl9yZXN1bHQgPSByZWFzb247XG5cbiAgICAgICQkYXNhcCQkZGVmYXVsdCgkJCRpbnRlcm5hbCQkcHVibGlzaFJlamVjdGlvbiwgcHJvbWlzZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJCQkaW50ZXJuYWwkJHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICAgICAgdmFyIHN1YnNjcmliZXJzID0gcGFyZW50Ll9zdWJzY3JpYmVycztcbiAgICAgIHZhciBsZW5ndGggPSBzdWJzY3JpYmVycy5sZW5ndGg7XG5cbiAgICAgIHBhcmVudC5fb25lcnJvciA9IG51bGw7XG5cbiAgICAgIHN1YnNjcmliZXJzW2xlbmd0aF0gPSBjaGlsZDtcbiAgICAgIHN1YnNjcmliZXJzW2xlbmd0aCArICQkJGludGVybmFsJCRGVUxGSUxMRURdID0gb25GdWxmaWxsbWVudDtcbiAgICAgIHN1YnNjcmliZXJzW2xlbmd0aCArICQkJGludGVybmFsJCRSRUpFQ1RFRF0gID0gb25SZWplY3Rpb247XG5cbiAgICAgIGlmIChsZW5ndGggPT09IDAgJiYgcGFyZW50Ll9zdGF0ZSkge1xuICAgICAgICAkJGFzYXAkJGRlZmF1bHQoJCQkaW50ZXJuYWwkJHB1Ymxpc2gsIHBhcmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJCQkaW50ZXJuYWwkJHB1Ymxpc2gocHJvbWlzZSkge1xuICAgICAgdmFyIHN1YnNjcmliZXJzID0gcHJvbWlzZS5fc3Vic2NyaWJlcnM7XG4gICAgICB2YXIgc2V0dGxlZCA9IHByb21pc2UuX3N0YXRlO1xuXG4gICAgICBpZiAoc3Vic2NyaWJlcnMubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuXG4gICAgICB2YXIgY2hpbGQsIGNhbGxiYWNrLCBkZXRhaWwgPSBwcm9taXNlLl9yZXN1bHQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic2NyaWJlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgY2hpbGQgPSBzdWJzY3JpYmVyc1tpXTtcbiAgICAgICAgY2FsbGJhY2sgPSBzdWJzY3JpYmVyc1tpICsgc2V0dGxlZF07XG5cbiAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgJCQkaW50ZXJuYWwkJGludm9rZUNhbGxiYWNrKHNldHRsZWQsIGNoaWxkLCBjYWxsYmFjaywgZGV0YWlsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayhkZXRhaWwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJCQkaW50ZXJuYWwkJEVycm9yT2JqZWN0KCkge1xuICAgICAgdGhpcy5lcnJvciA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyICQkJGludGVybmFsJCRUUllfQ0FUQ0hfRVJST1IgPSBuZXcgJCQkaW50ZXJuYWwkJEVycm9yT2JqZWN0KCk7XG5cbiAgICBmdW5jdGlvbiAkJCRpbnRlcm5hbCQkdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGRldGFpbCk7XG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgJCQkaW50ZXJuYWwkJFRSWV9DQVRDSF9FUlJPUi5lcnJvciA9IGU7XG4gICAgICAgIHJldHVybiAkJCRpbnRlcm5hbCQkVFJZX0NBVENIX0VSUk9SO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uICQkJGludGVybmFsJCRpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBwcm9taXNlLCBjYWxsYmFjaywgZGV0YWlsKSB7XG4gICAgICB2YXIgaGFzQ2FsbGJhY2sgPSAkJHV0aWxzJCRpc0Z1bmN0aW9uKGNhbGxiYWNrKSxcbiAgICAgICAgICB2YWx1ZSwgZXJyb3IsIHN1Y2NlZWRlZCwgZmFpbGVkO1xuXG4gICAgICBpZiAoaGFzQ2FsbGJhY2spIHtcbiAgICAgICAgdmFsdWUgPSAkJCRpbnRlcm5hbCQkdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCk7XG5cbiAgICAgICAgaWYgKHZhbHVlID09PSAkJCRpbnRlcm5hbCQkVFJZX0NBVENIX0VSUk9SKSB7XG4gICAgICAgICAgZmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICBlcnJvciA9IHZhbHVlLmVycm9yO1xuICAgICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgICAgICAgJCQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCAkJCRpbnRlcm5hbCQkY2Fubm90UmV0dXJuT3duKCkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IGRldGFpbDtcbiAgICAgICAgc3VjY2VlZGVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb21pc2UuX3N0YXRlICE9PSAkJCRpbnRlcm5hbCQkUEVORElORykge1xuICAgICAgICAvLyBub29wXG4gICAgICB9IGVsc2UgaWYgKGhhc0NhbGxiYWNrICYmIHN1Y2NlZWRlZCkge1xuICAgICAgICAkJCRpbnRlcm5hbCQkcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGZhaWxlZCkge1xuICAgICAgICAkJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICAgIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gJCQkaW50ZXJuYWwkJEZVTEZJTExFRCkge1xuICAgICAgICAkJCRpbnRlcm5hbCQkZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHNldHRsZWQgPT09ICQkJGludGVybmFsJCRSRUpFQ1RFRCkge1xuICAgICAgICAkJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkJCRpbnRlcm5hbCQkaW5pdGlhbGl6ZVByb21pc2UocHJvbWlzZSwgcmVzb2x2ZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc29sdmVyKGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHZhbHVlKXtcbiAgICAgICAgICAkJCRpbnRlcm5hbCQkcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIHJlamVjdFByb21pc2UocmVhc29uKSB7XG4gICAgICAgICAgJCQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAkJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uICQkJGVudW1lcmF0b3IkJG1ha2VTZXR0bGVkUmVzdWx0KHN0YXRlLCBwb3NpdGlvbiwgdmFsdWUpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gJCQkaW50ZXJuYWwkJEZVTEZJTExFRCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0YXRlOiAnZnVsZmlsbGVkJyxcbiAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhdGU6ICdyZWplY3RlZCcsXG4gICAgICAgICAgcmVhc29uOiB2YWx1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uICQkJGVudW1lcmF0b3IkJEVudW1lcmF0b3IoQ29uc3RydWN0b3IsIGlucHV0LCBhYm9ydE9uUmVqZWN0LCBsYWJlbCkge1xuICAgICAgdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICAgICAgdGhpcy5wcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKCQkJGludGVybmFsJCRub29wLCBsYWJlbCk7XG4gICAgICB0aGlzLl9hYm9ydE9uUmVqZWN0ID0gYWJvcnRPblJlamVjdDtcblxuICAgICAgaWYgKHRoaXMuX3ZhbGlkYXRlSW5wdXQoaW5wdXQpKSB7XG4gICAgICAgIHRoaXMuX2lucHV0ICAgICA9IGlucHV0O1xuICAgICAgICB0aGlzLmxlbmd0aCAgICAgPSBpbnB1dC5sZW5ndGg7XG4gICAgICAgIHRoaXMuX3JlbWFpbmluZyA9IGlucHV0Lmxlbmd0aDtcblxuICAgICAgICB0aGlzLl9pbml0KCk7XG5cbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgJCQkaW50ZXJuYWwkJGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5sZW5ndGggfHwgMDtcbiAgICAgICAgICB0aGlzLl9lbnVtZXJhdGUoKTtcbiAgICAgICAgICBpZiAodGhpcy5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgICAkJCRpbnRlcm5hbCQkZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkJCRpbnRlcm5hbCQkcmVqZWN0KHRoaXMucHJvbWlzZSwgdGhpcy5fdmFsaWRhdGlvbkVycm9yKCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgICQkJGVudW1lcmF0b3IkJEVudW1lcmF0b3IucHJvdG90eXBlLl92YWxpZGF0ZUlucHV0ID0gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgIHJldHVybiAkJHV0aWxzJCRpc0FycmF5KGlucHV0KTtcbiAgICB9O1xuXG4gICAgJCQkZW51bWVyYXRvciQkRW51bWVyYXRvci5wcm90b3R5cGUuX3ZhbGlkYXRpb25FcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignQXJyYXkgTWV0aG9kcyBtdXN0IGJlIHByb3ZpZGVkIGFuIEFycmF5Jyk7XG4gICAgfTtcblxuICAgICQkJGVudW1lcmF0b3IkJEVudW1lcmF0b3IucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9yZXN1bHQgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIH07XG5cbiAgICB2YXIgJCQkZW51bWVyYXRvciQkZGVmYXVsdCA9ICQkJGVudW1lcmF0b3IkJEVudW1lcmF0b3I7XG5cbiAgICAkJCRlbnVtZXJhdG9yJCRFbnVtZXJhdG9yLnByb3RvdHlwZS5fZW51bWVyYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbGVuZ3RoICA9IHRoaXMubGVuZ3RoO1xuICAgICAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2U7XG4gICAgICB2YXIgaW5wdXQgICA9IHRoaXMuX2lucHV0O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgcHJvbWlzZS5fc3RhdGUgPT09ICQkJGludGVybmFsJCRQRU5ESU5HICYmIGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLl9lYWNoRW50cnkoaW5wdXRbaV0sIGkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAkJCRlbnVtZXJhdG9yJCRFbnVtZXJhdG9yLnByb3RvdHlwZS5fZWFjaEVudHJ5ID0gZnVuY3Rpb24oZW50cnksIGkpIHtcbiAgICAgIHZhciBjID0gdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvcjtcbiAgICAgIGlmICgkJHV0aWxzJCRpc01heWJlVGhlbmFibGUoZW50cnkpKSB7XG4gICAgICAgIGlmIChlbnRyeS5jb25zdHJ1Y3RvciA9PT0gYyAmJiBlbnRyeS5fc3RhdGUgIT09ICQkJGludGVybmFsJCRQRU5ESU5HKSB7XG4gICAgICAgICAgZW50cnkuX29uZXJyb3IgPSBudWxsO1xuICAgICAgICAgIHRoaXMuX3NldHRsZWRBdChlbnRyeS5fc3RhdGUsIGksIGVudHJ5Ll9yZXN1bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChjLnJlc29sdmUoZW50cnkpLCBpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcmVtYWluaW5nLS07XG4gICAgICAgIHRoaXMuX3Jlc3VsdFtpXSA9IHRoaXMuX21ha2VSZXN1bHQoJCQkaW50ZXJuYWwkJEZVTEZJTExFRCwgaSwgZW50cnkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAkJCRlbnVtZXJhdG9yJCRFbnVtZXJhdG9yLnByb3RvdHlwZS5fc2V0dGxlZEF0ID0gZnVuY3Rpb24oc3RhdGUsIGksIHZhbHVlKSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZTtcblxuICAgICAgaWYgKHByb21pc2UuX3N0YXRlID09PSAkJCRpbnRlcm5hbCQkUEVORElORykge1xuICAgICAgICB0aGlzLl9yZW1haW5pbmctLTtcblxuICAgICAgICBpZiAodGhpcy5fYWJvcnRPblJlamVjdCAmJiBzdGF0ZSA9PT0gJCQkaW50ZXJuYWwkJFJFSkVDVEVEKSB7XG4gICAgICAgICAgJCQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcmVzdWx0W2ldID0gdGhpcy5fbWFrZVJlc3VsdChzdGF0ZSwgaSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9yZW1haW5pbmcgPT09IDApIHtcbiAgICAgICAgJCQkaW50ZXJuYWwkJGZ1bGZpbGwocHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgJCQkZW51bWVyYXRvciQkRW51bWVyYXRvci5wcm90b3R5cGUuX21ha2VSZXN1bHQgPSBmdW5jdGlvbihzdGF0ZSwgaSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgJCQkZW51bWVyYXRvciQkRW51bWVyYXRvci5wcm90b3R5cGUuX3dpbGxTZXR0bGVBdCA9IGZ1bmN0aW9uKHByb21pc2UsIGkpIHtcbiAgICAgIHZhciBlbnVtZXJhdG9yID0gdGhpcztcblxuICAgICAgJCQkaW50ZXJuYWwkJHN1YnNjcmliZShwcm9taXNlLCB1bmRlZmluZWQsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGVudW1lcmF0b3IuX3NldHRsZWRBdCgkJCRpbnRlcm5hbCQkRlVMRklMTEVELCBpLCB2YWx1ZSk7XG4gICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgZW51bWVyYXRvci5fc2V0dGxlZEF0KCQkJGludGVybmFsJCRSRUpFQ1RFRCwgaSwgcmVhc29uKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB2YXIgJCRwcm9taXNlJGFsbCQkZGVmYXVsdCA9IGZ1bmN0aW9uIGFsbChlbnRyaWVzLCBsYWJlbCkge1xuICAgICAgcmV0dXJuIG5ldyAkJCRlbnVtZXJhdG9yJCRkZWZhdWx0KHRoaXMsIGVudHJpZXMsIHRydWUgLyogYWJvcnQgb24gcmVqZWN0ICovLCBsYWJlbCkucHJvbWlzZTtcbiAgICB9O1xuXG4gICAgdmFyICQkcHJvbWlzZSRyYWNlJCRkZWZhdWx0ID0gZnVuY3Rpb24gcmFjZShlbnRyaWVzLCBsYWJlbCkge1xuICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgICAgIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKCQkJGludGVybmFsJCRub29wLCBsYWJlbCk7XG5cbiAgICAgIGlmICghJCR1dGlscyQkaXNBcnJheShlbnRyaWVzKSkge1xuICAgICAgICAkJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYW4gYXJyYXkgdG8gcmFjZS4nKSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuZ3RoID0gZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIGZ1bmN0aW9uIG9uRnVsZmlsbG1lbnQodmFsdWUpIHtcbiAgICAgICAgJCQkaW50ZXJuYWwkJHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvblJlamVjdGlvbihyZWFzb24pIHtcbiAgICAgICAgJCQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgcHJvbWlzZS5fc3RhdGUgPT09ICQkJGludGVybmFsJCRQRU5ESU5HICYmIGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAkJCRpbnRlcm5hbCQkc3Vic2NyaWJlKENvbnN0cnVjdG9yLnJlc29sdmUoZW50cmllc1tpXSksIHVuZGVmaW5lZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgdmFyICQkcHJvbWlzZSRyZXNvbHZlJCRkZWZhdWx0ID0gZnVuY3Rpb24gcmVzb2x2ZShvYmplY3QsIGxhYmVsKSB7XG4gICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICAgICAgaWYgKG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QuY29uc3RydWN0b3IgPT09IENvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKCQkJGludGVybmFsJCRub29wLCBsYWJlbCk7XG4gICAgICAkJCRpbnRlcm5hbCQkcmVzb2x2ZShwcm9taXNlLCBvYmplY3QpO1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfTtcblxuICAgIHZhciAkJHByb21pc2UkcmVqZWN0JCRkZWZhdWx0ID0gZnVuY3Rpb24gcmVqZWN0KHJlYXNvbiwgbGFiZWwpIHtcbiAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuICAgICAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3IoJCQkaW50ZXJuYWwkJG5vb3AsIGxhYmVsKTtcbiAgICAgICQkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICB2YXIgJCRlczYkcHJvbWlzZSRwcm9taXNlJCRjb3VudGVyID0gMDtcblxuICAgIGZ1bmN0aW9uICQkZXM2JHByb21pc2UkcHJvbWlzZSQkbmVlZHNSZXNvbHZlcigpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYSByZXNvbHZlciBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIHByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkJGVzNiRwcm9taXNlJHByb21pc2UkJG5lZWRzTmV3KCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1Byb21pc2UnOiBQbGVhc2UgdXNlIHRoZSAnbmV3JyBvcGVyYXRvciwgdGhpcyBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbiAgICB9XG5cbiAgICB2YXIgJCRlczYkcHJvbWlzZSRwcm9taXNlJCRkZWZhdWx0ID0gJCRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlO1xuXG4gICAgLyoqXG4gICAgICBQcm9taXNlIG9iamVjdHMgcmVwcmVzZW50IHRoZSBldmVudHVhbCByZXN1bHQgb2YgYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbi4gVGhlXG4gICAgICBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLCB3aGljaFxuICAgICAgcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2XigJlzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZSByZWFzb25cbiAgICAgIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLlxuXG4gICAgICBUZXJtaW5vbG9neVxuICAgICAgLS0tLS0tLS0tLS1cblxuICAgICAgLSBgcHJvbWlzZWAgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIHdpdGggYSBgdGhlbmAgbWV0aG9kIHdob3NlIGJlaGF2aW9yIGNvbmZvcm1zIHRvIHRoaXMgc3BlY2lmaWNhdGlvbi5cbiAgICAgIC0gYHRoZW5hYmxlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gdGhhdCBkZWZpbmVzIGEgYHRoZW5gIG1ldGhvZC5cbiAgICAgIC0gYHZhbHVlYCBpcyBhbnkgbGVnYWwgSmF2YVNjcmlwdCB2YWx1ZSAoaW5jbHVkaW5nIHVuZGVmaW5lZCwgYSB0aGVuYWJsZSwgb3IgYSBwcm9taXNlKS5cbiAgICAgIC0gYGV4Y2VwdGlvbmAgaXMgYSB2YWx1ZSB0aGF0IGlzIHRocm93biB1c2luZyB0aGUgdGhyb3cgc3RhdGVtZW50LlxuICAgICAgLSBgcmVhc29uYCBpcyBhIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoeSBhIHByb21pc2Ugd2FzIHJlamVjdGVkLlxuICAgICAgLSBgc2V0dGxlZGAgdGhlIGZpbmFsIHJlc3Rpbmcgc3RhdGUgb2YgYSBwcm9taXNlLCBmdWxmaWxsZWQgb3IgcmVqZWN0ZWQuXG5cbiAgICAgIEEgcHJvbWlzZSBjYW4gYmUgaW4gb25lIG9mIHRocmVlIHN0YXRlczogcGVuZGluZywgZnVsZmlsbGVkLCBvciByZWplY3RlZC5cblxuICAgICAgUHJvbWlzZXMgdGhhdCBhcmUgZnVsZmlsbGVkIGhhdmUgYSBmdWxmaWxsbWVudCB2YWx1ZSBhbmQgYXJlIGluIHRoZSBmdWxmaWxsZWRcbiAgICAgIHN0YXRlLiAgUHJvbWlzZXMgdGhhdCBhcmUgcmVqZWN0ZWQgaGF2ZSBhIHJlamVjdGlvbiByZWFzb24gYW5kIGFyZSBpbiB0aGVcbiAgICAgIHJlamVjdGVkIHN0YXRlLiAgQSBmdWxmaWxsbWVudCB2YWx1ZSBpcyBuZXZlciBhIHRoZW5hYmxlLlxuXG4gICAgICBQcm9taXNlcyBjYW4gYWxzbyBiZSBzYWlkIHRvICpyZXNvbHZlKiBhIHZhbHVlLiAgSWYgdGhpcyB2YWx1ZSBpcyBhbHNvIGFcbiAgICAgIHByb21pc2UsIHRoZW4gdGhlIG9yaWdpbmFsIHByb21pc2UncyBzZXR0bGVkIHN0YXRlIHdpbGwgbWF0Y2ggdGhlIHZhbHVlJ3NcbiAgICAgIHNldHRsZWQgc3RhdGUuICBTbyBhIHByb21pc2UgdGhhdCAqcmVzb2x2ZXMqIGEgcHJvbWlzZSB0aGF0IHJlamVjdHMgd2lsbFxuICAgICAgaXRzZWxmIHJlamVjdCwgYW5kIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgd2lsbFxuICAgICAgaXRzZWxmIGZ1bGZpbGwuXG5cblxuICAgICAgQmFzaWMgVXNhZ2U6XG4gICAgICAtLS0tLS0tLS0tLS1cblxuICAgICAgYGBganNcbiAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIC8vIG9uIHN1Y2Nlc3NcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG5cbiAgICAgICAgLy8gb24gZmFpbHVyZVxuICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgIH0pO1xuXG4gICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgLy8gb24gZnVsZmlsbG1lbnRcbiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICAvLyBvbiByZWplY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIEFkdmFuY2VkIFVzYWdlOlxuICAgICAgLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAgIFByb21pc2VzIHNoaW5lIHdoZW4gYWJzdHJhY3RpbmcgYXdheSBhc3luY2hyb25vdXMgaW50ZXJhY3Rpb25zIHN1Y2ggYXNcbiAgICAgIGBYTUxIdHRwUmVxdWVzdGBzLlxuXG4gICAgICBgYGBqc1xuICAgICAgZnVuY3Rpb24gZ2V0SlNPTih1cmwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7XG4gICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGhhbmRsZXI7XG4gICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgICAgICB4aHIuc2VuZCgpO1xuXG4gICAgICAgICAgZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IHRoaXMuRE9ORSkge1xuICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignZ2V0SlNPTjogYCcgKyB1cmwgKyAnYCBmYWlsZWQgd2l0aCBzdGF0dXM6IFsnICsgdGhpcy5zdGF0dXMgKyAnXScpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBnZXRKU09OKCcvcG9zdHMuanNvbicpLnRoZW4oZnVuY3Rpb24oanNvbikge1xuICAgICAgICAvLyBvbiBmdWxmaWxsbWVudFxuICAgICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgIC8vIG9uIHJlamVjdGlvblxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgVW5saWtlIGNhbGxiYWNrcywgcHJvbWlzZXMgYXJlIGdyZWF0IGNvbXBvc2FibGUgcHJpbWl0aXZlcy5cblxuICAgICAgYGBganNcbiAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgZ2V0SlNPTignL3Bvc3RzJyksXG4gICAgICAgIGdldEpTT04oJy9jb21tZW50cycpXG4gICAgICBdKS50aGVuKGZ1bmN0aW9uKHZhbHVlcyl7XG4gICAgICAgIHZhbHVlc1swXSAvLyA9PiBwb3N0c0pTT05cbiAgICAgICAgdmFsdWVzWzFdIC8vID0+IGNvbW1lbnRzSlNPTlxuXG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBAY2xhc3MgUHJvbWlzZVxuICAgICAgQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZXJcbiAgICAgIEBwYXJhbSB7U3RyaW5nfSBsYWJlbCBvcHRpb25hbCBzdHJpbmcgZm9yIGxhYmVsaW5nIHRoZSBwcm9taXNlLlxuICAgICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgICAgQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBmdW5jdGlvbiAkJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UocmVzb2x2ZXIsIGxhYmVsKSB7XG4gICAgICB0aGlzLl9pZCA9ICQkZXM2JHByb21pc2UkcHJvbWlzZSQkY291bnRlcisrO1xuICAgICAgdGhpcy5fbGFiZWwgPSBsYWJlbDtcbiAgICAgIHRoaXMuX3N0YXRlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fcmVzdWx0ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcblxuICAgICAgaWYgKCQkJGludGVybmFsJCRub29wICE9PSByZXNvbHZlcikge1xuICAgICAgICBpZiAoISQkdXRpbHMkJGlzRnVuY3Rpb24ocmVzb2x2ZXIpKSB7XG4gICAgICAgICAgJCRlczYkcHJvbWlzZSRwcm9taXNlJCRuZWVkc1Jlc29sdmVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgJCRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlKSkge1xuICAgICAgICAgICQkZXM2JHByb21pc2UkcHJvbWlzZSQkbmVlZHNOZXcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQkJGludGVybmFsJCRpbml0aWFsaXplUHJvbWlzZSh0aGlzLCByZXNvbHZlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJCRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlLmFsbCA9ICQkcHJvbWlzZSRhbGwkJGRlZmF1bHQ7XG4gICAgJCRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlLnJhY2UgPSAkJHByb21pc2UkcmFjZSQkZGVmYXVsdDtcbiAgICAkJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UucmVzb2x2ZSA9ICQkcHJvbWlzZSRyZXNvbHZlJCRkZWZhdWx0O1xuICAgICQkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZS5yZWplY3QgPSAkJHByb21pc2UkcmVqZWN0JCRkZWZhdWx0O1xuXG4gICAgJCRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlLnByb3RvdHlwZSA9IHtcbiAgICAgIGNvbnN0cnVjdG9yOiAkJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UsXG5cbiAgICAvKipcbiAgICAgIFRoZSBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLFxuICAgICAgd2hpY2ggcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2UncyBldmVudHVhbCB2YWx1ZSBvciB0aGVcbiAgICAgIHJlYXNvbiB3aHkgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZC5cblxuICAgICAgYGBganNcbiAgICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbih1c2VyKXtcbiAgICAgICAgLy8gdXNlciBpcyBhdmFpbGFibGVcbiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAgIC8vIHVzZXIgaXMgdW5hdmFpbGFibGUsIGFuZCB5b3UgYXJlIGdpdmVuIHRoZSByZWFzb24gd2h5XG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBDaGFpbmluZ1xuICAgICAgLS0tLS0tLS1cblxuICAgICAgVGhlIHJldHVybiB2YWx1ZSBvZiBgdGhlbmAgaXMgaXRzZWxmIGEgcHJvbWlzZS4gIFRoaXMgc2Vjb25kLCAnZG93bnN0cmVhbSdcbiAgICAgIHByb21pc2UgaXMgcmVzb2x2ZWQgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmaXJzdCBwcm9taXNlJ3MgZnVsZmlsbG1lbnRcbiAgICAgIG9yIHJlamVjdGlvbiBoYW5kbGVyLCBvciByZWplY3RlZCBpZiB0aGUgaGFuZGxlciB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuXG4gICAgICBgYGBqc1xuICAgICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIHJldHVybiB1c2VyLm5hbWU7XG4gICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIHJldHVybiAnZGVmYXVsdCBuYW1lJztcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHVzZXJOYW1lKSB7XG4gICAgICAgIC8vIElmIGBmaW5kVXNlcmAgZnVsZmlsbGVkLCBgdXNlck5hbWVgIHdpbGwgYmUgdGhlIHVzZXIncyBuYW1lLCBvdGhlcndpc2UgaXRcbiAgICAgICAgLy8gd2lsbCBiZSBgJ2RlZmF1bHQgbmFtZSdgXG4gICAgICB9KTtcblxuICAgICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknKTtcbiAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jyk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIC8vIGlmIGBmaW5kVXNlcmAgZnVsZmlsbGVkLCBgcmVhc29uYCB3aWxsIGJlICdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScuXG4gICAgICAgIC8vIElmIGBmaW5kVXNlcmAgcmVqZWN0ZWQsIGByZWFzb25gIHdpbGwgYmUgJ2BmaW5kVXNlcmAgcmVqZWN0ZWQgYW5kIHdlJ3JlIHVuaGFwcHknLlxuICAgICAgfSk7XG4gICAgICBgYGBcbiAgICAgIElmIHRoZSBkb3duc3RyZWFtIHByb21pc2UgZG9lcyBub3Qgc3BlY2lmeSBhIHJlamVjdGlvbiBoYW5kbGVyLCByZWplY3Rpb24gcmVhc29ucyB3aWxsIGJlIHByb3BhZ2F0ZWQgZnVydGhlciBkb3duc3RyZWFtLlxuXG4gICAgICBgYGBqc1xuICAgICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIHRocm93IG5ldyBQZWRhZ29naWNhbEV4Y2VwdGlvbignVXBzdHJlYW0gZXJyb3InKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgLy8gVGhlIGBQZWRnYWdvY2lhbEV4Y2VwdGlvbmAgaXMgcHJvcGFnYXRlZCBhbGwgdGhlIHdheSBkb3duIHRvIGhlcmVcbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIEFzc2ltaWxhdGlvblxuICAgICAgLS0tLS0tLS0tLS0tXG5cbiAgICAgIFNvbWV0aW1lcyB0aGUgdmFsdWUgeW91IHdhbnQgdG8gcHJvcGFnYXRlIHRvIGEgZG93bnN0cmVhbSBwcm9taXNlIGNhbiBvbmx5IGJlXG4gICAgICByZXRyaWV2ZWQgYXN5bmNocm9ub3VzbHkuIFRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHJldHVybmluZyBhIHByb21pc2UgaW4gdGhlXG4gICAgICBmdWxmaWxsbWVudCBvciByZWplY3Rpb24gaGFuZGxlci4gVGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIHRoZW4gYmUgcGVuZGluZ1xuICAgICAgdW50aWwgdGhlIHJldHVybmVkIHByb21pc2UgaXMgc2V0dGxlZC4gVGhpcyBpcyBjYWxsZWQgKmFzc2ltaWxhdGlvbiouXG5cbiAgICAgIGBgYGpzXG4gICAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAgICAgLy8gVGhlIHVzZXIncyBjb21tZW50cyBhcmUgbm93IGF2YWlsYWJsZVxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgSWYgdGhlIGFzc2ltbGlhdGVkIHByb21pc2UgcmVqZWN0cywgdGhlbiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIHdpbGwgYWxzbyByZWplY3QuXG5cbiAgICAgIGBgYGpzXG4gICAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAgICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCBmdWxmaWxscywgd2UnbGwgaGF2ZSB0aGUgdmFsdWUgaGVyZVxuICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIHJlamVjdHMsIHdlJ2xsIGhhdmUgdGhlIHJlYXNvbiBoZXJlXG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBTaW1wbGUgRXhhbXBsZVxuICAgICAgLS0tLS0tLS0tLS0tLS1cblxuICAgICAgU3luY2hyb25vdXMgRXhhbXBsZVxuXG4gICAgICBgYGBqYXZhc2NyaXB0XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBmaW5kUmVzdWx0KCk7XG4gICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAgIC8vIGZhaWx1cmVcbiAgICAgIH1cbiAgICAgIGBgYFxuXG4gICAgICBFcnJiYWNrIEV4YW1wbGVcblxuICAgICAgYGBganNcbiAgICAgIGZpbmRSZXN1bHQoZnVuY3Rpb24ocmVzdWx0LCBlcnIpe1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgUHJvbWlzZSBFeGFtcGxlO1xuXG4gICAgICBgYGBqYXZhc2NyaXB0XG4gICAgICBmaW5kUmVzdWx0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgICAgICAvLyBzdWNjZXNzXG4gICAgICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgICAgICAvLyBmYWlsdXJlXG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBBZHZhbmNlZCBFeGFtcGxlXG4gICAgICAtLS0tLS0tLS0tLS0tLVxuXG4gICAgICBTeW5jaHJvbm91cyBFeGFtcGxlXG5cbiAgICAgIGBgYGphdmFzY3JpcHRcbiAgICAgIHZhciBhdXRob3IsIGJvb2tzO1xuXG4gICAgICB0cnkge1xuICAgICAgICBhdXRob3IgPSBmaW5kQXV0aG9yKCk7XG4gICAgICAgIGJvb2tzICA9IGZpbmRCb29rc0J5QXV0aG9yKGF1dGhvcik7XG4gICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAgIC8vIGZhaWx1cmVcbiAgICAgIH1cbiAgICAgIGBgYFxuXG4gICAgICBFcnJiYWNrIEV4YW1wbGVcblxuICAgICAgYGBganNcblxuICAgICAgZnVuY3Rpb24gZm91bmRCb29rcyhib29rcykge1xuXG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZhaWx1cmUocmVhc29uKSB7XG5cbiAgICAgIH1cblxuICAgICAgZmluZEF1dGhvcihmdW5jdGlvbihhdXRob3IsIGVycil7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmaW5kQm9vb2tzQnlBdXRob3IoYXV0aG9yLCBmdW5jdGlvbihib29rcywgZXJyKSB7XG4gICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGZvdW5kQm9va3MoYm9va3MpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICBmYWlsdXJlKHJlYXNvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgUHJvbWlzZSBFeGFtcGxlO1xuXG4gICAgICBgYGBqYXZhc2NyaXB0XG4gICAgICBmaW5kQXV0aG9yKCkuXG4gICAgICAgIHRoZW4oZmluZEJvb2tzQnlBdXRob3IpLlxuICAgICAgICB0aGVuKGZ1bmN0aW9uKGJvb2tzKXtcbiAgICAgICAgICAvLyBmb3VuZCBib29rc1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIEBtZXRob2QgdGhlblxuICAgICAgQHBhcmFtIHtGdW5jdGlvbn0gb25GdWxmaWxsZWRcbiAgICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uUmVqZWN0ZWRcbiAgICAgIEBwYXJhbSB7U3RyaW5nfSBsYWJlbCBvcHRpb25hbCBzdHJpbmcgZm9yIGxhYmVsaW5nIHRoZSBwcm9taXNlLlxuICAgICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgICAgQHJldHVybiB7UHJvbWlzZX1cbiAgICAqL1xuICAgICAgdGhlbjogZnVuY3Rpb24ob25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24sIGxhYmVsKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSBwYXJlbnQuX3N0YXRlO1xuXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gJCQkaW50ZXJuYWwkJEZVTEZJTExFRCAmJiAhb25GdWxmaWxsbWVudCB8fCBzdGF0ZSA9PT0gJCQkaW50ZXJuYWwkJFJFSkVDVEVEICYmICFvblJlamVjdGlvbikge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyZW50Ll9vbmVycm9yID0gbnVsbDtcblxuICAgICAgICB2YXIgY2hpbGQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcigkJCRpbnRlcm5hbCQkbm9vcCwgbGFiZWwpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gcGFyZW50Ll9yZXN1bHQ7XG5cbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzW3N0YXRlIC0gMV07XG4gICAgICAgICAgJCRhc2FwJCRkZWZhdWx0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkJCRpbnRlcm5hbCQkaW52b2tlQ2FsbGJhY2soc3RhdGUsIGNoaWxkLCBjYWxsYmFjaywgcmVzdWx0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkJCRpbnRlcm5hbCQkc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH0sXG5cbiAgICAvKipcbiAgICAgIGBjYXRjaGAgaXMgc2ltcGx5IHN1Z2FyIGZvciBgdGhlbih1bmRlZmluZWQsIG9uUmVqZWN0aW9uKWAgd2hpY2ggbWFrZXMgaXQgdGhlIHNhbWVcbiAgICAgIGFzIHRoZSBjYXRjaCBibG9jayBvZiBhIHRyeS9jYXRjaCBzdGF0ZW1lbnQuXG5cbiAgICAgIGBgYGpzXG4gICAgICBmdW5jdGlvbiBmaW5kQXV0aG9yKCl7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGRuJ3QgZmluZCB0aGF0IGF1dGhvcicpO1xuICAgICAgfVxuXG4gICAgICAvLyBzeW5jaHJvbm91c1xuICAgICAgdHJ5IHtcbiAgICAgICAgZmluZEF1dGhvcigpO1xuICAgICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICAgIH1cblxuICAgICAgLy8gYXN5bmMgd2l0aCBwcm9taXNlc1xuICAgICAgZmluZEF1dGhvcigpLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBAbWV0aG9kIGNhdGNoXG4gICAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGlvblxuICAgICAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgbGFiZWxpbmcgdGhlIHByb21pc2UuXG4gICAgICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gICAgICBAcmV0dXJuIHtQcm9taXNlfVxuICAgICovXG4gICAgICAnY2F0Y2gnOiBmdW5jdGlvbihvblJlamVjdGlvbiwgbGFiZWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGlvbiwgbGFiZWwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgJCRlczYkcHJvbWlzZSRwb2x5ZmlsbCQkZGVmYXVsdCA9IGZ1bmN0aW9uIHBvbHlmaWxsKCkge1xuICAgICAgdmFyIGxvY2FsO1xuXG4gICAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbG9jYWwgPSBnbG9iYWw7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCkge1xuICAgICAgICBsb2NhbCA9IHdpbmRvdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvY2FsID0gc2VsZjtcbiAgICAgIH1cblxuICAgICAgdmFyIGVzNlByb21pc2VTdXBwb3J0ID1cbiAgICAgICAgXCJQcm9taXNlXCIgaW4gbG9jYWwgJiZcbiAgICAgICAgLy8gU29tZSBvZiB0aGVzZSBtZXRob2RzIGFyZSBtaXNzaW5nIGZyb21cbiAgICAgICAgLy8gRmlyZWZveC9DaHJvbWUgZXhwZXJpbWVudGFsIGltcGxlbWVudGF0aW9uc1xuICAgICAgICBcInJlc29sdmVcIiBpbiBsb2NhbC5Qcm9taXNlICYmXG4gICAgICAgIFwicmVqZWN0XCIgaW4gbG9jYWwuUHJvbWlzZSAmJlxuICAgICAgICBcImFsbFwiIGluIGxvY2FsLlByb21pc2UgJiZcbiAgICAgICAgXCJyYWNlXCIgaW4gbG9jYWwuUHJvbWlzZSAmJlxuICAgICAgICAvLyBPbGRlciB2ZXJzaW9uIG9mIHRoZSBzcGVjIGhhZCBhIHJlc29sdmVyIG9iamVjdFxuICAgICAgICAvLyBhcyB0aGUgYXJnIHJhdGhlciB0aGFuIGEgZnVuY3Rpb25cbiAgICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciByZXNvbHZlO1xuICAgICAgICAgIG5ldyBsb2NhbC5Qcm9taXNlKGZ1bmN0aW9uKHIpIHsgcmVzb2x2ZSA9IHI7IH0pO1xuICAgICAgICAgIHJldHVybiAkJHV0aWxzJCRpc0Z1bmN0aW9uKHJlc29sdmUpO1xuICAgICAgICB9KCkpO1xuXG4gICAgICBpZiAoIWVzNlByb21pc2VTdXBwb3J0KSB7XG4gICAgICAgIGxvY2FsLlByb21pc2UgPSAkJGVzNiRwcm9taXNlJHByb21pc2UkJGRlZmF1bHQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBlczYkcHJvbWlzZSR1bWQkJEVTNlByb21pc2UgPSB7XG4gICAgICBQcm9taXNlOiAkJGVzNiRwcm9taXNlJHByb21pc2UkJGRlZmF1bHQsXG4gICAgICBwb2x5ZmlsbDogJCRlczYkcHJvbWlzZSRwb2x5ZmlsbCQkZGVmYXVsdFxuICAgIH07XG5cbiAgICAvKiBnbG9iYWwgZGVmaW5lOnRydWUgbW9kdWxlOnRydWUgd2luZG93OiB0cnVlICovXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSkge1xuICAgICAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gZXM2JHByb21pc2UkdW1kJCRFUzZQcm9taXNlOyB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZVsnZXhwb3J0cyddKSB7XG4gICAgICBtb2R1bGVbJ2V4cG9ydHMnXSA9IGVzNiRwcm9taXNlJHVtZCQkRVM2UHJvbWlzZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpc1snRVM2UHJvbWlzZSddID0gZXM2JHByb21pc2UkdW1kJCRFUzZQcm9taXNlO1xuICAgIH1cbn0pLmNhbGwodGhpcyk7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KSIsbnVsbCwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzLWFycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxudmFyIGtNYXhMZW5ndGggPSAweDNmZmZmZmZmXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIE5vdGU6XG4gKlxuICogLSBJbXBsZW1lbnRhdGlvbiBtdXN0IHN1cHBvcnQgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMuXG4gKiAgIEZpcmVmb3ggNC0yOSBsYWNrZWQgc3VwcG9ydCwgZml4ZWQgaW4gRmlyZWZveCAzMCsuXG4gKiAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG4gKlxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXkgd2lsbFxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgd2lsbCB3b3JrIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSAoZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIHZhciBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMClcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICAgIGFyci5mb28gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9XG4gICAgcmV0dXJuIDQyID09PSBhcnIuZm9vKCkgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgbmV3IFVpbnQ4QXJyYXkoMSkuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn0pKClcblxuLyoqXG4gKiBDbGFzczogQnVmZmVyXG4gKiA9PT09PT09PT09PT09XG4gKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBhcmUgYXVnbWVudGVkXG4gKiB3aXRoIGZ1bmN0aW9uIHByb3BlcnRpZXMgZm9yIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBBUEkgZnVuY3Rpb25zLiBXZSB1c2VcbiAqIGBVaW50OEFycmF5YCBzbyB0aGF0IHNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0IHJldHVybnNcbiAqIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIEJ5IGF1Z21lbnRpbmcgdGhlIGluc3RhbmNlcywgd2UgY2FuIGF2b2lkIG1vZGlmeWluZyB0aGUgYFVpbnQ4QXJyYXlgXG4gKiBwcm90b3R5cGUuXG4gKi9cbmZ1bmN0aW9uIEJ1ZmZlciAoc3ViamVjdCwgZW5jb2RpbmcsIG5vWmVybykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSlcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihzdWJqZWN0LCBlbmNvZGluZywgbm9aZXJvKVxuXG4gIHZhciB0eXBlID0gdHlwZW9mIHN1YmplY3RcblxuICAvLyBGaW5kIHRoZSBsZW5ndGhcbiAgdmFyIGxlbmd0aFxuICBpZiAodHlwZSA9PT0gJ251bWJlcicpXG4gICAgbGVuZ3RoID0gc3ViamVjdCA+IDAgPyBzdWJqZWN0ID4+PiAwIDogMFxuICBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgIGlmIChlbmNvZGluZyA9PT0gJ2Jhc2U2NCcpXG4gICAgICBzdWJqZWN0ID0gYmFzZTY0Y2xlYW4oc3ViamVjdClcbiAgICBsZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aChzdWJqZWN0LCBlbmNvZGluZylcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiBzdWJqZWN0ICE9PSBudWxsKSB7IC8vIGFzc3VtZSBvYmplY3QgaXMgYXJyYXktbGlrZVxuICAgIGlmIChzdWJqZWN0LnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkoc3ViamVjdC5kYXRhKSlcbiAgICAgIHN1YmplY3QgPSBzdWJqZWN0LmRhdGFcbiAgICBsZW5ndGggPSArc3ViamVjdC5sZW5ndGggPiAwID8gTWF0aC5mbG9vcigrc3ViamVjdC5sZW5ndGgpIDogMFxuICB9IGVsc2VcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtdXN0IHN0YXJ0IHdpdGggbnVtYmVyLCBidWZmZXIsIGFycmF5IG9yIHN0cmluZycpXG5cbiAgaWYgKHRoaXMubGVuZ3RoID4ga01heExlbmd0aClcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuXG4gIHZhciBidWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUHJlZmVycmVkOiBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIGJ1ZiA9IEJ1ZmZlci5fYXVnbWVudChuZXcgVWludDhBcnJheShsZW5ndGgpKVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gVEhJUyBpbnN0YW5jZSBvZiBCdWZmZXIgKGNyZWF0ZWQgYnkgYG5ld2ApXG4gICAgYnVmID0gdGhpc1xuICAgIGJ1Zi5sZW5ndGggPSBsZW5ndGhcbiAgICBidWYuX2lzQnVmZmVyID0gdHJ1ZVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmIHR5cGVvZiBzdWJqZWN0LmJ5dGVMZW5ndGggPT09ICdudW1iZXInKSB7XG4gICAgLy8gU3BlZWQgb3B0aW1pemF0aW9uIC0tIHVzZSBzZXQgaWYgd2UncmUgY29weWluZyBmcm9tIGEgdHlwZWQgYXJyYXlcbiAgICBidWYuX3NldChzdWJqZWN0KVxuICB9IGVsc2UgaWYgKGlzQXJyYXlpc2goc3ViamVjdCkpIHtcbiAgICAvLyBUcmVhdCBhcnJheS1pc2ggb2JqZWN0cyBhcyBhIGJ5dGUgYXJyYXlcbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN1YmplY3QpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgICAgIGJ1ZltpXSA9IHN1YmplY3QucmVhZFVJbnQ4KGkpXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcbiAgICAgICAgYnVmW2ldID0gKChzdWJqZWN0W2ldICUgMjU2KSArIDI1NikgJSAyNTZcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBidWYud3JpdGUoc3ViamVjdCwgMCwgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICFub1plcm8pIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGJ1ZltpXSA9IDBcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSlcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuICYmIGFbaV0gPT09IGJbaV07IGkrKykge31cbiAgaWYgKGkgIT09IGxlbikge1xuICAgIHggPSBhW2ldXG4gICAgeSA9IGJbaV1cbiAgfVxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICdyYXcnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gKGxpc3QsIHRvdGFsTGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVXNhZ2U6IEJ1ZmZlci5jb25jYXQobGlzdFssIGxlbmd0aF0pJylcblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcigwKVxuICB9IGVsc2UgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGxpc3RbMF1cbiAgfVxuXG4gIHZhciBpXG4gIGlmICh0b3RhbExlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdG90YWxMZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRvdGFsTGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIodG90YWxMZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgaXRlbS5jb3B5KGJ1ZiwgcG9zKVxuICAgIHBvcyArPSBpdGVtLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZcbn1cblxuQnVmZmVyLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiAoc3RyLCBlbmNvZGluZykge1xuICB2YXIgcmV0XG4gIHN0ciA9IHN0ciArICcnXG4gIHN3aXRjaCAoZW5jb2RpbmcgfHwgJ3V0ZjgnKSB7XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAncmF3JzpcbiAgICAgIHJldCA9IHN0ci5sZW5ndGhcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldCA9IHN0ci5sZW5ndGggKiAyXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2hleCc6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoID4+PiAxXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHJldCA9IHV0ZjhUb0J5dGVzKHN0cikubGVuZ3RoXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICByZXQgPSBiYXNlNjRUb0J5dGVzKHN0cikubGVuZ3RoXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vLyBwcmUtc2V0IGZvciB2YWx1ZXMgdGhhdCBtYXkgZXhpc3QgaW4gdGhlIGZ1dHVyZVxuQnVmZmVyLnByb3RvdHlwZS5sZW5ndGggPSB1bmRlZmluZWRcbkJ1ZmZlci5wcm90b3R5cGUucGFyZW50ID0gdW5kZWZpbmVkXG5cbi8vIHRvU3RyaW5nKGVuY29kaW5nLCBzdGFydD0wLCBlbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA9PT0gSW5maW5pdHkgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG4gIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmIChlbmQgPD0gc3RhcnQpIHJldHVybiAnJ1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGJpbmFyeVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSlcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKGIpIHtcbiAgaWYoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpXG4gICAgICBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpXG59XG5cbi8vIGBnZXRgIHdpbGwgYmUgcmVtb3ZlZCBpbiBOb2RlIDAuMTMrXG5CdWZmZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgY29uc29sZS5sb2coJy5nZXQoKSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdXNpbmcgYXJyYXkgaW5kZXhlcyBpbnN0ZWFkLicpXG4gIHJldHVybiB0aGlzLnJlYWRVSW50OChvZmZzZXQpXG59XG5cbi8vIGBzZXRgIHdpbGwgYmUgcmVtb3ZlZCBpbiBOb2RlIDAuMTMrXG5CdWZmZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh2LCBvZmZzZXQpIHtcbiAgY29uc29sZS5sb2coJy5zZXQoKSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdXNpbmcgYXJyYXkgaW5kZXhlcyBpbnN0ZWFkLicpXG4gIHJldHVybiB0aGlzLndyaXRlVUludDgodiwgb2Zmc2V0KVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhciBieXRlID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihieXRlKSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IGJ5dGVcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgY2hhcnNXcml0dGVuID0gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuICByZXR1cm4gY2hhcnNXcml0dGVuXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgY2hhcnNXcml0dGVuID0gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbiAgcmV0dXJuIGNoYXJzV3JpdHRlblxufVxuXG5mdW5jdGlvbiBiaW5hcnlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgY2hhcnNXcml0dGVuID0gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuZnVuY3Rpb24gdXRmMTZsZVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbiAgcmV0dXJuIGNoYXJzV3JpdHRlblxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIFN1cHBvcnQgYm90aCAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpXG4gIC8vIGFuZCB0aGUgbGVnYWN5IChzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBpZiAoIWlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIH0gZWxzZSB7ICAvLyBsZWdhY3lcbiAgICB2YXIgc3dhcCA9IGVuY29kaW5nXG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBvZmZzZXQgPSBsZW5ndGhcbiAgICBsZW5ndGggPSBzd2FwXG4gIH1cblxuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG4gIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nIHx8ICd1dGY4JykudG9Mb3dlckNhc2UoKVxuXG4gIHZhciByZXRcbiAgc3dpdGNoIChlbmNvZGluZykge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgICByZXQgPSBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgICByZXQgPSB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYXNjaWknOlxuICAgICAgcmV0ID0gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiaW5hcnknOlxuICAgICAgcmV0ID0gYmluYXJ5V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHJldCA9IGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXQgPSB1dGYxNmxlV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmVzID0gJydcbiAgdmFyIHRtcCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIGlmIChidWZbaV0gPD0gMHg3Rikge1xuICAgICAgcmVzICs9IGRlY29kZVV0ZjhDaGFyKHRtcCkgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgICAgIHRtcCA9ICcnXG4gICAgfSBlbHNlIHtcbiAgICAgIHRtcCArPSAnJScgKyBidWZbaV0udG9TdHJpbmcoMTYpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcyArIGRlY29kZVV0ZjhDaGFyKHRtcClcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBiaW5hcnlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHJldHVybiBhc2NpaVNsaWNlKGJ1Ziwgc3RhcnQsIGVuZClcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuO1xuICAgIGlmIChzdGFydCA8IDApXG4gICAgICBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMClcbiAgICAgIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydClcbiAgICBlbmQgPSBzdGFydFxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHJldHVybiBCdWZmZXIuX2F1Z21lbnQodGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSlcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIHZhciBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQsIHRydWUpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgaSsrKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gICAgcmV0dXJuIG5ld0J1ZlxuICB9XG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKVxuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKVxuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpXG4gICAgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdidWZmZXIgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsdWUgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSB2YWx1ZVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7IGkrKykge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSB2YWx1ZVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9IHZhbHVlXG4gIH0gZWxzZSBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgaSsrKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlXG4gIH0gZWxzZSBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSB2YWx1ZVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSB2YWx1ZVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSB2YWx1ZVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSB2YWx1ZVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gdmFsdWVcbiAgfSBlbHNlIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbHVlIGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFR5cGVFcnJvcignaW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRfc3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHNvdXJjZSA9IHRoaXNcblxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAoIXRhcmdldF9zdGFydCkgdGFyZ2V0X3N0YXJ0ID0gMFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHNvdXJjZS5sZW5ndGggPT09IDApIHJldHVyblxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKGVuZCA8IHN0YXJ0KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdzb3VyY2VFbmQgPCBzb3VyY2VTdGFydCcpXG4gIGlmICh0YXJnZXRfc3RhcnQgPCAwIHx8IHRhcmdldF9zdGFydCA+PSB0YXJnZXQubGVuZ3RoKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHNvdXJjZS5sZW5ndGgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCB8fCBlbmQgPiBzb3VyY2UubGVuZ3RoKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKVxuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0X3N0YXJ0IDwgZW5kIC0gc3RhcnQpXG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldF9zdGFydCArIHN0YXJ0XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG5cbiAgaWYgKGxlbiA8IDEwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldF9zdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0Ll9zZXQodGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLCB0YXJnZXRfc3RhcnQpXG4gIH1cbn1cblxuLy8gZmlsbCh2YWx1ZSwgc3RhcnQ9MCwgZW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiAodmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCF2YWx1ZSkgdmFsdWUgPSAwXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCkgZW5kID0gdGhpcy5sZW5ndGhcblxuICBpZiAoZW5kIDwgc3RhcnQpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuZCA8IHN0YXJ0JylcblxuICAvLyBGaWxsIDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVyblxuICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVyblxuXG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3N0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgdGhpc1tpXSA9IHZhbHVlXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IHV0ZjhUb0J5dGVzKHZhbHVlLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHRoaXNbaV0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBgQXJyYXlCdWZmZXJgIHdpdGggdGhlICpjb3BpZWQqIG1lbW9yeSBvZiB0aGUgYnVmZmVyIGluc3RhbmNlLlxuICogQWRkZWQgaW4gTm9kZSAwLjEyLiBPbmx5IGF2YWlsYWJsZSBpbiBicm93c2VycyB0aGF0IHN1cHBvcnQgQXJyYXlCdWZmZXIuXG4gKi9cbkJ1ZmZlci5wcm90b3R5cGUudG9BcnJheUJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgICAgcmV0dXJuIChuZXcgQnVmZmVyKHRoaXMpKS5idWZmZXJcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGJ1ZiA9IG5ldyBVaW50OEFycmF5KHRoaXMubGVuZ3RoKVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGJ1Zi5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBidWZbaV0gPSB0aGlzW2ldXG4gICAgICB9XG4gICAgICByZXR1cm4gYnVmLmJ1ZmZlclxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCdWZmZXIudG9BcnJheUJ1ZmZlciBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlcicpXG4gIH1cbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgQlAgPSBCdWZmZXIucHJvdG90eXBlXG5cbi8qKlxuICogQXVnbWVudCBhIFVpbnQ4QXJyYXkgKmluc3RhbmNlKiAobm90IHRoZSBVaW50OEFycmF5IGNsYXNzISkgd2l0aCBCdWZmZXIgbWV0aG9kc1xuICovXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5faXNCdWZmZXIgPSB0cnVlXG5cbiAgLy8gc2F2ZSByZWZlcmVuY2UgdG8gb3JpZ2luYWwgVWludDhBcnJheSBnZXQvc2V0IG1ldGhvZHMgYmVmb3JlIG92ZXJ3cml0aW5nXG4gIGFyci5fZ2V0ID0gYXJyLmdldFxuICBhcnIuX3NldCA9IGFyci5zZXRcblxuICAvLyBkZXByZWNhdGVkLCB3aWxsIGJlIHJlbW92ZWQgaW4gbm9kZSAwLjEzK1xuICBhcnIuZ2V0ID0gQlAuZ2V0XG4gIGFyci5zZXQgPSBCUC5zZXRcblxuICBhcnIud3JpdGUgPSBCUC53cml0ZVxuICBhcnIudG9TdHJpbmcgPSBCUC50b1N0cmluZ1xuICBhcnIudG9Mb2NhbGVTdHJpbmcgPSBCUC50b1N0cmluZ1xuICBhcnIudG9KU09OID0gQlAudG9KU09OXG4gIGFyci5lcXVhbHMgPSBCUC5lcXVhbHNcbiAgYXJyLmNvbXBhcmUgPSBCUC5jb21wYXJlXG4gIGFyci5jb3B5ID0gQlAuY29weVxuICBhcnIuc2xpY2UgPSBCUC5zbGljZVxuICBhcnIucmVhZFVJbnQ4ID0gQlAucmVhZFVJbnQ4XG4gIGFyci5yZWFkVUludDE2TEUgPSBCUC5yZWFkVUludDE2TEVcbiAgYXJyLnJlYWRVSW50MTZCRSA9IEJQLnJlYWRVSW50MTZCRVxuICBhcnIucmVhZFVJbnQzMkxFID0gQlAucmVhZFVJbnQzMkxFXG4gIGFyci5yZWFkVUludDMyQkUgPSBCUC5yZWFkVUludDMyQkVcbiAgYXJyLnJlYWRJbnQ4ID0gQlAucmVhZEludDhcbiAgYXJyLnJlYWRJbnQxNkxFID0gQlAucmVhZEludDE2TEVcbiAgYXJyLnJlYWRJbnQxNkJFID0gQlAucmVhZEludDE2QkVcbiAgYXJyLnJlYWRJbnQzMkxFID0gQlAucmVhZEludDMyTEVcbiAgYXJyLnJlYWRJbnQzMkJFID0gQlAucmVhZEludDMyQkVcbiAgYXJyLnJlYWRGbG9hdExFID0gQlAucmVhZEZsb2F0TEVcbiAgYXJyLnJlYWRGbG9hdEJFID0gQlAucmVhZEZsb2F0QkVcbiAgYXJyLnJlYWREb3VibGVMRSA9IEJQLnJlYWREb3VibGVMRVxuICBhcnIucmVhZERvdWJsZUJFID0gQlAucmVhZERvdWJsZUJFXG4gIGFyci53cml0ZVVJbnQ4ID0gQlAud3JpdGVVSW50OFxuICBhcnIud3JpdGVVSW50MTZMRSA9IEJQLndyaXRlVUludDE2TEVcbiAgYXJyLndyaXRlVUludDE2QkUgPSBCUC53cml0ZVVJbnQxNkJFXG4gIGFyci53cml0ZVVJbnQzMkxFID0gQlAud3JpdGVVSW50MzJMRVxuICBhcnIud3JpdGVVSW50MzJCRSA9IEJQLndyaXRlVUludDMyQkVcbiAgYXJyLndyaXRlSW50OCA9IEJQLndyaXRlSW50OFxuICBhcnIud3JpdGVJbnQxNkxFID0gQlAud3JpdGVJbnQxNkxFXG4gIGFyci53cml0ZUludDE2QkUgPSBCUC53cml0ZUludDE2QkVcbiAgYXJyLndyaXRlSW50MzJMRSA9IEJQLndyaXRlSW50MzJMRVxuICBhcnIud3JpdGVJbnQzMkJFID0gQlAud3JpdGVJbnQzMkJFXG4gIGFyci53cml0ZUZsb2F0TEUgPSBCUC53cml0ZUZsb2F0TEVcbiAgYXJyLndyaXRlRmxvYXRCRSA9IEJQLndyaXRlRmxvYXRCRVxuICBhcnIud3JpdGVEb3VibGVMRSA9IEJQLndyaXRlRG91YmxlTEVcbiAgYXJyLndyaXRlRG91YmxlQkUgPSBCUC53cml0ZURvdWJsZUJFXG4gIGFyci5maWxsID0gQlAuZmlsbFxuICBhcnIuaW5zcGVjdCA9IEJQLmluc3BlY3RcbiAgYXJyLnRvQXJyYXlCdWZmZXIgPSBCUC50b0FycmF5QnVmZmVyXG5cbiAgcmV0dXJuIGFyclxufVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS16XS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gaXNBcnJheWlzaCAoc3ViamVjdCkge1xuICByZXR1cm4gaXNBcnJheShzdWJqZWN0KSB8fCBCdWZmZXIuaXNCdWZmZXIoc3ViamVjdCkgfHxcbiAgICAgIHN1YmplY3QgJiYgdHlwZW9mIHN1YmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICB0eXBlb2Ygc3ViamVjdC5sZW5ndGggPT09ICdudW1iZXInXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYiA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaWYgKGIgPD0gMHg3Rikge1xuICAgICAgYnl0ZUFycmF5LnB1c2goYilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YXJ0ID0gaVxuICAgICAgaWYgKGIgPj0gMHhEODAwICYmIGIgPD0gMHhERkZGKSBpKytcbiAgICAgIHZhciBoID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0ci5zbGljZShzdGFydCwgaSsxKSkuc3Vic3RyKDEpLnNwbGl0KCclJylcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaC5sZW5ndGg7IGorKykge1xuICAgICAgICBieXRlQXJyYXkucHVzaChwYXJzZUludChoW2pdLCAxNikpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KHN0cilcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpXG4gICAgICBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGRlY29kZVV0ZjhDaGFyIChzdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cilcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoMHhGRkZEKSAvLyBVVEYgOCBpbnZhbGlkIGNoYXJcbiAgfVxufVxuIiwidmFyIGxvb2t1cCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJztcblxuOyhmdW5jdGlvbiAoZXhwb3J0cykge1xuXHQndXNlIHN0cmljdCc7XG5cbiAgdmFyIEFyciA9ICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgPyBVaW50OEFycmF5XG4gICAgOiBBcnJheVxuXG5cdHZhciBQTFVTICAgPSAnKycuY2hhckNvZGVBdCgwKVxuXHR2YXIgU0xBU0ggID0gJy8nLmNoYXJDb2RlQXQoMClcblx0dmFyIE5VTUJFUiA9ICcwJy5jaGFyQ29kZUF0KDApXG5cdHZhciBMT1dFUiAgPSAnYScuY2hhckNvZGVBdCgwKVxuXHR2YXIgVVBQRVIgID0gJ0EnLmNoYXJDb2RlQXQoMClcblxuXHRmdW5jdGlvbiBkZWNvZGUgKGVsdCkge1xuXHRcdHZhciBjb2RlID0gZWx0LmNoYXJDb2RlQXQoMClcblx0XHRpZiAoY29kZSA9PT0gUExVUylcblx0XHRcdHJldHVybiA2MiAvLyAnKydcblx0XHRpZiAoY29kZSA9PT0gU0xBU0gpXG5cdFx0XHRyZXR1cm4gNjMgLy8gJy8nXG5cdFx0aWYgKGNvZGUgPCBOVU1CRVIpXG5cdFx0XHRyZXR1cm4gLTEgLy9ubyBtYXRjaFxuXHRcdGlmIChjb2RlIDwgTlVNQkVSICsgMTApXG5cdFx0XHRyZXR1cm4gY29kZSAtIE5VTUJFUiArIDI2ICsgMjZcblx0XHRpZiAoY29kZSA8IFVQUEVSICsgMjYpXG5cdFx0XHRyZXR1cm4gY29kZSAtIFVQUEVSXG5cdFx0aWYgKGNvZGUgPCBMT1dFUiArIDI2KVxuXHRcdFx0cmV0dXJuIGNvZGUgLSBMT1dFUiArIDI2XG5cdH1cblxuXHRmdW5jdGlvbiBiNjRUb0J5dGVBcnJheSAoYjY0KSB7XG5cdFx0dmFyIGksIGosIGwsIHRtcCwgcGxhY2VIb2xkZXJzLCBhcnJcblxuXHRcdGlmIChiNjQubGVuZ3RoICUgNCA+IDApIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG5cdFx0fVxuXG5cdFx0Ly8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycylcblx0XHQvLyBpZiB0aGVyZSBhcmUgdHdvIHBsYWNlaG9sZGVycywgdGhhbiB0aGUgdHdvIGNoYXJhY3RlcnMgYmVmb3JlIGl0XG5cdFx0Ly8gcmVwcmVzZW50IG9uZSBieXRlXG5cdFx0Ly8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzXG5cdFx0Ly8gdGhpcyBpcyBqdXN0IGEgY2hlYXAgaGFjayB0byBub3QgZG8gaW5kZXhPZiB0d2ljZVxuXHRcdHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cdFx0cGxhY2VIb2xkZXJzID0gJz0nID09PSBiNjQuY2hhckF0KGxlbiAtIDIpID8gMiA6ICc9JyA9PT0gYjY0LmNoYXJBdChsZW4gLSAxKSA/IDEgOiAwXG5cblx0XHQvLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcblx0XHRhcnIgPSBuZXcgQXJyKGI2NC5sZW5ndGggKiAzIC8gNCAtIHBsYWNlSG9sZGVycylcblxuXHRcdC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcblx0XHRsID0gcGxhY2VIb2xkZXJzID4gMCA/IGI2NC5sZW5ndGggLSA0IDogYjY0Lmxlbmd0aFxuXG5cdFx0dmFyIEwgPSAwXG5cblx0XHRmdW5jdGlvbiBwdXNoICh2KSB7XG5cdFx0XHRhcnJbTCsrXSA9IHZcblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBqID0gMDsgaSA8IGw7IGkgKz0gNCwgaiArPSAzKSB7XG5cdFx0XHR0bXAgPSAoZGVjb2RlKGI2NC5jaGFyQXQoaSkpIDw8IDE4KSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpIDw8IDEyKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMikpIDw8IDYpIHwgZGVjb2RlKGI2NC5jaGFyQXQoaSArIDMpKVxuXHRcdFx0cHVzaCgodG1wICYgMHhGRjAwMDApID4+IDE2KVxuXHRcdFx0cHVzaCgodG1wICYgMHhGRjAwKSA+PiA4KVxuXHRcdFx0cHVzaCh0bXAgJiAweEZGKVxuXHRcdH1cblxuXHRcdGlmIChwbGFjZUhvbGRlcnMgPT09IDIpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMikgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDEpKSA+PiA0KVxuXHRcdFx0cHVzaCh0bXAgJiAweEZGKVxuXHRcdH0gZWxzZSBpZiAocGxhY2VIb2xkZXJzID09PSAxKSB7XG5cdFx0XHR0bXAgPSAoZGVjb2RlKGI2NC5jaGFyQXQoaSkpIDw8IDEwKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpIDw8IDQpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAyKSkgPj4gMilcblx0XHRcdHB1c2goKHRtcCA+PiA4KSAmIDB4RkYpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFyclxuXHR9XG5cblx0ZnVuY3Rpb24gdWludDhUb0Jhc2U2NCAodWludDgpIHtcblx0XHR2YXIgaSxcblx0XHRcdGV4dHJhQnl0ZXMgPSB1aW50OC5sZW5ndGggJSAzLCAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuXHRcdFx0b3V0cHV0ID0gXCJcIixcblx0XHRcdHRlbXAsIGxlbmd0aFxuXG5cdFx0ZnVuY3Rpb24gZW5jb2RlIChudW0pIHtcblx0XHRcdHJldHVybiBsb29rdXAuY2hhckF0KG51bSlcblx0XHR9XG5cblx0XHRmdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuXHRcdFx0cmV0dXJuIGVuY29kZShudW0gPj4gMTggJiAweDNGKSArIGVuY29kZShudW0gPj4gMTIgJiAweDNGKSArIGVuY29kZShudW0gPj4gNiAmIDB4M0YpICsgZW5jb2RlKG51bSAmIDB4M0YpXG5cdFx0fVxuXG5cdFx0Ly8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuXHRcdGZvciAoaSA9IDAsIGxlbmd0aCA9IHVpbnQ4Lmxlbmd0aCAtIGV4dHJhQnl0ZXM7IGkgPCBsZW5ndGg7IGkgKz0gMykge1xuXHRcdFx0dGVtcCA9ICh1aW50OFtpXSA8PCAxNikgKyAodWludDhbaSArIDFdIDw8IDgpICsgKHVpbnQ4W2kgKyAyXSlcblx0XHRcdG91dHB1dCArPSB0cmlwbGV0VG9CYXNlNjQodGVtcClcblx0XHR9XG5cblx0XHQvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG5cdFx0c3dpdGNoIChleHRyYUJ5dGVzKSB7XG5cdFx0XHRjYXNlIDE6XG5cdFx0XHRcdHRlbXAgPSB1aW50OFt1aW50OC5sZW5ndGggLSAxXVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKHRlbXAgPj4gMilcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSgodGVtcCA8PCA0KSAmIDB4M0YpXG5cdFx0XHRcdG91dHB1dCArPSAnPT0nXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRjYXNlIDI6XG5cdFx0XHRcdHRlbXAgPSAodWludDhbdWludDgubGVuZ3RoIC0gMl0gPDwgOCkgKyAodWludDhbdWludDgubGVuZ3RoIC0gMV0pXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUodGVtcCA+PiAxMClcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSgodGVtcCA+PiA0KSAmIDB4M0YpXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUoKHRlbXAgPDwgMikgJiAweDNGKVxuXHRcdFx0XHRvdXRwdXQgKz0gJz0nXG5cdFx0XHRcdGJyZWFrXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dFxuXHR9XG5cblx0ZXhwb3J0cy50b0J5dGVBcnJheSA9IGI2NFRvQnl0ZUFycmF5XG5cdGV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IHVpbnQ4VG9CYXNlNjRcbn0odHlwZW9mIGV4cG9ydHMgPT09ICd1bmRlZmluZWQnID8gKHRoaXMuYmFzZTY0anMgPSB7fSkgOiBleHBvcnRzKSlcbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sXG4gICAgICBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxLFxuICAgICAgZU1heCA9ICgxIDw8IGVMZW4pIC0gMSxcbiAgICAgIGVCaWFzID0gZU1heCA+PiAxLFxuICAgICAgbkJpdHMgPSAtNyxcbiAgICAgIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMCxcbiAgICAgIGQgPSBpc0xFID8gLTEgOiAxLFxuICAgICAgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXTtcblxuICBpICs9IGQ7XG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSk7XG4gIHMgPj49ICgtbkJpdHMpO1xuICBuQml0cyArPSBlTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KTtcblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKTtcbiAgZSA+Pj0gKC1uQml0cyk7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpO1xuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpO1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKTtcbn07XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbihidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgYyxcbiAgICAgIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDEsXG4gICAgICBlTWF4ID0gKDEgPDwgZUxlbikgLSAxLFxuICAgICAgZUJpYXMgPSBlTWF4ID4+IDEsXG4gICAgICBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMCksXG4gICAgICBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSksXG4gICAgICBkID0gaXNMRSA/IDEgOiAtMSxcbiAgICAgIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDA7XG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSk7XG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpO1xuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpO1xuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjg7XG59O1xuIiwiXG4vKipcbiAqIGlzQXJyYXlcbiAqL1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbi8qKlxuICogdG9TdHJpbmdcbiAqL1xuXG52YXIgc3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCB0aGUgZ2l2ZW4gYHZhbGBcbiAqIGlzIGFuIGFycmF5LlxuICpcbiAqIGV4YW1wbGU6XG4gKlxuICogICAgICAgIGlzQXJyYXkoW10pO1xuICogICAgICAgIC8vID4gdHJ1ZVxuICogICAgICAgIGlzQXJyYXkoYXJndW1lbnRzKTtcbiAqICAgICAgICAvLyA+IGZhbHNlXG4gKiAgICAgICAgaXNBcnJheSgnJyk7XG4gKiAgICAgICAgLy8gPiBmYWxzZVxuICpcbiAqIEBwYXJhbSB7bWl4ZWR9IHZhbFxuICogQHJldHVybiB7Ym9vbH1cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXkgfHwgZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gISEgdmFsICYmICdbb2JqZWN0IEFycmF5XScgPT0gc3RyLmNhbGwodmFsKTtcbn07XG4iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIHJlc29sdmVzIC4gYW5kIC4uIGVsZW1lbnRzIGluIGEgcGF0aCBhcnJheSB3aXRoIGRpcmVjdG9yeSBuYW1lcyB0aGVyZVxuLy8gbXVzdCBiZSBubyBzbGFzaGVzLCBlbXB0eSBlbGVtZW50cywgb3IgZGV2aWNlIG5hbWVzIChjOlxcKSBpbiB0aGUgYXJyYXlcbi8vIChzbyBhbHNvIG5vIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXMgLSBpdCBkb2VzIG5vdCBkaXN0aW5ndWlzaFxuLy8gcmVsYXRpdmUgYW5kIGFic29sdXRlIHBhdGhzKVxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsIGFsbG93QWJvdmVSb290KSB7XG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBsYXN0ID0gcGFydHNbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKGFsbG93QWJvdmVSb290KSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBwYXJ0cy51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuLy8gU3BsaXQgYSBmaWxlbmFtZSBpbnRvIFtyb290LCBkaXIsIGJhc2VuYW1lLCBleHRdLCB1bml4IHZlcnNpb25cbi8vICdyb290JyBpcyBqdXN0IGEgc2xhc2gsIG9yIG5vdGhpbmcuXG52YXIgc3BsaXRQYXRoUmUgPVxuICAgIC9eKFxcLz98KShbXFxzXFxTXSo/KSgoPzpcXC57MSwyfXxbXlxcL10rP3wpKFxcLlteLlxcL10qfCkpKD86W1xcL10qKSQvO1xudmFyIHNwbGl0UGF0aCA9IGZ1bmN0aW9uKGZpbGVuYW1lKSB7XG4gIHJldHVybiBzcGxpdFBhdGhSZS5leGVjKGZpbGVuYW1lKS5zbGljZSgxKTtcbn07XG5cbi8vIHBhdGgucmVzb2x2ZShbZnJvbSAuLi5dLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzb2x2ZWRQYXRoID0gJycsXG4gICAgICByZXNvbHZlZEFic29sdXRlID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpID49IC0xICYmICFyZXNvbHZlZEFic29sdXRlOyBpLS0pIHtcbiAgICB2YXIgcGF0aCA9IChpID49IDApID8gYXJndW1lbnRzW2ldIDogcHJvY2Vzcy5jd2QoKTtcblxuICAgIC8vIFNraXAgZW1wdHkgYW5kIGludmFsaWQgZW50cmllc1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfSBlbHNlIGlmICghcGF0aCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcmVzb2x2ZWRQYXRoID0gcGF0aCArICcvJyArIHJlc29sdmVkUGF0aDtcbiAgICByZXNvbHZlZEFic29sdXRlID0gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbiAgfVxuXG4gIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHBhdGggc2hvdWxkIGJlIHJlc29sdmVkIHRvIGEgZnVsbCBhYnNvbHV0ZSBwYXRoLCBidXRcbiAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHJlc29sdmVkUGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIHJldHVybiAoKHJlc29sdmVkQWJzb2x1dGUgPyAnLycgOiAnJykgKyByZXNvbHZlZFBhdGgpIHx8ICcuJztcbn07XG5cbi8vIHBhdGgubm9ybWFsaXplKHBhdGgpXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIGlzQWJzb2x1dGUgPSBleHBvcnRzLmlzQWJzb2x1dGUocGF0aCksXG4gICAgICB0cmFpbGluZ1NsYXNoID0gc3Vic3RyKHBhdGgsIC0xKSA9PT0gJy8nO1xuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICBwYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhaXNBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIGlmICghcGF0aCAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHBhdGggPSAnLic7XG4gIH1cbiAgaWYgKHBhdGggJiYgdHJhaWxpbmdTbGFzaCkge1xuICAgIHBhdGggKz0gJy8nO1xuICB9XG5cbiAgcmV0dXJuIChpc0Fic29sdXRlID8gJy8nIDogJycpICsgcGF0aDtcbn07XG5cbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLyc7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmpvaW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhdGhzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgcmV0dXJuIGV4cG9ydHMubm9ybWFsaXplKGZpbHRlcihwYXRocywgZnVuY3Rpb24ocCwgaW5kZXgpIHtcbiAgICBpZiAodHlwZW9mIHAgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5qb2luIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbiAgfSkuam9pbignLycpKTtcbn07XG5cblxuLy8gcGF0aC5yZWxhdGl2ZShmcm9tLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVsYXRpdmUgPSBmdW5jdGlvbihmcm9tLCB0bykge1xuICBmcm9tID0gZXhwb3J0cy5yZXNvbHZlKGZyb20pLnN1YnN0cigxKTtcbiAgdG8gPSBleHBvcnRzLnJlc29sdmUodG8pLnN1YnN0cigxKTtcblxuICBmdW5jdGlvbiB0cmltKGFycikge1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgZm9yICg7IHN0YXJ0IDwgYXJyLmxlbmd0aDsgc3RhcnQrKykge1xuICAgICAgaWYgKGFycltzdGFydF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICB2YXIgZW5kID0gYXJyLmxlbmd0aCAtIDE7XG4gICAgZm9yICg7IGVuZCA+PSAwOyBlbmQtLSkge1xuICAgICAgaWYgKGFycltlbmRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSByZXR1cm4gW107XG4gICAgcmV0dXJuIGFyci5zbGljZShzdGFydCwgZW5kIC0gc3RhcnQgKyAxKTtcbiAgfVxuXG4gIHZhciBmcm9tUGFydHMgPSB0cmltKGZyb20uc3BsaXQoJy8nKSk7XG4gIHZhciB0b1BhcnRzID0gdHJpbSh0by5zcGxpdCgnLycpKTtcblxuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCwgdG9QYXJ0cy5sZW5ndGgpO1xuICB2YXIgc2FtZVBhcnRzTGVuZ3RoID0gbGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGZyb21QYXJ0c1tpXSAhPT0gdG9QYXJ0c1tpXSkge1xuICAgICAgc2FtZVBhcnRzTGVuZ3RoID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBvdXRwdXRQYXJ0cyA9IFtdO1xuICBmb3IgKHZhciBpID0gc2FtZVBhcnRzTGVuZ3RoOyBpIDwgZnJvbVBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0UGFydHMucHVzaCgnLi4nKTtcbiAgfVxuXG4gIG91dHB1dFBhcnRzID0gb3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuZ3RoKSk7XG5cbiAgcmV0dXJuIG91dHB1dFBhcnRzLmpvaW4oJy8nKTtcbn07XG5cbmV4cG9ydHMuc2VwID0gJy8nO1xuZXhwb3J0cy5kZWxpbWl0ZXIgPSAnOic7XG5cbmV4cG9ydHMuZGlybmFtZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIHJlc3VsdCA9IHNwbGl0UGF0aChwYXRoKSxcbiAgICAgIHJvb3QgPSByZXN1bHRbMF0sXG4gICAgICBkaXIgPSByZXN1bHRbMV07XG5cbiAgaWYgKCFyb290ICYmICFkaXIpIHtcbiAgICAvLyBObyBkaXJuYW1lIHdoYXRzb2V2ZXJcbiAgICByZXR1cm4gJy4nO1xuICB9XG5cbiAgaWYgKGRpcikge1xuICAgIC8vIEl0IGhhcyBhIGRpcm5hbWUsIHN0cmlwIHRyYWlsaW5nIHNsYXNoXG4gICAgZGlyID0gZGlyLnN1YnN0cigwLCBkaXIubGVuZ3RoIC0gMSk7XG4gIH1cblxuICByZXR1cm4gcm9vdCArIGRpcjtcbn07XG5cblxuZXhwb3J0cy5iYXNlbmFtZSA9IGZ1bmN0aW9uKHBhdGgsIGV4dCkge1xuICB2YXIgZiA9IHNwbGl0UGF0aChwYXRoKVsyXTtcbiAgLy8gVE9ETzogbWFrZSB0aGlzIGNvbXBhcmlzb24gY2FzZS1pbnNlbnNpdGl2ZSBvbiB3aW5kb3dzP1xuICBpZiAoZXh0ICYmIGYuc3Vic3RyKC0xICogZXh0Lmxlbmd0aCkgPT09IGV4dCkge1xuICAgIGYgPSBmLnN1YnN0cigwLCBmLmxlbmd0aCAtIGV4dC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiBmO1xufTtcblxuXG5leHBvcnRzLmV4dG5hbWUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJldHVybiBzcGxpdFBhdGgocGF0aClbM107XG59O1xuXG5mdW5jdGlvbiBmaWx0ZXIgKHhzLCBmKSB7XG4gICAgaWYgKHhzLmZpbHRlcikgcmV0dXJuIHhzLmZpbHRlcihmKTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZih4c1tpXSwgaSwgeHMpKSByZXMucHVzaCh4c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbi8vIFN0cmluZy5wcm90b3R5cGUuc3Vic3RyIC0gbmVnYXRpdmUgaW5kZXggZG9uJ3Qgd29yayBpbiBJRThcbnZhciBzdWJzdHIgPSAnYWInLnN1YnN0cigtMSkgPT09ICdiJ1xuICAgID8gZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikgeyByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKSB9XG4gICAgOiBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7XG4gICAgICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gc3RyLmxlbmd0aCArIHN0YXJ0O1xuICAgICAgICByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKTtcbiAgICB9XG47XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKSIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbnByb2Nlc3MubmV4dFRpY2sgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBjYW5TZXRJbW1lZGlhdGUgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5zZXRJbW1lZGlhdGU7XG4gICAgdmFyIGNhblBvc3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5wb3N0TWVzc2FnZSAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lclxuICAgIDtcblxuICAgIGlmIChjYW5TZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmKSB7IHJldHVybiB3aW5kb3cuc2V0SW1tZWRpYXRlKGYpIH07XG4gICAgfVxuXG4gICAgaWYgKGNhblBvc3QpIHtcbiAgICAgICAgdmFyIHF1ZXVlID0gW107XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gZXYuc291cmNlO1xuICAgICAgICAgICAgaWYgKChzb3VyY2UgPT09IHdpbmRvdyB8fCBzb3VyY2UgPT09IG51bGwpICYmIGV2LmRhdGEgPT09ICdwcm9jZXNzLXRpY2snKSB7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZuID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgICAgICAgICAgcXVldWUucHVzaChmbik7XG4gICAgICAgICAgICB3aW5kb3cucG9zdE1lc3NhZ2UoJ3Byb2Nlc3MtdGljaycsICcqJyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZm4sIDApO1xuICAgIH07XG59KSgpO1xuXG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn1cblxuLy8gVE9ETyhzaHR5bG1hbilcbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYyLjEuMVxuICogaHR0cDovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCAyMDA1LCAyMDE0IGpRdWVyeSBGb3VuZGF0aW9uLCBJbmMuIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTQtMDUtMDFUMTc6MTFaXG4gKi9cblxuKGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIHdpbmRvdyBpcyBwcmVzZW50LFxuXHRcdC8vIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnlcblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGluaGVyZW50bHkgcG9zc2VzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBqUXVlcnktbWFraW5nIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHNcblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIHdpbmRvd1xuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59KHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gQ2FuJ3QgZG8gdGhpcyBiZWNhdXNlIHNldmVyYWwgYXBwcyBpbmNsdWRpbmcgQVNQLk5FVCB0cmFjZVxuLy8gdGhlIHN0YWNrIHZpYSBhcmd1bWVudHMuY2FsbGVyLmNhbGxlZSBhbmQgRmlyZWZveCBkaWVzIGlmXG4vLyB5b3UgdHJ5IHRvIHRyYWNlIHRocm91Z2ggXCJ1c2Ugc3RyaWN0XCIgY2FsbCBjaGFpbnMuICgjMTMzMzUpXG4vLyBTdXBwb3J0OiBGaXJlZm94IDE4K1xuLy9cblxudmFyIGFyciA9IFtdO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxuXG5cbnZhclxuXHQvLyBVc2UgdGhlIGNvcnJlY3QgZG9jdW1lbnQgYWNjb3JkaW5nbHkgd2l0aCB3aW5kb3cgYXJndW1lbnQgKHNhbmRib3gpXG5cdGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50LFxuXG5cdHZlcnNpb24gPSBcIjIuMS4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXG5cblx0Ly8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG5cdHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbXFxkYS16XSkvZ2ksXG5cblx0Ly8gVXNlZCBieSBqUXVlcnkuY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuXHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xuXHRcdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBTdGFydCB3aXRoIGFuIGVtcHR5IHNlbGVjdG9yXG5cdHNlbGVjdG9yOiBcIlwiLFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblx0XHRyZXR1cm4gbnVtICE9IG51bGwgP1xuXG5cdFx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0XHQoIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF0gKSA6XG5cblx0XHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRcdHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cdFx0cmV0LmNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0Ly8gKFlvdSBjYW4gc2VlZCB0aGUgYXJndW1lbnRzIHdpdGggYW4gYXJyYXkgb2YgYXJncywgYnV0IHRoaXMgaXNcblx0Ly8gb25seSB1c2VkIGludGVybmFsbHkuKVxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjaywgYXJncyApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCh0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSkpO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbal0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IobnVsbCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1swXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIHNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFqUXVlcnkuaXNGdW5jdGlvbih0YXJnZXQpICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gZXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSkgIT0gbnVsbCApIHtcblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9IGpRdWVyeS5pc0FycmF5KGNvcHkpKSApICkge1xuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XG5cdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KHNyYykgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoe1xuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHQvLyBTZWUgdGVzdC91bml0L2NvcmUuanMgZm9yIGRldGFpbHMgY29uY2VybmluZyBpc0Z1bmN0aW9uLlxuXHQvLyBTaW5jZSB2ZXJzaW9uIDEuMywgRE9NIG1ldGhvZHMgYW5kIGZ1bmN0aW9ucyBsaWtlIGFsZXJ0XG5cdC8vIGFyZW4ndCBzdXBwb3J0ZWQuIFRoZXkgcmV0dXJuIGZhbHNlIG9uIElFICgjMjk2OCkuXG5cdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS50eXBlKG9iaikgPT09IFwiZnVuY3Rpb25cIjtcblx0fSxcblxuXHRpc0FycmF5OiBBcnJheS5pc0FycmF5LFxuXG5cdGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH0sXG5cblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChudWxsfHRydWV8ZmFsc2V8XCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0cmV0dXJuICFqUXVlcnkuaXNBcnJheSggb2JqICkgJiYgb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgPj0gMDtcblx0fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdC8vIE5vdCBwbGFpbiBvYmplY3RzOlxuXHRcdC8vIC0gQW55IG9iamVjdCBvciB2YWx1ZSB3aG9zZSBpbnRlcm5hbCBbW0NsYXNzXV0gcHJvcGVydHkgaXMgbm90IFwiW29iamVjdCBPYmplY3RdXCJcblx0XHQvLyAtIERPTSBub2Rlc1xuXHRcdC8vIC0gd2luZG93XG5cdFx0aWYgKCBqUXVlcnkudHlwZSggb2JqICkgIT09IFwib2JqZWN0XCIgfHwgb2JqLm5vZGVUeXBlIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKCBvYmouY29uc3RydWN0b3IgJiZcblx0XHRcdFx0IWhhc093bi5jYWxsKCBvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCBcImlzUHJvdG90eXBlT2ZcIiApICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZSBmdW5jdGlvbiBoYXNuJ3QgcmV0dXJuZWQgYWxyZWFkeSwgd2UncmUgY29uZmlkZW50IHRoYXRcblx0XHQvLyB8b2JqfCBpcyBhIHBsYWluIG9iamVjdCwgY3JlYXRlZCBieSB7fSBvciBjb25zdHJ1Y3RlZCB3aXRoIG5ldyBPYmplY3Rcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHR9XG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8IDQuMCwgaU9TIDwgNiAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKG9iaikgXSB8fCBcIm9iamVjdFwiIDpcblx0XHRcdHR5cGVvZiBvYmo7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0dmFyIHNjcmlwdCxcblx0XHRcdGluZGlyZWN0ID0gZXZhbDtcblxuXHRcdGNvZGUgPSBqUXVlcnkudHJpbSggY29kZSApO1xuXG5cdFx0aWYgKCBjb2RlICkge1xuXHRcdFx0Ly8gSWYgdGhlIGNvZGUgaW5jbHVkZXMgYSB2YWxpZCwgcHJvbG9ndWUgcG9zaXRpb25cblx0XHRcdC8vIHN0cmljdCBtb2RlIHByYWdtYSwgZXhlY3V0ZSBjb2RlIGJ5IGluamVjdGluZyBhXG5cdFx0XHQvLyBzY3JpcHQgdGFnIGludG8gdGhlIGRvY3VtZW50LlxuXHRcdFx0aWYgKCBjb2RlLmluZGV4T2YoXCJ1c2Ugc3RyaWN0XCIpID09PSAxICkge1xuXHRcdFx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuXHRcdFx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdC8vIE90aGVyd2lzZSwgYXZvaWQgdGhlIERPTSBub2RlIGNyZWF0aW9uLCBpbnNlcnRpb25cblx0XHRcdC8vIGFuZCByZW1vdmFsIGJ5IHVzaW5nIGFuIGluZGlyZWN0IGdsb2JhbCBldmFsXG5cdFx0XHRcdGluZGlyZWN0KCBjb2RlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9LFxuXG5cdC8vIGFyZ3MgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdFx0dmFyIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoLFxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBvYmogKTtcblxuXHRcdGlmICggYXJncyApIHtcblx0XHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5hcHBseSggb2JqWyBpIF0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmFwcGx5KCBvYmpbIGkgXSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEEgc3BlY2lhbCwgZmFzdCwgY2FzZSBmb3IgdGhlIG1vc3QgY29tbW9uIHVzZSBvZiBlYWNoXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlsaWtlKCBPYmplY3QoYXJyKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRpc0FycmF5ID0gaXNBcnJheWxpa2UoIGVsZW1zICksXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5ICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcblx0Ly8gYXJndW1lbnRzLlxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0XHRjb250ZXh0ID0gZm47XG5cdFx0XHRmbiA9IHRtcDtcblx0XHR9XG5cblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0XHR9O1xuXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0XHRyZXR1cm4gcHJveHk7XG5cdH0sXG5cblx0bm93OiBEYXRlLm5vdyxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSk7XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yXCIuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbihpLCBuYW1lKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlsaWtlKCBvYmogKSB7XG5cdHZhciBsZW5ndGggPSBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cblx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIG9iai5ub2RlVHlwZSA9PT0gMSAmJiBsZW5ndGggKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjEuMTAuMTlcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IDIwMTMgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNC0wNC0xOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIC0obmV3IERhdGUoKSksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBHZW5lcmFsLXB1cnBvc2UgY29uc3RhbnRzXG5cdHN0cnVuZGVmaW5lZCA9IHR5cGVvZiB1bmRlZmluZWQsXG5cdE1BWF9ORUdBVElWRSA9IDEgPDwgMzEsXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGlmIHdlIGNhbid0IHVzZSBhIG5hdGl2ZSBvbmVcblx0aW5kZXhPZiA9IGFyci5pbmRleE9mIHx8IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCB0aGlzW2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBXaGl0ZXNwYWNlIGNoYXJhY3RlcnMgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zeW50YXgvI2NoYXJhY3RlcnNcblx0Y2hhcmFjdGVyRW5jb2RpbmcgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcXFx4MDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIExvb3NlbHkgbW9kZWxlZCBvbiBDU1MgaWRlbnRpZmllciBjaGFyYWN0ZXJzXG5cdC8vIEFuIHVucXVvdGVkIHZhbHVlIHNob3VsZCBiZSBhIENTUyBpZGVudGlmaWVyIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdC8vIFByb3BlciBzeW50YXg6IGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gY2hhcmFjdGVyRW5jb2RpbmcucmVwbGFjZSggXCJ3XCIsIFwidyNcIiApLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcucmVwbGFjZSggXCJ3XCIsIFwidypcIiApICsgXCIpXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cdHJlc2NhcGUgPSAvJ3xcXFxcL2csXG5cblx0Ly8gQ1NTIGVzY2FwZXMgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9O1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtYXRjaCwgZWxlbSwgbSwgbm9kZVR5cGUsXG5cdFx0Ly8gUVNBIHZhcnNcblx0XHRpLCBncm91cHMsIG9sZCwgbmlkLCBuZXdDb250ZXh0LCBuZXdTZWxlY3RvcjtcblxuXHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblxuXHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0aWYgKCAhc2VsZWN0b3IgfHwgdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0aWYgKCAobm9kZVR5cGUgPSBjb250ZXh0Lm5vZGVUeXBlKSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHRpZiAoIGRvY3VtZW50SXNIVE1MICYmICFzZWVkICkge1xuXG5cdFx0Ly8gU2hvcnRjdXRzXG5cdFx0aWYgKCAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIiNJRFwiKVxuXHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApO1xuXHRcdFx0XHRcdC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXG5cdFx0XHRcdFx0Ly8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAoalF1ZXJ5ICM2OTYzKVxuXHRcdFx0XHRcdGlmICggZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgSUUsIE9wZXJhLCBhbmQgV2Via2l0IHJldHVybiBpdGVtc1xuXHRcdFx0XHRcdFx0Ly8gYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIENvbnRleHQgaXMgbm90IGEgZG9jdW1lbnRcblx0XHRcdFx0XHRpZiAoIGNvbnRleHQub3duZXJEb2N1bWVudCAmJiAoZWxlbSA9IGNvbnRleHQub3duZXJEb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJiBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIlRBR1wiKVxuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCIuQ0xBU1NcIilcblx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFFTQSBwYXRoXG5cdFx0aWYgKCBzdXBwb3J0LnFzYSAmJiAoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXHRcdFx0bmlkID0gb2xkID0gZXhwYW5kbztcblx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0bmV3U2VsZWN0b3IgPSBub2RlVHlwZSA9PT0gOSAmJiBzZWxlY3RvcjtcblxuXHRcdFx0Ly8gcVNBIHdvcmtzIHN0cmFuZ2VseSBvbiBFbGVtZW50LXJvb3RlZCBxdWVyaWVzXG5cdFx0XHQvLyBXZSBjYW4gd29yayBhcm91bmQgdGhpcyBieSBzcGVjaWZ5aW5nIGFuIGV4dHJhIElEIG9uIHRoZSByb290XG5cdFx0XHQvLyBhbmQgd29ya2luZyB1cCBmcm9tIHRoZXJlIChUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhlIHRlY2huaXF1ZSlcblx0XHRcdC8vIElFIDggZG9lc24ndCB3b3JrIG9uIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJiBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXG5cdFx0XHRcdGlmICggKG9sZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKFwiaWRcIikpICkge1xuXHRcdFx0XHRcdG5pZCA9IG9sZC5yZXBsYWNlKCByZXNjYXBlLCBcIlxcXFwkJlwiICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgbmlkICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bmlkID0gXCJbaWQ9J1wiICsgbmlkICsgXCInXSBcIjtcblxuXHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0Z3JvdXBzW2ldID0gbmlkICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHQ7XG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oXCIsXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoKHFzYUVycm9yKSB7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCAhb2xkICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge0Z1bmN0aW9uKHN0cmluZywgT2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBkaXYgYW5kIGV4cGVjdHMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBkaXYgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGRpdi5wYXJlbnROb2RlICkge1xuXHRcdFx0ZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGRpdiApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGRpdiA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdCggfmIuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICkgLVxuXHRcdFx0KCB+YS5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKTtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IHN0cnVuZGVmaW5lZCAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYyxcblx0XHRwYXJlbnQgPSBkb2MuZGVmYXVsdFZpZXc7XG5cblx0Ly8gSWYgbm8gZG9jdW1lbnQgYW5kIGRvY3VtZW50RWxlbWVudCBpcyBhdmFpbGFibGUsIHJldHVyblxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFNldCBvdXIgZG9jdW1lbnRcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQgdGVzdHNcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvYyApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPjhcblx0Ly8gSWYgaWZyYW1lIGRvY3VtZW50IGlzIGFzc2lnbmVkIHRvIFwiZG9jdW1lbnRcIiB2YXJpYWJsZSBhbmQgaWYgaWZyYW1lIGhhcyBiZWVuIHJlbG9hZGVkLFxuXHQvLyBJRSB3aWxsIHRocm93IFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIGFjY2Vzc2luZyBcImRvY3VtZW50XCIgdmFyaWFibGUsIHNlZSBqUXVlcnkgIzEzOTM2XG5cdC8vIElFNi04IGRvIG5vdCBzdXBwb3J0IHRoZSBkZWZhdWx0VmlldyBwcm9wZXJ0eSBzbyBwYXJlbnQgd2lsbCBiZSB1bmRlZmluZWRcblx0aWYgKCBwYXJlbnQgJiYgcGFyZW50ICE9PSBwYXJlbnQudG9wICkge1xuXHRcdC8vIElFMTEgZG9lcyBub3QgaGF2ZSBhdHRhY2hFdmVudCwgc28gYWxsIG11c3Qgc3VmZmVyXG5cdFx0aWYgKCBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHBhcmVudC5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2V0RG9jdW1lbnQoKTtcblx0XHRcdH0sIGZhbHNlICk7XG5cdFx0fSBlbHNlIGlmICggcGFyZW50LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0cGFyZW50LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZXREb2N1bWVudCgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXMgKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRpdi5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWRpdi5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRpdi5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIGNhbiBiZSB0cnVzdGVkXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSAmJiBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuaW5uZXJIVE1MID0gXCI8ZGl2IGNsYXNzPSdhJz48L2Rpdj48ZGl2IGNsYXNzPSdhIGknPjwvZGl2PlwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpPDRcblx0XHQvLyBDYXRjaCBjbGFzcyBvdmVyLWNhY2hpbmdcblx0XHRkaXYuZmlyc3RDaGlsZC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHQvLyBTdXBwb3J0OiBPcGVyYTwxMFxuXHRcdC8vIENhdGNoIGdFQkNOIGZhaWx1cmUgdG8gZmluZCBub24tbGVhZGluZyBjbGFzc2VzXG5cdFx0cmV0dXJuIGRpdi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiaVwiKS5sZW5ndGggPT09IDI7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jLmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2MuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbmQgYW5kIGZpbHRlclxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IHN0cnVuZGVmaW5lZCAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHQvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJuc1xuXHRcdFx0XHQvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICM2OTYzXG5cdFx0XHRcdHJldHVybiBtICYmIG0ucGFyZW50Tm9kZSA/IFsgbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0Ly8gU3VwcG9ydDogSUU2Lzdcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0ZGVsZXRlIEV4cHIuZmluZFtcIklEXCJdO1xuXG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBzdHJ1bmRlZmluZWQgJiYgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gc3RydW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBzdHJ1bmRlZmluZWQgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvYy5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRpdi5pbm5lckhUTUwgPSBcIjxzZWxlY3QgbXNhbGxvd2NsaXA9Jyc+PG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2xpcF49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBkaXYsIFwiZGl2XCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBkaXYsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgZG9lcyBub3QgaW1wbGVtZW50IGluY2x1c2l2ZSBkZXNjZW5kZW50XG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvYyB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvYyB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YuY2FsbCggc29ydElucHV0LCBhICkgLSBpbmRleE9mLmNhbGwoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvYyA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZi5jYWxsKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YuY2FsbCggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvYztcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gc3RydW5kZWZpbmVkICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0ICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIGRpZmYsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDogbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gcGFyZW50WyBleHBhbmRvIF0gfHwgKHBhcmVudFsgZXhwYW5kbyBdID0ge30pO1xuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IG91dGVyQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMV07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsyXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB1c2VDYWNoZSAmJiAoY2FjaGUgPSAoZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSkpWyB0eXBlIF0pICYmIGNhY2hlWzBdID09PSBkaXJydW5zICkge1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gY2FjaGVbMV07XG5cblx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLikgb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkgJiYgKytkaWZmICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0KG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pKVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZi5jYWxsKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlO1xuXHRcdH0sXG5cblx0XHRcImRpc2FibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYgZGlyID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGRpciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblx0XHRcdFx0XHRcdGlmICggKG9sZENhY2hlID0gb3V0ZXJDYWNoZVsgZGlyIF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIGRpciBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mLmNhbGwoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0cmV0dXJuICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCAhPT0gZG9jdW1lbnQgJiYgY29udGV4dDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIEtlZXAgYGlgIGEgc3RyaW5nIGlmIHRoZXJlIGFyZSBubyBlbGVtZW50cyBzbyBgbWF0Y2hlZENvdW50YCB3aWxsIGJlIFwiMDBcIiBiZWxvd1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgbm8gc2VlZCBhbmQgb25seSBvbmUgZ3JvdXBcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBUYWtlIGEgc2hvcnRjdXQgYW5kIHNldCB0aGUgY29udGV4dCBpZiB0aGUgcm9vdCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdHN1cHBvcnQuZ2V0QnlJZCAmJiBjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0XHRcdEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWU8MTRcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYxICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGRpdjEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRkaXYuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRyZXR1cm4gZGl2LmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5qUXVlcnkuZXhwcltcIjpcIl0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcblxuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG52YXIgcnNpbmdsZVRhZyA9ICgvXjwoXFx3KylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8pO1xuXG5cblxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0pO1xuXG5cdH1cblxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSk7XG5cblx0fVxuXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0XHR9XG5cblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID49IDAgKSAhPT0gbm90O1xuXHR9KTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdHJldHVybiBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSA/XG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdIDpcblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdFx0fSkpO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSkgKTtcblx0XHR9XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdC8vIE5lZWRlZCBiZWNhdXNlICQoIHNlbGVjdG9yLCBjb250ZXh0ICkgYmVjb21lcyAkKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKVxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZSggcmV0ICkgOiByZXQgKTtcblx0XHRyZXQuc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yID8gdGhpcy5zZWxlY3RvciArIFwiIFwiICsgc2VsZWN0b3IgOiBzZWxlY3Rvcjtcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyh0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UpICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0pO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKikpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclswXSA9PT0gXCI8XCIgJiYgc2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiYgc2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAobWF0Y2hbMV0gfHwgIWNvbnRleHQpICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWzFdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFswXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsxXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsxXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsyXSApO1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgcGFyZW50Tm9kZSB0byBjYXRjaCB3aGVuIEJsYWNrYmVycnkgNC42IHJldHVybnNcblx0XHRcdFx0XHQvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICM2OTYzXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0XHR0aGlzWzBdID0gZWxlbTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLmNvbnRleHQgPSBkb2N1bWVudDtcblx0XHRcdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3RqUXVlcnkgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzLmNvbnRleHQgPSB0aGlzWzBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiB0eXBlb2Ygcm9vdGpRdWVyeS5yZWFkeSAhPT0gXCJ1bmRlZmluZWRcIiA/XG5cdFx0XHRcdHJvb3RqUXVlcnkucmVhZHkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yLnNlbGVjdG9yICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3Iuc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmNvbnRleHQgPSBzZWxlY3Rvci5jb250ZXh0O1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cdC8vIG1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRkaXI6IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHRcdHZhciBtYXRjaGVkID0gW10sXG5cdFx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBtYXRjaGVkO1xuXHR9LFxuXG5cdHNpYmxpbmc6IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHRcdHZhciBtYXRjaGVkID0gW107XG5cblx0XHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVkO1xuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzW2ldICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHBvcyA9IHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgfHwgdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3JzLCBjb250ZXh0IHx8IHRoaXMuY29udGV4dCApIDpcblx0XHRcdFx0MDtcblxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdGZvciAoIGN1ciA9IHRoaXNbaV07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAocG9zID9cblx0XHRcdFx0XHRwb3MuaW5kZXgoY3VyKSA+IC0xIDpcblxuXHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKGN1ciwgc2VsZWN0b3JzKSkgKSB7XG5cblx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlKCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpblxuXHQvLyB0aGUgbWF0Y2hlZCBzZXQgb2YgZWxlbWVudHNcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIGluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZShcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKHNlbGVjdG9yKVxuXHRcdCk7XG5cdH1cbn0pO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoY3VyID0gY3VyW2Rpcl0pICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuc2libGluZyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnNpYmxpbmcoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50IHx8IGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlKCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSk7XG52YXIgcm5vdHdoaXRlID0gKC9cXFMrL2cpO1xuXG5cblxuLy8gU3RyaW5nIHRvIE9iamVjdCBvcHRpb25zIGZvcm1hdCBjYWNoZVxudmFyIG9wdGlvbnNDYWNoZSA9IHt9O1xuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lcyBhbmQgc3RvcmUgaW4gY2FjaGVcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSBvcHRpb25zQ2FjaGVbIG9wdGlvbnMgXSA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0KCBvcHRpb25zQ2FjaGVbIG9wdGlvbnMgXSB8fCBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gTGFzdCBmaXJlIHZhbHVlIChmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzKVxuXHRcdG1lbW9yeSxcblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cdFx0Ly8gRmlyc3QgY2FsbGJhY2sgdG8gZmlyZSAodXNlZCBpbnRlcm5hbGx5IGJ5IGFkZCBhbmQgZmlyZVdpdGgpXG5cdFx0ZmlyaW5nU3RhcnQsXG5cdFx0Ly8gRW5kIG9mIHRoZSBsb29wIHdoZW4gZmlyaW5nXG5cdFx0ZmlyaW5nTGVuZ3RoLFxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IHJlbW92ZSBpZiBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXgsXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cdFx0Ly8gU3RhY2sgb2YgZmlyZSBjYWxscyBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHN0YWNrID0gIW9wdGlvbnMub25jZSAmJiBbXSxcblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0XHRcdG1lbW9yeSA9IG9wdGlvbnMubWVtb3J5ICYmIGRhdGE7XG5cdFx0XHRmaXJlZCA9IHRydWU7XG5cdFx0XHRmaXJpbmdJbmRleCA9IGZpcmluZ1N0YXJ0IHx8IDA7XG5cdFx0XHRmaXJpbmdTdGFydCA9IDA7XG5cdFx0XHRmaXJpbmdMZW5ndGggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IGxpc3QgJiYgZmlyaW5nSW5kZXggPCBmaXJpbmdMZW5ndGg7IGZpcmluZ0luZGV4KysgKSB7XG5cdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggZGF0YVsgMCBdLCBkYXRhWyAxIF0gKSA9PT0gZmFsc2UgJiYgb3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTsgLy8gVG8gcHJldmVudCBmdXJ0aGVyIGNhbGxzIHVzaW5nIGFkZFxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0aWYgKCBzdGFjayApIHtcblx0XHRcdFx0XHRpZiAoIHN0YWNrLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGZpcmUoIHN0YWNrLnNoaWZ0KCkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi5kaXNhYmxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHQvLyBGaXJzdCwgd2Ugc2F2ZSB0aGUgY3VycmVudCBsZW5ndGhcblx0XHRcdFx0XHR2YXIgc3RhcnQgPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHQoZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHQvLyBEbyB3ZSBuZWVkIHRvIGFkZCB0aGUgY2FsbGJhY2tzIHRvIHRoZVxuXHRcdFx0XHRcdC8vIGN1cnJlbnQgZmlyaW5nIGJhdGNoP1xuXHRcdFx0XHRcdGlmICggZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nTGVuZ3RoID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0Ly8gV2l0aCBtZW1vcnksIGlmIHdlJ3JlIG5vdCBmaXJpbmcgdGhlblxuXHRcdFx0XHRcdC8vIHdlIHNob3VsZCBjYWxsIHJpZ2h0IGF3YXlcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdTdGFydCA9IHN0YXJ0O1xuXHRcdFx0XHRcdFx0ZmlyZSggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdFx0aWYgKCBmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdMZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaXJpbmdMZW5ndGgtLTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/IGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOiAhISggbGlzdCAmJiBsaXN0Lmxlbmd0aCApO1xuXHRcdFx0fSxcblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHRmaXJpbmdMZW5ndGggPSAwO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBIYXZlIHRoZSBsaXN0IGRvIG5vdGhpbmcgYW55bW9yZVxuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxpc3QgPSBzdGFjayA9IG1lbW9yeSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gSXMgaXQgZGlzYWJsZWQ/XG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cdFx0XHQvLyBMb2NrIHRoZSBsaXN0IGluIGl0cyBjdXJyZW50IHN0YXRlXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c3RhY2sgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdGlmICggIW1lbW9yeSApIHtcblx0XHRcdFx0XHRzZWxmLmRpc2FibGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBJcyBpdCBsb2NrZWQ/XG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIXN0YWNrO1xuXHRcdFx0fSxcblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCBsaXN0ICYmICggIWZpcmVkIHx8IHN0YWNrICkgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRpZiAoIGZpcmluZyApIHtcblx0XHRcdFx0XHRcdHN0YWNrLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZmlyZSggYXJncyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxualF1ZXJ5LmV4dGVuZCh7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBsaXN0ZW5lciBsaXN0LCBmaW5hbCBzdGF0ZVxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCBcInJlamVjdGVkXCIgXSxcblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJtZW1vcnlcIikgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgaSBdICkgJiYgZm5zWyBpIF07XG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gZm9yIGZvcndhcmRpbmcgYWN0aW9ucyB0byBuZXdEZWZlclxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbMV0gXShmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gcHJvbWlzZSA/IG5ld0RlZmVyLnByb21pc2UoKSA6IHRoaXMsIGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9KS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0cHJvbWlzZS5waXBlID0gcHJvbWlzZS50aGVuO1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgMyBdO1xuXG5cdFx0XHQvLyBwcm9taXNlWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbMV0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdC8vIHN0YXRlID0gWyByZXNvbHZlZCB8IHJlamVjdGVkIF1cblx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXG5cdFx0XHRcdC8vIFsgcmVqZWN0X2xpc3QgfCByZXNvbHZlX2xpc3QgXS5kaXNhYmxlOyBwcm9ncmVzc19saXN0LmxvY2tcblx0XHRcdFx0fSwgdHVwbGVzWyBpIF4gMSBdWyAyIF0uZGlzYWJsZSwgdHVwbGVzWyAyIF1bIDIgXS5sb2NrICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGRlZmVycmVkWyByZXNvbHZlIHwgcmVqZWN0IHwgbm90aWZ5IF1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gcHJvbWlzZSA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbMF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9KTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHN1Ym9yZGluYXRlIC8qICwgLi4uLCBzdWJvcmRpbmF0ZU4gKi8gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXHRcdFx0bGVuZ3RoID0gcmVzb2x2ZVZhbHVlcy5sZW5ndGgsXG5cblx0XHRcdC8vIHRoZSBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGxlbmd0aCAhPT0gMSB8fCAoIHN1Ym9yZGluYXRlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBzdWJvcmRpbmF0ZS5wcm9taXNlICkgKSA/IGxlbmd0aCA6IDAsXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWQuIElmIHJlc29sdmVWYWx1ZXMgY29uc2lzdCBvZiBvbmx5IGEgc2luZ2xlIERlZmVycmVkLCBqdXN0IHVzZSB0aGF0LlxuXHRcdFx0ZGVmZXJyZWQgPSByZW1haW5pbmcgPT09IDEgPyBzdWJvcmRpbmF0ZSA6IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBVcGRhdGUgZnVuY3Rpb24gZm9yIGJvdGggcmVzb2x2ZSBhbmQgcHJvZ3Jlc3MgdmFsdWVzXG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGksIGNvbnRleHRzLCB2YWx1ZXMgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0Y29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0dmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCB2YWx1ZXMgPT09IHByb2dyZXNzVmFsdWVzICkge1xuXHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cblx0XHRcdHByb2dyZXNzVmFsdWVzLCBwcm9ncmVzc0NvbnRleHRzLCByZXNvbHZlQ29udGV4dHM7XG5cblx0XHQvLyBhZGQgbGlzdGVuZXJzIHRvIERlZmVycmVkIHN1Ym9yZGluYXRlczsgdHJlYXQgb3RoZXJzIGFzIHJlc29sdmVkXG5cdFx0aWYgKCBsZW5ndGggPiAxICkge1xuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0cHJvZ3Jlc3NDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlKClcblx0XHRcdFx0XHRcdC5kb25lKCB1cGRhdGVGdW5jKCBpLCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKSApXG5cdFx0XHRcdFx0XHQuZmFpbCggZGVmZXJyZWQucmVqZWN0IClcblx0XHRcdFx0XHRcdC5wcm9ncmVzcyggdXBkYXRlRnVuYyggaSwgcHJvZ3Jlc3NDb250ZXh0cywgcHJvZ3Jlc3NWYWx1ZXMgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC0tcmVtYWluaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gaWYgd2UncmUgbm90IHdhaXRpbmcgb24gYW55dGhpbmcsIHJlc29sdmUgdGhlIG1hc3RlclxuXHRcdGlmICggIXJlbWFpbmluZyApIHtcblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuXHR9XG59KTtcblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3Q7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0Ly8gQWRkIHRoZSBjYWxsYmFja1xuXHRqUXVlcnkucmVhZHkucHJvbWlzZSgpLmRvbmUoIGZuICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSG9sZCAob3IgcmVsZWFzZSkgdGhlIHJlYWR5IGV2ZW50XG5cdGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XG5cdFx0aWYgKCBob2xkICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXG5cdFx0Ly8gVHJpZ2dlciBhbnkgYm91bmQgcmVhZHkgZXZlbnRzXG5cdFx0aWYgKCBqUXVlcnkuZm4udHJpZ2dlckhhbmRsZXIgKSB7XG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkudHJpZ2dlckhhbmRsZXIoIFwicmVhZHlcIiApO1xuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLm9mZiggXCJyZWFkeVwiICk7XG5cdFx0fVxuXHR9XG59KTtcblxuLyoqXG4gKiBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuICovXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxualF1ZXJ5LnJlYWR5LnByb21pc2UgPSBmdW5jdGlvbiggb2JqICkge1xuXHRpZiAoICFyZWFkeUxpc3QgKSB7XG5cblx0XHRyZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxuXHRcdC8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuXHRcdC8vIHdlIG9uY2UgdHJpZWQgdG8gdXNlIHJlYWR5U3RhdGUgXCJpbnRlcmFjdGl2ZVwiIGhlcmUsIGJ1dCBpdCBjYXVzZWQgaXNzdWVzIGxpa2UgdGhlIG9uZVxuXHRcdC8vIGRpc2NvdmVyZWQgYnkgQ2hyaXNTIGhlcmU6IGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMjgyI2NvbW1lbnQ6MTVcblx0XHRpZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiApIHtcblx0XHRcdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHRcdFx0c2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xuXG5cdFx0XHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZWFkeUxpc3QucHJvbWlzZSggb2JqICk7XG59O1xuXG4vLyBLaWNrIG9mZiB0aGUgRE9NIHJlYWR5IGNoZWNrIGV2ZW4gaWYgdGhlIHVzZXIgZG9lcyBub3RcbmpRdWVyeS5yZWFkeS5wcm9taXNlKCk7XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0galF1ZXJ5LmFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0alF1ZXJ5LmFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbaV0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKCBlbGVtc1tpXSwga2V5LCByYXcgPyB2YWx1ZSA6IHZhbHVlLmNhbGwoIGVsZW1zW2ldLCBpLCBmbiggZWxlbXNbaV0sIGtleSApICkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY2hhaW5hYmxlID9cblx0XHRlbGVtcyA6XG5cblx0XHQvLyBHZXRzXG5cdFx0YnVsayA/XG5cdFx0XHRmbi5jYWxsKCBlbGVtcyApIDpcblx0XHRcdGxlbiA/IGZuKCBlbGVtc1swXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYW4gb2JqZWN0IGNhbiBoYXZlIGRhdGFcbiAqL1xualF1ZXJ5LmFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHQvKiBqc2hpbnQgLVcwMTggKi9cblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDwgNCxcblx0Ly8gT2xkIFdlYktpdCBkb2VzIG5vdCBoYXZlIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucy9mcmVlemUgbWV0aG9kLFxuXHQvLyByZXR1cm4gbmV3IGVtcHR5IG9iamVjdCBpbnN0ZWFkIHdpdGggbm8gW1tzZXRdXSBhY2Nlc3NvclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMuY2FjaGUgPSB7fSwgMCwge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4ge307XG5cdFx0fVxuXHR9KTtcblxuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIE1hdGgucmFuZG9tKCk7XG59XG5cbkRhdGEudWlkID0gMTtcbkRhdGEuYWNjZXB0cyA9IGpRdWVyeS5hY2NlcHREYXRhO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblx0a2V5OiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHQvLyBBbHdheXMgcmV0dXJuIHRoZSBrZXkgZm9yIGEgZnJvemVuIG9iamVjdC5cblx0XHRpZiAoICFEYXRhLmFjY2VwdHMoIG93bmVyICkgKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgZGVzY3JpcHRvciA9IHt9LFxuXHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlIGtleVxuXHRcdFx0dW5sb2NrID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdW5sb2NrICkge1xuXHRcdFx0dW5sb2NrID0gRGF0YS51aWQrKztcblxuXHRcdFx0Ly8gU2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUsIG5vbi13cml0YWJsZSBwcm9wZXJ0eVxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGVzY3JpcHRvclsgdGhpcy5leHBhbmRvIF0gPSB7IHZhbHVlOiB1bmxvY2sgfTtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIG93bmVyLCBkZXNjcmlwdG9yICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPCA0XG5cdFx0XHQvLyBGYWxsYmFjayB0byBhIGxlc3Mgc2VjdXJlIGRlZmluaXRpb25cblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRkZXNjcmlwdG9yWyB0aGlzLmV4cGFuZG8gXSA9IHVubG9jaztcblx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggb3duZXIsIGRlc2NyaXB0b3IgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhlIGNhY2hlIG9iamVjdFxuXHRcdGlmICggIXRoaXMuY2FjaGVbIHVubG9jayBdICkge1xuXHRcdFx0dGhpcy5jYWNoZVsgdW5sb2NrIF0gPSB7fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdW5sb2NrO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHQvLyBUaGVyZSBtYXkgYmUgYW4gdW5sb2NrIGFzc2lnbmVkIHRvIHRoaXMgbm9kZSxcblx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIGVudHJ5IGZvciB0aGlzIFwib3duZXJcIiwgY3JlYXRlIG9uZSBpbmxpbmVcblx0XHRcdC8vIGFuZCBzZXQgdGhlIHVubG9jayBhcyB0aG91Z2ggYW4gb3duZXIgZW50cnkgaGFkIGFsd2F5cyBleGlzdGVkXG5cdFx0XHR1bmxvY2sgPSB0aGlzLmtleSggb3duZXIgKSxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZVsgdW5sb2NrIF07XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBkYXRhIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEZyZXNoIGFzc2lnbm1lbnRzIGJ5IG9iamVjdCBhcmUgc2hhbGxvdyBjb3BpZWRcblx0XHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5leHRlbmQoIHRoaXMuY2FjaGVbIHVubG9jayBdLCBkYXRhICk7XG5cdFx0XHQvLyBPdGhlcndpc2UsIGNvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0Y2FjaGVbIHByb3AgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0Ly8gRWl0aGVyIGEgdmFsaWQgY2FjaGUgaXMgZm91bmQsIG9yIHdpbGwgYmUgY3JlYXRlZC5cblx0XHQvLyBOZXcgY2FjaGVzIHdpbGwgYmUgY3JlYXRlZCBhbmQgdGhlIHVubG9jayByZXR1cm5lZCxcblx0XHQvLyBhbGxvd2luZyBkaXJlY3QgYWNjZXNzIHRvIHRoZSBuZXdseSBjcmVhdGVkXG5cdFx0Ly8gZW1wdHkgZGF0YSBvYmplY3QuIEEgdmFsaWQgb3duZXIgb2JqZWN0IG11c3QgYmUgcHJvdmlkZWQuXG5cdFx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZVsgdGhpcy5rZXkoIG93bmVyICkgXTtcblxuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRjYWNoZSA6IGNhY2hlWyBrZXkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIHN0b3JlZDtcblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoKGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSApIHtcblxuXHRcdFx0c3RvcmVkID0gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblxuXHRcdFx0cmV0dXJuIHN0b3JlZCAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0c3RvcmVkIDogdGhpcy5nZXQoIG93bmVyLCBqUXVlcnkuY2FtZWxDYXNlKGtleSkgKTtcblx0XHR9XG5cblx0XHQvLyBbKl1XaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGNhbWVsLFxuXHRcdFx0dW5sb2NrID0gdGhpcy5rZXkoIG93bmVyICksXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGVbIHVubG9jayBdO1xuXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHRoaXMuY2FjaGVbIHVubG9jayBdID0ge307XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIGtleSApICkge1xuXHRcdFx0XHQvLyBJZiBcIm5hbWVcIiBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdoZW4gZGF0YSBpcyBpbml0aWFsbHkgY3JlYXRlZCwgdmlhIChcImtleVwiLCBcInZhbFwiKSBzaWduYXR1cmUsXG5cdFx0XHRcdC8vIGtleXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlLlxuXHRcdFx0XHQvLyBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCBfaG93XyBhIGtleSB3YXMgYWRkZWQsIHJlbW92ZVxuXHRcdFx0XHQvLyBib3RoIHBsYWluIGtleSBhbmQgY2FtZWxDYXNlIGtleS4gIzEyNzg2XG5cdFx0XHRcdC8vIFRoaXMgd2lsbCBvbmx5IHBlbmFsaXplIHRoZSBhcnJheSBhcmd1bWVudCBwYXRoLlxuXHRcdFx0XHRuYW1lID0ga2V5LmNvbmNhdCgga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjYW1lbCA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXHRcdFx0XHQvLyBUcnkgdGhlIHN0cmluZyBhcyBhIGtleSBiZWZvcmUgYW55IG1hbmlwdWxhdGlvblxuXHRcdFx0XHRpZiAoIGtleSBpbiBjYWNoZSApIHtcblx0XHRcdFx0XHRuYW1lID0gWyBrZXksIGNhbWVsIF07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0bmFtZSA9IGNhbWVsO1xuXHRcdFx0XHRcdG5hbWUgPSBuYW1lIGluIGNhY2hlID9cblx0XHRcdFx0XHRcdFsgbmFtZSBdIDogKCBuYW1lLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBuYW1lLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIG5hbWVbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHJldHVybiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoXG5cdFx0XHR0aGlzLmNhY2hlWyBvd25lclsgdGhpcy5leHBhbmRvIF0gXSB8fCB7fVxuXHRcdCk7XG5cdH0sXG5cdGRpc2NhcmQ6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHRpZiAoIG93bmVyWyB0aGlzLmV4cGFuZG8gXSApIHtcblx0XHRcdGRlbGV0ZSB0aGlzLmNhY2hlWyBvd25lclsgdGhpcy5leHBhbmRvIF0gXTtcblx0XHR9XG5cdH1cbn07XG52YXIgZGF0YV9wcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFfdXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vKlxuXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG5cblx0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcblx0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG5cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG5cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcblx0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG5cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuKi9cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvKFtBLVpdKS9nO1xuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJDFcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGRhdGEgPT09IFwidHJ1ZVwiID8gdHJ1ZSA6XG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJmYWxzZVwiID8gZmFsc2UgOlxuXHRcdFx0XHRcdGRhdGEgPT09IFwibnVsbFwiID8gbnVsbCA6XG5cdFx0XHRcdFx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0XHRcdFx0XHQrZGF0YSArIFwiXCIgPT09IGRhdGEgPyArZGF0YSA6XG5cdFx0XHRcdFx0cmJyYWNlLnRlc3QoIGRhdGEgKSA/IGpRdWVyeS5wYXJzZUpTT04oIGRhdGEgKSA6XG5cdFx0XHRcdFx0ZGF0YTtcblx0XHRcdH0gY2F0Y2goIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFfdXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCh7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhX3VzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFfcHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFfdXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhX3VzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YV9wcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFfdXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFfcHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTExK1xuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSg1KSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhX3ByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhX3VzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhLFxuXHRcdFx0XHRjYW1lbEtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gd2l0aCB0aGUga2V5IGFzLWlzXG5cdFx0XHRcdGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIHdpdGggdGhlIGtleSBjYW1lbGl6ZWRcblx0XHRcdFx0ZGF0YSA9IGRhdGFfdXNlci5nZXQoIGVsZW0sIGNhbWVsS2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGNhbWVsS2V5LCB1bmRlZmluZWQgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vIEZpcnN0LCBhdHRlbXB0IHRvIHN0b3JlIGEgY29weSBvciByZWZlcmVuY2Ugb2YgYW55XG5cdFx0XHRcdC8vIGRhdGEgdGhhdCBtaWdodCd2ZSBiZWVuIHN0b3JlIHdpdGggYSBjYW1lbENhc2VkIGtleS5cblx0XHRcdFx0dmFyIGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCB0aGlzLCBjYW1lbEtleSApO1xuXG5cdFx0XHRcdC8vIEZvciBIVE1MNSBkYXRhLSogYXR0cmlidXRlIGludGVyb3AsIHdlIGhhdmUgdG9cblx0XHRcdFx0Ly8gc3RvcmUgcHJvcGVydHkgbmFtZXMgd2l0aCBkYXNoZXMgaW4gYSBjYW1lbENhc2UgZm9ybS5cblx0XHRcdFx0Ly8gVGhpcyBtaWdodCBub3QgYXBwbHkgdG8gYWxsIHByb3BlcnRpZXMuLi4qXG5cdFx0XHRcdGRhdGFfdXNlci5zZXQoIHRoaXMsIGNhbWVsS2V5LCB2YWx1ZSApO1xuXG5cdFx0XHRcdC8vICouLi4gSW4gdGhlIGNhc2Ugb2YgcHJvcGVydGllcyB0aGF0IG1pZ2h0IF9hY3R1YWxseV9cblx0XHRcdFx0Ly8gaGF2ZSBkYXNoZXMsIHdlIG5lZWQgdG8gYWxzbyBzdG9yZSBhIGNvcHkgb2YgdGhhdFxuXHRcdFx0XHQvLyB1bmNoYW5nZWQgcHJvcGVydHkuXG5cdFx0XHRcdGlmICgga2V5LmluZGV4T2YoXCItXCIpICE9PSAtMSAmJiBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0ZGF0YV91c2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhX3VzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9KTtcblx0fVxufSk7XG5cblxualF1ZXJ5LmV4dGVuZCh7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhX3ByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoZGF0YSkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gY2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBub3QgaW50ZW5kZWQgZm9yIHB1YmxpYyBjb25zdW1wdGlvbiAtIGdlbmVyYXRlcyBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm5zIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YV9wcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YV9wcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLmFkZChmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSlcblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1swXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIGVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWzBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhX3ByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59KTtcbnZhciBwbnVtID0gKC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvKS5zb3VyY2U7XG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXHRcdC8vIGlzSGlkZGVuIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiIHx8ICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHR9O1xuXG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoL14oPzpjaGVja2JveHxyYWRpbykkL2kpO1xuXG5cblxuKGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gIzExMjE3IC0gV2ViS2l0IGxvc2VzIGNoZWNrIHdoZW4gdGhlIG5hbWUgaXMgYWZ0ZXIgdGhlIGNoZWNrZWQgYXR0cmlidXRlXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbmVlZCAuc2V0QXR0cmlidXRlIGZvciBXV0Fcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaSA1LjEsIGlPUyA1LjEsIEFuZHJvaWQgNC54LCBBbmRyb2lkIDIuM1xuXHQvLyBvbGQgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHQvLyBTdXBwb3J0OiBJRTktSUUxMStcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0pKCk7XG52YXIgc3RydW5kZWZpbmVkID0gdHlwZW9mIHVuZGVmaW5lZDtcblxuXG5cbnN1cHBvcnQuZm9jdXNpbkJ1YmJsZXMgPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudSl8Y2xpY2svLFxuXHRyZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkkLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YV9wcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdH1cblx0XHRpZiAoICEoZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUpICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gc3RydW5kZWZpbmVkICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWzJdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoe1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbihcIi5cIilcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHwgc3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YV9wcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhX3ByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cykgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWzJdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsyXSAmJiBuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8IHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRlbGV0ZSBlbGVtRGF0YS5oYW5kbGU7XG5cdFx0XHRkYXRhX3ByaXYucmVtb3ZlKCBlbGVtLCBcImV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdChcIi5cIikgOiBbXTtcblxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoXCIuXCIpID49IDAgKSB7XG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdChcIi5cIik7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZihcIjpcIikgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbihcIi5cIik7XG5cdFx0ZXZlbnQubmFtZXNwYWNlX3JlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09IChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQpICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKGN1ciA9IGV2ZW50UGF0aFtpKytdKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YV9wcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmIGRhdGFfcHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBqUXVlcnkuYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCFzcGVjaWFsLl9kZWZhdWx0IHx8IHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSkgJiZcblx0XHRcdFx0alF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YV9wcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWzBdID0gZXZlbnQ7XG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAobWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0pICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoIChoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSkgJiYgIWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvclxuXHRcdFx0XHQvLyAyKSBoYXZlIG5hbWVzcGFjZShzKSBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQubmFtZXNwYWNlX3JlIHx8IGV2ZW50Lm5hbWVzcGFjZV9yZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9KS5oYW5kbGUgfHwgaGFuZGxlT2JqLmhhbmRsZXIgKVxuXHRcdFx0XHRcdFx0XHQuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKGV2ZW50LnJlc3VsdCA9IHJldCkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgbWF0Y2hlcywgc2VsLCBoYW5kbGVPYmosXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICgjMTMxODApXG5cdFx0Ly8gQXZvaWQgbm9uLWxlZnQtY2xpY2sgYnViYmxpbmcgaW4gRmlyZWZveCAoIzM4NjEpXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmIGN1ci5ub2RlVHlwZSAmJiAoIWV2ZW50LmJ1dHRvbiB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIpICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIuZGlzYWJsZWQgIT09IHRydWUgfHwgZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiICkge1xuXHRcdFx0XHRcdG1hdGNoZXMgPSBbXTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID49IDAgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZXMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVzIH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCh7IGVsZW06IHRoaXMsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0Ly8gSW5jbHVkZXMgc29tZSBldmVudCBwcm9wcyBzaGFyZWQgYnkgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnRcblx0cHJvcHM6IFwiYWx0S2V5IGJ1YmJsZXMgY2FuY2VsYWJsZSBjdHJsS2V5IGN1cnJlbnRUYXJnZXQgZXZlbnRQaGFzZSBtZXRhS2V5IHJlbGF0ZWRUYXJnZXQgc2hpZnRLZXkgdGFyZ2V0IHRpbWVTdGFtcCB2aWV3IHdoaWNoXCIuc3BsaXQoXCIgXCIpLFxuXG5cdGZpeEhvb2tzOiB7fSxcblxuXHRrZXlIb29rczoge1xuXHRcdHByb3BzOiBcImNoYXIgY2hhckNvZGUga2V5IGtleUNvZGVcIi5zcGxpdChcIiBcIiksXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCApIHtcblx0XHRcdFx0ZXZlbnQud2hpY2ggPSBvcmlnaW5hbC5jaGFyQ29kZSAhPSBudWxsID8gb3JpZ2luYWwuY2hhckNvZGUgOiBvcmlnaW5hbC5rZXlDb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0fVxuXHR9LFxuXG5cdG1vdXNlSG9va3M6IHtcblx0XHRwcm9wczogXCJidXR0b24gYnV0dG9ucyBjbGllbnRYIGNsaWVudFkgb2Zmc2V0WCBvZmZzZXRZIHBhZ2VYIHBhZ2VZIHNjcmVlblggc2NyZWVuWSB0b0VsZW1lbnRcIi5zcGxpdChcIiBcIiksXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xuXHRcdFx0dmFyIGV2ZW50RG9jLCBkb2MsIGJvZHksXG5cdFx0XHRcdGJ1dHRvbiA9IG9yaWdpbmFsLmJ1dHRvbjtcblxuXHRcdFx0Ly8gQ2FsY3VsYXRlIHBhZ2VYL1kgaWYgbWlzc2luZyBhbmQgY2xpZW50WC9ZIGF2YWlsYWJsZVxuXHRcdFx0aWYgKCBldmVudC5wYWdlWCA9PSBudWxsICYmIG9yaWdpbmFsLmNsaWVudFggIT0gbnVsbCApIHtcblx0XHRcdFx0ZXZlbnREb2MgPSBldmVudC50YXJnZXQub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcblx0XHRcdFx0ZG9jID0gZXZlbnREb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0XHRib2R5ID0gZXZlbnREb2MuYm9keTtcblxuXHRcdFx0XHRldmVudC5wYWdlWCA9IG9yaWdpbmFsLmNsaWVudFggKyAoIGRvYyAmJiBkb2Muc2Nyb2xsTGVmdCB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsTGVmdCB8fCAwICkgLSAoIGRvYyAmJiBkb2MuY2xpZW50TGVmdCB8fCBib2R5ICYmIGJvZHkuY2xpZW50TGVmdCB8fCAwICk7XG5cdFx0XHRcdGV2ZW50LnBhZ2VZID0gb3JpZ2luYWwuY2xpZW50WSArICggZG9jICYmIGRvYy5zY3JvbGxUb3AgIHx8IGJvZHkgJiYgYm9keS5zY3JvbGxUb3AgIHx8IDAgKSAtICggZG9jICYmIGRvYy5jbGllbnRUb3AgIHx8IGJvZHkgJiYgYm9keS5jbGllbnRUb3AgIHx8IDAgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdFx0Ly8gTm90ZTogYnV0dG9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyBkb24ndCB1c2UgaXRcblx0XHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRldmVudC53aGljaCA9ICggYnV0dG9uICYgMSA/IDEgOiAoIGJ1dHRvbiAmIDIgPyAzIDogKCBidXR0b24gJiA0ID8gMiA6IDAgKSApICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0aWYgKCBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSApIHtcblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cblx0XHQvLyBDcmVhdGUgYSB3cml0YWJsZSBjb3B5IG9mIHRoZSBldmVudCBvYmplY3QgYW5kIG5vcm1hbGl6ZSBzb21lIHByb3BlcnRpZXNcblx0XHR2YXIgaSwgcHJvcCwgY29weSxcblx0XHRcdHR5cGUgPSBldmVudC50eXBlLFxuXHRcdFx0b3JpZ2luYWxFdmVudCA9IGV2ZW50LFxuXHRcdFx0Zml4SG9vayA9IHRoaXMuZml4SG9va3NbIHR5cGUgXTtcblxuXHRcdGlmICggIWZpeEhvb2sgKSB7XG5cdFx0XHR0aGlzLmZpeEhvb2tzWyB0eXBlIF0gPSBmaXhIb29rID1cblx0XHRcdFx0cm1vdXNlRXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5tb3VzZUhvb2tzIDpcblx0XHRcdFx0cmtleUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMua2V5SG9va3MgOlxuXHRcdFx0XHR7fTtcblx0XHR9XG5cdFx0Y29weSA9IGZpeEhvb2sucHJvcHMgPyB0aGlzLnByb3BzLmNvbmNhdCggZml4SG9vay5wcm9wcyApIDogdGhpcy5wcm9wcztcblxuXHRcdGV2ZW50ID0gbmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXG5cdFx0aSA9IGNvcHkubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0cHJvcCA9IGNvcHlbIGkgXTtcblx0XHRcdGV2ZW50WyBwcm9wIF0gPSBvcmlnaW5hbEV2ZW50WyBwcm9wIF07XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQ29yZG92YSAyLjUgKFdlYktpdCkgKCMxMzI1NSlcblx0XHQvLyBBbGwgZXZlbnRzIHNob3VsZCBoYXZlIGEgdGFyZ2V0OyBDb3Jkb3ZhIGRldmljZXJlYWR5IGRvZXNuJ3Rcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBkb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wKywgQ2hyb21lIDwgMjhcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdGlmICggZXZlbnQudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZpeEhvb2suZmlsdGVyID8gZml4SG9vay5maWx0ZXIoIGV2ZW50LCBvcmlnaW5hbEV2ZW50ICkgOiBldmVudDtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdH0sXG5cdFx0Ymx1cjoge1xuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCwgYnViYmxlICkge1xuXHRcdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZS5cblx0XHQvLyBGYWtlIG9yaWdpbmFsRXZlbnQgdG8gYXZvaWQgZG9ub3IncyBzdG9wUHJvcGFnYXRpb24sIGJ1dCBpZiB0aGVcblx0XHQvLyBzaW11bGF0ZWQgZXZlbnQgcHJldmVudHMgZGVmYXVsdCB0aGVuIHdlIGRvIHRoZSBzYW1lIG9uIHRoZSBkb25vci5cblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWUsXG5cdFx0XHRcdG9yaWdpbmFsRXZlbnQ6IHt9XG5cdFx0XHR9XG5cdFx0KTtcblx0XHRpZiAoIGJ1YmJsZSApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5jYWxsKCBlbGVtLCBlICk7XG5cdFx0fVxuXHRcdGlmICggZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSwgZmFsc2UgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEodGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDwgNC4wXG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgZS5wcmV2ZW50RGVmYXVsdCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiBlLnN0b3BQcm9wYWdhdGlvbiApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gU3VwcG9ydDogQ2hyb21lIDE1K1xualF1ZXJ5LmVhY2goe1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkpICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0pO1xuXG4vLyBDcmVhdGUgXCJidWJibGluZ1wiIGZvY3VzIGFuZCBibHVyIGV2ZW50c1xuLy8gU3VwcG9ydDogRmlyZWZveCwgQ2hyb21lLCBTYWZhcmlcbmlmICggIXN1cHBvcnQuZm9jdXNpbkJ1YmJsZXMgKSB7XG5cdGpRdWVyeS5lYWNoKHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICksIHRydWUgKTtcblx0XHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFfcHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFfcHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIC8qSU5URVJOQUwqLyBvbmUgKSB7XG5cdFx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHRcdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub24oIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cdFx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRcdG9yaWdGbiA9IGZuO1xuXHRcdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0fTtcblx0XHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdFx0fSk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/IGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6IGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0pO1xuXHR9LFxuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0pO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWzBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSk7XG5cblxudmFyXG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6XSspW14+XSopXFwvPi9naSxcblx0cnRhZ05hbWUgPSAvPChbXFx3Ol0rKS8sXG5cdHJodG1sID0gLzx8JiM/XFx3KzsvLFxuXHRybm9Jbm5lcmh0bWwgPSAvPCg/OnNjcmlwdHxzdHlsZXxsaW5rKS9pLFxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyc2NyaXB0VHlwZSA9IC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksXG5cdHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZyxcblxuXHQvLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxuXHR3cmFwTWFwID0ge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOVxuXHRcdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdFx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRcdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdFx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHRcdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRcdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxuXHR9O1xuXG4vLyBTdXBwb3J0OiBJRSA5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogMS54IGNvbXBhdGliaWxpdHlcbi8vIE1hbmlwdWxhdGluZyB0YWJsZXMgcmVxdWlyZXMgYSB0Ym9keVxuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdGpRdWVyeS5ub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSA/XG5cblx0XHRlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGJvZHlcIilbMF0gfHxcblx0XHRcdGVsZW0uYXBwZW5kQ2hpbGQoIGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIikgKSA6XG5cdFx0ZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSAhPT0gbnVsbCkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcblxuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YV9wcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sIFwiZ2xvYmFsRXZhbFwiLCAhcmVmRWxlbWVudHMgfHwgZGF0YV9wcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YV9wcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YV9wcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhX3ByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhX3VzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhX3VzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YV91c2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblx0dmFyIHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPyBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKSA6XG5cdFx0XHRjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgPyBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApIDpcblx0XHRcdFtdO1xuXG5cdHJldHVybiB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgalF1ZXJ5Lm5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSA/XG5cdFx0alF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICkgOlxuXHRcdHJldDtcbn1cblxuLy8gU3VwcG9ydDogSUUgPj0gOVxuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFID49IDlcblx0XHQvLyBGaXggQ2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGJ1aWxkRnJhZ21lbnQ6IGZ1bmN0aW9uKCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uICkge1xuXHRcdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdFx0bm9kZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0XG5cdFx0XHRcdFx0Ly8galF1ZXJ5Lm1lcmdlIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93c1xuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApO1xuXG5cdFx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBlbGVtLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXRcblx0XHRcdFx0XHQvLyBqUXVlcnkubWVyZ2UgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzXG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHRcdC8vIEZpeGVzICMxMjM0NlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFdlYmtpdCwgSUVcblx0XHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRcdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKGVsZW0gPSBub2Rlc1sgaSsrIF0pICkge1xuXG5cdFx0XHQvLyAjNDA4NyAtIElmIG9yaWdpbiBhbmQgZGVzdGluYXRpb24gZWxlbWVudHMgYXJlIHRoZSBzYW1lLCBhbmQgdGhpcyBpc1xuXHRcdFx0Ly8gdGhhdCBlbGVtZW50LCBkbyBub3QgZG8gYW55dGhpbmdcblx0XHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSAhPT0gLTEgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gdG1wWyBqKysgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZyYWdtZW50O1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLCBrZXksXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKGVsZW0gPSBlbGVtc1sgaSBdKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGtleSA9IGVsZW1bIGRhdGFfcHJpdi5leHBhbmRvIF07XG5cblx0XHRcdFx0aWYgKCBrZXkgJiYgKGRhdGEgPSBkYXRhX3ByaXYuY2FjaGVbIGtleSBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBkYXRhX3ByaXYuY2FjaGVbIGtleSBdICkge1xuXHRcdFx0XHRcdFx0Ly8gRGlzY2FyZCBhbnkgcmVtYWluaW5nIGBwcml2YXRlYCBkYXRhXG5cdFx0XHRcdFx0XHRkZWxldGUgZGF0YV9wcml2LmNhY2hlWyBrZXkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIERpc2NhcmQgYW55IHJlbWFpbmluZyBgdXNlcmAgZGF0YVxuXHRcdFx0ZGVsZXRlIGRhdGFfdXNlci5jYWNoZVsgZWxlbVsgZGF0YV91c2VyLmV4cGFuZG8gXSBdO1xuXHRcdH1cblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3Rvciwga2VlcERhdGEgLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRlbGVtcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIHRoaXMgKSA6IHRoaXMsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCAha2VlcERhdGEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtICkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoZWxlbSA9IHRoaXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9KTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgYXJnID0gYXJndW1lbnRzWyAwIF07XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHR0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0YXJnID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXG5cdFx0XHRpZiAoIGFyZyApIHtcblx0XHRcdFx0YXJnLnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gRm9yY2UgcmVtb3ZhbCBpZiB0aGVyZSB3YXMgbm8gbmV3IGNvbnRlbnQgKGUuZy4sIGZyb20gZW1wdHkgYXJndW1lbnRzKVxuXHRcdHJldHVybiBhcmcgJiYgKGFyZy5sZW5ndGggfHwgYXJnLm5vZGVUeXBlKSA/IHRoaXMgOiB0aGlzLnJlbW92ZSgpO1xuXHR9LFxuXG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnJlbW92ZSggc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRkb21NYW5pcDogZnVuY3Rpb24oIGFyZ3MsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0XHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNldCA9IHRoaXMsXG5cdFx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0XHRpZiAoIGlzRnVuY3Rpb24gfHxcblx0XHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0XHR2YXIgc2VsZiA9IHNldC5lcSggaW5kZXggKTtcblx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYuZG9tTWFuaXAoIGFyZ3MsIGNhbGxiYWNrICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIGwgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGpRdWVyeS5idWlsZEZyYWdtZW50KCBhcmdzLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIHRoaXMgKTtcblx0XHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBmaXJzdCApIHtcblx0XHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbSBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXRcblx0XHRcdFx0XHRcdFx0Ly8galF1ZXJ5Lm1lcmdlIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93c1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y2FsbGJhY2suY2FsbCggdGhpc1sgaSBdLCBub2RlLCBpICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHRcdCFkYXRhX3ByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmIGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZWFjaCh7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzXG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0pO1xuXG5cbnZhciBpZnJhbWUsXG5cdGVsZW1kaXNwbGF5ID0ge307XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGFjdHVhbCBkaXNwbGF5IG9mIGEgZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgbm9kZU5hbWUgb2YgdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MgRG9jdW1lbnQgb2JqZWN0XG4gKi9cbi8vIENhbGxlZCBvbmx5IGZyb20gd2l0aGluIGRlZmF1bHREaXNwbGF5XG5mdW5jdGlvbiBhY3R1YWxEaXNwbGF5KCBuYW1lLCBkb2MgKSB7XG5cdHZhciBzdHlsZSxcblx0XHRlbGVtID0galF1ZXJ5KCBkb2MuY3JlYXRlRWxlbWVudCggbmFtZSApICkuYXBwZW5kVG8oIGRvYy5ib2R5ICksXG5cblx0XHQvLyBnZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSBtaWdodCBiZSByZWxpYWJseSB1c2VkIG9ubHkgb24gYXR0YWNoZWQgZWxlbWVudFxuXHRcdGRpc3BsYXkgPSB3aW5kb3cuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUgJiYgKCBzdHlsZSA9IHdpbmRvdy5nZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSggZWxlbVsgMCBdICkgKSA/XG5cblx0XHRcdC8vIFVzZSBvZiB0aGlzIG1ldGhvZCBpcyBhIHRlbXBvcmFyeSBmaXggKG1vcmUgbGlrZSBvcHRtaXphdGlvbikgdW50aWwgc29tZXRoaW5nIGJldHRlciBjb21lcyBhbG9uZyxcblx0XHRcdC8vIHNpbmNlIGl0IHdhcyByZW1vdmVkIGZyb20gc3BlY2lmaWNhdGlvbiBhbmQgc3VwcG9ydGVkIG9ubHkgaW4gRkZcblx0XHRcdHN0eWxlLmRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtWyAwIF0sIFwiZGlzcGxheVwiICk7XG5cblx0Ly8gV2UgZG9uJ3QgaGF2ZSBhbnkgZGF0YSBzdG9yZWQgb24gdGhlIGVsZW1lbnQsXG5cdC8vIHNvIHVzZSBcImRldGFjaFwiIG1ldGhvZCBhcyBmYXN0IHdheSB0byBnZXQgcmlkIG9mIHRoZSBlbGVtZW50XG5cdGVsZW0uZGV0YWNoKCk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbi8qKlxuICogVHJ5IHRvIGRldGVybWluZSB0aGUgZGVmYXVsdCBkaXNwbGF5IHZhbHVlIG9mIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBub2RlTmFtZVxuICovXG5mdW5jdGlvbiBkZWZhdWx0RGlzcGxheSggbm9kZU5hbWUgKSB7XG5cdHZhciBkb2MgPSBkb2N1bWVudCxcblx0XHRkaXNwbGF5ID0gZWxlbWRpc3BsYXlbIG5vZGVOYW1lIF07XG5cblx0aWYgKCAhZGlzcGxheSApIHtcblx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xuXG5cdFx0Ly8gSWYgdGhlIHNpbXBsZSB3YXkgZmFpbHMsIHJlYWQgZnJvbSBpbnNpZGUgYW4gaWZyYW1lXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiB8fCAhZGlzcGxheSApIHtcblxuXHRcdFx0Ly8gVXNlIHRoZSBhbHJlYWR5LWNyZWF0ZWQgaWZyYW1lIGlmIHBvc3NpYmxlXG5cdFx0XHRpZnJhbWUgPSAoaWZyYW1lIHx8IGpRdWVyeSggXCI8aWZyYW1lIGZyYW1lYm9yZGVyPScwJyB3aWR0aD0nMCcgaGVpZ2h0PScwJy8+XCIgKSkuYXBwZW5kVG8oIGRvYy5kb2N1bWVudEVsZW1lbnQgKTtcblxuXHRcdFx0Ly8gQWx3YXlzIHdyaXRlIGEgbmV3IEhUTUwgc2tlbGV0b24gc28gV2Via2l0IGFuZCBGaXJlZm94IGRvbid0IGNob2tlIG9uIHJldXNlXG5cdFx0XHRkb2MgPSBpZnJhbWVbIDAgXS5jb250ZW50RG9jdW1lbnQ7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFXG5cdFx0XHRkb2Mud3JpdGUoKTtcblx0XHRcdGRvYy5jbG9zZSgpO1xuXG5cdFx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xuXHRcdFx0aWZyYW1lLmRldGFjaCgpO1xuXHRcdH1cblxuXHRcdC8vIFN0b3JlIHRoZSBjb3JyZWN0IGRlZmF1bHQgZGlzcGxheVxuXHRcdGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdID0gZGlzcGxheTtcblx0fVxuXG5cdHJldHVybiBkaXNwbGF5O1xufVxudmFyIHJtYXJnaW4gPSAoL15tYXJnaW4vKTtcblxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICk7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFOVxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG9ubHkgbmVlZGVkIGZvciAuY3NzKCdmaWx0ZXInKSBpbiBJRTksIHNlZSAjMTI1Mzdcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblx0fVxuXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IGlPUyA8IDZcblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gaU9TIDwgNiAoYXQgbGVhc3QpIHJldHVybnMgcGVyY2VudGFnZSBmb3IgYSBsYXJnZXIgc2V0IG9mIHZhbHVlcywgYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVsc1xuXHRcdC8vIHRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzogaHR0cDovL2Rldi53My5vcmcvY3Nzd2cvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWUgdG8gbWlzc2luZyBkZXBlbmRlbmN5KSxcblx0XHRcdFx0Ly8gcmVtb3ZlIGl0LlxuXHRcdFx0XHQvLyBTaW5jZSB0aGVyZSBhcmUgbm8gb3RoZXIgaG9va3MgZm9yIG1hcmdpblJpZ2h0LCByZW1vdmUgdGhlIHdob2xlIG9iamVjdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXG5cdFx0XHRyZXR1cm4gKHRoaXMuZ2V0ID0gaG9va0ZuKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbihmdW5jdGlvbigpIHtcblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLFxuXHRcdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDowO2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDttYXJnaW4tdG9wOjFweDtcIiArXG5cdFx0XCJwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlUGl4ZWxQb3NpdGlvbkFuZEJveFNpemluZ1JlbGlhYmxlKCkge1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXG5cdFx0XHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcblx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xuXHRcdFx0XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7ZGlzcGxheTpibG9jazttYXJnaW4tdG9wOjElO3RvcDoxJTtcIiArXG5cdFx0XHRcImJvcmRlcjoxcHg7cGFkZGluZzoxcHg7d2lkdGg6NHB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2LCBudWxsICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gZGl2U3R5bGUud2lkdGggPT09IFwiNHB4XCI7XG5cblx0XHRkb2NFbGVtLnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IG5vZGUuanMganNkb21cblx0Ly8gRG9uJ3QgYXNzdW1lIHRoYXQgZ2V0Q29tcHV0ZWRTdHlsZSBpcyBhIHByb3BlcnR5IG9mIHRoZSBnbG9iYWwgb2JqZWN0XG5cdGlmICggd2luZG93LmdldENvbXB1dGVkU3R5bGUgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vIFRoaXMgdGVzdCBpcyBleGVjdXRlZCBvbmx5IG9uY2UgYnV0IHdlIHN0aWxsIGRvIG1lbW9pemluZ1xuXHRcdFx0XHQvLyBzaW5jZSB3ZSBjYW4gdXNlIHRoZSBib3hTaXppbmdSZWxpYWJsZSBwcmUtY29tcHV0aW5nLlxuXHRcdFx0XHQvLyBObyBuZWVkIHRvIGNoZWNrIGlmIHRoZSB0ZXN0IHdhcyBhbHJlYWR5IHBlcmZvcm1lZCwgdGhvdWdoLlxuXHRcdFx0XHRjb21wdXRlUGl4ZWxQb3NpdGlvbkFuZEJveFNpemluZ1JlbGlhYmxlKCk7XG5cdFx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdFx0fSxcblx0XHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRcdGNvbXB1dGVQaXhlbFBvc2l0aW9uQW5kQm94U2l6aW5nUmVsaWFibGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0XHR9LFxuXHRcdFx0cmVsaWFibGVNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIENoZWNrIGlmIGRpdiB3aXRoIGV4cGxpY2l0IHdpZHRoIGFuZCBubyBtYXJnaW4tcmlnaHQgaW5jb3JyZWN0bHlcblx0XHRcdFx0Ly8gZ2V0cyBjb21wdXRlZCBtYXJnaW4tcmlnaHQgYmFzZWQgb24gd2lkdGggb2YgY29udGFpbmVyLiAoIzMzMzMpXG5cdFx0XHRcdC8vIFdlYktpdCBCdWcgMTMzNDMgLSBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgd3JvbmcgdmFsdWUgZm9yIG1hcmdpbi1yaWdodFxuXHRcdFx0XHQvLyBUaGlzIHN1cHBvcnQgZnVuY3Rpb24gaXMgb25seSBleGVjdXRlZCBvbmNlIHNvIG5vIG1lbW9pemluZyBpcyBuZWVkZWQuXG5cdFx0XHRcdHZhciByZXQsXG5cdFx0XHRcdFx0bWFyZ2luRGl2ID0gZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBSZXNldCBDU1M6IGJveC1zaXppbmc7IGRpc3BsYXk7IG1hcmdpbjsgYm9yZGVyOyBwYWRkaW5nXG5cdFx0XHRcdG1hcmdpbkRpdi5zdHlsZS5jc3NUZXh0ID0gZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXG5cdFx0XHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG5cdFx0XHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7LW1vei1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O1wiICtcblx0XHRcdFx0XHRcImJveC1zaXppbmc6Y29udGVudC1ib3g7ZGlzcGxheTpibG9jazttYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjBcIjtcblx0XHRcdFx0bWFyZ2luRGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gbWFyZ2luRGl2LnN0eWxlLndpZHRoID0gXCIwXCI7XG5cdFx0XHRcdGRpdi5zdHlsZS53aWR0aCA9IFwiMXB4XCI7XG5cdFx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0XHRcdHJldCA9ICFwYXJzZUZsb2F0KCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggbWFyZ2luRGl2LCBudWxsICkubWFyZ2luUmlnaHQgKTtcblxuXHRcdFx0XHRkb2NFbGVtLnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59KSgpO1xuXG5cbi8vIEEgbWV0aG9kIGZvciBxdWlja2x5IHN3YXBwaW5nIGluL291dCBDU1MgcHJvcGVydGllcyB0byBnZXQgY29ycmVjdCBjYWxjdWxhdGlvbnMuXG5qUXVlcnkuc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhclxuXHQvLyBzd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBzZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRybnVtc3BsaXQgPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKC4qKSRcIiwgXCJpXCIgKSxcblx0cnJlbE51bSA9IG5ldyBSZWdFeHAoIFwiXihbKy1dKT0oXCIgKyBwbnVtICsgXCIpXCIsIFwiaVwiICksXG5cblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiT1wiLCBcIk1velwiLCBcIm1zXCIgXTtcblxuLy8gcmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIHN0eWxlLCBuYW1lICkge1xuXG5cdC8vIHNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBzdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIGNoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpLFxuXHRcdG9yaWdOYW1lID0gbmFtZSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb3JpZ05hbWU7XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cdHZhciBtYXRjaGVzID0gcm51bXNwbGl0LmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAxIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAyIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdHZhciBpID0gZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSA/XG5cdFx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXG5cdFx0NCA6XG5cdFx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuXHRcdG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXG5cdFx0dmFsID0gMDtcblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cdFx0Ly8gYm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBhdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBhdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBvZmZzZXQgcHJvcGVydHksIHdoaWNoIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJvcmRlci1ib3ggdmFsdWVcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLFxuXHRcdHZhbCA9IG5hbWUgPT09IFwid2lkdGhcIiA/IGVsZW0ub2Zmc2V0V2lkdGggOiBlbGVtLm9mZnNldEhlaWdodCxcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0Ly8gc29tZSBub24taHRtbCBlbGVtZW50cyByZXR1cm4gdW5kZWZpbmVkIGZvciBvZmZzZXRXaWR0aCwgc28gY2hlY2sgZm9yIG51bGwvdW5kZWZpbmVkXG5cdC8vIHN2ZyAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY0OTI4NVxuXHQvLyBNYXRoTUwgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00OTE2Njhcblx0aWYgKCB2YWwgPD0gMCB8fCB2YWwgPT0gbnVsbCApIHtcblx0XHQvLyBGYWxsIGJhY2sgdG8gY29tcHV0ZWQgdGhlbiB1bmNvbXB1dGVkIGNzcyBpZiBuZWNlc3Nhcnlcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdGlmICggdmFsIDwgMCB8fCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdHZhbCA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxuXHRcdGlmICggcm51bW5vbnB4LnRlc3QodmFsKSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXG5cdFx0Ly8gd2UgbmVlZCB0aGUgY2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0XHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdFx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cdH1cblxuXHQvLyB1c2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLCBoaWRkZW4sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YV9wcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKTtcblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblx0XHRcdC8vIFJlc2V0IHRoZSBpbmxpbmUgZGlzcGxheSBvZiB0aGlzIGVsZW1lbnQgdG8gbGVhcm4gaWYgaXQgaXNcblx0XHRcdC8vIGJlaW5nIGhpZGRlbiBieSBjYXNjYWRlZCBydWxlcyBvciBub3Rcblx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSAmJiBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGVsZW1lbnRzIHdoaWNoIGhhdmUgYmVlbiBvdmVycmlkZGVuIHdpdGggZGlzcGxheTogbm9uZVxuXHRcdFx0Ly8gaW4gYSBzdHlsZXNoZWV0IHRvIHdoYXRldmVyIHRoZSBkZWZhdWx0IGJyb3dzZXIgc3R5bGUgaXNcblx0XHRcdC8vIGZvciBzdWNoIGFuIGVsZW1lbnRcblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIFwib2xkZGlzcGxheVwiLCBkZWZhdWx0RGlzcGxheShlbGVtLm5vZGVOYW1lKSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRoaWRkZW4gPSBpc0hpZGRlbiggZWxlbSApO1xuXG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiIHx8ICFoaWRkZW4gKSB7XG5cdFx0XHRcdGRhdGFfcHJpdi5zZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiLCBoaWRkZW4gPyBkaXNwbGF5IDogalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiBtb3N0IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wXG5cdC8vIHRvIGF2b2lkIHRoZSBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRpZiAoICFzaG93IHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gc2hvdyA/IHZhbHVlc1sgaW5kZXggXSB8fCBcIlwiIDogXCJub25lXCI7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge1xuXHRcdC8vIG5vcm1hbGl6ZSBmbG9hdCBjc3MgcHJvcGVydHlcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHR9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8ICggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIHN0eWxlLCBvcmlnTmFtZSApICk7XG5cblx0XHQvLyBnZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uXG5cdFx0Ly8gZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gY29udmVydCByZWxhdGl2ZSBudW1iZXIgc3RyaW5ncyAoKz0gb3IgLT0pIHRvIHJlbGF0aXZlIG51bWJlcnMuICM3MzQ1XG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKHJldCA9IHJyZWxOdW0uZXhlYyggdmFsdWUgKSkgKSB7XG5cdFx0XHRcdHZhbHVlID0gKCByZXRbMV0gKyAxICkgKiByZXRbMl0gKyBwYXJzZUZsb2F0KCBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICkgKTtcblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQuIFNlZTogIzcxMTZcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkICdweCcgdG8gdGhlIChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gKSB7XG5cdFx0XHRcdHZhbHVlICs9IFwicHhcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRml4ZXMgIzg5MDgsIGl0IGNhbiBiZSBkb25lIG1vcmUgY29ycmVjdGx5IGJ5IHNwZWNpZnlpbmcgc2V0dGVycyBpbiBjc3NIb29rcyxcblx0XHRcdC8vIGJ1dCBpdCB3b3VsZCBtZWFuIHRvIGRlZmluZSBlaWdodCAoZm9yIGV2ZXJ5IHByb2JsZW1hdGljIHByb3BlcnR5KSBpZGVudGljYWwgZnVuY3Rpb25zXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKFwic2V0XCIgaW4gaG9va3MpIHx8ICh2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkpICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHwgKCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggZWxlbS5zdHlsZSwgb3JpZ05hbWUgKSApO1xuXG5cdFx0Ly8gZ2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvblxuXHRcdC8vIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly9jb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiwgY29udmVydGluZyB0byBudW1iZXIgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgalF1ZXJ5LmlzTnVtZXJpYyggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHQvLyBjZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gaG93ZXZlciwgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdCBmcm9tIHRoaXNcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiYgZWxlbS5vZmZzZXRXaWR0aCA9PT0gMCA/XG5cdFx0XHRcdFx0alF1ZXJ5LnN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIGV4dHJhID9cblx0XHRcdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCkgOiAwXG5cdFx0XHQpO1xuXHRcdH1cblx0fTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xualF1ZXJ5LmNzc0hvb2tzLm1hcmdpblJpZ2h0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0Ly8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0XG5cdFx0XHQvLyBXb3JrIGFyb3VuZCBieSB0ZW1wb3JhcmlseSBzZXR0aW5nIGVsZW1lbnQgZGlzcGxheSB0byBpbmxpbmUtYmxvY2tcblx0XHRcdHJldHVybiBqUXVlcnkuc3dhcCggZWxlbSwgeyBcImRpc3BsYXlcIjogXCJpbmxpbmUtYmxvY2tcIiB9LFxuXHRcdFx0XHRjdXJDU1MsIFsgZWxlbSwgXCJtYXJnaW5SaWdodFwiIF0gKTtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIGFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KFwiIFwiKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbiggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBcInN3aW5nXCI7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmXG5cdFx0XHRcdCghdHdlZW4uZWxlbS5zdHlsZSB8fCB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCkgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIHBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlsc1xuXHRcdFx0Ly8gc28sIHNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0LlxuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcyBpcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdC8vIHVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0IC0gdXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlIC0gdXNlIC5zdHlsZSBpZiBpdHNcblx0XHRcdC8vIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLnN0eWxlICYmICggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8IGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUU5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblxuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH1cbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIENvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCB0aW1lcklkLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cmZ4bnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKSxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC8sXG5cdGFuaW1hdGlvblByZWZpbHRlcnMgPSBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblx0dHdlZW5lcnMgPSB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKSxcblx0XHRcdFx0dGFyZ2V0ID0gdHdlZW4uY3VyKCksXG5cdFx0XHRcdHBhcnRzID0gcmZ4bnVtLmV4ZWMoIHZhbHVlICksXG5cdFx0XHRcdHVuaXQgPSBwYXJ0cyAmJiBwYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0XHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0XHRcdHN0YXJ0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICt0YXJnZXQgKSAmJlxuXHRcdFx0XHRcdHJmeG51bS5leGVjKCBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCBwcm9wICkgKSxcblx0XHRcdFx0c2NhbGUgPSAxLFxuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMjA7XG5cblx0XHRcdGlmICggc3RhcnQgJiYgc3RhcnRbIDMgXSAhPT0gdW5pdCApIHtcblx0XHRcdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdFx0XHR1bml0ID0gdW5pdCB8fCBzdGFydFsgMyBdO1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHRcdFx0cGFydHMgPSBwYXJ0cyB8fCBbXTtcblxuXHRcdFx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdFx0XHRzdGFydCA9ICt0YXJnZXQgfHwgMTtcblxuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZypcblx0XHRcdFx0XHQvLyBVc2UgYSBzdHJpbmcgZm9yIGRvdWJsaW5nIGZhY3RvciBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xuXG5cdFx0XHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxuXHRcdFx0XHRcdHN0YXJ0ID0gc3RhcnQgLyBzY2FsZTtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHByb3AsIHN0YXJ0ICsgdW5pdCApO1xuXG5cdFx0XHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpXG5cdFx0XHRcdC8vIEFuZCBicmVha2luZyB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoXG5cdFx0XHRcdH0gd2hpbGUgKCBzY2FsZSAhPT0gKHNjYWxlID0gdHdlZW4uY3VyKCkgLyB0YXJnZXQpICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9ucyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVcGRhdGUgdHdlZW4gcHJvcGVydGllc1xuXHRcdFx0aWYgKCBwYXJ0cyApIHtcblx0XHRcdFx0c3RhcnQgPSB0d2Vlbi5zdGFydCA9ICtzdGFydCB8fCArdGFyZ2V0IHx8IDA7XG5cdFx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0XHQvLyBJZiBhICs9Ly09IHRva2VuIHdhcyBwcm92aWRlZCwgd2UncmUgZG9pbmcgYSByZWxhdGl2ZSBhbmltYXRpb25cblx0XHRcdFx0dHdlZW4uZW5kID0gcGFydHNbIDEgXSA/XG5cdFx0XHRcdFx0c3RhcnQgKyAoIHBhcnRzWyAxIF0gKyAxICkgKiBwYXJ0c1sgMiBdIDpcblx0XHRcdFx0XHQrcGFydHNbIDIgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9O1xuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSk7XG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIGlmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gaWYgd2UgZG9uJ3QgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNCA7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCB0d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCB0d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICh0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApKSApIHtcblxuXHRcdFx0Ly8gd2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIHR3ZWVuLCBob29rcywgb2xkZmlyZSwgZGlzcGxheSwgY2hlY2tEaXNwbGF5LFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbiggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YV9wcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIGhhbmRsZSBxdWV1ZTogZmFsc2UgcHJvbWlzZXNcblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gZG9pbmcgdGhpcyBtYWtlcyBzdXJlIHRoYXQgdGhlIGNvbXBsZXRlIGhhbmRsZXIgd2lsbCBiZSBjYWxsZWRcblx0XHRcdC8vIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBoZWlnaHQvd2lkdGggb3ZlcmZsb3cgcGFzc1xuXHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcImhlaWdodFwiIGluIHByb3BzIHx8IFwid2lkdGhcIiBpbiBwcm9wcyApICkge1xuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG5vdGhpbmcgc25lYWtzIG91dFxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUU5LTEwIGRvIG5vdFxuXHRcdC8vIGNoYW5nZSB0aGUgb3ZlcmZsb3cgYXR0cmlidXRlIHdoZW4gb3ZlcmZsb3dYIGFuZFxuXHRcdC8vIG92ZXJmbG93WSBhcmUgc2V0IHRvIHRoZSBzYW1lIHZhbHVlXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBTZXQgZGlzcGxheSBwcm9wZXJ0eSB0byBpbmxpbmUtYmxvY2sgZm9yIGhlaWdodC93aWR0aFxuXHRcdC8vIGFuaW1hdGlvbnMgb24gaW5saW5lIGVsZW1lbnRzIHRoYXQgYXJlIGhhdmluZyB3aWR0aC9oZWlnaHQgYW5pbWF0ZWRcblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblxuXHRcdC8vIFRlc3QgZGVmYXVsdCBkaXNwbGF5IGlmIGRpc3BsYXkgaXMgY3VycmVudGx5IFwibm9uZVwiXG5cdFx0Y2hlY2tEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgP1xuXHRcdFx0ZGF0YV9wcml2LmdldCggZWxlbSwgXCJvbGRkaXNwbGF5XCIgKSB8fCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheTtcblxuXHRcdGlmICggY2hlY2tEaXNwbGF5ID09PSBcImlubGluZVwiICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIHNob3cvaGlkZSBwYXNzXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMuZXhlYyggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgZGF0YVNob3cgbGVmdCBvdmVyIGZyb20gYSBzdG9wcGVkIGhpZGUgb3Igc2hvdyBhbmQgd2UgYXJlIGdvaW5nIHRvIHByb2NlZWQgd2l0aCBzaG93LCB3ZSBzaG91bGQgcHJldGVuZCB0byBiZSBoaWRkZW5cblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cblx0XHQvLyBBbnkgbm9uLWZ4IHZhbHVlIHN0b3BzIHVzIGZyb20gcmVzdG9yaW5nIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlXG5cdFx0fSBlbHNlIHtcblx0XHRcdGRpc3BsYXkgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGFTaG93ID0gZGF0YV9wcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwge30gKTtcblx0XHR9XG5cblx0XHQvLyBzdG9yZSBzdGF0ZSBpZiBpdHMgdG9nZ2xlIC0gZW5hYmxlcyAuc3RvcCgpLnRvZ2dsZSgpIHRvIFwicmV2ZXJzZVwiXG5cdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdH1cblx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdGpRdWVyeSggZWxlbSApLnNob3coKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YW5pbS5kb25lKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5oaWRlKCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0YW5pbS5kb25lKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHByb3A7XG5cblx0XHRcdGRhdGFfcHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHR0d2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXG5cdFx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0XHR0d2Vlbi5lbmQgPSB0d2Vlbi5zdGFydDtcblx0XHRcdFx0XHR0d2Vlbi5zdGFydCA9IHByb3AgPT09IFwid2lkdGhcIiB8fCBwcm9wID09PSBcImhlaWdodFwiID8gMSA6IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0Ly8gSWYgdGhpcyBpcyBhIG5vb3AgbGlrZSAuaGlkZSgpLmhpZGUoKSwgcmVzdG9yZSBhbiBvdmVyd3JpdHRlbiBkaXNwbGF5IHZhbHVlXG5cdH0gZWxzZSBpZiAoIChkaXNwbGF5ID09PSBcIm5vbmVcIiA/IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5KSA9PT0gXCJpbmxpbmVcIiApIHtcblx0XHRzdHlsZS5kaXNwbGF5ID0gZGlzcGxheTtcblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gbm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbnQgb3ZlcndyaXRlIGtleXMgYWxyZWFkeSBwcmVzZW50LlxuXHRcdFx0Ly8gYWxzbyAtIHJldXNpbmcgJ2luZGV4JyBmcm9tIGFib3ZlIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gYW5pbWF0aW9uUHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gZG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0pLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXHRcdFx0XHQvLyBhcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgMSAtICggMC41IHx8IDAgKSAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSk7XG5cblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSh7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7IHNwZWNpYWxFYXNpbmc6IHt9IH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXHRcdFx0XHRcdC8vIGlmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWVcblx0XHRcdFx0Ly8gb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0pLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gYW5pbWF0aW9uUHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0pXG5cdCk7XG5cblx0Ly8gYXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0cmV0dXJuIGFuaW1hdGlvbi5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLnNwbGl0KFwiIFwiKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0dHdlZW5lcnNbIHByb3AgXSA9IHR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHR0d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdGFuaW1hdGlvblByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YW5pbWF0aW9uUHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4Lm9mZiA/IDAgOiB0eXBlb2Ygb3B0LmR1cmF0aW9uID09PSBcIm51bWJlclwiID8gb3B0LmR1cmF0aW9uIDpcblx0XHRvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyA/IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdIDogalF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblxuXHQvLyBub3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBzaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBhbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YV9wcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YV9wcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgKHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUpICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBzdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkXG5cdFx0XHQvLyB0aW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoIHdpbGwgZGVxdWV1ZVxuXHRcdFx0Ly8gYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmRcblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YV9wcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBlbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIGVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBsb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gbG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gdHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKHtcblx0c2xpZGVEb3duOiBnZW5GeChcInNob3dcIiksXG5cdHNsaWRlVXA6IGdlbkZ4KFwiaGlkZVwiKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KFwidG9nZ2xlXCIpLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0pO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblx0XHQvLyBDaGVja3MgdGhlIHRpbWVyIGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlbW92ZWRcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRpZiAoIHRpbWVyKCkgKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnRpbWVycy5wb3AoKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5cbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoICF0aW1lcklkICkge1xuXHRcdHRpbWVySWQgPSBzZXRJbnRlcnZhbCggalF1ZXJ5LmZ4LnRpY2ssIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRjbGVhckludGVydmFsKCB0aW1lcklkICk7XG5cdHRpbWVySWQgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSk7XG59O1xuXG5cbihmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBpT1MgNS4xLCBBbmRyb2lkIDQueCwgQW5kcm9pZCAyLjNcblx0Ly8gQ2hlY2sgdGhlIGRlZmF1bHQgY2hlY2tib3gvcmFkaW8gdmFsdWUgKFwiXCIgb24gb2xkIFdlYktpdDsgXCJvblwiIGVsc2V3aGVyZSlcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gTXVzdCBhY2Nlc3MgdGhlIHBhcmVudCB0byBtYWtlIGFuIG9wdGlvbiBzZWxlY3QgcHJvcGVybHlcblx0Ly8gU3VwcG9ydDogSUU5LCBJRTEwXG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIG9wdGlvbnMgaW5zaWRlIGRpc2FibGVkIHNlbGVjdHMgYXJlbid0IG1hcmtlZCBhcyBkaXNhYmxlZFxuXHQvLyAoV2ViS2l0IG1hcmtzIHRoZW0gYXMgZGlzYWJsZWQpXG5cdHNlbGVjdC5kaXNhYmxlZCA9IHRydWU7XG5cdHN1cHBvcnQub3B0RGlzYWJsZWQgPSAhb3B0LmRpc2FibGVkO1xuXG5cdC8vIENoZWNrIGlmIGFuIGlucHV0IG1haW50YWlucyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHQvLyBTdXBwb3J0OiBJRTksIElFMTBcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSkoKTtcblxuXG52YXIgbm9kZUhvb2ssIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gZG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gc3RydW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBhdHRyaWJ1dGVzIGFyZSBsb3dlcmNhc2Vcblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogbm9kZUhvb2sgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/XG5cdFx0XHRcdHVuZGVmaW5lZCA6XG5cdFx0XHRcdHJldDtcblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLCBwcm9wTmFtZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKG5hbWUgPSBhdHRyTmFtZXNbaSsrXSkgKSB7XG5cdFx0XHRcdHByb3BOYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXG5cdFx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBnZXQgc3BlY2lhbCB0cmVhdG1lbnQgKCMxMDg3MClcblx0XHRcdFx0aWYgKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0XHQvLyBTZXQgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB0byBmYWxzZVxuXHRcdFx0XHRcdGVsZW1bIHByb3BOYW1lIF0gPSBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0Ly8gU2V0dGluZyB0aGUgdHlwZSBvbiBhIHJhZGlvIGJ1dHRvbiBhZnRlciB0aGUgdmFsdWUgcmVzZXRzIHRoZSB2YWx1ZSBpbiBJRTYtOVxuXHRcdFx0XHRcdC8vIFJlc2V0IHZhbHVlIHRvIGRlZmF1bHQgaW4gY2FzZSB0eXBlIGlzIHNldCBhZnRlciB2YWx1ZSBkdXJpbmcgY3JlYXRpb25cblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGU7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBuYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59KTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fSxcblxuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsIG5vdHhtbCxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIGRvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG5vdHhtbCA9IG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKTtcblxuXHRcdGlmICggbm90eG1sICkge1xuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybiBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyZXQgOlxuXHRcdFx0XHQoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApKSAhPT0gbnVsbCA/XG5cdFx0XHRcdHJldCA6XG5cdFx0XHRcdGVsZW1bIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmhhc0F0dHJpYnV0ZSggXCJ0YWJpbmRleFwiICkgfHwgcmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHwgZWxlbS5ocmVmID9cblx0XHRcdFx0XHRlbGVtLnRhYkluZGV4IDpcblx0XHRcdFx0XHQtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTkrXG4vLyBTZWxlY3RlZG5lc3MgZm9yIGFuIG9wdGlvbiBpbiBhbiBvcHRncm91cCBjYW4gYmUgaW5hY2N1cmF0ZVxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaChbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSk7XG5cblxuXG5cbnZhciByY2xhc3MgPSAvW1xcdFxcclxcblxcZl0vZztcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRwcm9jZWVkID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgdGhpcy5jbGFzc05hbWUgKSApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCBwcm9jZWVkICkge1xuXHRcdFx0Ly8gVGhlIGRpc2p1bmN0aW9uIGhlcmUgaXMgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSByZW1vdmVDbGFzcylcblx0XHRcdGNsYXNzZXMgPSAoIHZhbHVlIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggZWxlbS5jbGFzc05hbWUgP1xuXHRcdFx0XHRcdCggXCIgXCIgKyBlbGVtLmNsYXNzTmFtZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApIDpcblx0XHRcdFx0XHRcIiBcIlxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGNsYXp6ID0gY2xhc3Nlc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gb25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0galF1ZXJ5LnRyaW0oIGN1ciApO1xuXHRcdFx0XHRcdGlmICggZWxlbS5jbGFzc05hbWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmNsYXNzTmFtZSA9IGZpbmFsVmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdHByb2NlZWQgPSBhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGg7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lICkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiAoIHByb2NlZWQgKSB7XG5cdFx0XHRjbGFzc2VzID0gKCB2YWx1ZSB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXTtcblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIGVsZW0uY2xhc3NOYW1lID9cblx0XHRcdFx0XHQoIFwiIFwiICsgZWxlbS5jbGFzc05hbWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKSA6XG5cdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGNsYXp6ID0gY2xhc3Nlc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID49IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gb25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gdmFsdWUgPyBqUXVlcnkudHJpbSggY3VyICkgOiBcIlwiO1xuXHRcdFx0XHRcdGlmICggZWxlbS5jbGFzc05hbWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmNsYXNzTmFtZSA9IGZpbmFsVmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyggdmFsdWUuY2FsbCh0aGlzLCBpLCB0aGlzLmNsYXNzTmFtZSwgc3RhdGVWYWwpLCBzdGF0ZVZhbCApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0Ly8gdG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0dmFyIGNsYXNzTmFtZSxcblx0XHRcdFx0XHRpID0gMCxcblx0XHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoIChjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSkgKSB7XG5cdFx0XHRcdFx0Ly8gY2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IHN0cnVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0aWYgKCB0aGlzLmNsYXNzTmFtZSApIHtcblx0XHRcdFx0XHQvLyBzdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YV9wcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIHRoaXMuY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBcImZhbHNlXCIsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0dGhpcy5jbGFzc05hbWUgPSB0aGlzLmNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgPyBcIlwiIDogZGF0YV9wcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdGlmICggdGhpc1tpXS5ub2RlVHlwZSA9PT0gMSAmJiAoXCIgXCIgKyB0aGlzW2ldLmNsYXNzTmFtZSArIFwiIFwiKS5yZXBsYWNlKHJjbGFzcywgXCIgXCIpLmluZGV4T2YoIGNsYXNzTmFtZSApID49IDAgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1swXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0Ly8gaGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRcdHJldC5yZXBsYWNlKHJyZXR1cm4sIFwiXCIpIDpcblx0XHRcdFx0XHQvLyBoYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0XHRyZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoXCJzZXRcIiBpbiBob29rcykgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTAtMTErXG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdGpRdWVyeS50cmltKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIiB8fCBpbmRleCA8IDAsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoLFxuXHRcdFx0XHRcdGkgPSBpbmRleCA8IDAgP1xuXHRcdFx0XHRcdFx0bWF4IDpcblx0XHRcdFx0XHRcdG9uZSA/IGluZGV4IDogMDtcblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIElFNi05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCggc3VwcG9ydC5vcHREaXNhYmxlZCA/ICFvcHRpb24uZGlzYWJsZWQgOiBvcHRpb24uZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PT0gbnVsbCApICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8ICFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cdFx0XHRcdFx0aWYgKCAob3B0aW9uLnNlbGVjdGVkID0galF1ZXJ5LmluQXJyYXkoIG9wdGlvbi52YWx1ZSwgdmFsdWVzICkgPj0gMCkgKSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaChbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoZWxlbSkudmFsKCksIHZhbHVlICkgPj0gMCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gU3VwcG9ydDogV2Via2l0XG5cdFx0XHQvLyBcIlwiIGlzIHJldHVybmVkIGluc3RlYWQgb2YgXCJvblwiIGlmIGEgdmFsdWUgaXNuJ3Qgc3BlY2lmaWVkXG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5qUXVlcnkuZWFjaCggKFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IGxvYWQgcmVzaXplIHNjcm9sbCB1bmxvYWQgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGVycm9yIGNvbnRleHRtZW51XCIpLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fSxcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOiB0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSk7XG5cblxudmFyIG5vbmNlID0galF1ZXJ5Lm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKC9cXD8vKTtcblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG4vLyBXb3JrYXJvdW5kIGZhaWx1cmUgdG8gc3RyaW5nLWNhc3QgbnVsbCBpbnB1dFxualF1ZXJ5LnBhcnNlSlNPTiA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSArIFwiXCIgKTtcbn07XG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWwsIHRtcDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFOVxuXHR0cnkge1xuXHRcdHRtcCA9IG5ldyBET01QYXJzZXIoKTtcblx0XHR4bWwgPSB0bXAucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdC8vIERvY3VtZW50IGxvY2F0aW9uXG5cdGFqYXhMb2NQYXJ0cyxcblx0YWpheExvY2F0aW9uLFxuXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRydHMgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cdHJ1cmwgPSAvXihbXFx3ListXSs6KSg/OlxcL1xcLyg/OlteXFwvPyNdKkB8KShbXlxcLz8jOl0qKSg/OjooXFxkKyl8KXwpLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KFwiKlwiKTtcblxuLy8gIzgxMzgsIElFIG1heSB0aHJvdyBhbiBleGNlcHRpb24gd2hlbiBhY2Nlc3Npbmdcbi8vIGEgZmllbGQgZnJvbSB3aW5kb3cubG9jYXRpb24gaWYgZG9jdW1lbnQuZG9tYWluIGhhcyBiZWVuIHNldFxudHJ5IHtcblx0YWpheExvY2F0aW9uID0gbG9jYXRpb24uaHJlZjtcbn0gY2F0Y2goIGUgKSB7XG5cdC8vIFVzZSB0aGUgaHJlZiBhdHRyaWJ1dGUgb2YgYW4gQSBlbGVtZW50XG5cdC8vIHNpbmNlIElFIHdpbGwgbW9kaWZ5IGl0IGdpdmVuIGRvY3VtZW50LmxvY2F0aW9uXG5cdGFqYXhMb2NhdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdGFqYXhMb2NhdGlvbi5ocmVmID0gXCJcIjtcblx0YWpheExvY2F0aW9uID0gYWpheExvY2F0aW9uLmhyZWY7XG59XG5cbi8vIFNlZ21lbnQgbG9jYXRpb24gaW50byBwYXJ0c1xuYWpheExvY1BhcnRzID0gcnVybC5leGVjKCBhamF4TG9jYXRpb24udG9Mb3dlckNhc2UoKSApIHx8IFtdO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoZGF0YVR5cGUgPSBkYXRhVHlwZXNbaSsrXSkgKSB7XG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbMF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdChzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10pLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiYgIXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoZGVlcCA9IHt9KSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWzBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgc1sgXCJ0aHJvd3NcIiBdICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHsgc3RhdGU6IFwicGFyc2VyZXJyb3JcIiwgZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50IH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBhamF4TG9jYXRpb24sXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBhamF4TG9jUGFydHNbIDEgXSApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL3htbC8sXG5cdFx0XHRodG1sOiAvaHRtbC8sXG5cdFx0XHRqc29uOiAvanNvbi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogalF1ZXJ5LnBhcnNlSlNPTixcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXHRcdFx0Ly8gQ3Jvc3MtZG9tYWluIGRldGVjdGlvbiB2YXJzXG5cdFx0XHRwYXJ0cyxcblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiYgKCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdGpRdWVyeS5ldmVudCxcblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXHRcdFx0Ly8gVGhlIGpxWEhSIHN0YXRlXG5cdFx0XHRzdGF0ZSA9IDAsXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlID09PSAyID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0dmFyIGxuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFjayBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApLmNvbXBsZXRlID0gY29tcGxldGVEZWZlcnJlZC5hZGQ7XG5cdFx0anFYSFIuc3VjY2VzcyA9IGpxWEhSLmRvbmU7XG5cdFx0anFYSFIuZXJyb3IgPSBqcVhIUi5mYWlsO1xuXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggY2hhcmFjdGVyICgjNzUzMTogYW5kIHN0cmluZyBwcm9tb3Rpb24pXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgYWpheExvY2F0aW9uICkgKyBcIlwiICkucmVwbGFjZSggcmhhc2gsIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgYWpheExvY1BhcnRzWyAxIF0gKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSBqUXVlcnkudHJpbSggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHdlIGhhdmUgYSBwcm90b2NvbDpob3N0OnBvcnQgbWlzbWF0Y2hcblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHBhcnRzID0gcnVybC5leGVjKCBzLnVybC50b0xvd2VyQ2FzZSgpICk7XG5cdFx0XHRzLmNyb3NzRG9tYWluID0gISEoIHBhcnRzICYmXG5cdFx0XHRcdCggcGFydHNbIDEgXSAhPT0gYWpheExvY1BhcnRzWyAxIF0gfHwgcGFydHNbIDIgXSAhPT0gYWpheExvY1BhcnRzWyAyIF0gfHxcblx0XHRcdFx0XHQoIHBhcnRzWyAzIF0gfHwgKCBwYXJ0c1sgMSBdID09PSBcImh0dHA6XCIgPyBcIjgwXCIgOiBcIjQ0M1wiICkgKSAhPT1cblx0XHRcdFx0XHRcdCggYWpheExvY1BhcnRzWyAzIF0gfHwgKCBhamF4TG9jUGFydHNbIDEgXSA9PT0gXCJodHRwOlwiID8gXCI4MFwiIDogXCI0NDNcIiApICkgKVxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdGZpcmVHbG9iYWxzID0gcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHRjYWNoZVVSTCA9IHMudXJsO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9ICggcy51cmwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YSApO1xuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBhbnRpLWNhY2hlIGluIHVybCBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdHMudXJsID0gcnRzLnRlc3QoIGNhY2hlVVJMICkgP1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhICdfJyBwYXJhbWV0ZXIsIHNldCBpdHMgdmFsdWVcblx0XHRcdFx0XHRjYWNoZVVSTC5yZXBsYWNlKCBydHMsIFwiJDFfPVwiICsgbm9uY2UrKyApIDpcblxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSBhZGQgb25lIHRvIHRoZSBlbmRcblx0XHRcdFx0XHRjYWNoZVVSTCArICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyBub25jZSsrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gKyAoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJiAoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IHN0YXRlID09PSAyICkgKSB7XG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIGFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Zm9yICggaSBpbiB7IHN1Y2Nlc3M6IDEsIGVycm9yOiAxLCBjb21wbGV0ZTogMSB9ICkge1xuXHRcdFx0anFYSFJbIGkgXSggc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KFwidGltZW91dFwiKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHN0YXRlID0gMTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0Ly8gUHJvcGFnYXRlIGV4Y2VwdGlvbiBhcyBlcnJvciBpZiBub3QgZG9uZVxuXHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcblx0XHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0XHQvLyBTaW1wbHkgcmV0aHJvdyBvdGhlcndpc2Vcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gQ2FsbGVkIG9uY2Vcblx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdGUgaXMgXCJkb25lXCIgbm93XG5cdFx0XHRzdGF0ZSA9IDI7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gV2UgZXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHRcblx0XHRcdFx0Ly8gdGhlbiBub3JtYWxpemUgc3RhdHVzVGV4dCBhbmQgc3RhdHVzIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cdFx0Ly8gc2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9KTtcblx0fTtcbn0pO1xuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFsgXCJhamF4U3RhcnRcIiwgXCJhamF4U3RvcFwiLCBcImFqYXhDb21wbGV0ZVwiLCBcImFqYXhFcnJvclwiLCBcImFqYXhTdWNjZXNzXCIsIFwiYWpheFNlbmRcIiBdLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59KTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoe1xuXHRcdHVybDogdXJsLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9KTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbC5jYWxsKHRoaXMsIGkpICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9KS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKHRoaXMsIGkpICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwodGhpcywgaSkgOiBodG1sICk7XG5cdFx0fSk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImJvZHlcIiApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0XHR9XG5cdFx0fSkuZW5kKCk7XG5cdH1cbn0pO1xuXG5cbmpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIFN1cHBvcnQ6IE9wZXJhIDw9IDEyLjEyXG5cdC8vIE9wZXJhIHJlcG9ydHMgb2Zmc2V0V2lkdGhzIGFuZCBvZmZzZXRIZWlnaHRzIGxlc3MgdGhhbiB6ZXJvIG9uIHNvbWUgZWxlbWVudHNcblx0cmV0dXJuIGVsZW0ub2Zmc2V0V2lkdGggPD0gMCAmJiBlbGVtLm9mZnNldEhlaWdodCA8PSAwO1xufTtcbmpRdWVyeS5leHByLmZpbHRlcnMudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuKCBlbGVtICk7XG59O1xuXG5cblxuXG52YXIgcjIwID0gLyUyMC9nLFxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBvYmogKSApIHtcblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgPyBpIDogXCJcIiApICsgXCJdXCIsIHYsIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHJldHVybiBpdHMgdmFsdWVcblx0XHRcdHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgPyB2YWx1ZSgpIDogKCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gU2V0IHRyYWRpdGlvbmFsIHRvIHRydWUgZm9yIGpRdWVyeSA8PSAxLjMuMiBiZWhhdmlvci5cblx0aWYgKCB0cmFkaXRpb25hbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHRyYWRpdGlvbmFsID0galF1ZXJ5LmFqYXhTZXR0aW5ncyAmJiBqUXVlcnkuYWpheFNldHRpbmdzLnRyYWRpdGlvbmFsO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBqUXVlcnkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0pO1xuXG5cdH0gZWxzZSB7XG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSlcblx0XHQuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9KVxuXHRcdC5tYXAoZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdHJldHVybiB2YWwgPT0gbnVsbCA/XG5cdFx0XHRcdG51bGwgOlxuXHRcdFx0XHRqUXVlcnkuaXNBcnJheSggdmFsICkgP1xuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9KS5nZXQoKTtcblx0fVxufSk7XG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2goIGUgKSB7fVxufTtcblxudmFyIHhocklkID0gMCxcblx0eGhyQ2FsbGJhY2tzID0ge30sXG5cdHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cdFx0Ly8gZmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbi8vIFN1cHBvcnQ6IElFOVxuLy8gT3BlbiByZXF1ZXN0cyBtdXN0IGJlIG1hbnVhbGx5IGFib3J0ZWQgb24gdW5sb2FkICgjNTI4MClcbmlmICggd2luZG93LkFjdGl2ZVhPYmplY3QgKSB7XG5cdGpRdWVyeSggd2luZG93ICkub24oIFwidW5sb2FkXCIsIGZ1bmN0aW9uKCkge1xuXHRcdGZvciAoIHZhciBrZXkgaW4geGhyQ2FsbGJhY2tzICkge1xuXHRcdFx0eGhyQ2FsbGJhY2tzWyBrZXkgXSgpO1xuXHRcdH1cblx0fSk7XG59XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydChmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCksXG5cdFx0XHRcdFx0aWQgPSArK3hocklkO1xuXG5cdFx0XHRcdHhoci5vcGVuKCBvcHRpb25zLnR5cGUsIG9wdGlvbnMudXJsLCBvcHRpb25zLmFzeW5jLCBvcHRpb25zLnVzZXJuYW1lLCBvcHRpb25zLnBhc3N3b3JkICk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSB4aHJDYWxsYmFja3NbIGlkIF07XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0geGhyLm9ubG9hZCA9IHhoci5vbmVycm9yID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBBY2Nlc3NpbmcgYmluYXJ5LWRhdGEgcmVzcG9uc2VUZXh0IHRocm93cyBhbiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHRcdC8vICgjMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCA9PT0gXCJzdHJpbmdcIiA/IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGV4dDogeGhyLnJlc3BvbnNlVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0fSA6IHVuZGVmaW5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdHhoci5vbmVycm9yID0gY2FsbGJhY2soXCJlcnJvclwiKTtcblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0geGhyQ2FsbGJhY2tzWyBpZCBdID0gY2FsbGJhY2soXCJhYm9ydFwiKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0pO1xuXG5cblxuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCh7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogLyg/OmphdmF8ZWNtYSlzY3JpcHQvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59KTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeShcIjxzY3JpcHQ+XCIpLnByb3Aoe1xuXHRcdFx0XHRcdGFzeW5jOiB0cnVlLFxuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdH0pLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59KTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59KTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJiAhKCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpICYmIHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBmb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gUmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblx0XHRcdFx0Ly8gbWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBzYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0pO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0pO1xuXG5cblxuXG4vLyBkYXRhOiBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LCBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdHZhciBwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKSxcblx0XHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbMV0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0galF1ZXJ5LmJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8vIEtlZXAgYSBjb3B5IG9mIHRoZSBvbGQgbG9hZCBtZXRob2RcbnZhciBfbG9hZCA9IGpRdWVyeS5mbi5sb2FkO1xuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHRpZiAoIHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIgJiYgX2xvYWQgKSB7XG5cdFx0cmV0dXJuIF9sb2FkLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0fVxuXG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoXCIgXCIpO1xuXG5cdGlmICggb2ZmID49IDAgKSB7XG5cdFx0c2VsZWN0b3IgPSBqUXVlcnkudHJpbSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBpZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkXG5cdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSkuZG9uZShmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeShcIjxkaXY+XCIpLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdH0pLmNvbXBsZXRlKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggY2FsbGJhY2ssIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9KS5sZW5ndGg7XG59O1xuXG5cblxuXG52YXIgZG9jRWxlbSA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbi8qKlxuICogR2V0cyBhIHdpbmRvdyBmcm9tIGFuIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmlzV2luZG93KCBlbGVtICkgPyBlbGVtIDogZWxlbS5ub2RlVHlwZSA9PT0gOSAmJiBlbGVtLmRlZmF1bHRWaWV3O1xufVxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoXCJhdXRvXCIpID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlciB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGN1ck9mZnNldCApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dmFyIGRvY0VsZW0sIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRib3ggPSB7IHRvcDogMCwgbGVmdDogMCB9LFxuXHRcdFx0ZG9jID0gZWxlbSAmJiBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRpZiAoICFkb2MgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHQvLyBNYWtlIHN1cmUgaXQncyBub3QgYSBkaXNjb25uZWN0ZWQgRE9NIG5vZGVcblx0XHRpZiAoICFqUXVlcnkuY29udGFpbnMoIGRvY0VsZW0sIGVsZW0gKSApIHtcblx0XHRcdHJldHVybiBib3g7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZG9uJ3QgaGF2ZSBnQkNSLCBqdXN0IHVzZSAwLDAgcmF0aGVyIHRoYW4gZXJyb3Jcblx0XHQvLyBCbGFja0JlcnJ5IDUsIGlPUyAzIChvcmlnaW5hbCBpUGhvbmUpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QgIT09IHN0cnVuZGVmaW5lZCApIHtcblx0XHRcdGJveCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0fVxuXHRcdHdpbiA9IGdldFdpbmRvdyggZG9jICk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogYm94LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuXHRcdFx0bGVmdDogYm94LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnRcblx0XHR9O1xuXHR9LFxuXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LCBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cdFx0XHQvLyBXZSBhc3N1bWUgdGhhdCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgYXZhaWxhYmxlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuXHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCB8fCBkb2NFbGVtO1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudCwgXCJodG1sXCIgKSAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jRWxlbTtcblx0XHR9KTtcblx0fVxufSk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblx0XHRcdHZhciB3aW4gPSBnZXRXaW5kb3coIGVsZW0gKTtcblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbmRvdy5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW5kb3cucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGgsIG51bGwgKTtcblx0fTtcbn0pO1xuXG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwgd2UganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblx0XHRcdFx0Ly8gaWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59KTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LCBmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblx0XHQvLyBtYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdFx0Ly8gQXMgb2YgNS84LzIwMTIgdGhpcyB3aWxsIHlpZWxkIGluY29ycmVjdCByZXN1bHRzIGZvciBNb2JpbGUgU2FmYXJpLCBidXQgdGhlcmVcblx0XHRcdFx0XHQvLyBpc24ndCBhIHdob2xlIGxvdCB3ZSBjYW4gZG8uIFNlZSBwdWxsIHJlcXVlc3QgYXQgdGhpcyBVUkwgZm9yIGRpc2N1c3Npb246XG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC83NjRcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlLCBudWxsICk7XG5cdFx0fTtcblx0fSk7XG59KTtcblxuXG4vLyBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIGNvbnRhaW5lZCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldFxualF1ZXJ5LmZuLnNpemUgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMubGVuZ3RoO1xufTtcblxualF1ZXJ5LmZuLmFuZFNlbGYgPSBqUXVlcnkuZm4uYWRkQmFjaztcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9KTtcbn1cblxuXG5cblxudmFyXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpblxuLy8gQU1EICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBzdHJ1bmRlZmluZWQgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcblxufSkpO1xuIiwidmFyIF9zbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG52YXIgYXV0b3ByZWZpeGVyID0gcmVxdWlyZSgnYXV0b3ByZWZpeGVyLWNvcmUnKTtcbnZhciBQcm9taXNlID0gcmVxdWlyZSgnZXM2LXByb21pc2UnKS5Qcm9taXNlO1xuXG5pZiAoIWdsb2JhbC5kb2N1bWVudCkgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgcnVuIGFuaW1hdGUsIG5lZWQgYSBnbG9iYWwgZG9jdW1lbnQnKTtcblxuLyoqXG4gKiBwcml2YXRlIHZhcnNcbiAqL1xudmFyIF9nZW5lcmF0ZVNoZWV0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAkKCc8c3R5bGUvPicsIHtcbiAgICBjbGFzczogJ2FuaW1hdGUnLFxuICAgIGlkOiAnYW5pbWF0ZScsXG4gICAgdHlwZTogJ3RleHQvY3NzJ1xuICB9KS5hcHBlbmRUbygnaGVhZCcpWzBdLnNoZWV0O1xufTtcbnZhciBfcHJlZml4ID0gKGZ1bmN0aW9uKCkge1xuXHR2YXIgX3N0eWxlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xuXHR2YXIgX3ByZWZpeGVzID0gWydXZWJraXQnLCAnTW96JywgJ08nLCAnbXMnLCAnS2h0bWwnXTtcblx0dmFyIF9wcm9wID0gJ0FuaW1hdGlvbic7XG5cdHZhciBfbm9ybWFsID0gJyc7XG5cdHZhciBfZGFzaGVkID0gX25vcm1hbDtcblx0dmFyIF9zdXBwb3J0ZWQgPSBmYWxzZTtcblx0aWYgKF9wcm9wLnRvTG93ZXJDYXNlKCkgaW4gX3N0eWxlKSB7XG5cdFx0X3N1cHBvcnRlZCA9IHRydWU7XG5cdH0gZWxzZSB7XG5cdFx0Zm9yICh2YXIgX2kgPSAwOyBfaSA8IF9wcmVmaXhlcy5sZW5ndGg7IF9pKyspIHtcblx0XHRcdF9ub3JtYWwgPSBfcHJlZml4ZXNbX2ldO1xuXHRcdFx0dmFyIG5vcm1hbExvdyA9IF9ub3JtYWwudG9Mb3dlckNhc2UoKTtcblx0XHRcdHZhciB2ZW5kb3JQcm9wID0gbm9ybWFsTG93ICsgX3Byb3A7XG5cdFx0XHRpZiAodmVuZG9yUHJvcCBpbiBfc3R5bGUpIHtcblx0XHRcdFx0X2Rhc2hlZCA9IFsnLScsIG5vcm1hbExvdywgJy0nXS5qb2luKCcnKTtcblx0XHRcdFx0X3N1cHBvcnRlZCA9IHRydWU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRpZiAoIV9zdXBwb3J0ZWQpIHRocm93IG5ldyBFcnJvcignQ1NTMyBBbmltYXRpb25zIGFyZSBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3Nlci4gQW5pbWF0ZSBsaWJyYXJ5IHdpbGwgbm90IHdvcmsuJyk7XG5cdHJldHVybiB7bm9ybWFsOiBfbm9ybWFsLCBkYXNoZWQ6IF9kYXNoZWR9O1xufSkoKTtcbnZhciBfa2ZzID0gW107XG52YXIgX3NoZWV0ID0gX2dlbmVyYXRlU2hlZXQoKTtcbnZhciBfZXZlbnRQcmVmaXhlcyA9IFsnd2Via2l0JywgJ21veicsICdNUycsICdvJywgJyddO1xuXG52YXIgQW5pbWF0ZSA9IGZ1bmN0aW9uKF9ldmVudFByZWZpeGVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKF9zaGVldCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oX2tmcykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKF9wcmVmaXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oX2dlbmVyYXRlU2hlZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIEFuaW1hdGUgPSBmdW5jdGlvbiBBbmltYXRlKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucXVlcnkoc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQW5pbWF0ZS5wcm90b3R5cGUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oZXZlbnRUeXBlLCBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9wID0gMDsgX3AgPCBfZXZlbnRQcmVmaXhlcy5sZW5ndGg7IF9wKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2V2ZW50UHJlZml4ZXNbX3BdKSBldmVudFR5cGUgPSBldmVudFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZXZlbnQgPSBfZXZlbnRQcmVmaXhlc1tfcF0gKyBldmVudFR5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbHMub24oX2V2ZW50LCBsaXN0ZW5lci5iaW5kKG51bGwsIHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2ZmOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbihldmVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfcDIgPSAwOyBfcDIgPCBfZXZlbnRQcmVmaXhlcy5sZW5ndGg7IF9wMisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9ldmVudFByZWZpeGVzW19wMl0pIGV2ZW50VHlwZSA9IGV2ZW50VHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9ldmVudDIgPSBfZXZlbnRQcmVmaXhlc1tfcDJdICsgZXZlbnRUeXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWxzLm9mZihfZXZlbnQyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2Y6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKGtleWZyYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWtleWZyYW1lKSB0aHJvdyBuZXcgRXJyb3IoJy5rZiBleHBlY3RzIGEga2V5ZnJhbWUgb2JqZWN0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGtleWZyYW1lLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUga2V5ZnJhbWUubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSAna2V5ZnJhbWUtJyArIF9rZnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9rZXlmcmFtZVN0ciA9ICdAJyArIF9wcmVmaXguZGFzaGVkICsgJ2tleWZyYW1lcyAnICsgbmFtZSArICcgIHsnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2tleWZyYW1lUHJvcCBpbiBrZXlmcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfa2V5ZnJhbWVWYWx1ZSA9IGtleWZyYW1lW19rZXlmcmFtZVByb3BdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghTnVtYmVyLmlzTmFOKF9rZXlmcmFtZVByb3ApICYmIF9rZXlmcmFtZVByb3AgPj0gMCAmJiBfa2V5ZnJhbWVQcm9wIDw9IDEwMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9rZXlmcmFtZVByb3AgKz0gJyUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIF9rZXlmcmFtZVByb3AgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRXJyb3IoJ29iamVjdCBrZXkgbXVzdCBiZSBhIHN0cmluZyBvciBudW1iZXIgKDAtMTAwKScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9rZXlmcmFtZVN0ciArPSBfa2V5ZnJhbWVQcm9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfY3NzID0gJyB7ICc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3Byb3AyIGluIF9rZXlmcmFtZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jc3MgKz0gX3Byb3AyICsgJzonICsgX2tleWZyYW1lVmFsdWVbX3Byb3AyXSArICc7ICc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jc3MgKz0gJyB9JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfa2V5ZnJhbWVTdHIgKz0gYXV0b3ByZWZpeGVyLnByb2Nlc3MoX2NzcykuY3NzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2tleWZyYW1lU3RyICs9ICd9JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zaGVldC5pbnNlcnRSdWxlKF9rZXlmcmFtZVN0ciwgX3NoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfa2ZzLnB1c2gobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlmcmFtZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oa2YpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmtmKGtmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRLZXlmcmFtZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oa2V5ZnJhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmtmKGtleWZyYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvblJ1bGVzID0gX3NsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGFuaW1hdGlvblJ1bGVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2FuaW1hdGlvblByb3BlcnRpZXMgPSBhbmltYXRpb25SdWxlc1tfaTJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgX2FuaW1hdGlvblByb3BlcnRpZXMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hbmltYXRpb25Qcm9wZXJ0aWVzID0gJC5leHRlbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1pbmdGdW5jdGlvbjogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRpb25Db3VudDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbE1vZGU6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIF9hbmltYXRpb25Qcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FuaW1hdGlvblByb3BlcnRpZXMgPSBbX2FuaW1hdGlvblByb3BlcnRpZXMubmFtZSwgX2FuaW1hdGlvblByb3BlcnRpZXMuZHVyYXRpb24sIF9hbmltYXRpb25Qcm9wZXJ0aWVzLnRpbWluZ0Z1bmN0aW9uLCBfYW5pbWF0aW9uUHJvcGVydGllcy5kZWxheSwgX2FuaW1hdGlvblByb3BlcnRpZXMuaXRlcmF0aW9uQ291bnQsIF9hbmltYXRpb25Qcm9wZXJ0aWVzLmRpcmVjdGlvbiwgX2FuaW1hdGlvblByb3BlcnRpZXMuZmlsbE1vZGVdLmpvaW4oJyAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBfYW5pbWF0aW9uUHJvcGVydGllcyAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcignLnNldCBleHBlY3RzIGEgc3RyaW5nIG9yIGFuIGFuaW1hdGlvbiBvYmplY3QnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbnMucHVzaChfYW5pbWF0aW9uUHJvcGVydGllcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVscyA9ICQoc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbHMuY3NzKCdhbmltYXRpb24nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWZsb3cgaXMgbmVlZGVkIGZvciBhbmltYXRpb24gdG8gcmVzdGFydCBwcm9wZXJseVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWxzLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9mZignQW5pbWF0aW9uSXRlcmF0aW9uJykub2ZmKCdBbmltYXRpb25FbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnc3R5bGUuYW5pbWF0ZScpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zaGVldCA9IF9nZW5lcmF0ZVNoZWV0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXVzZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWxzLmNzcygnYW5pbWF0aW9uLXBsYXktc3RhdGUnLCAncGF1c2VkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdW1lOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVscy5jc3MoJ2FuaW1hdGlvbi1wbGF5LXN0YXRlJywgJ3J1bm5pbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVscy5jc3MoJ2FuaW1hdGlvbicsIHRoaXMuYW5pbWF0aW9ucy5qb2luKCcsJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXN1bWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbCh0aGlzLmFuaW1hdGlvbnMubWFwKCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbignQW5pbWF0aW9uRW5kJywgcmVzb2x2ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLnRoZW4oIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBbmltYXRlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH07XG59KF9ldmVudFByZWZpeGVzKShfc2hlZXQpKF9rZnMpKF9wcmVmaXgpKF9nZW5lcmF0ZVNoZWV0KSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuXHRyZXR1cm4gbmV3IEFuaW1hdGUoc2VsZWN0b3IpO1xufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDJodmJXVXZkR2x1WTJodkwyeHZZMkZzTDJGdWFXMWhkR1V2YkdsaUwybHVaR1Y0TG1weklpd2ljMjkxY21ObGN5STZXeUl2YUc5dFpTOTBhVzVqYUc4dmJHOWpZV3d2WVc1cGJXRjBaUzlzYVdJdmFXNWtaWGd1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenM3T3pzN1FVRkxXaXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE96czdPenR0UWtGTGFrVXNZVUZCVVR0RlFVTjRRaXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRk8wbEJRMjVDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMmhDTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTJJc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBWQlEycENMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRPVUk3V1VGRFZ5eEZRVUZGTEZsQlFVODdaVUZEVGl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRyUWtGRE5VSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WTBGRE1VTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOV0xFVkJRVVVzUTBGQlF6dG5Ra0ZEU0R0dFFrRkRSeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEY0VJc1EwRkJReXhGUVVGRkxFMUJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1VVRkJUeXhGUVVGRk8yMUNRVU51UWl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGNFSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRk8xRkJRMGdzUTBGQlF5eERRVUZETEVWQlFVVXNVVUZCVHl4RlFVRkZMRU5CUVVNc1MwRkJTU3hYUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJUdHZRa0ZETDBJc1YwRkJWU3hIUVVGRkxFTkJRVU03V1VGRGNFSXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1UwRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEY0VNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEU5QlFVMDdXVUZEYWtNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEZGQlFVOHNSVUZCUlR0M1FrRkRaQ3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03TWtKQlF6ZENMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEYUVJc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlExUTdVVUZEU2p0SlFVTktPMGxCUTBFc1EwRkJReXhGUVVGRkxFTkJRVU1zVjBGQlZTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOd1NDeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3huUWtGQlR5eHBRa0ZCVVN4RFFVRkRPMEZCUXpOQ0xFTkJRVU1zUTBGQlF5eERRVUZETzFOQlEwc3NSVUZCUlN4RFFVRkRPMWRCUTBRc1owSkJRV1VzUTBGQlF6dHRRa0ZEVWl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPenRKUVVVM1F5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenM3T3pzN096UkNRVUZPTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExHRkJRVTRzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkRTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjN05FSkJRMnhDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZET3pSQ1FVTndRaXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN2QwSkJReTlDT3p0blJFRktSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXpzN096dG5SRUZOVUN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVYzdhME5CUTNSQ0xFTkJRVU1zUTBGQlF5eEZRVUZGTEZGQlFVOHNSVUZCUlN4RFFVRkRMRXRCUVVrc1owSkJRV1VzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSExFTkJRVU1zUTBGQlF5eEZRVUZGTzI5RFFVTTNReXhEUVVGRExFVkJRVVVzUTBGQlF5eGxRVUZqTEVkQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZET3l0RFFVTm9SQ3huUWtGQlpTeEhRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdiME5CUTNaRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVMHNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJ0RFFVTm9SRHRyUTBGRFFTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJkRFFVTmlPenM3T3pzN1owUkJSVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWM3YTBOQlEySXNRMEZCUXl4RFFVRkRMRVZCUVVVc1UwRkJUeXhGUVVGRkxFTkJRVU1zVFVGQlNTeG5Ra0ZCWlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVN2IwTkJRemRETEVOQlFVTXNSVUZCUlN4RFFVRkRMR1ZCUVdNc1NVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owUkJRMmhFTEdkQ1FVRmxMRWxCUVVVc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenR2UTBGRGRrTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhSUVVGTkxFTkJRVU03YTBOQlEzUkNPMnREUVVOQkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WjBOQlEySTdPenM3T3p0blJFRkZTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjN2IwTkJRMVFzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRMEZETDBRc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03YjBOQlEzaENMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN2IwTkJRM0JDTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTzNkRFFVTlFMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNUVUZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzI5RFFVTnVRenR4UkVGRFowSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hUUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1IwRkJSeXhEUVVGRE8yOURRVU5zUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3h0UWtGQmEwSXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZPekpFUVVOaUxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExHTkJRV0U3ZDBOQlEzcERMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNZMEZCWVN4RlFVRkZMRU5CUVVNc1owSkJRV1VzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4blFrRkJaU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXpzd1JFRkRNMFFzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPM2REUVVOMlFqdDNRMEZEUVN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNaMEpCUVdVc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03Y1VSQlF6RkdMRU5CUVVNc1pVRkJZenN5UTBGRGVrSXNSVUZCUlN4RlFVRkZMRVZCUVVVN2QwTkJRMUlzUTBGQlF5eERRVUZETEVWQlFVVXNXVUZCVlN4RFFVRkRMR2RDUVVGbExFVkJRVVU3YVVSQlEzaENMRU5CUVVNc1UwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEdkQ1FVRmxMRTlCUVVzc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETzNkRFFVTnNSRHMyUTBGRFNTeERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN0swTkJRMHdzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRMEZETVVNN2FVUkJRMWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPekJEUVVOaUxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eGhRVUZaTEZGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzNkRFFVTnFSQ3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03YjBOQlEyUXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0blEwRkRaanM3T3pzN08yZEVRVVZUTEVOQlFVTXNSMEZCUnp0dlEwRkRWQ3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owTkJRM1JDT3pzN096czdaMFJCUlZrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhPMjlEUVVOc1FpeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owTkJRelZDT3pzN096czdPM2REUVVWUExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdiME5CUTJoQ0xFTkJRVU1zUTBGQlF5eEZRVUZGTEZOQlFVOHNSVUZCUlN4RFFVRkRMRTFCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZPMmxGUVVOd1FpeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGRk8zZERRVU14UXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNkVUpCUVhOQ0xFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTzJsRlFVTnlRaXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yZEVRVU16UWl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzJkRVFVTlNMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRuUkVGRFdpeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03WjBSQlEyeENMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0blJFRkRWQ3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1owUkJRMnhDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMmRFUVVOaUxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU03TkVOQlEyWXNRMEZCUXl4elFrRkJjVUlzUTBGQlF6dHBSVUZEU0N4RlFVRkZMSEZDUVVGdlFpeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc2MwSkJRWEZDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEhOQ1FVRnhRaXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4elFrRkJjVUlzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc2MwSkJRWEZDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExITkNRVUZ4UWl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMSE5DUVVGeFFpeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzNkRFFVTTFVRHQzUTBGRFFTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zZFVKQlFYTkNMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8zZERRVU0xUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc2NVSkJRVzlDTEVOQlFVTTdiME5CUXpkRE8yOURRVU5CTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdPenM3T3pzN1owUkJSMVFzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSE8yOURRVU5hTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlEUVVOMlFpeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJkRFFVTm1PenM3T3pzN2EwUkJSVkU3YjBOQlEwb3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdiME5CUTNCQ0xFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dHZRMEZET1VJc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMjlEUVVOd1JDeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WjBOQlEzSkNMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUTBGRGVrUTdPenM3T3p0clJFRkZUVHRyUTBGRFRpeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dDVRMEZEY2tJc1owSkJRV1VzUTBGQlF5eERRVUZETzJ0RFFVTjJRaXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRuUTBGRGNrSTdPenM3T3p0clJFRkZVVHRyUTBGRFRpeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJ0RFFVTXZReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yZERRVU5pT3pzN096czdhMFJCUlZjN2IwTkJRMHdzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzI5RFFVTm9SQ3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yZERRVU5tT3pzN096czdPenR2UTBGSFNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yOURRVU55UkN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yOURRVU5xUWl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMR0ZCUVZFN2MwTkJRelZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVlVGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGTE96WkRRVU40UWl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0elEwRkRiRU1zUTBGQlF5eERRVUZETzI5RFFVTktMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4aFFVRlJPM05EUVVOa0xFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0dlEwRkRja0lzUTBGQlF5eERRVUZET3pzN096c3JRa0YyU0VFc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdPenM3T3pzN096SkNRVFJJU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVMDdTVUZEZWtJc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTJoRElpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lKM1Z6WlNCemRISnBZM1FuTzF4dWFXMXdiM0owSUNvZ1lYTWdKQ0JtY205dElDZHFjWFZsY25rbk8xeHVhVzF3YjNKMElDb2dZWE1nWVhWMGIzQnlaV1pwZUdWeUlHWnliMjBnSjJGMWRHOXdjbVZtYVhobGNpMWpiM0psSnp0Y2JtbHRjRzl5ZENCN1VISnZiV2x6WlgwZ1puSnZiU0FuWlhNMkxYQnliMjFwYzJVbk8xeHVYRzVwWmlBb0lXZHNiMkpoYkM1a2IyTjFiV1Z1ZENrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkallXNXViM1FnY25WdUlHRnVhVzFoZEdVc0lHNWxaV1FnWVNCbmJHOWlZV3dnWkc5amRXMWxiblFuS1R0Y2JseHVMeW9xWEc0Z0tpQndjbWwyWVhSbElIWmhjbk5jYmlBcUwxeHViR1YwSUdkbGJtVnlZWFJsVTJobFpYUWdQU0FvS1NBOVBpQjdYRzRnSUhKbGRIVnliaUFrS0NjOGMzUjViR1V2UGljc0lIdGNiaUFnSUNCamJHRnpjem9nSjJGdWFXMWhkR1VuTEZ4dUlDQWdJR2xrT2lBbllXNXBiV0YwWlNjc1hHNGdJQ0FnZEhsd1pUb2dKM1JsZUhRdlkzTnpKMXh1SUNCOUtTNWhjSEJsYm1SVWJ5Z25hR1ZoWkNjcFd6QmRMbk5vWldWME8xeHVmVHRjYm14bGRDQndjbVZtYVhnZ1BTQW9LQ2tnUFQ0Z2UxeHVYSFJzWlhRZ2MzUjViR1VnUFNCa2IyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEVWc1pXMWxiblF1YzNSNWJHVTdYRzVjZEd4bGRDQndjbVZtYVhobGN5QTlJRnNuVjJWaWEybDBKeXdnSjAxdmVpY3NJQ2RQSnl3Z0oyMXpKeXdnSjB0b2RHMXNKMTA3WEc1Y2RHeGxkQ0J3Y205d0lEMGdKMEZ1YVcxaGRHbHZiaWM3WEc1Y2RHeGxkQ0J1YjNKdFlXd2dQU0FuSnp0Y2JseDBiR1YwSUdSaGMyaGxaQ0E5SUc1dmNtMWhiRHRjYmx4MGJHVjBJSE4xY0hCdmNuUmxaQ0E5SUdaaGJITmxPMXh1WEhScFppQW9jSEp2Y0M1MGIweHZkMlZ5UTJGelpTZ3BJR2x1SUhOMGVXeGxLU0I3WEc1Y2RGeDBjM1Z3Y0c5eWRHVmtJRDBnZEhKMVpUdGNibHgwZlNCbGJITmxJSHRjYmx4MFhIUm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSEJ5WldacGVHVnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNWNkRngwWEhSdWIzSnRZV3dnUFNCd2NtVm1hWGhsYzF0cFhUdGNibHgwWEhSY2RIWmhjaUJ1YjNKdFlXeE1iM2NnUFNCdWIzSnRZV3d1ZEc5TWIzZGxja05oYzJVb0tUdGNibHgwWEhSY2RIWmhjaUIyWlc1a2IzSlFjbTl3SUQwZ2JtOXliV0ZzVEc5M0lDc2djSEp2Y0R0Y2JseDBYSFJjZEdsbUlDaDJaVzVrYjNKUWNtOXdJR2x1SUhOMGVXeGxLU0I3WEc1Y2RGeDBYSFJjZEdSaGMyaGxaQ0E5SUZzbkxTY3NJRzV2Y20xaGJFeHZkeXdnSnkwblhTNXFiMmx1S0NjbktUdGNibHgwWEhSY2RGeDBjM1Z3Y0c5eWRHVmtJRDBnZEhKMVpUdGNibHgwWEhSY2RGeDBZbkpsWVdzN1hHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhIUjlYRzVjZEdsbUlDZ2hjM1Z3Y0c5eWRHVmtLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KME5UVXpNZ1FXNXBiV0YwYVc5dWN5QmhjbVVnYm05MElITjFjSEJ2Y25SbFpDQnBiaUIwYUdseklHSnliM2R6WlhJdUlFRnVhVzFoZEdVZ2JHbGljbUZ5ZVNCM2FXeHNJRzV2ZENCM2IzSnJMaWNwTzF4dVhIUnlaWFIxY200Z2UyNXZjbTFoYkN3Z1pHRnphR1ZrZlR0Y2JuMHBLQ2s3WEc1c1pYUWdhMlp6SUQwZ1cxMDdYRzVzWlhRZ2MyaGxaWFFnUFNCblpXNWxjbUYwWlZOb1pXVjBLQ2s3WEc1c1pYUWdaWFpsYm5SUWNtVm1hWGhsY3lBOUlGc25kMlZpYTJsMEp5d2dKMjF2ZWljc0lDZE5VeWNzSUNkdkp5d2dKeWRkTzF4dVhHNWpiR0Z6Y3lCQmJtbHRZWFJsSUh0Y2JseDBZMjl1YzNSeWRXTjBiM0lvYzJWc1pXTjBiM0lwSUh0Y2JseDBYSFIwYUdsekxtRnVhVzFoZEdsdmJuTWdQU0JiWFR0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3k1eGRXVnllU2h6Wld4bFkzUnZjaWs3WEc1Y2RIMWNibHh1SUNCdmJpaGxkbVZ1ZEZSNWNHVXNJR3hwYzNSbGJtVnlLU0I3WEc0Z0lDQWdabTl5SUNoc1pYUWdjQ0E5SURBN0lIQWdQQ0JsZG1WdWRGQnlaV1pwZUdWekxteGxibWQwYURzZ2NDc3JLU0I3WEc0Z0lDQWdJQ0JwWmlBb0lXVjJaVzUwVUhKbFptbDRaWE5iY0YwcElHVjJaVzUwVkhsd1pTQTlJR1YyWlc1MFZIbHdaUzUwYjB4dmQyVnlRMkZ6WlNncE8xeHVJQ0FnSUNBZ2JHVjBJR1YyWlc1MElEMGdaWFpsYm5SUWNtVm1hWGhsYzF0d1hTQXJJR1YyWlc1MFZIbHdaVHRjYmlBZ0lDQWdJSFJvYVhNdUpHVnNjeTV2YmlobGRtVnVkQ3dnYkdsemRHVnVaWEl1WW1sdVpDaHVkV3hzTENCMGFHbHpLU2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNCOVhHNWNiaUFnYjJabUtHVjJaVzUwVkhsd1pTa2dlMXh1SUNBZ0lHWnZjaUFvYkdWMElIQWdQU0F3T3lCd0lEd2daWFpsYm5SUWNtVm1hWGhsY3k1c1pXNW5kR2c3SUhBckt5a2dlMXh1SUNBZ0lDQWdhV1lnS0NGbGRtVnVkRkJ5WldacGVHVnpXM0JkS1NCbGRtVnVkRlI1Y0dVZ1BTQmxkbVZ1ZEZSNWNHVXVkRzlNYjNkbGNrTmhjMlVvS1R0Y2JpQWdJQ0FnSUd4bGRDQmxkbVZ1ZENBOUlHVjJaVzUwVUhKbFptbDRaWE5iY0YwZ0t5QmxkbVZ1ZEZSNWNHVTdYRzRnSUNBZ0lDQjBhR2x6TGlSbGJITXViMlptS0dWMlpXNTBLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgxY2JseHVYSFJyWmloclpYbG1jbUZ0WlNrZ2UxeHVYSFJjZEdsbUlDZ2hhMlY1Wm5KaGJXVXBJSFJvY205M0lHNWxkeUJGY25KdmNpZ25MbXRtSUdWNGNHVmpkSE1nWVNCclpYbG1jbUZ0WlNCdlltcGxZM1FuS1R0Y2JseDBYSFIyWVhJZ2JtRnRaU0E5SUd0bGVXWnlZVzFsTG01aGJXVTdYRzVjZEZ4MFpHVnNaWFJsSUd0bGVXWnlZVzFsTG01aGJXVTdYRzVjZEZ4MGFXWWdLQ0Z1WVcxbEtTQjdYRzVjZEZ4MFhIUnVZVzFsSUQwZ0oydGxlV1p5WVcxbExTY2dLeUJyWm5NdWJHVnVaM1JvTzF4dVhIUmNkSDFjYmx4MFhIUnNaWFFnYTJWNVpuSmhiV1ZUZEhJZ1BTQW5RQ2NnS3lCd2NtVm1hWGd1WkdGemFHVmtJQ3NnSjJ0bGVXWnlZVzFsY3lBbklDc2dibUZ0WlNBcklDY2dJSHNuTzF4dVhIUmNkR1p2Y2lBb2JHVjBJR3RsZVdaeVlXMWxVSEp2Y0NCcGJpQnJaWGxtY21GdFpTa2dlMXh1WEhSY2RGeDBiR1YwSUd0bGVXWnlZVzFsVm1Gc2RXVWdQU0JyWlhsbWNtRnRaVnRyWlhsbWNtRnRaVkJ5YjNCZE8xeHVYSFJjZEZ4MGFXWWdLQ0ZPZFcxaVpYSXVhWE5PWVU0b2EyVjVabkpoYldWUWNtOXdLU0FtSmlCclpYbG1jbUZ0WlZCeWIzQWdQajBnTUNBbUppQnJaWGxtY21GdFpWQnliM0FnUEQwZ01UQXdLWHRjYmx4MFhIUmNkRngwYTJWNVpuSmhiV1ZRY205d0lDczlJQ2NsSnp0Y2JseDBYSFJjZEgxY2JseDBYSFJjZEdsbUlDaDBlWEJsYjJZZ2EyVjVabkpoYldWUWNtOXdJQ0U5UFNBbmMzUnlhVzVuSnlrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkdlltcGxZM1FnYTJWNUlHMTFjM1FnWW1VZ1lTQnpkSEpwYm1jZ2IzSWdiblZ0WW1WeUlDZ3dMVEV3TUNrbktUdGNibHgwWEhSY2RHdGxlV1p5WVcxbFUzUnlJQ3M5SUd0bGVXWnlZVzFsVUhKdmNEdGNiaUFnSUNBZ0lHeGxkQ0JqYzNNZ1BTQW5JSHNnSnp0Y2JseDBYSFJjZEdadmNpQW9iR1YwSUhCeWIzQWdhVzRnYTJWNVpuSmhiV1ZXWVd4MVpTa2dlMXh1WEhSY2RGeDBYSFJqYzNNZ0t6MGdjSEp2Y0NBcklDYzZKeUFySUd0bGVXWnlZVzFsVm1Gc2RXVmJjSEp2Y0YwZ0t5QW5PeUFuTzF4dVhIUmNkRngwZlZ4dVhIUmNkRngwWTNOeklDczlJQ2NnZlNjN1hHNGdJQ0FnSUNCclpYbG1jbUZ0WlZOMGNpQXJQU0JoZFhSdmNISmxabWw0WlhJdWNISnZZMlZ6Y3loamMzTXBMbU56Y3p0Y2JseDBYSFI5WEc1Y2RGeDBhMlY1Wm5KaGJXVlRkSElnS3owZ0ozMG5PMXh1WEhSY2RITm9aV1YwTG1sdWMyVnlkRkoxYkdVb2EyVjVabkpoYldWVGRISXNJSE5vWldWMExtTnpjMUoxYkdWekxteGxibWQwYUNrN1hHNWNkRngwYTJaekxuQjFjMmdvYm1GdFpTazdYRzVjZEZ4MGNtVjBkWEp1SUhSb2FYTTdYRzVjZEgxY2JseHVYSFJyWlhsbWNtRnRaU2hyWmlrZ2UxeHVYSFJjZEhKbGRIVnliaUIwYUdsekxtdG1LR3RtS1R0Y2JseDBmVnh1WEc1Y2RITmxkRXRsZVdaeVlXMWxLR3RsZVdaeVlXMWxLU0I3WEc1Y2RGeDBjbVYwZFhKdUlIUm9hWE11YTJZb2EyVjVabkpoYldVcE8xeHVYSFI5WEc1Y2JseDBjMlYwS0M0dUxtRnVhVzFoZEdsdmJsSjFiR1Z6S1NCN1hHNWNkRngwWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCaGJtbHRZWFJwYjI1U2RXeGxjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVYSFJjZEZ4MGJHVjBJR0Z1YVcxaGRHbHZibEJ5YjNCbGNuUnBaWE1nUFNCaGJtbHRZWFJwYjI1U2RXeGxjMXRwWFR0Y2JseDBYSFJjZEdsbUlDaDBlWEJsYjJZZ1lXNXBiV0YwYVc5dVVISnZjR1Z5ZEdsbGN5QTlQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JseDBYSFJjZEZ4MFlXNXBiV0YwYVc5dVVISnZjR1Z5ZEdsbGN5QTlJQ1F1WlhoMFpXNWtLSHRjYmx4MFhIUmNkRngwWEhSdVlXMWxPaUFuSnl4Y2JseDBYSFJjZEZ4MFhIUmtkWEpoZEdsdmJqb2dKeWNzWEc1Y2RGeDBYSFJjZEZ4MGRHbHRhVzVuUm5WdVkzUnBiMjQ2SUNjbkxGeHVYSFJjZEZ4MFhIUmNkR1JsYkdGNU9pQW5KeXhjYmx4MFhIUmNkRngwWEhScGRHVnlZWFJwYjI1RGIzVnVkRG9nSnljc1hHNWNkRngwWEhSY2RGeDBaR2x5WldOMGFXOXVPaUFuSnl4Y2JseDBYSFJjZEZ4MFhIUm1hV3hzVFc5a1pUb2dKeWRjYmx4MFhIUmNkRngwZlN3Z1lXNXBiV0YwYVc5dVVISnZjR1Z5ZEdsbGN5azdYRzVjZEZ4MFhIUmNkR0Z1YVcxaGRHbHZibEJ5YjNCbGNuUnBaWE1nUFNCYllXNXBiV0YwYVc5dVVISnZjR1Z5ZEdsbGN5NXVZVzFsTENCaGJtbHRZWFJwYjI1UWNtOXdaWEowYVdWekxtUjFjbUYwYVc5dUxDQmhibWx0WVhScGIyNVFjbTl3WlhKMGFXVnpMblJwYldsdVowWjFibU4wYVc5dUxDQmhibWx0WVhScGIyNVFjbTl3WlhKMGFXVnpMbVJsYkdGNUxDQmhibWx0WVhScGIyNVFjbTl3WlhKMGFXVnpMbWwwWlhKaGRHbHZia052ZFc1MExDQmhibWx0WVhScGIyNVFjbTl3WlhKMGFXVnpMbVJwY21WamRHbHZiaXdnWVc1cGJXRjBhVzl1VUhKdmNHVnlkR2xsY3k1bWFXeHNUVzlrWlYwdWFtOXBiaWduSUNjcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEZ4MGFXWWdLSFI1Y0dWdlppQmhibWx0WVhScGIyNVFjbTl3WlhKMGFXVnpJQ0U5UFNBbmMzUnlhVzVuSnlrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NjdWMyVjBJR1Y0Y0dWamRITWdZU0J6ZEhKcGJtY2diM0lnWVc0Z1lXNXBiV0YwYVc5dUlHOWlhbVZqZENjcE8xeHVYSFJjZEZ4MGRHaHBjeTVoYm1sdFlYUnBiMjV6TG5CMWMyZ29ZVzVwYldGMGFXOXVVSEp2Y0dWeWRHbGxjeWs3WEc1Y2RGeDBmVnh1WEhSY2RISmxkSFZ5YmlCMGFHbHpPMXh1WEhSOVhHNWNibHgwY1hWbGNua29jMlZzWldOMGIzSXBJSHRjYmx4MFhIUjBhR2x6TGlSbGJITWdQU0FrS0hObGJHVmpkRzl5S1R0Y2JseDBYSFJ5WlhSMWNtNGdkR2hwY3p0Y2JseDBmVnh1WEc1Y2RISmxjMlYwS0NrZ2UxeHVYSFJjZEhSb2FYTXVZVzVwYldGMGFXOXVjeUE5SUZ0ZE8xeHVYSFJjZEhSb2FYTXVKR1ZzY3k1amMzTW9KMkZ1YVcxaGRHbHZiaWNzSUNjbktUdGNibHgwWEhRdkx5QnlaV1pzYjNjZ2FYTWdibVZsWkdWa0lHWnZjaUJoYm1sdFlYUnBiMjRnZEc4Z2NtVnpkR0Z5ZENCd2NtOXdaWEpzZVZ4dVhIUmNkSFJvYVhNdUpHVnNjeTUzYVdSMGFDZ3BPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTltWmlnblFXNXBiV0YwYVc5dVNYUmxjbUYwYVc5dUp5a3ViMlptS0NkQmJtbHRZWFJwYjI1RmJtUW5LVHRjYmx4MGZWeHVYRzRnSUdOc1pXRnVLQ2tnZTF4dUlDQWdJQ1FvSjNOMGVXeGxMbUZ1YVcxaGRHVW5LUzV5WlcxdmRtVW9LVHRjYmlBZ0lDQnphR1ZsZENBOUlHZGxibVZ5WVhSbFUyaGxaWFFvS1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpYTmxkQ2dwTzF4dUlDQjlYRzVjYmlBZ2NHRjFjMlVvS1NCN1hHNGdJQ0FnZEdocGN5NGtaV3h6TG1OemN5Z25ZVzVwYldGMGFXOXVMWEJzWVhrdGMzUmhkR1VuTENBbmNHRjFjMlZrSnlrN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJSDFjYmx4dVhIUnlaWE4xYldVb0tTQjdYRzVjZEZ4MGRHaHBjeTRrWld4ekxtTnpjeWduWVc1cGJXRjBhVzl1TFhCc1lYa3RjM1JoZEdVbkxDQW5jblZ1Ym1sdVp5Y3BPMXh1WEhSY2RISmxkSFZ5YmlCMGFHbHpPMXh1WEhSOVhHNWNibHgwY0d4aGVTZ3BJSHRjYmx4MFhIUjBhR2x6TGlSbGJITXVZM056S0NkaGJtbHRZWFJwYjI0bkxDQjBhR2x6TG1GdWFXMWhkR2x2Ym5NdWFtOXBiaWduTENjcEtUdGNibHgwWEhSMGFHbHpMbkpsYzNWdFpTZ3BPMXh1SUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG1Gc2JDaDBhR2x6TG1GdWFXMWhkR2x2Ym5NdWJXRndLQ0FvS1NBOVBpQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9jbVZ6YjJ4MlpTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMjRvSjBGdWFXMWhkR2x2YmtWdVpDY3NJSEpsYzI5c2RtVXBPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU2twTG5Sb1pXNG9JQ2dwSUQwK0lIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsYzJWMEtDazdYRzRnSUNBZ2ZTazdYRzVjZEgxY2JseHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0FvYzJWc1pXTjBiM0lwSUQwK0lIdGNibHgwY21WMGRYSnVJRzVsZHlCQmJtbHRZWFJsS0hObGJHVmpkRzl5S1R0Y2JuMDdYRzRpWFgwPSJdfQ==

window.animate = require("animate").default;